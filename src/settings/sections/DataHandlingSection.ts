import { App, Setting } from 'obsidian';
import MyPlugin from '../../main';
import { SettingCreators } from '../components/SettingCreators';
import { CollapsibleSectionRenderer } from '../../utils/CollapsibleSection';

/**
 * DataHandlingSection is responsible for rendering settings related to how the plugin handles note data,
 * including linked note expansion, chat note folder, and YAML attribute generators.
 */
export class DataHandlingSection {
    private plugin: MyPlugin;
    private settingCreators: SettingCreators;

    /**
     * @param plugin The main plugin instance.
     * @param settingCreators An instance of SettingCreators for consistent UI element creation.
     */
    constructor(plugin: MyPlugin, settingCreators: SettingCreators) {
        this.plugin = plugin;
        this.settingCreators = settingCreators;
    }

    /**
     * Renders the Note & Data Handling settings section into the provided container element.
     * This section is collapsible.
     * @param containerEl The HTML element to render the section into.
     */
    async render(containerEl: HTMLElement): Promise<void> {
        CollapsibleSectionRenderer.createCollapsibleSection(
            containerEl,
            'Note & Data Handling',
            async (sectionEl: HTMLElement) => {
                // Expand Linked Notes Recursively Toggle
                this.settingCreators.createToggleSetting(sectionEl, 'Expand Linked Notes Recursively', 'If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).',
                    () => this.plugin.settings.expandLinkedNotesRecursively ?? false,
                    async (value) => { this.plugin.settings.expandLinkedNotesRecursively = value; await this.plugin.saveSettings(); /* this.display(); 
                    () => { /* this.display(); */ }); 

                // Max Link Expansion Depth Slider (only visible if recursive expansion is enabled)
                if (this.plugin.settings.expandLinkedNotesRecursively) {
                    this.settingCreators.createSliderSetting(sectionEl, 'Max Link Expansion Depth', 'Maximum depth for recursively expanding linked notes (1-3).',
                        { min: 1, max: 3, step: 1 },
                        () => this.plugin.settings.maxLinkExpansionDepth ?? 2,
                        async (value) => { this.plugin.settings.maxLinkExpansionDepth = value; await this.plugin.saveSettings(); });
                }

                // Chat Note Folder Text Setting
                this.settingCreators.createTextSetting(sectionEl, 'Chat Note Folder', 'Folder to save exported chat notes (relative to vault root, leave blank for root)', 'e.g. AI Chats',
                    () => this.plugin.settings.chatNoteFolder ?? '',
                    async (value) => { this.plugin.settings.chatNoteFolder = value ?? ''; await this.plugin.saveSettings(); },
                    { trim: true });

                // YAML Attribute Generators Section
                this.renderYamlAttributeGenerators(sectionEl); 
            },
            this.plugin,
            'generalSectionsExpanded'
        );
    }

    /**
     * Renders the YAML Attribute Generators section.
     * This section allows users to define custom YAML attributes that can be generated by the AI
     * and inserted into notes.
     * @param containerEl The HTML element to append the section to.
     */
    private renderYamlAttributeGenerators(containerEl: HTMLElement): void {
        CollapsibleSectionRenderer.createCollapsibleSection(
            containerEl,
            'YAML Attribute Generators',
            (sectionEl: HTMLElement) => {
                const descDiv = sectionEl.createEl('div', { text: 'Configure custom YAML attribute generators. Each entry will create a command to generate and insert/update a YAML field in your notes.' });
                descDiv.style.marginBottom = '1em';

                // Add button at the top for better discoverability
                new Setting(sectionEl)
                    .addButton(btn => {
                        btn.setButtonText('Add YAML Attribute Generator')
                            .setCta()
                            .onClick(async () => {
                                if (!this.plugin.settings.yamlAttributeGenerators) this.plugin.settings.yamlAttributeGenerators = [];
                                this.plugin.settings.yamlAttributeGenerators.push({
                                    attributeName: '',
                                    prompt: '',
                                    outputMode: 'metadata',
                                    commandName: 'New YAML Generator'
                                });
                                await this.plugin.saveSettings();
                            });
                    });

                const yamlGens = this.plugin.settings.yamlAttributeGenerators ?? [];
                yamlGens.forEach((gen, idx) => {
                    const autoCommandName = gen.attributeName ? `Generate YAML: ${gen.attributeName}` : `YAML Generator #${idx + 1}`;
                    const setting = new Setting(sectionEl)
                        .setName(autoCommandName)
                        .setDesc(`YAML field: ${gen.attributeName}`);

                    // YAML Attribute Name
                    setting.addText(text => this.settingCreators.createTextSetting(
                        sectionEl,
                        'YAML Attribute Name',
                        '',
                        'YAML Attribute Name',
                        () => gen.attributeName,
                        async (value) => {
                            if (this.plugin.settings.yamlAttributeGenerators) {
                                this.plugin.settings.yamlAttributeGenerators[idx].attributeName = value ?? '';
                                this.plugin.settings.yamlAttributeGenerators[idx].commandName = value ? `Generate YAML: ${value}` : '';
                                await this.plugin.saveSettings();
                            }
                        }
                    ));

                    // Output Mode Dropdown
                    setting.addDropdown(drop => {
                        drop.addOption('clipboard', 'Copy to clipboard');
                        drop.addOption('metadata', 'Insert into metadata');
                        drop.setValue(gen.outputMode);
                        drop.onChange(async (value) => {
                            if (this.plugin.settings.yamlAttributeGenerators) {
                                this.plugin.settings.yamlAttributeGenerators[idx].outputMode = value as any;
                                await this.plugin.saveSettings();
                            }
                        });
                    });

                    // Prompt for LLM
                    setting.addTextArea(text => this.settingCreators.createTextSetting(
                        sectionEl,
                        'Prompt for LLM',
                        '',
                        'Prompt for LLM',
                        () => gen.prompt,
                        async (value) => {
                            if (this.plugin.settings.yamlAttributeGenerators) {
                                this.plugin.settings.yamlAttributeGenerators[idx].prompt = value ?? '';
                                await this.plugin.saveSettings();
                            }
                        },
                        { isTextArea: true }
                    ));

                    // Delete button
                    setting.addExtraButton(btn => {
                        btn.setIcon('cross')
                            .setTooltip('Delete')
                            .onClick(async () => {
                                if (this.plugin.settings.yamlAttributeGenerators) {
                                    this.plugin.settings.yamlAttributeGenerators.splice(idx, 1);
                                    await this.plugin.saveSettings();
                                }
                            });
                    });
                });
            },
            this.plugin,
            'generalSectionsExpanded'
        );
    }
}
