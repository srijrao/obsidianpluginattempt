{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, PluginSettingTab, Setting, requestUrl } from 'obsidian';\nconst DEFAULT_SETTINGS = {\n    apiKey: '',\n    model: 'gpt-4o',\n    temperature: 0.7,\n    maxTokens: 1000\n};\nfunction parseSelection(selection) {\n    const lines = selection.split('\\n');\n    let messages = [];\n    let currentRole = 'user';\n    let currentContent = '';\n    for (const line of lines) {\n        if (line.trim() === '----') {\n            if (currentContent.trim()) {\n                messages.push({ role: currentRole, content: currentContent.trim() });\n            }\n            currentRole = currentRole === 'user' ? 'assistant' : 'user';\n            currentContent = '';\n        }\n        else {\n            currentContent += line + '\\n';\n        }\n    }\n    if (currentContent.trim()) {\n        messages.push({ role: currentRole, content: currentContent.trim() });\n    }\n    return messages;\n}\nexport default class MyPlugin extends Plugin {\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadSettings();\n            this.addSettingTab(new MyPluginSettingTab(this.app, this));\n            // Add your command here\n            this.addCommand({\n                id: 'openai-completion',\n                name: 'Get OpenAI Completion',\n                editorCallback: (editor, view) => __awaiter(this, void 0, void 0, function* () {\n                    let text;\n                    let insertPosition;\n                    if (editor.somethingSelected()) {\n                        // Use the selected text\n                        text = editor.getSelection();\n                        // Get the end position of the selection\n                        insertPosition = editor.getCursor('to');\n                    }\n                    else {\n                        // Use the entire document\n                        text = editor.getValue();\n                        // Insert at the end of the document\n                        insertPosition = editor.offsetToPos(text.length);\n                    }\n                    const messages = parseSelection(text);\n                    const result = yield this.callOpenAI(messages);\n                    // Insert the result\n                    editor.replaceRange('\\n\\n----\\n\\n' + result, insertPosition);\n                    // Move the cursor to the end of the inserted text\n                    const newCursorPos = editor.offsetToPos(editor.posToOffset(insertPosition) + result.length + 8 // 8 is the length of '\\n\\n----\\n\\n'\n                    );\n                    editor.setCursor(newCursorPos);\n                })\n            });\n        });\n    }\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.saveData(this.settings);\n        });\n    }\n    callOpenAI(messages) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield requestUrl({\n                    url: 'https://api.openai.com/v1/chat/completions',\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${this.settings.apiKey}`,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        model: this.settings.model,\n                        messages: [\n                            { role: \"system\", content: \"You are a helpful assistant.\" },\n                            ...messages\n                        ],\n                        temperature: this.settings.temperature,\n                        max_tokens: this.settings.maxTokens\n                    })\n                });\n                if (response.status !== 200) {\n                    console.error('OpenAI API error:', response.status, response.text);\n                    return `Error: Unable to get completion. Status: ${response.status}, Message: ${response.text}`;\n                }\n                const data = response.json;\n                console.log('Model version used:', data.model);\n                return data.choices[0].message.content || 'No response';\n            }\n            catch (error) {\n                console.error('Error calling OpenAI:', error);\n                return `Error: Unable to get completion. ${error.message}`;\n            }\n        });\n    }\n}\nclass MyPluginSettingTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        new Setting(containerEl)\n            .setName('API Key')\n            .setDesc('Enter your OpenAI API key')\n            .addText(text => text\n            .setPlaceholder('Enter your API key')\n            .setValue(this.plugin.settings.apiKey)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.apiKey = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Model')\n            .setDesc('Choose the OpenAI model to use')\n            .addDropdown(dropdown => dropdown\n            .addOption('gpt-4o', 'GPT-4o (Most advanced)')\n            .addOption('gpt-4o-mini', 'GPT-4o mini (Affordable and intelligent)')\n            .addOption('gpt-4-turbo', 'GPT-4 Turbo')\n            .addOption('gpt-4', 'GPT-4')\n            .addOption('gpt-3.5-turbo', 'GPT-3.5 Turbo')\n            .setValue(this.plugin.settings.model)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.model = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Temperature')\n            .setDesc('Set the randomness of the model\\'s output (0-1)')\n            .addSlider(slider => slider\n            .setLimits(0, 1, .1)\n            .setValue(this.plugin.settings.temperature)\n            .setDynamicTooltip()\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.temperature = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Max Tokens')\n            .setDesc('Set the maximum length of the model\\'s output')\n            .addText(text => text\n            .setPlaceholder('4000')\n            .setValue(String(this.plugin.settings.maxTokens))\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            const numValue = Number(value);\n            if (!isNaN(numValue)) {\n                this.plugin.settings.maxTokens = numValue;\n                yield this.plugin.saveSettings();\n            }\n        })));\n    }\n}\n","references":["C:/Users/Justin/OneDrive/Obsidian/srijcvault20240714/.obsidian/plugins/my-first-plugin/node_modules/obsidian/obsidian.d.ts"]}
