{"code":"import { Plugin, PluginSettingTab, Setting, ItemView, Notice } from 'obsidian';\nclass ModelSettingsView extends ItemView {\n    plugin;\n    constructor(leaf, plugin) {\n        super(leaf);\n        this.plugin = plugin;\n    }\n    getViewType() {\n        return VIEW_TYPE_MODEL_SETTINGS;\n    }\n    getDisplayText() {\n        return 'Model Settings';\n    }\n    async onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.createEl('h2', { text: 'OpenAI Model Settings' });\n        new Setting(contentEl)\n            .setName('System Message')\n            .setDesc('Set the system message for the AI')\n            .addTextArea(text => text\n            .setPlaceholder('You are a helpful assistant.')\n            .setValue(this.plugin.settings.systemMessage)\n            .onChange(async (value) => {\n            this.plugin.settings.systemMessage = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(contentEl)\n            .setName('Include Date with System Message')\n            .setDesc('Add the current date to the system message')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.includeDateWithSystemMessage)\n            .onChange(async (value) => {\n            this.plugin.settings.includeDateWithSystemMessage = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(contentEl)\n            .setName('Enable Streaming')\n            .setDesc('Enable or disable streaming for completions')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.enableStreaming)\n            .onChange(async (value) => {\n            this.plugin.settings.enableStreaming = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(contentEl)\n            .setName('Model')\n            .setDesc('Choose the OpenAI model to use')\n            .addDropdown(dropdown => {\n            for (const model of this.plugin.settings.availableModels) {\n                dropdown.addOption(model, model);\n            }\n            dropdown\n                .setValue(this.plugin.settings.model)\n                .onChange(async (value) => {\n                this.plugin.settings.model = value;\n                await this.plugin.saveSettings();\n            });\n        });\n        new Setting(contentEl)\n            .setName('Temperature')\n            .setDesc('Set the randomness of the model\\'s output (0-1)')\n            .addSlider(slider => slider\n            .setLimits(0, 1, 0.1)\n            .setValue(this.plugin.settings.temperature)\n            .setDynamicTooltip()\n            .onChange(async (value) => {\n            this.plugin.settings.temperature = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(contentEl)\n            .setName('Max Tokens')\n            .setDesc('Set the maximum length of the model\\'s output')\n            .addText(text => text\n            .setPlaceholder('4000')\n            .setValue(String(this.plugin.settings.maxTokens))\n            .onChange(async (value) => {\n            const numValue = Number(value);\n            if (!isNaN(numValue)) {\n                this.plugin.settings.maxTokens = numValue;\n                await this.plugin.saveSettings();\n            }\n        }));\n    }\n    async onClose() {\n        // Clean up any resources if needed\n    }\n}\nconst DEFAULT_SETTINGS = {\n    apiKey: '',\n    model: 'gpt-4o',\n    temperature: 0.7,\n    maxTokens: 1000,\n    availableModels: [],\n    systemMessage: 'You are a helpful assistant.',\n    includeDateWithSystemMessage: false,\n    enableStreaming: true // Added this line\n};\nconst VIEW_TYPE_MODEL_SETTINGS = 'model-settings-view';\nasync function fetchAvailableModels(apiKey) {\n    try {\n        const response = await fetch('https://api.openai.com/v1/models', {\n            method: 'GET',\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            console.error('OpenAI API error:', response.status, await response.text());\n            return [];\n        }\n        const data = await response.json();\n        return data.data.map((model) => model.id).filter((id) => id.startsWith('gpt-'));\n    }\n    catch (error) {\n        console.error('Error fetching models:', error);\n        return [];\n    }\n}\nfunction parseSelection(selection) {\n    const lines = selection.split('\\n');\n    let messages = [];\n    let currentRole = 'user';\n    let currentContent = '';\n    for (const line of lines) {\n        if (line.trim() === '----') {\n            if (currentContent.trim()) {\n                messages.push({ role: currentRole, content: currentContent.trim() });\n            }\n            currentRole = currentRole === 'user' ? 'assistant' : 'user';\n            currentContent = '';\n        }\n        else {\n            currentContent += line + '\\n';\n        }\n    }\n    if (currentContent.trim()) {\n        messages.push({ role: currentRole, content: currentContent.trim() });\n    }\n    return messages;\n}\nexport default class MyPlugin extends Plugin {\n    settings;\n    modelSettingsView = null;\n    activeStream = null;\n    async onload() {\n        await this.loadSettings();\n        await this.populateSettingDefaults();\n        this.addSettingTab(new MyPluginSettingTab(this.app, this));\n        this.registerView(VIEW_TYPE_MODEL_SETTINGS, (leaf) => new ModelSettingsView(leaf, this));\n        this.addRibbonIcon('gear', 'Open Model Settings', () => {\n            this.activateView();\n        });\n        this.app.workspace.onLayoutReady(() => {\n            this.activateView();\n        });\n        this.addCommand({\n            id: 'openai-completion',\n            name: 'Get OpenAI Completion',\n            editorCallback: async (editor, view) => {\n                let text;\n                let insertPosition;\n                if (editor.somethingSelected()) {\n                    text = editor.getSelection();\n                    insertPosition = editor.getCursor('to');\n                }\n                else {\n                    const lineNumber = editor.getCursor().line;\n                    const documentText = editor.getValue();\n                    const lines = documentText.split('\\n').slice(0, lineNumber + 1); // Include the current line\n                    text = lines.join('\\n');\n                    insertPosition = { line: lineNumber + 1, ch: 0 }; // Insert after the current line\n                }\n                const messages = parseSelection(text);\n                editor.replaceRange('\\n\\n----\\n\\n', insertPosition);\n                let currentPosition = {\n                    line: insertPosition.line + 3,\n                    ch: 0\n                };\n                this.activeStream = new AbortController(); // Create new AbortController\n                await this.callOpenAI(messages, (chunk) => {\n                    editor.replaceRange(chunk, currentPosition);\n                    currentPosition = editor.offsetToPos(editor.posToOffset(currentPosition) + chunk.length);\n                }, this.activeStream);\n                const newCursorPos = editor.offsetToPos(editor.posToOffset(currentPosition) + 2);\n                editor.setCursor(newCursorPos);\n            }\n        });\n        this.addCommand({\n            id: 'end-openai-stream',\n            name: 'End OpenAI Stream',\n            callback: () => {\n                if (this.activeStream) {\n                    this.activeStream.abort();\n                    this.activeStream = null;\n                    new Notice('OpenAI stream ended');\n                }\n                else {\n                    new Notice('No active OpenAI stream to end');\n                }\n            }\n        });\n        this.addCommand({\n            id: 'show-model-settings',\n            name: 'Show Model Settings',\n            callback: () => {\n                this.ensureLeafExists(true);\n            }\n        });\n        this.registerInterval(window.setInterval(async () => {\n            if (this.settings.apiKey) {\n                await this.refreshAvailableModels();\n            }\n        }, 3600000) // Refresh every hour\n        );\n    }\n    async activateView() {\n        this.app.workspace.detachLeavesOfType(VIEW_TYPE_MODEL_SETTINGS);\n        let leaf = this.app.workspace.getRightLeaf(false);\n        if (leaf) {\n            await leaf.setViewState({\n                type: VIEW_TYPE_MODEL_SETTINGS,\n                active: true,\n            });\n            this.app.workspace.revealLeaf(leaf);\n        }\n        else {\n            // If we couldn't get a right leaf, try to create a new leaf\n            leaf = this.app.workspace.getLeaf(true);\n            await leaf.setViewState({\n                type: VIEW_TYPE_MODEL_SETTINGS,\n                active: true,\n            });\n        }\n    }\n    async loadSettings() {\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n    }\n    async saveSettings() {\n        await this.saveData(this.settings);\n    }\n    async callOpenAI(messages, callback, abortController) {\n        try {\n            let systemMessage = this.settings.systemMessage;\n            if (this.settings.includeDateWithSystemMessage) {\n                const currentDate = new Date().toISOString().split('T')[0];\n                systemMessage = `${systemMessage} The current date is ${currentDate}.`;\n            }\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.settings.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: this.settings.model,\n                    messages: [\n                        { role: \"system\", content: systemMessage },\n                        ...messages\n                    ],\n                    temperature: this.settings.temperature,\n                    max_tokens: this.settings.maxTokens,\n                    stream: this.settings.enableStreaming // Use the streaming setting\n                }),\n                signal: abortController.signal\n            });\n            if (!response.ok) {\n                throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n            }\n            const reader = response.body?.getReader();\n            const decoder = new TextDecoder('utf-8');\n            while (true) {\n                const { done, value } = await reader?.read() || { done: true, value: undefined };\n                if (done)\n                    break;\n                const chunk = decoder.decode(value);\n                const lines = chunk.split('\\n');\n                for (const line of lines) {\n                    if (line.startsWith('data: ') && line !== 'data: [DONE]') {\n                        const data = JSON.parse(line.slice(6));\n                        const content = data.choices[0]?.delta?.content;\n                        if (content) {\n                            callback(content);\n                        }\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error.name === 'AbortError') {\n                console.log('Stream was aborted');\n            }\n            else {\n                console.error('Error calling OpenAI:', error);\n                new Notice(`Error: Unable to get completion. ${error.message}`);\n                callback(`Error: Unable to get completion. ${error.message}`);\n            }\n        }\n        finally {\n            this.activeStream = null; // Reset the active stream\n        }\n    }\n    async populateSettingDefaults() {\n        if (!this.settings.availableModels || this.settings.availableModels.length === 0) {\n            await this.refreshAvailableModels();\n        }\n    }\n    ensureLeafExists(active = false) {\n        let { workspace } = this.app;\n        let leaf = workspace.getLeavesOfType(VIEW_TYPE_MODEL_SETTINGS)[0];\n        if (leaf) {\n            leaf.setViewState({\n                type: VIEW_TYPE_MODEL_SETTINGS,\n                active: active\n            });\n            this.modelSettingsView = leaf.view;\n            if (this.modelSettingsView) {\n                this.modelSettingsView.onOpen();\n            }\n        }\n        else {\n            console.warn('No right leaf available for model settings view');\n            return;\n        }\n        if (active && leaf) {\n            workspace.revealLeaf(leaf);\n        }\n    }\n    async refreshAvailableModels() {\n        try {\n            this.settings.availableModels = await fetchAvailableModels(this.settings.apiKey);\n            await this.saveSettings();\n            if (this.modelSettingsView) {\n                this.modelSettingsView.onOpen();\n            }\n        }\n        catch (error) {\n            new Notice('Error refreshing available models. Please try again later.');\n        }\n    }\n}\nclass MyPluginSettingTab extends PluginSettingTab {\n    plugin;\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        new Setting(containerEl)\n            .setName('Refresh Available Models')\n            .setDesc('Fetch the latest available models from OpenAI')\n            .addButton(button => button\n            .setButtonText('Refresh')\n            .onClick(async () => {\n            await this.plugin.refreshAvailableModels();\n            this.display(); // Redraw the settings tab\n        }));\n        new Setting(containerEl)\n            .setName('System Message')\n            .setDesc('Set the system message for the AI')\n            .addTextArea(text => text\n            .setPlaceholder('You are a helpful assistant.')\n            .setValue(this.plugin.settings.systemMessage)\n            .onChange(async (value) => {\n            this.plugin.settings.systemMessage = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(containerEl)\n            .setName('Include Date with System Message')\n            .setDesc('Add the current date to the system message')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.includeDateWithSystemMessage)\n            .onChange(async (value) => {\n            this.plugin.settings.includeDateWithSystemMessage = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(containerEl)\n            .setName('API Key')\n            .setDesc('Enter your OpenAI API key')\n            .addText(text => text\n            .setPlaceholder('Enter your API key')\n            .setValue(this.plugin.settings.apiKey)\n            .onChange(async (value) => {\n            this.plugin.settings.apiKey = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(containerEl)\n            .setName('Model')\n            .setDesc('Choose the OpenAI model to use')\n            .addDropdown(dropdown => {\n            for (const model of this.plugin.settings.availableModels) {\n                dropdown.addOption(model, model);\n            }\n            dropdown.setValue(this.plugin.settings.model)\n                .onChange(async (value) => {\n                this.plugin.settings.model = value;\n                await this.plugin.saveSettings();\n            });\n        });\n        new Setting(containerEl)\n            .setName('Temperature')\n            .setDesc('Set the randomness of the model\\'s output (0-1)')\n            .addSlider(slider => slider\n            .setLimits(0, 1, .1)\n            .setValue(this.plugin.settings.temperature)\n            .setDynamicTooltip()\n            .onChange(async (value) => {\n            this.plugin.settings.temperature = value;\n            await this.plugin.saveSettings();\n        }));\n        new Setting(containerEl)\n            .setName('Max Tokens')\n            .setDesc('Set the maximum length of the model\\'s output')\n            .addText(text => text\n            .setPlaceholder('4000')\n            .setValue(String(this.plugin.settings.maxTokens))\n            .onChange(async (value) => {\n            const numValue = Number(value);\n            if (!isNaN(numValue)) {\n                this.plugin.settings.maxTokens = numValue;\n                await this.plugin.saveSettings();\n            }\n        }));\n    }\n}\n","references":["C:/Users/Justin/OneDrive/Coding/my-first-plugin_working 2024.07.26/obsidianpluginattempt/node_modules/obsidian/obsidian.d.ts"]}
