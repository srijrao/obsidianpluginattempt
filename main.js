/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/prompts.ts
var prompts_exports = {};
__export(prompts_exports, {
  DEFAULT_GENERAL_SYSTEM_PROMPT: () => DEFAULT_GENERAL_SYSTEM_PROMPT,
  DEFAULT_SUMMARY_PROMPT: () => DEFAULT_SUMMARY_PROMPT,
  DEFAULT_TITLE_PROMPT: () => DEFAULT_TITLE_PROMPT,
  DEFAULT_YAML_SYSTEM_MESSAGE: () => DEFAULT_YAML_SYSTEM_MESSAGE
});
var DEFAULT_TITLE_PROMPT, DEFAULT_SUMMARY_PROMPT, DEFAULT_GENERAL_SYSTEM_PROMPT, DEFAULT_YAML_SYSTEM_MESSAGE;
var init_prompts = __esm({
  "src/prompts.ts"() {
    DEFAULT_TITLE_PROMPT = "You are a title generator. You will give succinct titles that do not contain backslashes, forward slashes, or colons. Only generate a title as your response.";
    DEFAULT_SUMMARY_PROMPT = "Summarize the note content in 1-2 sentences, focusing on the main ideas and purpose.";
    DEFAULT_GENERAL_SYSTEM_PROMPT = "You are a helpful assistant.";
    DEFAULT_YAML_SYSTEM_MESSAGE = "You are an assistant that generates YAML attribute values for Obsidian notes. Read the note and generate a value for the specified YAML field. Only output the value, not the key or extra text.";
  }
});

// src/types.ts
var types_exports = {};
__export(types_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS
});
var DEFAULT_SETTINGS;
var init_types = __esm({
  "src/types.ts"() {
    init_prompts();
    DEFAULT_SETTINGS = {
      referenceCurrentNote: false,
      provider: "openai",
      openaiSettings: {
        apiKey: "",
        model: "gpt-4.1",
        availableModels: []
      },
      anthropicSettings: {
        apiKey: "",
        model: "claude-3-5-sonnet-latest",
        availableModels: []
      },
      geminiSettings: {
        apiKey: "",
        model: "gemini-2.5-flash-preview-05-20",
        availableModels: []
      },
      ollamaSettings: {
        serverUrl: "http://localhost:11434",
        model: "llama2",
        availableModels: []
      },
      systemMessage: DEFAULT_GENERAL_SYSTEM_PROMPT,
      temperature: 0.7,
      maxTokens: 1e3,
      includeDateWithSystemMessage: false,
      includeTimeWithSystemMessage: false,
      enableStreaming: true,
      autoOpenModelSettings: true,
      enableObsidianLinks: true,
      titleOutputMode: "clipboard",
      summaryOutputMode: "clipboard",
      chatSeparator: "----",
      chatStartString: void 0,
      chatEndString: void 0,
      enableContextNotes: false,
      contextNotes: "",
      titlePrompt: DEFAULT_TITLE_PROMPT,
      summaryPrompt: DEFAULT_SUMMARY_PROMPT,
      maxSessions: 10,
      autoSaveSessions: true,
      sessions: [],
      activeSessionId: void 0,
      expandLinkedNotesRecursively: false,
      maxLinkExpansionDepth: 2,
      chatNoteFolder: "",
      // Default to vault root
      yamlAttributeGenerators: [
        {
          attributeName: "summary",
          prompt: DEFAULT_SUMMARY_PROMPT,
          outputMode: "metadata",
          commandName: "Generate YAML: summary"
        }
      ]
    };
  }
});

// providers/base.ts
var ProviderError, BaseProvider;
var init_base = __esm({
  "providers/base.ts"() {
    ProviderError = class extends Error {
      constructor(type2, message, statusCode) {
        super(message);
        __publicField(this, "type");
        __publicField(this, "statusCode");
        this.type = type2;
        this.statusCode = statusCode;
        this.name = "ProviderError";
      }
    };
    BaseProvider = class {
      /**
       * Handle common HTTP errors
       */
      handleHttpError(error) {
        if (error instanceof Response) {
          const status2 = error.status;
          switch (status2) {
            case 401:
              throw new ProviderError(
                "invalid_api_key" /* InvalidApiKey */,
                "Invalid API key",
                status2
              );
            case 429:
              throw new ProviderError(
                "rate_limit" /* RateLimit */,
                "Rate limit exceeded",
                status2
              );
            case 400:
              throw new ProviderError(
                "invalid_request" /* InvalidRequest */,
                "Invalid request",
                status2
              );
            case 500:
            case 502:
            case 503:
            case 504:
              throw new ProviderError(
                "server_error" /* ServerError */,
                "Server error occurred",
                status2
              );
            default:
              throw new ProviderError(
                "server_error" /* ServerError */,
                `Unknown error occurred: ${status2}`,
                status2
              );
          }
        }
        if (!error.response) {
          throw new ProviderError(
            "network_error" /* NetworkError */,
            "Network error occurred"
          );
        }
        const status = error.response.status;
        switch (status) {
          case 401:
            throw new ProviderError(
              "invalid_api_key" /* InvalidApiKey */,
              "Invalid API key",
              status
            );
          case 429:
            throw new ProviderError(
              "rate_limit" /* RateLimit */,
              "Rate limit exceeded",
              status
            );
          case 400:
            throw new ProviderError(
              "invalid_request" /* InvalidRequest */,
              "Invalid request",
              status
            );
          case 500:
          case 502:
          case 503:
          case 504:
            throw new ProviderError(
              "server_error" /* ServerError */,
              "Server error occurred",
              status
            );
          default:
            throw new ProviderError(
              "server_error" /* ServerError */,
              `Unknown error occurred: ${status}`,
              status
            );
        }
      }
      /**
       * Format error message for connection test results
       */
      formatErrorMessage(error) {
        if (error instanceof ProviderError) {
          switch (error.type) {
            case "invalid_api_key" /* InvalidApiKey */:
              return "Invalid API key. Please check your credentials.";
            case "rate_limit" /* RateLimit */:
              return "Rate limit exceeded. Please try again later.";
            case "network_error" /* NetworkError */:
              return "Network error. Please check your internet connection.";
            default:
              return error.message;
          }
        }
        return error.message || "An unknown error occurred";
      }
      /**
       * Create a standard error response for connection tests
       */
      createErrorResponse(error) {
        return {
          success: false,
          message: this.formatErrorMessage(error)
        };
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/version.mjs
var VERSION;
var init_version = __esm({
  "node_modules/@anthropic-ai/sdk/version.mjs"() {
    VERSION = "0.36.3";
  }
});

// node_modules/@anthropic-ai/sdk/_shims/registry.mjs
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(`you must \`import '@anthropic-ai/sdk/shims/${shims.kind}'\` before importing anything else from @anthropic-ai/sdk`);
  }
  if (kind) {
    throw new Error(`can't \`import '@anthropic-ai/sdk/shims/${shims.kind}'\` after \`import '@anthropic-ai/sdk/shims/${kind}'\``);
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}
var auto, kind, fetch2, Request2, Response2, Headers2, FormData2, Blob2, File2, ReadableStream2, getMultipartRequestOptions, getDefaultAgent, fileFromPath, isFsReadStream;
var init_registry = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/registry.mjs"() {
    auto = false;
    kind = void 0;
    fetch2 = void 0;
    Request2 = void 0;
    Response2 = void 0;
    Headers2 = void 0;
    FormData2 = void 0;
    Blob2 = void 0;
    File2 = void 0;
    ReadableStream2 = void 0;
    getMultipartRequestOptions = void 0;
    getDefaultAgent = void 0;
    fileFromPath = void 0;
    isFsReadStream = void 0;
  }
});

// node_modules/@anthropic-ai/sdk/_shims/MultipartBody.mjs
var MultipartBody;
var init_MultipartBody = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/MultipartBody.mjs"() {
    MultipartBody = class {
      constructor(body) {
        this.body = body;
      }
      get [Symbol.toStringTag]() {
        return "MultipartBody";
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \`import \u2026 from '@anthropic-ai/sdk'\`:
- \`import '@anthropic-ai/sdk/shims/node'\` (if you're running on Node)
- \`import '@anthropic-ai/sdk/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData: (
      // @ts-ignore
      typeof FormData !== "undefined" ? FormData : class FormData {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);
        }
      }
    ),
    Blob: typeof Blob !== "undefined" ? Blob : class Blob {
      constructor() {
        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);
      }
    },
    File: (
      // @ts-ignore
      typeof File !== "undefined" ? File : class File {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);
        }
      }
    ),
    ReadableStream: (
      // @ts-ignore
      typeof ReadableStream !== "undefined" ? ReadableStream : class ReadableStream {
        // @ts-ignore
        constructor() {
          throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);
        }
      }
    ),
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form)
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/anthropics/anthropic-sdk-typescript#file-uploads");
    },
    isFsReadStream: (value) => false
  };
}
var init_web_runtime = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/web-runtime.mjs"() {
    init_MultipartBody();
  }
});

// node_modules/@anthropic-ai/sdk/_shims/auto/runtime.mjs
var init_runtime = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/auto/runtime.mjs"() {
    init_web_runtime();
  }
});

// node_modules/@anthropic-ai/sdk/_shims/index.mjs
var init_shims = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/index.mjs"() {
    init_registry();
    init_runtime();
    init_registry();
    if (!kind) setShims(getRuntime(), { auto: true });
  }
});

// node_modules/@anthropic-ai/sdk/error.mjs
var AnthropicError, APIError, APIUserAbortError, APIConnectionError, APIConnectionTimeoutError, BadRequestError, AuthenticationError, PermissionDeniedError, NotFoundError, ConflictError, UnprocessableEntityError, RateLimitError, InternalServerError;
var init_error = __esm({
  "node_modules/@anthropic-ai/sdk/error.mjs"() {
    init_core();
    AnthropicError = class extends Error {
    };
    APIError = class _APIError extends AnthropicError {
      constructor(status, error, message, headers) {
        super(`${_APIError.makeMessage(status, error, message)}`);
        this.status = status;
        this.headers = headers;
        this.request_id = headers == null ? void 0 : headers["request-id"];
        this.error = error;
      }
      static makeMessage(status, error, message) {
        const msg = (error == null ? void 0 : error.message) ? typeof error.message === "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
        if (status && msg) {
          return `${status} ${msg}`;
        }
        if (status) {
          return `${status} status code (no body)`;
        }
        if (msg) {
          return msg;
        }
        return "(no status code or body)";
      }
      static generate(status, errorResponse, message, headers) {
        if (!status || !headers) {
          return new APIConnectionError({ message, cause: castToError(errorResponse) });
        }
        const error = errorResponse;
        if (status === 400) {
          return new BadRequestError(status, error, message, headers);
        }
        if (status === 401) {
          return new AuthenticationError(status, error, message, headers);
        }
        if (status === 403) {
          return new PermissionDeniedError(status, error, message, headers);
        }
        if (status === 404) {
          return new NotFoundError(status, error, message, headers);
        }
        if (status === 409) {
          return new ConflictError(status, error, message, headers);
        }
        if (status === 422) {
          return new UnprocessableEntityError(status, error, message, headers);
        }
        if (status === 429) {
          return new RateLimitError(status, error, message, headers);
        }
        if (status >= 500) {
          return new InternalServerError(status, error, message, headers);
        }
        return new _APIError(status, error, message, headers);
      }
    };
    APIUserAbortError = class extends APIError {
      constructor({ message } = {}) {
        super(void 0, void 0, message || "Request was aborted.", void 0);
      }
    };
    APIConnectionError = class extends APIError {
      constructor({ message, cause }) {
        super(void 0, void 0, message || "Connection error.", void 0);
        if (cause)
          this.cause = cause;
      }
    };
    APIConnectionTimeoutError = class extends APIConnectionError {
      constructor({ message } = {}) {
        super({ message: message != null ? message : "Request timed out." });
      }
    };
    BadRequestError = class extends APIError {
    };
    AuthenticationError = class extends APIError {
    };
    PermissionDeniedError = class extends APIError {
    };
    NotFoundError = class extends APIError {
    };
    ConflictError = class extends APIError {
    };
    UnprocessableEntityError = class extends APIError {
    };
    RateLimitError = class extends APIError {
    };
    InternalServerError = class extends APIError {
    };
  }
});

// node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs
var LineDecoder;
var init_line = __esm({
  "node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs"() {
    init_error();
    LineDecoder = class _LineDecoder {
      constructor() {
        this.buffer = [];
        this.trailingCR = false;
      }
      decode(chunk) {
        let text = this.decodeText(chunk);
        if (this.trailingCR) {
          text = "\r" + text;
          this.trailingCR = false;
        }
        if (text.endsWith("\r")) {
          this.trailingCR = true;
          text = text.slice(0, -1);
        }
        if (!text) {
          return [];
        }
        const trailingNewline = _LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
        let lines = text.split(_LineDecoder.NEWLINE_REGEXP);
        if (trailingNewline) {
          lines.pop();
        }
        if (lines.length === 1 && !trailingNewline) {
          this.buffer.push(lines[0]);
          return [];
        }
        if (this.buffer.length > 0) {
          lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
          this.buffer = [];
        }
        if (!trailingNewline) {
          this.buffer = [lines.pop() || ""];
        }
        return lines;
      }
      decodeText(bytes) {
        var _a2;
        if (bytes == null)
          return "";
        if (typeof bytes === "string")
          return bytes;
        if (typeof Buffer !== "undefined") {
          if (bytes instanceof Buffer) {
            return bytes.toString();
          }
          if (bytes instanceof Uint8Array) {
            return Buffer.from(bytes).toString();
          }
          throw new AnthropicError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
        }
        if (typeof TextDecoder !== "undefined") {
          if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
            (_a2 = this.textDecoder) != null ? _a2 : this.textDecoder = new TextDecoder("utf8");
            return this.textDecoder.decode(bytes);
          }
          throw new AnthropicError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
        }
        throw new AnthropicError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
      }
      flush() {
        if (!this.buffer.length && !this.trailingCR) {
          return [];
        }
        const lines = [this.buffer.join("")];
        this.buffer = [];
        this.trailingCR = false;
        return lines;
      }
    };
    LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
    LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
  }
});

// node_modules/@anthropic-ai/sdk/internal/stream-utils.mjs
function ReadableStreamToAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator])
    return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done)
          reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
var init_stream_utils = __esm({
  "node_modules/@anthropic-ai/sdk/internal/stream-utils.mjs"() {
  }
});

// node_modules/@anthropic-ai/sdk/streaming.mjs
async function* _iterSSEMessages(response, controller) {
  if (!response.body) {
    controller.abort();
    throw new AnthropicError(`Attempted to iterate over a response with no body`);
  }
  const sseDecoder = new SSEDecoder();
  const lineDecoder = new LineDecoder();
  const iter = ReadableStreamToAsyncIterable(response.body);
  for await (const sseChunk of iterSSEChunks(iter)) {
    for (const line of lineDecoder.decode(sseChunk)) {
      const sse = sseDecoder.decode(line);
      if (sse)
        yield sse;
    }
  }
  for (const line of lineDecoder.flush()) {
    const sse = sseDecoder.decode(line);
    if (sse)
      yield sse;
  }
}
async function* iterSSEChunks(iterator) {
  let data = new Uint8Array();
  for await (const chunk of iterator) {
    if (chunk == null) {
      continue;
    }
    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
    let newData = new Uint8Array(data.length + binaryChunk.length);
    newData.set(data);
    newData.set(binaryChunk, data.length);
    data = newData;
    let patternIndex;
    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {
      yield data.slice(0, patternIndex);
      data = data.slice(patternIndex);
    }
  }
  if (data.length > 0) {
    yield data;
  }
}
function findDoubleNewlineIndex(buffer) {
  const newline = 10;
  const carriage = 13;
  for (let i = 0; i < buffer.length - 2; i++) {
    if (buffer[i] === newline && buffer[i + 1] === newline) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === carriage) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {
      return i + 4;
    }
  }
  return -1;
}
function partition(str2, delimiter) {
  const index = str2.indexOf(delimiter);
  if (index !== -1) {
    return [str2.substring(0, index), delimiter, str2.substring(index + delimiter.length)];
  }
  return [str2, "", ""];
}
var Stream, SSEDecoder;
var init_streaming = __esm({
  "node_modules/@anthropic-ai/sdk/streaming.mjs"() {
    init_shims();
    init_error();
    init_line();
    init_stream_utils();
    init_core();
    init_error();
    Stream = class _Stream {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      static fromSSEResponse(response, controller) {
        let consumed = false;
        async function* iterator() {
          if (consumed) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed = true;
          let done = false;
          try {
            for await (const sse of _iterSSEMessages(response, controller)) {
              if (sse.event === "completion") {
                try {
                  yield JSON.parse(sse.data);
                } catch (e) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e;
                }
              }
              if (sse.event === "message_start" || sse.event === "message_delta" || sse.event === "message_stop" || sse.event === "content_block_start" || sse.event === "content_block_delta" || sse.event === "content_block_stop") {
                try {
                  yield JSON.parse(sse.data);
                } catch (e) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e;
                }
              }
              if (sse.event === "ping") {
                continue;
              }
              if (sse.event === "error") {
                throw APIError.generate(void 0, `SSE Error: ${sse.data}`, sse.data, createResponseHeaders(response.headers));
              }
            }
            done = true;
          } catch (e) {
            if (e instanceof Error && e.name === "AbortError")
              return;
            throw e;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      /**
       * Generates a Stream from a newline-separated ReadableStream
       * where each item is a JSON value.
       */
      static fromReadableStream(readableStream, controller) {
        let consumed = false;
        async function* iterLines() {
          const lineDecoder = new LineDecoder();
          const iter = ReadableStreamToAsyncIterable(readableStream);
          for await (const chunk of iter) {
            for (const line of lineDecoder.decode(chunk)) {
              yield line;
            }
          }
          for (const line of lineDecoder.flush()) {
            yield line;
          }
        }
        async function* iterator() {
          if (consumed) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed = true;
          let done = false;
          try {
            for await (const line of iterLines()) {
              if (done)
                continue;
              if (line)
                yield JSON.parse(line);
            }
            done = true;
          } catch (e) {
            if (e instanceof Error && e.name === "AbortError")
              return;
            throw e;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      [Symbol.asyncIterator]() {
        return this.iterator();
      }
      /**
       * Splits the stream into two streams which can be
       * independently read from at different speeds.
       */
      tee() {
        const left = [];
        const right = [];
        const iterator = this.iterator();
        const teeIterator = (queue) => {
          return {
            next: () => {
              if (queue.length === 0) {
                const result = iterator.next();
                left.push(result);
                right.push(result);
              }
              return queue.shift();
            }
          };
        };
        return [
          new _Stream(() => teeIterator(left), this.controller),
          new _Stream(() => teeIterator(right), this.controller)
        ];
      }
      /**
       * Converts this stream to a newline-separated ReadableStream of
       * JSON stringified values in the stream
       * which can be turned back into a Stream with `Stream.fromReadableStream()`.
       */
      toReadableStream() {
        const self = this;
        let iter;
        const encoder = new TextEncoder();
        return new ReadableStream2({
          async start() {
            iter = self[Symbol.asyncIterator]();
          },
          async pull(ctrl) {
            try {
              const { value, done } = await iter.next();
              if (done)
                return ctrl.close();
              const bytes = encoder.encode(JSON.stringify(value) + "\n");
              ctrl.enqueue(bytes);
            } catch (err) {
              ctrl.error(err);
            }
          },
          async cancel() {
            var _a2;
            await ((_a2 = iter.return) == null ? void 0 : _a2.call(iter));
          }
        });
      }
    };
    SSEDecoder = class {
      constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
      }
      decode(line) {
        if (line.endsWith("\r")) {
          line = line.substring(0, line.length - 1);
        }
        if (!line) {
          if (!this.event && !this.data.length)
            return null;
          const sse = {
            event: this.event,
            data: this.data.join("\n"),
            raw: this.chunks
          };
          this.event = null;
          this.data = [];
          this.chunks = [];
          return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(":")) {
          return null;
        }
        let [fieldname, _, value] = partition(line, ":");
        if (value.startsWith(" ")) {
          value = value.substring(1);
        }
        if (fieldname === "event") {
          this.event = value;
        } else if (fieldname === "data") {
          this.data.push(value);
        }
        return null;
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/uploads.mjs
async function toFile(value, name, options) {
  var _a2, _b, _c;
  value = await value;
  if (isFileLike(value)) {
    return value;
  }
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name || (name = (_a2 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null ? _a2 : "unknown_file");
    const data = isBlobLike(blob) ? [await blob.arrayBuffer()] : [blob];
    return new File2(data, name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!(options == null ? void 0 : options.type)) {
    const type2 = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type2 === "string") {
      options = { ...options, type: type2 };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a2;
  let parts = [];
  if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
  value instanceof ArrayBuffer) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a2 = value == null ? void 0 : value.constructor) == null ? void 0 : _a2.name}; props: ${propsForError(value)}`);
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a2;
  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
  ((_a2 = getStringFromMaybeBuffer(value.path)) == null ? void 0 : _a2.split(/[\\/]/).pop());
}
var isResponseLike, isFileLike, isBlobLike, getStringFromMaybeBuffer, isAsyncIterableIterator, isMultipartBody;
var init_uploads = __esm({
  "node_modules/@anthropic-ai/sdk/uploads.mjs"() {
    init_shims();
    init_shims();
    isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
    isFileLike = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && isBlobLike(value);
    isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
    getStringFromMaybeBuffer = (x) => {
      if (typeof x === "string")
        return x;
      if (typeof Buffer !== "undefined" && x instanceof Buffer)
        return String(x);
      return void 0;
    };
    isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
    isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
  }
});

// node_modules/@anthropic-ai/sdk/core.mjs
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug("response", response.status, response.url, response.headers, response.body);
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(response, props.controller);
    }
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON = (contentType == null ? void 0 : contentType.includes("application/json")) || (contentType == null ? void 0 : contentType.includes("application/vnd.api+json"));
  if (isJSON) {
    const json2 = await response.json();
    debug("response", response.status, response.url, response.headers, json2);
    return _addRequestID(json2, response);
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
function _addRequestID(value, response) {
  if (!value || typeof value !== "object" || Array.isArray(value)) {
    return value;
  }
  return Object.defineProperty(value, "_request_id", {
    value: response.headers.get("request-id"),
    enumerable: false
  });
}
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn(newHeaders, k))
      continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey)
      continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
function debug(action, ...args) {
  var _a2;
  if (typeof process !== "undefined" && ((_a2 = process == null ? void 0 : process.env) == null ? void 0 : _a2["DEBUG"]) === "true") {
    console.log(`Anthropic:DEBUG:${action}`, ...args);
  }
}
var __classPrivateFieldSet, __classPrivateFieldGet, _AbstractPage_client, APIPromise, APIClient, AbstractPage, PagePromise, createResponseHeaders, requestOptionsKeys, isRequestOptions, getPlatformProperties, normalizeArch, normalizePlatform, _platformHeaders, getPlatformHeaders, safeJSON, startsWithSchemeRegexp, isAbsoluteURL, sleep, validatePositiveInteger, castToError, readEnv, uuid4, isRunningInBrowser, isHeadersProtocol, getHeader;
var init_core = __esm({
  "node_modules/@anthropic-ai/sdk/core.mjs"() {
    init_version();
    init_streaming();
    init_error();
    init_shims();
    init_uploads();
    __classPrivateFieldSet = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    APIPromise = class _APIPromise extends Promise {
      constructor(responsePromise, parseResponse = defaultParseResponse) {
        super((resolve) => {
          resolve(null);
        });
        this.responsePromise = responsePromise;
        this.parseResponse = parseResponse;
      }
      _thenUnwrap(transform) {
        return new _APIPromise(this.responsePromise, async (props) => _addRequestID(transform(await this.parseResponse(props), props), props.response));
      }
      /**
       * Gets the raw `Response` instance instead of parsing the response
       * data.
       *
       * If you want to parse the response body but still get the `Response`
       * instance, you can use {@link withResponse()}.
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:
       * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)
       * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)
       */
      asResponse() {
        return this.responsePromise.then((p) => p.response);
      }
      /**
       * Gets the parsed response data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * If you just want to get the raw `Response` instance without parsing it,
       * you can use {@link asResponse()}.
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:
       * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)
       * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)
       */
      async withResponse() {
        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
        return { data, response, request_id: response.headers.get("request-id") };
      }
      parse() {
        if (!this.parsedPromise) {
          this.parsedPromise = this.responsePromise.then(this.parseResponse);
        }
        return this.parsedPromise;
      }
      then(onfulfilled, onrejected) {
        return this.parse().then(onfulfilled, onrejected);
      }
      catch(onrejected) {
        return this.parse().catch(onrejected);
      }
      finally(onfinally) {
        return this.parse().finally(onfinally);
      }
    };
    APIClient = class {
      constructor({
        baseURL,
        maxRetries = 2,
        timeout = 6e5,
        // 10 minutes
        httpAgent,
        fetch: overriddenFetch
      }) {
        this.baseURL = baseURL;
        this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
        this.timeout = validatePositiveInteger("timeout", timeout);
        this.httpAgent = httpAgent;
        this.fetch = overriddenFetch != null ? overriddenFetch : fetch2;
      }
      authHeaders(opts) {
        return {};
      }
      /**
       * Override this to add your own default headers, for example:
       *
       *  {
       *    ...super.defaultHeaders(),
       *    Authorization: 'Bearer 123',
       *  }
       */
      defaultHeaders(opts) {
        return {
          Accept: "application/json",
          "Content-Type": "application/json",
          "User-Agent": this.getUserAgent(),
          ...getPlatformHeaders(),
          ...this.authHeaders(opts)
        };
      }
      /**
       * Override this to add your own headers validation:
       */
      validateHeaders(headers, customHeaders) {
      }
      defaultIdempotencyKey() {
        return `stainless-node-retry-${uuid4()}`;
      }
      get(path, opts) {
        return this.methodRequest("get", path, opts);
      }
      post(path, opts) {
        return this.methodRequest("post", path, opts);
      }
      patch(path, opts) {
        return this.methodRequest("patch", path, opts);
      }
      put(path, opts) {
        return this.methodRequest("put", path, opts);
      }
      delete(path, opts) {
        return this.methodRequest("delete", path, opts);
      }
      methodRequest(method, path, opts) {
        return this.request(Promise.resolve(opts).then(async (opts2) => {
          const body = opts2 && isBlobLike(opts2 == null ? void 0 : opts2.body) ? new DataView(await opts2.body.arrayBuffer()) : (opts2 == null ? void 0 : opts2.body) instanceof DataView ? opts2.body : (opts2 == null ? void 0 : opts2.body) instanceof ArrayBuffer ? new DataView(opts2.body) : opts2 && ArrayBuffer.isView(opts2 == null ? void 0 : opts2.body) ? new DataView(opts2.body.buffer) : opts2 == null ? void 0 : opts2.body;
          return { method, path, ...opts2, body };
        }));
      }
      getAPIList(path, Page2, opts) {
        return this.requestAPIList(Page2, { method: "get", path, ...opts });
      }
      calculateContentLength(body) {
        if (typeof body === "string") {
          if (typeof Buffer !== "undefined") {
            return Buffer.byteLength(body, "utf8").toString();
          }
          if (typeof TextEncoder !== "undefined") {
            const encoder = new TextEncoder();
            const encoded = encoder.encode(body);
            return encoded.length.toString();
          }
        } else if (ArrayBuffer.isView(body)) {
          return body.byteLength.toString();
        }
        return null;
      }
      buildRequest(options, { retryCount = 0 } = {}) {
        var _a2, _b, _c, _d, _e, _f;
        const { method, path, query, headers = {} } = options;
        const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === "string" ? options.body : isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
        const contentLength = this.calculateContentLength(body);
        const url = this.buildURL(path, query);
        if ("timeout" in options)
          validatePositiveInteger("timeout", options.timeout);
        const timeout = (_a2 = options.timeout) != null ? _a2 : this.timeout;
        const httpAgent = (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null ? _c : getDefaultAgent(url);
        const minAgentTimeout = timeout + 1e3;
        if (typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null ? void 0 : _d.timeout) === "number" && minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)) {
          httpAgent.options.timeout = minAgentTimeout;
        }
        if (this.idempotencyHeader && method !== "get") {
          if (!options.idempotencyKey)
            options.idempotencyKey = this.defaultIdempotencyKey();
          headers[this.idempotencyHeader] = options.idempotencyKey;
        }
        const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });
        const req = {
          method,
          ...body && { body },
          headers: reqHeaders,
          ...httpAgent && { agent: httpAgent },
          // @ts-ignore node-fetch uses a custom AbortSignal type that is
          // not compatible with standard web types
          signal: (_f = options.signal) != null ? _f : null
        };
        return { req, url, timeout };
      }
      buildHeaders({ options, headers, contentLength, retryCount }) {
        const reqHeaders = {};
        if (contentLength) {
          reqHeaders["content-length"] = contentLength;
        }
        const defaultHeaders = this.defaultHeaders(options);
        applyHeadersMut(reqHeaders, defaultHeaders);
        applyHeadersMut(reqHeaders, headers);
        if (isMultipartBody(options.body) && kind !== "node") {
          delete reqHeaders["content-type"];
        }
        if (getHeader(defaultHeaders, "x-stainless-retry-count") === void 0 && getHeader(headers, "x-stainless-retry-count") === void 0) {
          reqHeaders["x-stainless-retry-count"] = String(retryCount);
        }
        this.validateHeaders(reqHeaders, headers);
        return reqHeaders;
      }
      /**
       * Used as a callback for mutating the given `FinalRequestOptions` object.
       */
      async prepareOptions(options) {
      }
      /**
       * Used as a callback for mutating the given `RequestInit` object.
       *
       * This is useful for cases where you want to add certain headers based off of
       * the request properties, e.g. `method` or `url`.
       */
      async prepareRequest(request, { url, options }) {
      }
      parseHeaders(headers) {
        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
      }
      makeStatusError(status, error, message, headers) {
        return APIError.generate(status, error, message, headers);
      }
      request(options, remainingRetries = null) {
        return new APIPromise(this.makeRequest(options, remainingRetries));
      }
      async makeRequest(optionsInput, retriesRemaining) {
        var _a2, _b, _c;
        const options = await optionsInput;
        const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
        if (retriesRemaining == null) {
          retriesRemaining = maxRetries;
        }
        await this.prepareOptions(options);
        const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });
        await this.prepareRequest(req, { url, options });
        debug("request", url, options, req.headers);
        if ((_b = options.signal) == null ? void 0 : _b.aborted) {
          throw new APIUserAbortError();
        }
        const controller = new AbortController();
        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
        if (response instanceof Error) {
          if ((_c = options.signal) == null ? void 0 : _c.aborted) {
            throw new APIUserAbortError();
          }
          if (retriesRemaining) {
            return this.retryRequest(options, retriesRemaining);
          }
          if (response.name === "AbortError") {
            throw new APIConnectionTimeoutError();
          }
          throw new APIConnectionError({ cause: response });
        }
        const responseHeaders = createResponseHeaders(response.headers);
        if (!response.ok) {
          if (retriesRemaining && this.shouldRetry(response)) {
            const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
            debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
            return this.retryRequest(options, retriesRemaining, responseHeaders);
          }
          const errText = await response.text().catch((e) => castToError(e).message);
          const errJSON = safeJSON(errText);
          const errMessage = errJSON ? void 0 : errText;
          const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
          debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
          const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
          throw err;
        }
        return { response, options, controller };
      }
      requestAPIList(Page2, options) {
        const request = this.makeRequest(options, null);
        return new PagePromise(this, request, Page2);
      }
      buildURL(path, query) {
        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
        const defaultQuery = this.defaultQuery();
        if (!isEmptyObj(defaultQuery)) {
          query = { ...defaultQuery, ...query };
        }
        if (typeof query === "object" && query && !Array.isArray(query)) {
          url.search = this.stringifyQuery(query);
        }
        return url.toString();
      }
      stringifyQuery(query) {
        return Object.entries(query).filter(([_, value]) => typeof value !== "undefined").map(([key, value]) => {
          if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
            return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
          }
          if (value === null) {
            return `${encodeURIComponent(key)}=`;
          }
          throw new AnthropicError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
        }).join("&");
      }
      async fetchWithTimeout(url, init, ms, controller) {
        const { signal, ...options } = init || {};
        if (signal)
          signal.addEventListener("abort", () => controller.abort());
        const timeout = setTimeout(() => controller.abort(), ms);
        const fetchOptions = {
          signal: controller.signal,
          ...options
        };
        if (fetchOptions.method) {
          fetchOptions.method = fetchOptions.method.toUpperCase();
        }
        return (
          // use undefined this binding; fetch errors if bound to something else in browser/cloudflare
          this.fetch.call(void 0, url, fetchOptions).finally(() => {
            clearTimeout(timeout);
          })
        );
      }
      shouldRetry(response) {
        const shouldRetryHeader = response.headers.get("x-should-retry");
        if (shouldRetryHeader === "true")
          return true;
        if (shouldRetryHeader === "false")
          return false;
        if (response.status === 408)
          return true;
        if (response.status === 409)
          return true;
        if (response.status === 429)
          return true;
        if (response.status >= 500)
          return true;
        return false;
      }
      async retryRequest(options, retriesRemaining, responseHeaders) {
        var _a2;
        let timeoutMillis;
        const retryAfterMillisHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
        if (retryAfterMillisHeader) {
          const timeoutMs = parseFloat(retryAfterMillisHeader);
          if (!Number.isNaN(timeoutMs)) {
            timeoutMillis = timeoutMs;
          }
        }
        const retryAfterHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after"];
        if (retryAfterHeader && !timeoutMillis) {
          const timeoutSeconds = parseFloat(retryAfterHeader);
          if (!Number.isNaN(timeoutSeconds)) {
            timeoutMillis = timeoutSeconds * 1e3;
          } else {
            timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
          }
        }
        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
          const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
          timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
        }
        await sleep(timeoutMillis);
        return this.makeRequest(options, retriesRemaining - 1);
      }
      calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
        const initialRetryDelay = 0.5;
        const maxRetryDelay = 8;
        const numRetries = maxRetries - retriesRemaining;
        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
        const jitter = 1 - Math.random() * 0.25;
        return sleepSeconds * jitter * 1e3;
      }
      getUserAgent() {
        return `${this.constructor.name}/JS ${VERSION}`;
      }
    };
    AbstractPage = class {
      constructor(client, response, body, options) {
        _AbstractPage_client.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
        this.options = options;
        this.response = response;
        this.body = body;
      }
      hasNextPage() {
        const items = this.getPaginatedItems();
        if (!items.length)
          return false;
        return this.nextPageInfo() != null;
      }
      async getNextPage() {
        const nextInfo = this.nextPageInfo();
        if (!nextInfo) {
          throw new AnthropicError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
        }
        const nextOptions = { ...this.options };
        if ("params" in nextInfo && typeof nextOptions.query === "object") {
          nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
        } else if ("url" in nextInfo) {
          const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
          for (const [key, value] of params) {
            nextInfo.url.searchParams.set(key, value);
          }
          nextOptions.query = void 0;
          nextOptions.path = nextInfo.url.toString();
        }
        return await __classPrivateFieldGet(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
      }
      async *iterPages() {
        let page = this;
        yield page;
        while (page.hasNextPage()) {
          page = await page.getNextPage();
          yield page;
        }
      }
      async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
        for await (const page of this.iterPages()) {
          for (const item of page.getPaginatedItems()) {
            yield item;
          }
        }
      }
    };
    PagePromise = class extends APIPromise {
      constructor(client, request, Page2) {
        super(request, async (props) => new Page2(client, props.response, await defaultParseResponse(props), props.options));
      }
      /**
       * Allow auto-paginating iteration on an unawaited list call, eg:
       *
       *    for await (const item of client.items.list()) {
       *      console.log(item)
       *    }
       */
      async *[Symbol.asyncIterator]() {
        const page = await this;
        for await (const item of page) {
          yield item;
        }
      }
    };
    createResponseHeaders = (headers) => {
      return new Proxy(Object.fromEntries(
        // @ts-ignore
        headers.entries()
      ), {
        get(target, name) {
          const key = name.toString();
          return target[key.toLowerCase()] || target[key];
        }
      });
    };
    requestOptionsKeys = {
      method: true,
      path: true,
      query: true,
      body: true,
      headers: true,
      maxRetries: true,
      stream: true,
      timeout: true,
      httpAgent: true,
      signal: true,
      idempotencyKey: true,
      __binaryRequest: true,
      __binaryResponse: true,
      __streamClass: true
    };
    isRequestOptions = (obj) => {
      return typeof obj === "object" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k));
    };
    getPlatformProperties = () => {
      var _a2, _b;
      if (typeof Deno !== "undefined" && Deno.build != null) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(Deno.build.os),
          "X-Stainless-Arch": normalizeArch(Deno.build.arch),
          "X-Stainless-Runtime": "deno",
          "X-Stainless-Runtime-Version": typeof Deno.version === "string" ? Deno.version : (_b = (_a2 = Deno.version) == null ? void 0 : _a2.deno) != null ? _b : "unknown"
        };
      }
      if (typeof EdgeRuntime !== "undefined") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": `other:${EdgeRuntime}`,
          "X-Stainless-Runtime": "edge",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(process.platform),
          "X-Stainless-Arch": normalizeArch(process.arch),
          "X-Stainless-Runtime": "node",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      const browserInfo = getBrowserInfo();
      if (browserInfo) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": "unknown",
          "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
          "X-Stainless-Runtime-Version": browserInfo.version
        };
      }
      return {
        "X-Stainless-Lang": "js",
        "X-Stainless-Package-Version": VERSION,
        "X-Stainless-OS": "Unknown",
        "X-Stainless-Arch": "unknown",
        "X-Stainless-Runtime": "unknown",
        "X-Stainless-Runtime-Version": "unknown"
      };
    };
    normalizeArch = (arch) => {
      if (arch === "x32")
        return "x32";
      if (arch === "x86_64" || arch === "x64")
        return "x64";
      if (arch === "arm")
        return "arm";
      if (arch === "aarch64" || arch === "arm64")
        return "arm64";
      if (arch)
        return `other:${arch}`;
      return "unknown";
    };
    normalizePlatform = (platform) => {
      platform = platform.toLowerCase();
      if (platform.includes("ios"))
        return "iOS";
      if (platform === "android")
        return "Android";
      if (platform === "darwin")
        return "MacOS";
      if (platform === "win32")
        return "Windows";
      if (platform === "freebsd")
        return "FreeBSD";
      if (platform === "openbsd")
        return "OpenBSD";
      if (platform === "linux")
        return "Linux";
      if (platform)
        return `Other:${platform}`;
      return "Unknown";
    };
    getPlatformHeaders = () => {
      return _platformHeaders != null ? _platformHeaders : _platformHeaders = getPlatformProperties();
    };
    safeJSON = (text) => {
      try {
        return JSON.parse(text);
      } catch (err) {
        return void 0;
      }
    };
    startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;
    isAbsoluteURL = (url) => {
      return startsWithSchemeRegexp.test(url);
    };
    sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    validatePositiveInteger = (name, n) => {
      if (typeof n !== "number" || !Number.isInteger(n)) {
        throw new AnthropicError(`${name} must be an integer`);
      }
      if (n < 0) {
        throw new AnthropicError(`${name} must be a positive integer`);
      }
      return n;
    };
    castToError = (err) => {
      if (err instanceof Error)
        return err;
      if (typeof err === "object" && err !== null) {
        try {
          return new Error(JSON.stringify(err));
        } catch (e) {
        }
      }
      return new Error(String(err));
    };
    readEnv = (env) => {
      var _a2, _b, _c, _d, _e, _f;
      if (typeof process !== "undefined") {
        return (_c = (_b = (_a2 = process.env) == null ? void 0 : _a2[env]) == null ? void 0 : _b.trim()) != null ? _c : void 0;
      }
      if (typeof Deno !== "undefined") {
        return (_f = (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null ? void 0 : _e.call(_d, env)) == null ? void 0 : _f.trim();
      }
      return void 0;
    };
    uuid4 = () => {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = Math.random() * 16 | 0;
        const v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    isRunningInBrowser = () => {
      return (
        // @ts-ignore
        typeof window !== "undefined" && // @ts-ignore
        typeof window.document !== "undefined" && // @ts-ignore
        typeof navigator !== "undefined"
      );
    };
    isHeadersProtocol = (headers) => {
      return typeof (headers == null ? void 0 : headers.get) === "function";
    };
    getHeader = (headers, header) => {
      var _a2;
      const lowerCasedHeader = header.toLowerCase();
      if (isHeadersProtocol(headers)) {
        const intercapsHeader = ((_a2 = header[0]) == null ? void 0 : _a2.toUpperCase()) + header.substring(1).replace(/([^\w])(\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());
        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {
          const value = headers.get(key);
          if (value) {
            return value;
          }
        }
      }
      for (const [key, value] of Object.entries(headers)) {
        if (key.toLowerCase() === lowerCasedHeader) {
          if (Array.isArray(value)) {
            if (value.length <= 1)
              return value[0];
            console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);
            return value[0];
          }
          return value;
        }
      }
      return void 0;
    };
  }
});

// node_modules/@anthropic-ai/sdk/pagination.mjs
var Page;
var init_pagination = __esm({
  "node_modules/@anthropic-ai/sdk/pagination.mjs"() {
    init_core();
    Page = class extends AbstractPage {
      constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
        this.has_more = body.has_more || false;
        this.first_id = body.first_id || null;
        this.last_id = body.last_id || null;
      }
      getPaginatedItems() {
        var _a2;
        return (_a2 = this.data) != null ? _a2 : [];
      }
      // @deprecated Please use `nextPageInfo()` instead
      nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
          return null;
        if ("params" in info)
          return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
          return null;
        return params;
      }
      nextPageInfo() {
        var _a2;
        if ((_a2 = this.options.query) == null ? void 0 : _a2["before_id"]) {
          const firstId = this.first_id;
          if (!firstId) {
            return null;
          }
          return {
            params: {
              before_id: firstId
            }
          };
        }
        const cursor = this.last_id;
        if (!cursor) {
          return null;
        }
        return {
          params: {
            after_id: cursor
          }
        };
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/shared.mjs
var init_shared = __esm({
  "node_modules/@anthropic-ai/sdk/resources/shared.mjs"() {
  }
});

// node_modules/@anthropic-ai/sdk/resource.mjs
var APIResource;
var init_resource = __esm({
  "node_modules/@anthropic-ai/sdk/resource.mjs"() {
    APIResource = class {
      constructor(client) {
        this._client = client;
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/models.mjs
var Models, BetaModelInfosPage;
var init_models = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/models.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    Models = class extends APIResource {
      /**
       * Get a specific model.
       *
       * The Models API response can be used to determine information about a specific
       * model or resolve a model alias to a model ID.
       */
      retrieve(modelId, options) {
        return this._client.get(`/v1/models/${modelId}?beta=true`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/models?beta=true", BetaModelInfosPage, { query, ...options });
      }
    };
    BetaModelInfosPage = class extends Page {
    };
    Models.BetaModelInfosPage = BetaModelInfosPage;
  }
});

// node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs
var JSONLDecoder;
var init_jsonl = __esm({
  "node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs"() {
    init_error();
    init_stream_utils();
    init_line();
    JSONLDecoder = class _JSONLDecoder {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      async *decoder() {
        const lineDecoder = new LineDecoder();
        for await (const chunk of this.iterator) {
          for (const line of lineDecoder.decode(chunk)) {
            yield JSON.parse(line);
          }
        }
        for (const line of lineDecoder.flush()) {
          yield JSON.parse(line);
        }
      }
      [Symbol.asyncIterator]() {
        return this.decoder();
      }
      static fromResponse(response, controller) {
        if (!response.body) {
          controller.abort();
          throw new AnthropicError(`Attempted to iterate over a response with no body`);
        }
        return new _JSONLDecoder(ReadableStreamToAsyncIterable(response.body), controller);
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs
var Batches, BetaMessageBatchesPage;
var init_batches = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    init_jsonl();
    init_error();
    Batches = class extends APIResource {
      /**
       * Send a batch of Message creation requests.
       *
       * The Message Batches API can be used to process multiple Messages API requests at
       * once. Once a Message Batch is created, it begins processing immediately. Batches
       * can take up to 24 hours to complete.
       */
      create(params, options) {
        const { betas, ...body } = params;
        return this._client.post("/v1/messages/batches?beta=true", {
          body,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      retrieve(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.retrieve(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.get(`/v1/messages/batches/${messageBatchId}?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      list(params = {}, options) {
        if (isRequestOptions(params)) {
          return this.list({}, params);
        }
        const { betas, ...query } = params;
        return this._client.getAPIList("/v1/messages/batches?beta=true", BetaMessageBatchesPage, {
          query,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      delete(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.delete(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.delete(`/v1/messages/batches/${messageBatchId}?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      cancel(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.cancel(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.post(`/v1/messages/batches/${messageBatchId}/cancel?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      async results(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.results(messageBatchId, {}, params);
        }
        const batch = await this.retrieve(messageBatchId);
        if (!batch.results_url) {
          throw new AnthropicError(`No batch \`results_url\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);
        }
        const { betas } = params;
        return this._client.get(batch.results_url, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            Accept: "application/binary",
            ...options == null ? void 0 : options.headers
          },
          __binaryResponse: true
        })._thenUnwrap((_, props) => JSONLDecoder.fromResponse(props.response, props.controller));
      }
    };
    BetaMessageBatchesPage = class extends Page {
    };
    Batches.BetaMessageBatchesPage = BetaMessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs
var tokenize, strip, unstrip, generate, partialParse;
var init_parser = __esm({
  "node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs"() {
    tokenize = (input) => {
      let current = 0;
      let tokens = [];
      while (current < input.length) {
        let char = input[current];
        if (char === "\\") {
          current++;
          continue;
        }
        if (char === "{") {
          tokens.push({
            type: "brace",
            value: "{"
          });
          current++;
          continue;
        }
        if (char === "}") {
          tokens.push({
            type: "brace",
            value: "}"
          });
          current++;
          continue;
        }
        if (char === "[") {
          tokens.push({
            type: "paren",
            value: "["
          });
          current++;
          continue;
        }
        if (char === "]") {
          tokens.push({
            type: "paren",
            value: "]"
          });
          current++;
          continue;
        }
        if (char === ":") {
          tokens.push({
            type: "separator",
            value: ":"
          });
          current++;
          continue;
        }
        if (char === ",") {
          tokens.push({
            type: "delimiter",
            value: ","
          });
          current++;
          continue;
        }
        if (char === '"') {
          let value = "";
          let danglingQuote = false;
          char = input[++current];
          while (char !== '"') {
            if (current === input.length) {
              danglingQuote = true;
              break;
            }
            if (char === "\\") {
              current++;
              if (current === input.length) {
                danglingQuote = true;
                break;
              }
              value += char + input[current];
              char = input[++current];
            } else {
              value += char;
              char = input[++current];
            }
          }
          char = input[++current];
          if (!danglingQuote) {
            tokens.push({
              type: "string",
              value
            });
          }
          continue;
        }
        let WHITESPACE = /\s/;
        if (char && WHITESPACE.test(char)) {
          current++;
          continue;
        }
        let NUMBERS = /[0-9]/;
        if (char && NUMBERS.test(char) || char === "-" || char === ".") {
          let value = "";
          if (char === "-") {
            value += char;
            char = input[++current];
          }
          while (char && NUMBERS.test(char) || char === ".") {
            value += char;
            char = input[++current];
          }
          tokens.push({
            type: "number",
            value
          });
          continue;
        }
        let LETTERS = /[a-z]/i;
        if (char && LETTERS.test(char)) {
          let value = "";
          while (char && LETTERS.test(char)) {
            if (current === input.length) {
              break;
            }
            value += char;
            char = input[++current];
          }
          if (value == "true" || value == "false" || value === "null") {
            tokens.push({
              type: "name",
              value
            });
          } else {
            current++;
            continue;
          }
          continue;
        }
        current++;
      }
      return tokens;
    };
    strip = (tokens) => {
      if (tokens.length === 0) {
        return tokens;
      }
      let lastToken = tokens[tokens.length - 1];
      switch (lastToken.type) {
        case "separator":
          tokens = tokens.slice(0, tokens.length - 1);
          return strip(tokens);
          break;
        case "number":
          let lastCharacterOfLastToken = lastToken.value[lastToken.value.length - 1];
          if (lastCharacterOfLastToken === "." || lastCharacterOfLastToken === "-") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          }
        case "string":
          let tokenBeforeTheLastToken = tokens[tokens.length - 2];
          if ((tokenBeforeTheLastToken == null ? void 0 : tokenBeforeTheLastToken.type) === "delimiter") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          } else if ((tokenBeforeTheLastToken == null ? void 0 : tokenBeforeTheLastToken.type) === "brace" && tokenBeforeTheLastToken.value === "{") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          }
          break;
        case "delimiter":
          tokens = tokens.slice(0, tokens.length - 1);
          return strip(tokens);
          break;
      }
      return tokens;
    };
    unstrip = (tokens) => {
      let tail = [];
      tokens.map((token) => {
        if (token.type === "brace") {
          if (token.value === "{") {
            tail.push("}");
          } else {
            tail.splice(tail.lastIndexOf("}"), 1);
          }
        }
        if (token.type === "paren") {
          if (token.value === "[") {
            tail.push("]");
          } else {
            tail.splice(tail.lastIndexOf("]"), 1);
          }
        }
      });
      if (tail.length > 0) {
        tail.reverse().map((item) => {
          if (item === "}") {
            tokens.push({
              type: "brace",
              value: "}"
            });
          } else if (item === "]") {
            tokens.push({
              type: "paren",
              value: "]"
            });
          }
        });
      }
      return tokens;
    };
    generate = (tokens) => {
      let output = "";
      tokens.map((token) => {
        switch (token.type) {
          case "string":
            output += '"' + token.value + '"';
            break;
          default:
            output += token.value;
            break;
        }
      });
      return output;
    };
    partialParse = (input) => JSON.parse(generate(unstrip(strip(tokenize(input)))));
  }
});

// node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs
function checkNever(x) {
}
var __classPrivateFieldSet2, __classPrivateFieldGet2, _BetaMessageStream_instances, _BetaMessageStream_currentMessageSnapshot, _BetaMessageStream_connectedPromise, _BetaMessageStream_resolveConnectedPromise, _BetaMessageStream_rejectConnectedPromise, _BetaMessageStream_endPromise, _BetaMessageStream_resolveEndPromise, _BetaMessageStream_rejectEndPromise, _BetaMessageStream_listeners, _BetaMessageStream_ended, _BetaMessageStream_errored, _BetaMessageStream_aborted, _BetaMessageStream_catchingPromiseCreated, _BetaMessageStream_response, _BetaMessageStream_request_id, _BetaMessageStream_getFinalMessage, _BetaMessageStream_getFinalText, _BetaMessageStream_handleError, _BetaMessageStream_beginRequest, _BetaMessageStream_addStreamEvent, _BetaMessageStream_endRequest, _BetaMessageStream_accumulateMessage, JSON_BUF_PROPERTY, BetaMessageStream;
var init_BetaMessageStream = __esm({
  "node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs"() {
    init_error();
    init_streaming();
    init_parser();
    __classPrivateFieldSet2 = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet2 = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    JSON_BUF_PROPERTY = "__json_buf";
    BetaMessageStream = class _BetaMessageStream {
      constructor() {
        _BetaMessageStream_instances.add(this);
        this.messages = [];
        this.receivedMessages = [];
        _BetaMessageStream_currentMessageSnapshot.set(this, void 0);
        this.controller = new AbortController();
        _BetaMessageStream_connectedPromise.set(this, void 0);
        _BetaMessageStream_resolveConnectedPromise.set(this, () => {
        });
        _BetaMessageStream_rejectConnectedPromise.set(this, () => {
        });
        _BetaMessageStream_endPromise.set(this, void 0);
        _BetaMessageStream_resolveEndPromise.set(this, () => {
        });
        _BetaMessageStream_rejectEndPromise.set(this, () => {
        });
        _BetaMessageStream_listeners.set(this, {});
        _BetaMessageStream_ended.set(this, false);
        _BetaMessageStream_errored.set(this, false);
        _BetaMessageStream_aborted.set(this, false);
        _BetaMessageStream_catchingPromiseCreated.set(this, false);
        _BetaMessageStream_response.set(this, void 0);
        _BetaMessageStream_request_id.set(this, void 0);
        _BetaMessageStream_handleError.set(this, (error) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_errored, true, "f");
          if (error instanceof Error && error.name === "AbortError") {
            error = new APIUserAbortError();
          }
          if (error instanceof APIUserAbortError) {
            __classPrivateFieldSet2(this, _BetaMessageStream_aborted, true, "f");
            return this._emit("abort", error);
          }
          if (error instanceof AnthropicError) {
            return this._emit("error", error);
          }
          if (error instanceof Error) {
            const anthropicError = new AnthropicError(error.message);
            anthropicError.cause = error;
            return this._emit("error", anthropicError);
          }
          return this._emit("error", new AnthropicError(String(error)));
        });
        __classPrivateFieldSet2(this, _BetaMessageStream_connectedPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_resolveConnectedPromise, resolve, "f");
          __classPrivateFieldSet2(this, _BetaMessageStream_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet2(this, _BetaMessageStream_endPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_resolveEndPromise, resolve, "f");
          __classPrivateFieldSet2(this, _BetaMessageStream_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet2(this, _BetaMessageStream_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet2(this, _BetaMessageStream_endPromise, "f").catch(() => {
        });
      }
      get response() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_response, "f");
      }
      get request_id() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_request_id, "f");
      }
      /**
       * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * This is the same as the `APIPromise.withResponse()` method.
       *
       * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`
       * as no `Response` is available.
       */
      async withResponse() {
        const response = await __classPrivateFieldGet2(this, _BetaMessageStream_connectedPromise, "f");
        if (!response) {
          throw new Error("Could not resolve a `Response` object");
        }
        return {
          data: this,
          response,
          request_id: response.headers.get("request-id")
        };
      }
      /**
       * Intended for use on the frontend, consuming a stream produced with
       * `.toReadableStream()` on the backend.
       *
       * Note that messages sent to the model do not appear in `.on('message')`
       * in this context.
       */
      static fromReadableStream(stream) {
        const runner = new _BetaMessageStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      static createMessage(messages, params, options) {
        const runner = new _BetaMessageStream();
        for (const message of params.messages) {
          runner._addMessageParam(message);
        }
        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" } }));
        return runner;
      }
      _run(executor) {
        executor().then(() => {
          this._emitFinal();
          this._emit("end");
        }, __classPrivateFieldGet2(this, _BetaMessageStream_handleError, "f"));
      }
      _addMessageParam(message) {
        this.messages.push(message);
      }
      _addMessage(message, emit = true) {
        this.receivedMessages.push(message);
        if (emit) {
          this._emit("message", message);
        }
      }
      async _createMessage(messages, params, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_beginRequest).call(this);
        const { response, data: stream } = await messages.create({ ...params, stream: true }, { ...options, signal: this.controller.signal }).withResponse();
        this._connected(response);
        for await (const event of stream) {
          __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_endRequest).call(this);
      }
      _connected(response) {
        if (this.ended)
          return;
        __classPrivateFieldSet2(this, _BetaMessageStream_response, response, "f");
        __classPrivateFieldSet2(this, _BetaMessageStream_request_id, response == null ? void 0 : response.headers.get("request-id"), "f");
        __classPrivateFieldGet2(this, _BetaMessageStream_resolveConnectedPromise, "f").call(this, response);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this MessageStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] || (__classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this MessageStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event];
        if (!listeners)
          return this;
        const index = listeners.findIndex((l) => l.listener === listener);
        if (index >= 0)
          listeners.splice(index, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this MessageStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] || (__classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve);
        });
      }
      async done() {
        __classPrivateFieldSet2(this, _BetaMessageStream_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet2(this, _BetaMessageStream_endPromise, "f");
      }
      get currentMessage() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
      }
      /**
       * @returns a promise that resolves with the the final assistant Message response,
       * or rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalMessage() {
        await this.done();
        return __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalMessage).call(this);
      }
      /**
       * @returns a promise that resolves with the the final assistant Message's text response, concatenated
       * together if there are more than one text blocks.
       * Rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalText() {
        await this.done();
        return __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalText).call(this);
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet2(this, _BetaMessageStream_ended, "f"))
          return;
        if (event === "end") {
          __classPrivateFieldSet2(this, _BetaMessageStream_ended, true, "f");
          __classPrivateFieldGet2(this, _BetaMessageStream_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error = args[0];
          if (!__classPrivateFieldGet2(this, _BetaMessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error = args[0];
          if (!__classPrivateFieldGet2(this, _BetaMessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
        }
      }
      _emitFinal() {
        const finalMessage = this.receivedMessages.at(-1);
        if (finalMessage) {
          this._emit("finalMessage", __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalMessage).call(this));
        }
      }
      async _fromReadableStream(readableStream, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_beginRequest).call(this);
        this._connected(null);
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
          __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_endRequest).call(this);
      }
      [(_BetaMessageStream_currentMessageSnapshot = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_endPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_listeners = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_ended = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_errored = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_aborted = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_response = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_request_id = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_handleError = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_instances = /* @__PURE__ */ new WeakSet(), _BetaMessageStream_getFinalMessage = function _BetaMessageStream_getFinalMessage2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        return this.receivedMessages.at(-1);
      }, _BetaMessageStream_getFinalText = function _BetaMessageStream_getFinalText2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        const textBlocks = this.receivedMessages.at(-1).content.filter((block) => block.type === "text").map((block) => block.text);
        if (textBlocks.length === 0) {
          throw new AnthropicError("stream ended without producing a content block with type=text");
        }
        return textBlocks.join(" ");
      }, _BetaMessageStream_beginRequest = function _BetaMessageStream_beginRequest2() {
        if (this.ended)
          return;
        __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, void 0, "f");
      }, _BetaMessageStream_addStreamEvent = function _BetaMessageStream_addStreamEvent2(event) {
        var _a2;
        if (this.ended)
          return;
        const messageSnapshot = __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_accumulateMessage).call(this, event);
        this._emit("streamEvent", event, messageSnapshot);
        switch (event.type) {
          case "content_block_delta": {
            const content = messageSnapshot.content.at(-1);
            switch (event.delta.type) {
              case "text_delta": {
                if (content.type === "text") {
                  this._emit("text", event.delta.text, content.text || "");
                }
                break;
              }
              case "citations_delta": {
                if (content.type === "text") {
                  this._emit("citation", event.delta.citation, (_a2 = content.citations) != null ? _a2 : []);
                }
                break;
              }
              case "input_json_delta": {
                if (content.type === "tool_use" && content.input) {
                  this._emit("inputJson", event.delta.partial_json, content.input);
                }
                break;
              }
              default:
                checkNever(event.delta);
            }
            break;
          }
          case "message_stop": {
            this._addMessageParam(messageSnapshot);
            this._addMessage(messageSnapshot, true);
            break;
          }
          case "content_block_stop": {
            this._emit("contentBlock", messageSnapshot.content.at(-1));
            break;
          }
          case "message_start": {
            __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, messageSnapshot, "f");
            break;
          }
          case "content_block_start":
          case "message_delta":
            break;
        }
      }, _BetaMessageStream_endRequest = function _BetaMessageStream_endRequest2() {
        if (this.ended) {
          throw new AnthropicError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
        if (!snapshot) {
          throw new AnthropicError(`request ended without sending any chunks`);
        }
        __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, void 0, "f");
        return snapshot;
      }, _BetaMessageStream_accumulateMessage = function _BetaMessageStream_accumulateMessage2(event) {
        var _a2;
        let snapshot = __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
        if (event.type === "message_start") {
          if (snapshot) {
            throw new AnthropicError(`Unexpected event order, got ${event.type} before receiving "message_stop"`);
          }
          return event.message;
        }
        if (!snapshot) {
          throw new AnthropicError(`Unexpected event order, got ${event.type} before "message_start"`);
        }
        switch (event.type) {
          case "message_stop":
            return snapshot;
          case "message_delta":
            snapshot.stop_reason = event.delta.stop_reason;
            snapshot.stop_sequence = event.delta.stop_sequence;
            snapshot.usage.output_tokens = event.usage.output_tokens;
            return snapshot;
          case "content_block_start":
            snapshot.content.push(event.content_block);
            return snapshot;
          case "content_block_delta": {
            const snapshotContent = snapshot.content.at(event.index);
            switch (event.delta.type) {
              case "text_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  snapshotContent.text += event.delta.text;
                }
                break;
              }
              case "citations_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  (_a2 = snapshotContent.citations) != null ? _a2 : snapshotContent.citations = [];
                  snapshotContent.citations.push(event.delta.citation);
                }
                break;
              }
              case "input_json_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "tool_use") {
                  let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || "";
                  jsonBuf += event.delta.partial_json;
                  Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY, {
                    value: jsonBuf,
                    enumerable: false,
                    writable: true
                  });
                  if (jsonBuf) {
                    snapshotContent.input = partialParse(jsonBuf);
                  }
                }
                break;
              }
              default:
                checkNever(event.delta);
            }
            return snapshot;
          }
          case "content_block_stop":
            return snapshot;
        }
      }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("streamEvent", (event) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(event);
          } else {
            pushQueue.push(event);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs
var DEPRECATED_MODELS, Messages;
var init_messages = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs"() {
    init_resource();
    init_batches();
    init_batches();
    init_BetaMessageStream();
    DEPRECATED_MODELS = {
      "claude-1.3": "November 6th, 2024",
      "claude-1.3-100k": "November 6th, 2024",
      "claude-instant-1.1": "November 6th, 2024",
      "claude-instant-1.1-100k": "November 6th, 2024",
      "claude-instant-1.2": "November 6th, 2024",
      "claude-3-sonnet-20240229": "July 21st, 2025",
      "claude-2.1": "July 21st, 2025",
      "claude-2.0": "July 21st, 2025"
    };
    Messages = class extends APIResource {
      constructor() {
        super(...arguments);
        this.batches = new Batches(this._client);
      }
      create(params, options) {
        var _a2, _b;
        const { betas, ...body } = params;
        if (body.model in DEPRECATED_MODELS) {
          console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}
Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);
        }
        return this._client.post("/v1/messages?beta=true", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          headers: {
            ...(betas == null ? void 0 : betas.toString()) != null ? { "anthropic-beta": betas == null ? void 0 : betas.toString() } : void 0,
            ...options == null ? void 0 : options.headers
          },
          stream: (_b = params.stream) != null ? _b : false
        });
      }
      /**
       * Create a Message stream
       */
      stream(body, options) {
        return BetaMessageStream.createMessage(this, body, options);
      }
      /**
       * Count the number of tokens in a Message.
       *
       * The Token Count API can be used to count the number of tokens in a Message,
       * including tools, images, and documents, without creating it.
       */
      countTokens(params, options) {
        const { betas, ...body } = params;
        return this._client.post("/v1/messages/count_tokens?beta=true", {
          body,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "token-counting-2024-11-01"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
    };
    Messages.Batches = Batches;
    Messages.BetaMessageBatchesPage = BetaMessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs
var Beta;
var init_beta = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs"() {
    init_resource();
    init_models();
    init_models();
    init_messages();
    init_messages();
    Beta = class extends APIResource {
      constructor() {
        super(...arguments);
        this.models = new Models(this._client);
        this.messages = new Messages(this._client);
      }
    };
    Beta.Models = Models;
    Beta.BetaModelInfosPage = BetaModelInfosPage;
    Beta.Messages = Messages;
  }
});

// node_modules/@anthropic-ai/sdk/resources/completions.mjs
var Completions;
var init_completions = __esm({
  "node_modules/@anthropic-ai/sdk/resources/completions.mjs"() {
    init_resource();
    Completions = class extends APIResource {
      create(body, options) {
        var _a2, _b;
        return this._client.post("/v1/complete", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          stream: (_b = body.stream) != null ? _b : false
        });
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs
var Batches2, MessageBatchesPage;
var init_batches2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    init_jsonl();
    init_error();
    Batches2 = class extends APIResource {
      /**
       * Send a batch of Message creation requests.
       *
       * The Message Batches API can be used to process multiple Messages API requests at
       * once. Once a Message Batch is created, it begins processing immediately. Batches
       * can take up to 24 hours to complete.
       */
      create(body, options) {
        return this._client.post("/v1/messages/batches", { body, ...options });
      }
      /**
       * This endpoint is idempotent and can be used to poll for Message Batch
       * completion. To access the results of a Message Batch, make a request to the
       * `results_url` field in the response.
       */
      retrieve(messageBatchId, options) {
        return this._client.get(`/v1/messages/batches/${messageBatchId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/messages/batches", MessageBatchesPage, { query, ...options });
      }
      /**
       * Delete a Message Batch.
       *
       * Message Batches can only be deleted once they've finished processing. If you'd
       * like to delete an in-progress batch, you must first cancel it.
       */
      delete(messageBatchId, options) {
        return this._client.delete(`/v1/messages/batches/${messageBatchId}`, options);
      }
      /**
       * Batches may be canceled any time before processing ends. Once cancellation is
       * initiated, the batch enters a `canceling` state, at which time the system may
       * complete any in-progress, non-interruptible requests before finalizing
       * cancellation.
       *
       * The number of canceled requests is specified in `request_counts`. To determine
       * which requests were canceled, check the individual results within the batch.
       * Note that cancellation may not result in any canceled requests if they were
       * non-interruptible.
       */
      cancel(messageBatchId, options) {
        return this._client.post(`/v1/messages/batches/${messageBatchId}/cancel`, options);
      }
      /**
       * Streams the results of a Message Batch as a `.jsonl` file.
       *
       * Each line in the file is a JSON object containing the result of a single request
       * in the Message Batch. Results are not guaranteed to be in the same order as
       * requests. Use the `custom_id` field to match results to requests.
       */
      async results(messageBatchId, options) {
        const batch = await this.retrieve(messageBatchId);
        if (!batch.results_url) {
          throw new AnthropicError(`No batch \`results_url\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);
        }
        return this._client.get(batch.results_url, {
          ...options,
          headers: {
            Accept: "application/binary",
            ...options == null ? void 0 : options.headers
          },
          __binaryResponse: true
        })._thenUnwrap((_, props) => JSONLDecoder.fromResponse(props.response, props.controller));
      }
    };
    MessageBatchesPage = class extends Page {
    };
    Batches2.MessageBatchesPage = MessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs
function checkNever2(x) {
}
var __classPrivateFieldSet3, __classPrivateFieldGet3, _MessageStream_instances, _MessageStream_currentMessageSnapshot, _MessageStream_connectedPromise, _MessageStream_resolveConnectedPromise, _MessageStream_rejectConnectedPromise, _MessageStream_endPromise, _MessageStream_resolveEndPromise, _MessageStream_rejectEndPromise, _MessageStream_listeners, _MessageStream_ended, _MessageStream_errored, _MessageStream_aborted, _MessageStream_catchingPromiseCreated, _MessageStream_response, _MessageStream_request_id, _MessageStream_getFinalMessage, _MessageStream_getFinalText, _MessageStream_handleError, _MessageStream_beginRequest, _MessageStream_addStreamEvent, _MessageStream_endRequest, _MessageStream_accumulateMessage, JSON_BUF_PROPERTY2, MessageStream;
var init_MessageStream = __esm({
  "node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs"() {
    init_error();
    init_streaming();
    init_parser();
    __classPrivateFieldSet3 = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet3 = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    JSON_BUF_PROPERTY2 = "__json_buf";
    MessageStream = class _MessageStream {
      constructor() {
        _MessageStream_instances.add(this);
        this.messages = [];
        this.receivedMessages = [];
        _MessageStream_currentMessageSnapshot.set(this, void 0);
        this.controller = new AbortController();
        _MessageStream_connectedPromise.set(this, void 0);
        _MessageStream_resolveConnectedPromise.set(this, () => {
        });
        _MessageStream_rejectConnectedPromise.set(this, () => {
        });
        _MessageStream_endPromise.set(this, void 0);
        _MessageStream_resolveEndPromise.set(this, () => {
        });
        _MessageStream_rejectEndPromise.set(this, () => {
        });
        _MessageStream_listeners.set(this, {});
        _MessageStream_ended.set(this, false);
        _MessageStream_errored.set(this, false);
        _MessageStream_aborted.set(this, false);
        _MessageStream_catchingPromiseCreated.set(this, false);
        _MessageStream_response.set(this, void 0);
        _MessageStream_request_id.set(this, void 0);
        _MessageStream_handleError.set(this, (error) => {
          __classPrivateFieldSet3(this, _MessageStream_errored, true, "f");
          if (error instanceof Error && error.name === "AbortError") {
            error = new APIUserAbortError();
          }
          if (error instanceof APIUserAbortError) {
            __classPrivateFieldSet3(this, _MessageStream_aborted, true, "f");
            return this._emit("abort", error);
          }
          if (error instanceof AnthropicError) {
            return this._emit("error", error);
          }
          if (error instanceof Error) {
            const anthropicError = new AnthropicError(error.message);
            anthropicError.cause = error;
            return this._emit("error", anthropicError);
          }
          return this._emit("error", new AnthropicError(String(error)));
        });
        __classPrivateFieldSet3(this, _MessageStream_connectedPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_resolveConnectedPromise, resolve, "f");
          __classPrivateFieldSet3(this, _MessageStream_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet3(this, _MessageStream_endPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_resolveEndPromise, resolve, "f");
          __classPrivateFieldSet3(this, _MessageStream_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet3(this, _MessageStream_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet3(this, _MessageStream_endPromise, "f").catch(() => {
        });
      }
      get response() {
        return __classPrivateFieldGet3(this, _MessageStream_response, "f");
      }
      get request_id() {
        return __classPrivateFieldGet3(this, _MessageStream_request_id, "f");
      }
      /**
       * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * This is the same as the `APIPromise.withResponse()` method.
       *
       * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`
       * as no `Response` is available.
       */
      async withResponse() {
        const response = await __classPrivateFieldGet3(this, _MessageStream_connectedPromise, "f");
        if (!response) {
          throw new Error("Could not resolve a `Response` object");
        }
        return {
          data: this,
          response,
          request_id: response.headers.get("request-id")
        };
      }
      /**
       * Intended for use on the frontend, consuming a stream produced with
       * `.toReadableStream()` on the backend.
       *
       * Note that messages sent to the model do not appear in `.on('message')`
       * in this context.
       */
      static fromReadableStream(stream) {
        const runner = new _MessageStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      static createMessage(messages, params, options) {
        const runner = new _MessageStream();
        for (const message of params.messages) {
          runner._addMessageParam(message);
        }
        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" } }));
        return runner;
      }
      _run(executor) {
        executor().then(() => {
          this._emitFinal();
          this._emit("end");
        }, __classPrivateFieldGet3(this, _MessageStream_handleError, "f"));
      }
      _addMessageParam(message) {
        this.messages.push(message);
      }
      _addMessage(message, emit = true) {
        this.receivedMessages.push(message);
        if (emit) {
          this._emit("message", message);
        }
      }
      async _createMessage(messages, params, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_beginRequest).call(this);
        const { response, data: stream } = await messages.create({ ...params, stream: true }, { ...options, signal: this.controller.signal }).withResponse();
        this._connected(response);
        for await (const event of stream) {
          __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_endRequest).call(this);
      }
      _connected(response) {
        if (this.ended)
          return;
        __classPrivateFieldSet3(this, _MessageStream_response, response, "f");
        __classPrivateFieldSet3(this, _MessageStream_request_id, response == null ? void 0 : response.headers.get("request-id"), "f");
        __classPrivateFieldGet3(this, _MessageStream_resolveConnectedPromise, "f").call(this, response);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet3(this, _MessageStream_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet3(this, _MessageStream_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet3(this, _MessageStream_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this MessageStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this MessageStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event];
        if (!listeners)
          return this;
        const index = listeners.findIndex((l) => l.listener === listener);
        if (index >= 0)
          listeners.splice(index, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this MessageStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve);
        });
      }
      async done() {
        __classPrivateFieldSet3(this, _MessageStream_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet3(this, _MessageStream_endPromise, "f");
      }
      get currentMessage() {
        return __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
      }
      /**
       * @returns a promise that resolves with the the final assistant Message response,
       * or rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalMessage() {
        await this.done();
        return __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalMessage).call(this);
      }
      /**
       * @returns a promise that resolves with the the final assistant Message's text response, concatenated
       * together if there are more than one text blocks.
       * Rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalText() {
        await this.done();
        return __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalText).call(this);
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet3(this, _MessageStream_ended, "f"))
          return;
        if (event === "end") {
          __classPrivateFieldSet3(this, _MessageStream_ended, true, "f");
          __classPrivateFieldGet3(this, _MessageStream_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error = args[0];
          if (!__classPrivateFieldGet3(this, _MessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet3(this, _MessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet3(this, _MessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error = args[0];
          if (!__classPrivateFieldGet3(this, _MessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet3(this, _MessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet3(this, _MessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
        }
      }
      _emitFinal() {
        const finalMessage = this.receivedMessages.at(-1);
        if (finalMessage) {
          this._emit("finalMessage", __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalMessage).call(this));
        }
      }
      async _fromReadableStream(readableStream, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_beginRequest).call(this);
        this._connected(null);
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
          __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_endRequest).call(this);
      }
      [(_MessageStream_currentMessageSnapshot = /* @__PURE__ */ new WeakMap(), _MessageStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_endPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_listeners = /* @__PURE__ */ new WeakMap(), _MessageStream_ended = /* @__PURE__ */ new WeakMap(), _MessageStream_errored = /* @__PURE__ */ new WeakMap(), _MessageStream_aborted = /* @__PURE__ */ new WeakMap(), _MessageStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _MessageStream_response = /* @__PURE__ */ new WeakMap(), _MessageStream_request_id = /* @__PURE__ */ new WeakMap(), _MessageStream_handleError = /* @__PURE__ */ new WeakMap(), _MessageStream_instances = /* @__PURE__ */ new WeakSet(), _MessageStream_getFinalMessage = function _MessageStream_getFinalMessage2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        return this.receivedMessages.at(-1);
      }, _MessageStream_getFinalText = function _MessageStream_getFinalText2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        const textBlocks = this.receivedMessages.at(-1).content.filter((block) => block.type === "text").map((block) => block.text);
        if (textBlocks.length === 0) {
          throw new AnthropicError("stream ended without producing a content block with type=text");
        }
        return textBlocks.join(" ");
      }, _MessageStream_beginRequest = function _MessageStream_beginRequest2() {
        if (this.ended)
          return;
        __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, void 0, "f");
      }, _MessageStream_addStreamEvent = function _MessageStream_addStreamEvent2(event) {
        var _a2;
        if (this.ended)
          return;
        const messageSnapshot = __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_accumulateMessage).call(this, event);
        this._emit("streamEvent", event, messageSnapshot);
        switch (event.type) {
          case "content_block_delta": {
            const content = messageSnapshot.content.at(-1);
            switch (event.delta.type) {
              case "text_delta": {
                if (content.type === "text") {
                  this._emit("text", event.delta.text, content.text || "");
                }
                break;
              }
              case "citations_delta": {
                if (content.type === "text") {
                  this._emit("citation", event.delta.citation, (_a2 = content.citations) != null ? _a2 : []);
                }
                break;
              }
              case "input_json_delta": {
                if (content.type === "tool_use" && content.input) {
                  this._emit("inputJson", event.delta.partial_json, content.input);
                }
                break;
              }
              default:
                checkNever2(event.delta);
            }
            break;
          }
          case "message_stop": {
            this._addMessageParam(messageSnapshot);
            this._addMessage(messageSnapshot, true);
            break;
          }
          case "content_block_stop": {
            this._emit("contentBlock", messageSnapshot.content.at(-1));
            break;
          }
          case "message_start": {
            __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, messageSnapshot, "f");
            break;
          }
          case "content_block_start":
          case "message_delta":
            break;
        }
      }, _MessageStream_endRequest = function _MessageStream_endRequest2() {
        if (this.ended) {
          throw new AnthropicError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
        if (!snapshot) {
          throw new AnthropicError(`request ended without sending any chunks`);
        }
        __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, void 0, "f");
        return snapshot;
      }, _MessageStream_accumulateMessage = function _MessageStream_accumulateMessage2(event) {
        var _a2;
        let snapshot = __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
        if (event.type === "message_start") {
          if (snapshot) {
            throw new AnthropicError(`Unexpected event order, got ${event.type} before receiving "message_stop"`);
          }
          return event.message;
        }
        if (!snapshot) {
          throw new AnthropicError(`Unexpected event order, got ${event.type} before "message_start"`);
        }
        switch (event.type) {
          case "message_stop":
            return snapshot;
          case "message_delta":
            snapshot.stop_reason = event.delta.stop_reason;
            snapshot.stop_sequence = event.delta.stop_sequence;
            snapshot.usage.output_tokens = event.usage.output_tokens;
            return snapshot;
          case "content_block_start":
            snapshot.content.push(event.content_block);
            return snapshot;
          case "content_block_delta": {
            const snapshotContent = snapshot.content.at(event.index);
            switch (event.delta.type) {
              case "text_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  snapshotContent.text += event.delta.text;
                }
                break;
              }
              case "citations_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  (_a2 = snapshotContent.citations) != null ? _a2 : snapshotContent.citations = [];
                  snapshotContent.citations.push(event.delta.citation);
                }
                break;
              }
              case "input_json_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "tool_use") {
                  let jsonBuf = snapshotContent[JSON_BUF_PROPERTY2] || "";
                  jsonBuf += event.delta.partial_json;
                  Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY2, {
                    value: jsonBuf,
                    enumerable: false,
                    writable: true
                  });
                  if (jsonBuf) {
                    snapshotContent.input = partialParse(jsonBuf);
                  }
                }
                break;
              }
              default:
                checkNever2(event.delta);
            }
            return snapshot;
          }
          case "content_block_stop":
            return snapshot;
        }
      }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("streamEvent", (event) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(event);
          } else {
            pushQueue.push(event);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs
var Messages2, DEPRECATED_MODELS2;
var init_messages2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs"() {
    init_resource();
    init_batches2();
    init_batches2();
    init_MessageStream();
    Messages2 = class extends APIResource {
      constructor() {
        super(...arguments);
        this.batches = new Batches2(this._client);
      }
      create(body, options) {
        var _a2, _b;
        if (body.model in DEPRECATED_MODELS2) {
          console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS2[body.model]}
Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);
        }
        return this._client.post("/v1/messages", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          stream: (_b = body.stream) != null ? _b : false
        });
      }
      /**
       * Create a Message stream
       */
      stream(body, options) {
        return MessageStream.createMessage(this, body, options);
      }
      /**
       * Count the number of tokens in a Message.
       *
       * The Token Count API can be used to count the number of tokens in a Message,
       * including tools, images, and documents, without creating it.
       */
      countTokens(body, options) {
        return this._client.post("/v1/messages/count_tokens", { body, ...options });
      }
    };
    DEPRECATED_MODELS2 = {
      "claude-1.3": "November 6th, 2024",
      "claude-1.3-100k": "November 6th, 2024",
      "claude-instant-1.1": "November 6th, 2024",
      "claude-instant-1.1-100k": "November 6th, 2024",
      "claude-instant-1.2": "November 6th, 2024",
      "claude-3-sonnet-20240229": "July 21st, 2025",
      "claude-2.1": "July 21st, 2025",
      "claude-2.0": "July 21st, 2025"
    };
    Messages2.Batches = Batches2;
    Messages2.MessageBatchesPage = MessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/models.mjs
var Models2, ModelInfosPage;
var init_models2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/models.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    Models2 = class extends APIResource {
      /**
       * Get a specific model.
       *
       * The Models API response can be used to determine information about a specific
       * model or resolve a model alias to a model ID.
       */
      retrieve(modelId, options) {
        return this._client.get(`/v1/models/${modelId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/models", ModelInfosPage, { query, ...options });
      }
    };
    ModelInfosPage = class extends Page {
    };
    Models2.ModelInfosPage = ModelInfosPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/index.mjs
var init_resources = __esm({
  "node_modules/@anthropic-ai/sdk/resources/index.mjs"() {
    init_shared();
    init_beta();
    init_completions();
    init_messages2();
    init_models2();
  }
});

// node_modules/@anthropic-ai/sdk/index.mjs
var _a, Anthropic, HUMAN_PROMPT, AI_PROMPT, sdk_default;
var init_sdk = __esm({
  "node_modules/@anthropic-ai/sdk/index.mjs"() {
    init_core();
    init_error();
    init_uploads();
    init_resources();
    init_completions();
    init_models2();
    init_beta();
    init_messages2();
    Anthropic = class extends APIClient {
      /**
       * API Client for interfacing with the Anthropic API.
       *
       * @param {string | null | undefined} [opts.apiKey=process.env['ANTHROPIC_API_KEY'] ?? null]
       * @param {string | null | undefined} [opts.authToken=process.env['ANTHROPIC_AUTH_TOKEN'] ?? null]
       * @param {string} [opts.baseURL=process.env['ANTHROPIC_BASE_URL'] ?? https://api.anthropic.com] - Override the default base URL for the API.
       * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
       * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
       * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
       * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
       * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
       * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
       * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
       */
      constructor({ baseURL = readEnv("ANTHROPIC_BASE_URL"), apiKey = ((_a2) => (_a2 = readEnv("ANTHROPIC_API_KEY")) != null ? _a2 : null)(), authToken = ((_b) => (_b = readEnv("ANTHROPIC_AUTH_TOKEN")) != null ? _b : null)(), ...opts } = {}) {
        var _a3;
        const options = {
          apiKey,
          authToken,
          ...opts,
          baseURL: baseURL || `https://api.anthropic.com`
        };
        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
          throw new AnthropicError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew Anthropic({ apiKey, dangerouslyAllowBrowser: true });\n");
        }
        super({
          baseURL: options.baseURL,
          timeout: (_a3 = options.timeout) != null ? _a3 : 6e5,
          httpAgent: options.httpAgent,
          maxRetries: options.maxRetries,
          fetch: options.fetch
        });
        this.completions = new Completions(this);
        this.messages = new Messages2(this);
        this.models = new Models2(this);
        this.beta = new Beta(this);
        this._options = options;
        this.apiKey = apiKey;
        this.authToken = authToken;
      }
      defaultQuery() {
        return this._options.defaultQuery;
      }
      defaultHeaders(opts) {
        return {
          ...super.defaultHeaders(opts),
          ...this._options.dangerouslyAllowBrowser ? { "anthropic-dangerous-direct-browser-access": "true" } : void 0,
          "anthropic-version": "2023-06-01",
          ...this._options.defaultHeaders
        };
      }
      validateHeaders(headers, customHeaders) {
        if (this.apiKey && headers["x-api-key"]) {
          return;
        }
        if (customHeaders["x-api-key"] === null) {
          return;
        }
        if (this.authToken && headers["authorization"]) {
          return;
        }
        if (customHeaders["authorization"] === null) {
          return;
        }
        throw new Error('Could not resolve authentication method. Expected either apiKey or authToken to be set. Or for one of the "X-Api-Key" or "Authorization" headers to be explicitly omitted');
      }
      authHeaders(opts) {
        const apiKeyAuth = this.apiKeyAuth(opts);
        const bearerAuth = this.bearerAuth(opts);
        if (apiKeyAuth != null && !isEmptyObj(apiKeyAuth)) {
          return apiKeyAuth;
        }
        if (bearerAuth != null && !isEmptyObj(bearerAuth)) {
          return bearerAuth;
        }
        return {};
      }
      apiKeyAuth(opts) {
        if (this.apiKey == null) {
          return {};
        }
        return { "X-Api-Key": this.apiKey };
      }
      bearerAuth(opts) {
        if (this.authToken == null) {
          return {};
        }
        return { Authorization: `Bearer ${this.authToken}` };
      }
    };
    _a = Anthropic;
    Anthropic.Anthropic = _a;
    Anthropic.HUMAN_PROMPT = "\n\nHuman:";
    Anthropic.AI_PROMPT = "\n\nAssistant:";
    Anthropic.DEFAULT_TIMEOUT = 6e5;
    Anthropic.AnthropicError = AnthropicError;
    Anthropic.APIError = APIError;
    Anthropic.APIConnectionError = APIConnectionError;
    Anthropic.APIConnectionTimeoutError = APIConnectionTimeoutError;
    Anthropic.APIUserAbortError = APIUserAbortError;
    Anthropic.NotFoundError = NotFoundError;
    Anthropic.ConflictError = ConflictError;
    Anthropic.RateLimitError = RateLimitError;
    Anthropic.BadRequestError = BadRequestError;
    Anthropic.AuthenticationError = AuthenticationError;
    Anthropic.InternalServerError = InternalServerError;
    Anthropic.PermissionDeniedError = PermissionDeniedError;
    Anthropic.UnprocessableEntityError = UnprocessableEntityError;
    Anthropic.toFile = toFile;
    Anthropic.fileFromPath = fileFromPath;
    Anthropic.Completions = Completions;
    Anthropic.Messages = Messages2;
    Anthropic.Models = Models2;
    Anthropic.ModelInfosPage = ModelInfosPage;
    Anthropic.Beta = Beta;
    ({ HUMAN_PROMPT, AI_PROMPT } = Anthropic);
    sdk_default = Anthropic;
  }
});

// providers/anthropic.ts
function estimateTokenCount(messages) {
  const CHARS_PER_TOKEN = 4;
  const totalChars = messages.reduce((total, msg) => {
    return total + msg.content.length;
  }, 0);
  return Math.ceil(totalChars / CHARS_PER_TOKEN);
}
var MODEL_CONTEXT_WINDOWS, MODEL_OUTPUT_TOKEN_LIMITS, AnthropicProvider;
var init_anthropic = __esm({
  "providers/anthropic.ts"() {
    init_base();
    init_sdk();
    MODEL_CONTEXT_WINDOWS = {
      "claude-3-opus-20240229": 2e5,
      "claude-3-sonnet-20240229": 2e5,
      "claude-3-haiku-20240307": 2e5,
      "claude-3-7-sonnet-20250219": 2e5,
      "claude-3-5-sonnet-20241022": 2e5,
      "claude-3-5-sonnet-20240620": 2e5,
      "claude-3-5-haiku-20241022": 2e5
    };
    MODEL_OUTPUT_TOKEN_LIMITS = {
      "claude-3-7-sonnet-20250219": 64e3,
      "claude-3-5-sonnet-20241022": 8192,
      "claude-3-5-sonnet-20240620": 8192,
      "claude-3-5-haiku-20241022": 8192,
      "claude-3-opus-20240229": 4096,
      "claude-3-sonnet-20240229": 8192,
      // fallback for older sonnet
      "claude-3-haiku-20240307": 4096
      // fallback for older haiku
    };
    AnthropicProvider = class extends BaseProvider {
      constructor(apiKey, model = "claude-3-sonnet-20240229") {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl", "https://api.anthropic.com/v1");
        __publicField(this, "model");
        __publicField(this, "client");
        this.apiKey = apiKey;
        this.model = model;
        this.client = new sdk_default({
          apiKey: this.apiKey,
          dangerouslyAllowBrowser: true
          // Required for browser environments
        });
      }
      /**
       * Get a completion from Anthropic
       * 
       * Sends the conversation to Anthropic and streams back the response
       * using the official SDK's streaming support.
       * 
       * Automatically adjusts max_tokens if the request would exceed the model's context window.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d;
        try {
          const contextWindow = (_a2 = MODEL_CONTEXT_WINDOWS[this.model]) != null ? _a2 : 2e5;
          const outputTokenLimit = MODEL_OUTPUT_TOKEN_LIMITS[this.model];
          const inputTokens = estimateTokenCount(messages);
          let maxTokens = (_b = options.maxTokens) != null ? _b : 1e3;
          if (inputTokens + maxTokens > contextWindow) {
            const adjustedMaxTokens = contextWindow - inputTokens;
            if (adjustedMaxTokens <= 0) {
              throw new ProviderError(
                "invalid_request" /* InvalidRequest */,
                `Input is too long for ${this.model}'s context window. Estimated input tokens: ${inputTokens}, context window: ${contextWindow}`
              );
            }
            console.log(
              `Adjusting max_tokens from ${maxTokens} to ${adjustedMaxTokens} to fit within ${this.model}'s context window`
            );
            maxTokens = adjustedMaxTokens;
          }
          if (outputTokenLimit && maxTokens > outputTokenLimit) {
            console.log(
              `Capping max_tokens from ${maxTokens} to model output limit ${outputTokenLimit} for ${this.model}`
            );
            maxTokens = outputTokenLimit;
          }
          const { systemPrompt, anthropicMessages } = this.formatMessages(messages);
          const requestParams = {
            model: this.model,
            messages: anthropicMessages,
            temperature: (_c = options.temperature) != null ? _c : 0.7,
            max_tokens: maxTokens,
            stream: true
          };
          if (systemPrompt) {
            requestParams.system = systemPrompt;
          }
          const stream = await this.client.messages.create(requestParams);
          try {
            if (stream && typeof stream === "object") {
              if (stream.on && typeof stream.on === "function") {
                await new Promise((resolve, reject) => {
                  stream.on("content_block_delta", (chunk) => {
                    var _a3;
                    if (((_a3 = chunk.delta) == null ? void 0 : _a3.type) === "text_delta" && options.streamCallback) {
                      options.streamCallback(chunk.delta.text);
                    }
                  });
                  stream.on("end", resolve);
                  stream.on("error", reject);
                });
              } else if (Symbol.asyncIterator in stream) {
                for await (const chunk of stream) {
                  if (chunk.type === "content_block_delta" && ((_d = chunk.delta) == null ? void 0 : _d.type) === "text_delta" && options.streamCallback) {
                    options.streamCallback(chunk.delta.text);
                  }
                }
              } else if (options.streamCallback) {
                console.warn("Anthropic response is not a stream, handling as regular response");
                if ("content" in stream && typeof stream.content === "string") {
                  options.streamCallback(stream.content);
                }
              }
            }
          } catch (streamError) {
            console.error("Error processing Anthropic stream:", streamError);
            throw streamError;
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Anthropic stream was aborted");
          } else {
            console.error("Error calling Anthropic:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Anthropic models
       * 
       * Returns the list of supported Claude models.
       * Note: Anthropic doesn't have a models endpoint, so we return known models.
       * This list is based on the models defined in MODEL_CONTEXT_WINDOWS.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          return Object.keys(MODEL_CONTEXT_WINDOWS);
        } catch (error) {
          console.error("Error getting Anthropic models:", error);
          throw error;
        }
      }
      /**
       * Format messages for Anthropic API
       * 
       * Converts from the plugin's Message format to Anthropic's expected format.
       * Handles system messages specially as Anthropic has a different format.
       * 
       * @param messages - Array of messages to format
       * @returns Formatted messages and system prompt for Anthropic API
       */
      formatMessages(messages) {
        const systemMessages = messages.filter((msg) => msg.role === "system");
        const nonSystemMessages = messages.filter((msg) => msg.role !== "system");
        const systemPrompt = systemMessages.length > 0 ? systemMessages.map((msg) => msg.content).join("\n\n") : void 0;
        const anthropicMessages = nonSystemMessages.map((msg) => {
          const role = msg.role === "user" || msg.role === "assistant" ? msg.role : "user";
          return { role, content: msg.content };
        });
        return { systemPrompt, anthropicMessages };
      }
      /**
       * Test connection to Anthropic
       * 
       * Verifies the API key works by attempting a simple completion.
       * 
       * @returns Test results including success/failure
       */
      async testConnection() {
        try {
          await this.client.messages.create({
            model: this.model,
            messages: [{ role: "user", content: "Hi" }],
            max_tokens: 1
          });
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: "Successfully connected to Anthropic!",
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/openai.ts
var OpenAIProvider;
var init_openai = __esm({
  "providers/openai.ts"() {
    init_base();
    OpenAIProvider = class extends BaseProvider {
      constructor(apiKey, model = "gpt-4") {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl", "https://api.openai.com/v1");
        __publicField(this, "model");
        this.apiKey = apiKey;
        this.model = model;
      }
      /**
       * Get a completion from OpenAI
       * 
       * Sends the conversation to OpenAI and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d, _e, _f;
        try {
          const response = await fetch(`${this.baseUrl}/chat/completions`, {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${this.apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: this.model,
              messages,
              temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
              max_tokens: (_b = options.maxTokens) != null ? _b : 1e3,
              stream: true
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const reader = (_d = response.body) == null ? void 0 : _d.getReader();
          const decoder = new TextDecoder("utf-8");
          let buffer = "";
          while (true) {
            const { done, value } = await (reader == null ? void 0 : reader.read()) || { done: true, value: void 0 };
            if (done) break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split("\n");
            buffer = lines.pop() || "";
            for (const line of lines) {
              if (line.startsWith("data: ") && line !== "data: [DONE]") {
                try {
                  const data = JSON.parse(line.slice(6));
                  const content = (_f = (_e = data.choices[0]) == null ? void 0 : _e.delta) == null ? void 0 : _f.content;
                  if (content && options.streamCallback) {
                    options.streamCallback(content);
                  }
                } catch (e) {
                  console.warn("Error parsing OpenAI response chunk:", e);
                }
              }
            }
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("OpenAI stream was aborted");
          } else {
            console.error("Error calling OpenAI:", error);
            throw error;
          }
        }
      }
      /**
       * Get available OpenAI models
       * 
       * Fetches the list of models from OpenAI's API.
       * Filters to only include chat models (GPT-3.5, GPT-4, etc.)
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          const response = await fetch(`${this.baseUrl}/models`, {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${this.apiKey}`,
              "Content-Type": "application/json"
            }
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return data.data.map((model) => model.id).filter((id) => id.startsWith("gpt-"));
        } catch (error) {
          console.error("Error fetching OpenAI models:", error);
          throw error;
        }
      }
      /**
       * Test connection to OpenAI
       * 
       * Verifies the API key works by attempting to list models.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: `Successfully connected to OpenAI! Found ${models.length} available models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/gemini.ts
var GeminiProvider;
var init_gemini = __esm({
  "providers/gemini.ts"() {
    init_base();
    GeminiProvider = class extends BaseProvider {
      constructor(apiKey, model = "gemini-pro") {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl", "https://generativelanguage.googleapis.com/v1");
        __publicField(this, "model");
        this.apiKey = apiKey;
        this.model = model;
      }
      /**
       * Get a completion from Google Gemini
       * 
       * Sends the conversation to Gemini and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d, _e, _f, _g, _h;
        try {
          const formattedMessages = this.formatMessages(messages);
          const url = `${this.baseUrl}/models/${this.model}:generateContent?key=${this.apiKey}`;
          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              contents: formattedMessages,
              generationConfig: {
                temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
                maxOutputTokens: (_b = options.maxTokens) != null ? _b : 1e3
              }
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          console.log("Gemini response:", JSON.stringify(data));
          const text = (_h = (_g = (_f = (_e = (_d = data.candidates) == null ? void 0 : _d[0]) == null ? void 0 : _e.content) == null ? void 0 : _f.parts) == null ? void 0 : _g[0]) == null ? void 0 : _h.text;
          if (text && options.streamCallback) {
            options.streamCallback(text);
          } else {
            console.warn("No text found in Gemini response:", JSON.stringify(data));
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Gemini request was aborted");
          } else {
            console.error("Error calling Gemini:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Gemini models
       * 
       * Fetches the list of available models from Google's API.
       * Filters to only include Gemini models.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          const response = await fetch(`${this.baseUrl}/models?key=${this.apiKey}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json"
            }
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return data.models.map((model) => model.name.split("/").pop()).filter((id) => id.startsWith("gemini-"));
        } catch (error) {
          console.error("Error fetching Gemini models:", error);
          throw error;
        }
      }
      /**
       * Test connection to Gemini
       * 
       * Verifies the API key works by attempting to list models.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: `Successfully connected to Google Gemini! Found ${models.length} available models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
      /**
       * Format messages for Gemini API
       * 
       * Converts from the plugin's Message format to Gemini's expected format.
       * 
       * @param messages - Array of messages to format
       * @returns Formatted messages for Gemini API
       */
      formatMessages(messages) {
        const geminiMessages = [];
        const systemMessages = messages.filter((msg) => msg.role === "system");
        const nonSystemMessages = messages.filter((msg) => msg.role !== "system");
        for (const message of systemMessages) {
          geminiMessages.push({
            role: "user",
            parts: [{ text: message.content }]
          });
        }
        for (const message of nonSystemMessages) {
          const role = message.role === "assistant" ? "model" : "user";
          geminiMessages.push({
            role,
            parts: [{ text: message.content }]
          });
        }
        return geminiMessages;
      }
    };
  }
});

// providers/ollama.ts
var OllamaProvider;
var init_ollama = __esm({
  "providers/ollama.ts"() {
    init_base();
    OllamaProvider = class extends BaseProvider {
      constructor(serverUrl = "http://localhost:11434", model = "llama2") {
        super();
        __publicField(this, "apiKey", "");
        // Not used for Ollama
        __publicField(this, "baseUrl");
        __publicField(this, "model");
        this.baseUrl = serverUrl.replace(/\/$/, "");
        this.model = model;
      }
      /**
       * Convert messages to Ollama format
       * 
       * @param messages - Standard message format
       * @returns Prompt string in Ollama format
       */
      convertToOllamaFormat(messages) {
        return messages.map((msg) => {
          if (msg.role === "system") {
            return `System: ${msg.content}

`;
          }
          return `${msg.role === "user" ? "Human" : "Assistant"}: ${msg.content}

`;
        }).join("") + "Assistant:";
      }
      /**
       * Get a completion from Ollama
       * 
       * Sends the conversation to the local Ollama server and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d;
        try {
          const prompt = this.convertToOllamaFormat(messages);
          const response = await fetch(`${this.baseUrl}/api/generate`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: this.model,
              prompt,
              stream: true,
              options: {
                temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
                num_predict: (_b = options.maxTokens) != null ? _b : 1e3
              }
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const reader = (_d = response.body) == null ? void 0 : _d.getReader();
          const decoder = new TextDecoder("utf-8");
          let buffer = "";
          while (true) {
            const { done, value } = await (reader == null ? void 0 : reader.read()) || { done: true, value: void 0 };
            if (done) break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split("\n");
            buffer = lines.pop() || "";
            for (const line of lines) {
              if (line.trim()) {
                try {
                  const data = JSON.parse(line);
                  if (data.response && options.streamCallback) {
                    options.streamCallback(data.response);
                  }
                } catch (e) {
                  console.warn("Error parsing Ollama response chunk:", e);
                }
              }
            }
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Ollama stream was aborted");
          } else {
            console.error("Error calling Ollama:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Ollama models
       * 
       * Fetches the list of models installed on the local Ollama server.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        var _a2;
        try {
          const response = await fetch(`${this.baseUrl}/api/tags`);
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return ((_a2 = data.models) == null ? void 0 : _a2.map((model) => model.name)) || [];
        } catch (error) {
          console.error("Error fetching Ollama models:", error);
          throw error;
        }
      }
      /**
       * Test connection to Ollama
       * 
       * Verifies the Ollama server is running and accessible.
       * Also checks if any models are installed.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          if (models.length === 0) {
            return {
              success: false,
              message: 'Connected to Ollama server, but no models are installed. Use "ollama pull model-name" to install models.',
              models: []
            };
          }
          return {
            success: true,
            message: `Successfully connected to Ollama! Found ${models.length} installed models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/index.ts
function createProvider(settings) {
  switch (settings.provider) {
    case "openai":
      return new OpenAIProvider(
        settings.openaiSettings.apiKey,
        settings.openaiSettings.model
      );
    case "anthropic":
      return new AnthropicProvider(
        settings.anthropicSettings.apiKey,
        settings.anthropicSettings.model
      );
    case "gemini":
      return new GeminiProvider(
        settings.geminiSettings.apiKey,
        settings.geminiSettings.model
      );
    case "ollama":
      return new OllamaProvider(
        settings.ollamaSettings.serverUrl,
        settings.ollamaSettings.model
      );
    default:
      throw new Error(`Invalid provider type: ${settings.provider}`);
  }
}
var init_providers = __esm({
  "providers/index.ts"() {
    init_base();
    init_anthropic();
    init_openai();
    init_gemini();
    init_ollama();
  }
});

// node_modules/js-yaml/dist/js-yaml.mjs
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark) return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
    // relative position
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer) return null;
  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent !== "number") options.indent = 1;
  if (typeof options.linesBefore !== "number") options.linesBefore = 3;
  if (typeof options.linesAfter !== "number") options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max) return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max) return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (ch !== "0" && ch !== "1") return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_") return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_") continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_") return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-") sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0") return 0;
  if (ch === "0") {
    if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x") return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o") return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
function resolveYamlFloat(data) {
  if (data === null) return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-") delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
function resolveYamlBinary(data) {
  if (data === null) return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64) continue;
    if (code < 0) return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]") return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }
    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
function resolveYamlPairs(data) {
  if (data === null) return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]") return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null) return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
function resolveYamlSet(data) {
  if (data === null) return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33) return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38) return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch)) break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0) readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null) return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n") result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(
      string,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ") return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "") _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "") pairBuffer += ", ";
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024) pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true)) return state.dump + "\n";
  return "";
}
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var isNothing_1, isObject_1, toArray_1, repeat_1, isNegativeZero_1, extend_1, common, exception, snippet, TYPE_CONSTRUCTOR_OPTIONS, YAML_NODE_KINDS, type, schema, str, seq, map, failsafe, _null, bool, int, YAML_FLOAT_PATTERN, SCIENTIFIC_WITHOUT_DOT, float, json, core, YAML_DATE_REGEXP, YAML_TIMESTAMP_REGEXP, timestamp, merge, BASE64_MAP, binary, _hasOwnProperty$3, _toString$2, omap, _toString$1, pairs, _hasOwnProperty$2, set, _default, _hasOwnProperty$1, CONTEXT_FLOW_IN, CONTEXT_FLOW_OUT, CONTEXT_BLOCK_IN, CONTEXT_BLOCK_OUT, CHOMPING_CLIP, CHOMPING_STRIP, CHOMPING_KEEP, PATTERN_NON_PRINTABLE, PATTERN_NON_ASCII_LINE_BREAKS, PATTERN_FLOW_INDICATORS, PATTERN_TAG_HANDLE, PATTERN_TAG_URI, simpleEscapeCheck, simpleEscapeMap, i, directiveHandlers, loadAll_1, load_1, loader, _toString, _hasOwnProperty, CHAR_BOM, CHAR_TAB, CHAR_LINE_FEED, CHAR_CARRIAGE_RETURN, CHAR_SPACE, CHAR_EXCLAMATION, CHAR_DOUBLE_QUOTE, CHAR_SHARP, CHAR_PERCENT, CHAR_AMPERSAND, CHAR_SINGLE_QUOTE, CHAR_ASTERISK, CHAR_COMMA, CHAR_MINUS, CHAR_COLON, CHAR_EQUALS, CHAR_GREATER_THAN, CHAR_QUESTION, CHAR_COMMERCIAL_AT, CHAR_LEFT_SQUARE_BRACKET, CHAR_RIGHT_SQUARE_BRACKET, CHAR_GRAVE_ACCENT, CHAR_LEFT_CURLY_BRACKET, CHAR_VERTICAL_LINE, CHAR_RIGHT_CURLY_BRACKET, ESCAPE_SEQUENCES, DEPRECATED_BOOLEANS_SYNTAX, DEPRECATED_BASE60_SYNTAX, QUOTING_TYPE_SINGLE, QUOTING_TYPE_DOUBLE, STYLE_PLAIN, STYLE_SINGLE, STYLE_LITERAL, STYLE_FOLDED, STYLE_DOUBLE, dump_1, dumper, load, loadAll, dump, safeLoad, safeLoadAll, safeDump;
var init_js_yaml = __esm({
  "node_modules/js-yaml/dist/js-yaml.mjs"() {
    isNothing_1 = isNothing;
    isObject_1 = isObject;
    toArray_1 = toArray;
    repeat_1 = repeat;
    isNegativeZero_1 = isNegativeZero;
    extend_1 = extend;
    common = {
      isNothing: isNothing_1,
      isObject: isObject_1,
      toArray: toArray_1,
      repeat: repeat_1,
      isNegativeZero: isNegativeZero_1,
      extend: extend_1
    };
    YAMLException$1.prototype = Object.create(Error.prototype);
    YAMLException$1.prototype.constructor = YAMLException$1;
    YAMLException$1.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    exception = YAMLException$1;
    snippet = makeSnippet;
    TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    type = Type$1;
    Schema$1.prototype.extend = function extend2(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit) implicit = implicit.concat(definition.implicit);
        if (definition.explicit) explicit = explicit.concat(definition.explicit);
      } else {
        throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type$1.loadKind && type$1.loadKind !== "scalar") {
          throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type$1.multi) {
          throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema$1.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    schema = Schema$1;
    str = new type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
    seq = new type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
    map = new type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
    failsafe = new schema({
      explicit: [
        str,
        seq,
        map
      ]
    });
    _null = new type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
    bool = new type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
    int = new type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
    YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    float = new type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
    json = failsafe.extend({
      implicit: [
        _null,
        bool,
        int,
        float
      ]
    });
    core = json;
    YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    timestamp = new type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
    merge = new type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
    BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    binary = new type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
    _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
    _toString$2 = Object.prototype.toString;
    omap = new type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
    _toString$1 = Object.prototype.toString;
    pairs = new type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
    _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    set = new type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
    _default = core.extend({
      implicit: [
        timestamp,
        merge
      ],
      explicit: [
        binary,
        omap,
        pairs,
        set
      ]
    });
    _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    CONTEXT_FLOW_IN = 1;
    CONTEXT_FLOW_OUT = 2;
    CONTEXT_BLOCK_IN = 3;
    CONTEXT_BLOCK_OUT = 4;
    CHOMPING_CLIP = 1;
    CHOMPING_STRIP = 2;
    CHOMPING_KEEP = 3;
    PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    simpleEscapeCheck = new Array(256);
    simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty$1.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    loadAll_1 = loadAll$1;
    load_1 = load$1;
    loader = {
      loadAll: loadAll_1,
      load: load_1
    };
    _toString = Object.prototype.toString;
    _hasOwnProperty = Object.prototype.hasOwnProperty;
    CHAR_BOM = 65279;
    CHAR_TAB = 9;
    CHAR_LINE_FEED = 10;
    CHAR_CARRIAGE_RETURN = 13;
    CHAR_SPACE = 32;
    CHAR_EXCLAMATION = 33;
    CHAR_DOUBLE_QUOTE = 34;
    CHAR_SHARP = 35;
    CHAR_PERCENT = 37;
    CHAR_AMPERSAND = 38;
    CHAR_SINGLE_QUOTE = 39;
    CHAR_ASTERISK = 42;
    CHAR_COMMA = 44;
    CHAR_MINUS = 45;
    CHAR_COLON = 58;
    CHAR_EQUALS = 61;
    CHAR_GREATER_THAN = 62;
    CHAR_QUESTION = 63;
    CHAR_COMMERCIAL_AT = 64;
    CHAR_LEFT_SQUARE_BRACKET = 91;
    CHAR_RIGHT_SQUARE_BRACKET = 93;
    CHAR_GRAVE_ACCENT = 96;
    CHAR_LEFT_CURLY_BRACKET = 123;
    CHAR_VERTICAL_LINE = 124;
    CHAR_RIGHT_CURLY_BRACKET = 125;
    ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    QUOTING_TYPE_SINGLE = 1;
    QUOTING_TYPE_DOUBLE = 2;
    STYLE_PLAIN = 1;
    STYLE_SINGLE = 2;
    STYLE_LITERAL = 3;
    STYLE_FOLDED = 4;
    STYLE_DOUBLE = 5;
    dump_1 = dump$1;
    dumper = {
      dump: dump_1
    };
    load = loader.load;
    loadAll = loader.loadAll;
    dump = dumper.dump;
    safeLoad = renamed("safeLoad", "load");
    safeLoadAll = renamed("safeLoadAll", "loadAll");
    safeDump = renamed("safeDump", "dump");
  }
});

// src/filechanger.ts
var filechanger_exports = {};
__export(filechanger_exports, {
  generateNoteTitle: () => generateNoteTitle,
  generateYamlAttribute: () => generateYamlAttribute,
  upsertYamlField: () => upsertYamlField
});
function generateTableOfContents(noteContent) {
  const headerLines = noteContent.split("\n").filter((line) => /^#{1,6}\s+.+/.test(line));
  if (headerLines.length === 0) return "";
  return headerLines.map((line) => {
    const match = line.match(/^(#{1,6})\s+(.+)/);
    if (!match) return "";
    const level = match[1].length;
    const title = match[2].trim();
    return `${"  ".repeat(level - 1)}- ${title}`;
  }).join("\n");
}
function debug2(...args) {
  if (DEBUG) {
    console.log("[DEBUG]", ...args);
  }
}
async function generateNoteTitle(app, settings, processMessages2) {
  var _a2, _b;
  debug2("Starting generateNoteTitle");
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian12.Notice("No active note found.");
    return;
  }
  let noteContent = await app.vault.cachedRead(activeFile);
  noteContent = noteContent.slice(0, 15e3);
  const toc = generateTableOfContents(noteContent);
  const prompt = DEFAULT_TITLE_PROMPT;
  const userContent = (toc && toc.trim().length > 0 ? "Table of Contents:\n" + toc + "\n\n" : "") + noteContent;
  try {
    debug2("Provider:", settings.provider);
    const provider = createProvider(settings);
    const messages = [
      { role: "system", content: prompt },
      { role: "user", content: userContent }
    ];
    debug2("Original messages:", JSON.stringify(messages));
    const originalEnableContextNotes = settings.enableContextNotes;
    debug2("Original enableContextNotes:", originalEnableContextNotes);
    settings.enableContextNotes = false;
    try {
      const processedMessages = await processMessages2(messages);
      debug2("Processed messages:", JSON.stringify(processedMessages));
      settings.enableContextNotes = originalEnableContextNotes;
      if (!processedMessages || processedMessages.length === 0) {
        debug2("No processed messages!");
        new import_obsidian12.Notice("No valid messages to send to the model. Please check your note content.");
        return;
      }
      debug2("Calling provider.getCompletion");
      let resultBuffer = "";
      await provider.getCompletion(processedMessages, {
        temperature: 0,
        streamCallback: (chunk) => {
          resultBuffer += chunk;
        }
      });
      debug2("Result from provider (buffered):", resultBuffer);
      let title = resultBuffer.trim();
      debug2("Extracted title before sanitization:", title);
      title = title.replace(/[\\/:]/g, "").trim();
      debug2("Sanitized title:", title);
      if (title && typeof title === "string" && title.length > 0) {
        const outputMode = (_a2 = settings.titleOutputMode) != null ? _a2 : "clipboard";
        debug2("Output mode:", outputMode);
        if (outputMode === "replace-filename") {
          const file = app.workspace.getActiveFile();
          if (file) {
            const ext = file.extension ? "." + file.extension : "";
            const sanitized = title;
            const parentPath = file.parent ? file.parent.path : "";
            const newPath = parentPath ? parentPath + "/" + sanitized + ext : sanitized + ext;
            if (file.path !== newPath) {
              await app.fileManager.renameFile(file, newPath);
              new import_obsidian12.Notice(`Note renamed to: ${sanitized}${ext}`);
            } else {
              new import_obsidian12.Notice(`Note title is already: ${sanitized}${ext}`);
            }
          }
        } else if (outputMode === "metadata") {
          const file = app.workspace.getActiveFile();
          if (file) {
            await upsertYamlField(app, file, "title", title);
            new import_obsidian12.Notice(`Inserted title into metadata: ${title}`);
          }
        } else {
          try {
            await navigator.clipboard.writeText(title);
            new import_obsidian12.Notice(`Generated title (copied): ${title}`);
          } catch (e) {
            new import_obsidian12.Notice(`Generated title: ${title}`);
          }
        }
      } else {
        debug2("No title generated after sanitization.");
        new import_obsidian12.Notice("No title generated.");
      }
    } catch (processError) {
      debug2("Error in processMessages or provider.getCompletion:", processError);
      settings.enableContextNotes = originalEnableContextNotes;
      throw processError;
    }
  } catch (err) {
    new import_obsidian12.Notice("Error generating title: " + ((_b = err == null ? void 0 : err.message) != null ? _b : err));
  }
}
async function generateYamlAttribute(app, settings, processMessages2, attributeName, prompt, outputMode = "metadata") {
  debug2(`Starting generateYamlAttribute for ${attributeName}`);
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian12.Notice("No active note found.");
    return;
  }
  let noteContent = await app.vault.cachedRead(activeFile);
  noteContent = noteContent.slice(0, 15e3);
  const messages = [
    { role: "system", content: DEFAULT_YAML_SYSTEM_MESSAGE },
    { role: "user", content: prompt + "\n\n" + noteContent }
  ];
  debug2("Original messages:", JSON.stringify(messages));
  const originalEnableContextNotes = settings.enableContextNotes;
  debug2("Original enableContextNotes:", originalEnableContextNotes);
  settings.enableContextNotes = false;
  try {
    const processedMessages = await processMessages2(messages);
    debug2("Processed messages:", JSON.stringify(processedMessages));
    settings.enableContextNotes = originalEnableContextNotes;
    if (!processedMessages || processedMessages.length === 0) {
      debug2("No processed messages!");
      new import_obsidian12.Notice("No valid messages to send to the model. Please check your note content.");
      return;
    }
    debug2("Calling provider.getCompletion");
    const provider = createProvider(settings);
    let resultBuffer = "";
    await provider.getCompletion(processedMessages, {
      temperature: 0,
      streamCallback: (chunk) => {
        resultBuffer += chunk;
      }
    });
    debug2("Result from provider (buffered):", resultBuffer);
    let value = resultBuffer.trim();
    debug2("Extracted value before sanitization:", value);
    value = value.replace(/[\\/]/g, "").trim();
    debug2("Sanitized value:", value);
    if (value && typeof value === "string" && value.length > 0) {
      debug2("Output mode:", outputMode);
      if (outputMode === "metadata") {
        await upsertYamlField(app, activeFile, attributeName, value);
        new import_obsidian12.Notice(`Inserted ${attributeName} into metadata: ${value}`);
      } else {
        try {
          await navigator.clipboard.writeText(value);
          new import_obsidian12.Notice(`Generated ${attributeName} (copied): ${value}`);
        } catch (e) {
          new import_obsidian12.Notice(`Generated ${attributeName}: ${value}`);
        }
      }
    } else {
      debug2(`No value generated for ${attributeName} after sanitization.`);
      new import_obsidian12.Notice(`No value generated for ${attributeName}.`);
    }
  } catch (processError) {
    debug2("Error in processMessages or provider.getCompletion:", processError);
    settings.enableContextNotes = originalEnableContextNotes;
    throw processError;
  }
}
async function upsertYamlField(app, file, field, value) {
  let content = await app.vault.read(file);
  let newContent = content;
  const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
  const match = content.match(frontmatterRegex);
  if (match) {
    let yamlObj = {};
    try {
      yamlObj = load(match[1]) || {};
    } catch (e) {
      yamlObj = {};
    }
    yamlObj[field] = value;
    const newYaml = dump(yamlObj, { lineWidth: -1 }).trim();
    newContent = content.replace(frontmatterRegex, `---
${newYaml}
---`);
  } else {
    const newYaml = dump({ [field]: value }, { lineWidth: -1 }).trim();
    newContent = `---
${newYaml}
---
` + content;
  }
  await app.vault.modify(file, newContent);
}
var import_obsidian12, DEBUG;
var init_filechanger = __esm({
  "src/filechanger.ts"() {
    import_obsidian12 = require("obsidian");
    init_providers();
    init_prompts();
    init_js_yaml();
    DEBUG = true;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian13 = require("obsidian");
init_types();
init_providers();

// src/settings.ts
var import_obsidian = require("obsidian");
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  /**
   * Display the settings tab
   * 
   * Shows only the auto-open setting here since all other settings
   * are managed in the model settings view for better organization.
   */
  display() {
    var _a2;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "AI Assistant Settings" });
    containerEl.createEl("h3", { text: "API Keys" });
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Enter your OpenAI API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.openaiSettings.apiKey).onChange(async (value) => {
      this.plugin.settings.openaiSettings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Anthropic API Key").setDesc("Enter your Anthropic API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.anthropicSettings.apiKey).onChange(async (value) => {
      this.plugin.settings.anthropicSettings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Google API Key").setDesc("Enter your Google API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.geminiSettings.apiKey).onChange(async (value) => {
      this.plugin.settings.geminiSettings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Ollama Server URL").setDesc("Enter your Ollama server URL (default: http://localhost:11434)").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.ollamaSettings.serverUrl).onChange(async (value) => {
      this.plugin.settings.ollamaSettings.serverUrl = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Model Settings" });
    new import_obsidian.Setting(containerEl).setName("Auto-open Model Settings").setDesc("Automatically open model settings when Obsidian starts").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoOpenModelSettings).onChange(async (value) => {
      this.plugin.settings.autoOpenModelSettings = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Open Model Settings").setDesc("Open the model settings view").addButton((button) => button.setButtonText("Open").onClick(() => {
      this.plugin.activateView();
    }));
    new import_obsidian.Setting(containerEl).setName("Chat Separator").setDesc("The string used to separate chat messages.").addText((text) => {
      var _a3;
      text.setPlaceholder("----").setValue((_a3 = this.plugin.settings.chatSeparator) != null ? _a3 : "").onChange(async (value) => {
        this.plugin.settings.chatSeparator = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Chat Start String").setDesc("The string that indicates where to start taking the note for context.").addText((text) => {
      var _a3;
      text.setPlaceholder("===START===").setValue((_a3 = this.plugin.settings.chatStartString) != null ? _a3 : "").onChange(async (value) => {
        this.plugin.settings.chatStartString = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Chat End String").setDesc("The string that indicates where to end taking the note for context.").addText((text) => {
      var _a3;
      text.setPlaceholder("===END===").setValue((_a3 = this.plugin.settings.chatEndString) != null ? _a3 : "").onChange(async (value) => {
        this.plugin.settings.chatEndString = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Title Prompt").setDesc("The prompt used for generating note titles.").addTextArea((text) => {
      text.setPlaceholder("You are a title generator...").setValue(this.plugin.settings.titlePrompt).onChange(async (value) => {
        this.plugin.settings.titlePrompt = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Reset All Settings to Default").setDesc("Reset all plugin settings (except API keys) to their original default values.").addButton((button) => button.setButtonText("Reset").onClick(async () => {
      const { DEFAULT_TITLE_PROMPT: DEFAULT_TITLE_PROMPT2 } = await Promise.resolve().then(() => (init_prompts(), prompts_exports));
      const { DEFAULT_SETTINGS: DEFAULT_SETTINGS2 } = await Promise.resolve().then(() => (init_types(), types_exports));
      const openaiKey = this.plugin.settings.openaiSettings.apiKey;
      const anthropicKey = this.plugin.settings.anthropicSettings.apiKey;
      const geminiKey = this.plugin.settings.geminiSettings.apiKey;
      this.plugin.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS2));
      this.plugin.settings.openaiSettings.apiKey = openaiKey;
      this.plugin.settings.anthropicSettings.apiKey = anthropicKey;
      this.plugin.settings.geminiSettings.apiKey = geminiKey;
      this.plugin.settings.titlePrompt = DEFAULT_TITLE_PROMPT2;
      await this.plugin.saveSettings();
      this.display();
      new import_obsidian.Notice("All settings (except API keys) reset to default.");
    }));
    new import_obsidian.Setting(containerEl).setName("Title Output Mode").setDesc("Choose what to do with the generated note title.").addDropdown((drop) => {
      var _a3;
      drop.addOption("clipboard", "Copy to clipboard");
      drop.addOption("replace-filename", "Replace note filename");
      drop.addOption("metadata", "Insert into metadata");
      drop.setValue((_a3 = this.plugin.settings.titleOutputMode) != null ? _a3 : "clipboard");
      drop.onChange(async (value) => {
        this.plugin.settings.titleOutputMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Summary Output Mode").setDesc("Choose what to do with the generated note summary.").addDropdown((drop) => {
      var _a3;
      drop.addOption("clipboard", "Copy to clipboard");
      drop.addOption("metadata", "Insert into metadata");
      drop.setValue((_a3 = this.plugin.settings.summaryOutputMode) != null ? _a3 : "clipboard");
      drop.onChange(async (value) => {
        this.plugin.settings.summaryOutputMode = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Expand Linked Notes Recursively").setDesc("If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).").addToggle((toggle) => {
      var _a3;
      return toggle.setValue((_a3 = this.plugin.settings.expandLinkedNotesRecursively) != null ? _a3 : false).onChange(async (value) => {
        this.plugin.settings.expandLinkedNotesRecursively = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    if (this.plugin.settings.expandLinkedNotesRecursively) {
      new import_obsidian.Setting(containerEl).setName("Max Link Expansion Depth").setDesc("Maximum depth for recursively expanding linked notes (1-3).").addSlider((slider) => {
        var _a3;
        slider.setLimits(1, 3, 1).setValue((_a3 = this.plugin.settings.maxLinkExpansionDepth) != null ? _a3 : 2).setDynamicTooltip().onChange(async (value) => {
          this.plugin.settings.maxLinkExpansionDepth = value;
          await this.plugin.saveSettings();
        });
      });
    }
    new import_obsidian.Setting(containerEl).setName("Chat Note Folder").setDesc("Folder to save exported chat notes (relative to vault root, leave blank for root)").addText((text) => {
      var _a3;
      text.setPlaceholder("e.g. AI Chats").setValue((_a3 = this.plugin.settings.chatNoteFolder) != null ? _a3 : "").onChange(async (value) => {
        this.plugin.settings.chatNoteFolder = value.trim();
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "YAML Attribute Generators" });
    const yamlGenDesc = containerEl.createEl("div", { text: "Configure custom YAML attribute generators. Each entry will create a command to generate and insert/update a YAML field in your notes." });
    yamlGenDesc.style.marginBottom = "1em";
    const yamlGens = (_a2 = this.plugin.settings.yamlAttributeGenerators) != null ? _a2 : [];
    yamlGens.forEach((gen, idx) => {
      const autoCommandName = gen.attributeName ? `Generate YAML: ${gen.attributeName}` : `YAML Generator #${idx + 1}`;
      const setting = new import_obsidian.Setting(containerEl).setName(autoCommandName).setDesc(`YAML field: ${gen.attributeName}`).addText((text) => text.setPlaceholder("YAML Attribute Name").setValue(gen.attributeName).onChange(async (value) => {
        if (this.plugin.settings.yamlAttributeGenerators) {
          this.plugin.settings.yamlAttributeGenerators[idx].attributeName = value;
          this.plugin.settings.yamlAttributeGenerators[idx].commandName = value ? `Generate YAML: ${value}` : "";
          await this.plugin.saveSettings();
          this.display();
        }
      })).addTextArea((text) => text.setPlaceholder("Prompt for LLM").setValue(gen.prompt).onChange(async (value) => {
        if (this.plugin.settings.yamlAttributeGenerators) {
          this.plugin.settings.yamlAttributeGenerators[idx].prompt = value;
          await this.plugin.saveSettings();
        }
      })).addDropdown((drop) => {
        drop.addOption("clipboard", "Copy to clipboard");
        drop.addOption("metadata", "Insert into metadata");
        drop.setValue(gen.outputMode);
        drop.onChange(async (value) => {
          if (this.plugin.settings.yamlAttributeGenerators) {
            this.plugin.settings.yamlAttributeGenerators[idx].outputMode = value;
            await this.plugin.saveSettings();
          }
        });
      }).addExtraButton((btn) => {
        btn.setIcon("cross").setTooltip("Delete").onClick(async () => {
          if (this.plugin.settings.yamlAttributeGenerators) {
            this.plugin.settings.yamlAttributeGenerators.splice(idx, 1);
            await this.plugin.saveSettings();
            this.display();
          }
        });
      });
    });
    new import_obsidian.Setting(containerEl).addButton((btn) => {
      btn.setButtonText("Add YAML Attribute Generator").setCta().onClick(async () => {
        if (!this.plugin.settings.yamlAttributeGenerators) this.plugin.settings.yamlAttributeGenerators = [];
        this.plugin.settings.yamlAttributeGenerators.push({
          attributeName: "",
          prompt: "",
          outputMode: "metadata",
          commandName: "New YAML Generator"
        });
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};

// src/components/chat.ts
var import_obsidian9 = require("obsidian");
init_providers();

// src/components/chat/ChatHistoryManager.ts
var import_obsidian2 = require("obsidian");
var ChatHistoryManager = class {
  constructor(vault, pluginId, historyFilePath) {
    __publicField(this, "vault");
    __publicField(this, "historyFilePath");
    __publicField(this, "history", []);
    __publicField(this, "isLoaded", false);
    this.vault = vault;
    let effectivePluginId = pluginId;
    if (!pluginId) {
      console.error("CRITICAL: ChatHistoryManager instantiated without pluginId! Using placeholder. This will likely lead to incorrect file paths.");
      effectivePluginId = "unknown-plugin-id-error";
    }
    const fPath = historyFilePath || "chat-history.json";
    this.historyFilePath = (0, import_obsidian2.normalizePath)(`.obsidian/plugins/${effectivePluginId}/${fPath}`);
    console.log("[ChatHistoryManager] Using history file path:", this.historyFilePath);
    if (typeof window !== "undefined" && window.Notice) {
    }
  }
  async ensureDirectoryExists() {
    const dirPath = this.historyFilePath.substring(0, this.historyFilePath.lastIndexOf("/"));
    if (!dirPath) return;
    try {
      const abstractFile = this.vault.getAbstractFileByPath(dirPath);
      if (abstractFile === null) {
        await this.vault.createFolder(dirPath);
      } else if (!(abstractFile instanceof import_obsidian2.TFolder)) {
        console.error(`Path ${dirPath} exists but is not a folder.`);
        throw new Error(`Path ${dirPath} exists but is not a folder.`);
      }
    } catch (e) {
      if (e.message && e.message.toLowerCase().includes("folder already exists")) {
        return;
      }
      console.error(`Failed to ensure directory ${dirPath} exists:`, e);
      throw e;
    }
  }
  async loadHistory() {
    try {
      const exists = await this.vault.adapter.exists(this.historyFilePath);
      if (exists) {
        const data = await this.vault.adapter.read(this.historyFilePath);
        try {
          this.history = JSON.parse(data);
        } catch (parseError) {
          console.error("Failed to parse chat history:", parseError);
          this.history = [];
        }
      } else {
        this.history = [];
      }
    } catch (e) {
      console.error("Failed to load chat history:", e);
      this.history = [];
    }
    return this.history;
  }
  async addMessage(message) {
    const currentHistory = await this.loadHistory();
    currentHistory.push(message);
    this.history = currentHistory;
    await this.saveHistory();
  }
  async getHistory() {
    return await this.loadHistory();
  }
  async clearHistory() {
    this.history = [];
    await this.saveHistory();
  }
  async deleteMessage(timestamp2, sender, content) {
    await this.loadHistory();
    const index = this.history.findIndex(
      (msg) => msg.timestamp === timestamp2 && msg.sender === sender && msg.content === content
    );
    if (index !== -1) {
      this.history.splice(index, 1);
      await this.saveHistory();
    }
  }
  async updateMessage(timestamp2, sender, oldContent, newContent) {
    await this.loadHistory();
    const message = this.history.find(
      (msg) => msg.timestamp === timestamp2 && msg.sender === sender && msg.content === oldContent
    );
    if (message) {
      message.content = newContent;
      await this.saveHistory();
    } else {
      console.warn("ChatHistoryManager: updateMessage did not find a matching message to update.", { timestamp: timestamp2, sender, oldContent });
    }
  }
  async saveHistory() {
    try {
      await this.ensureDirectoryExists();
      const data = JSON.stringify(this.history, null, 2);
      const abstractTarget = this.vault.getAbstractFileByPath(this.historyFilePath);
      if (abstractTarget instanceof import_obsidian2.TFolder) {
        throw new Error(`Path ${this.historyFilePath} is a directory, not a file.`);
      }
      await this.vault.adapter.write(this.historyFilePath, data);
      if (!abstractTarget || !(abstractTarget instanceof import_obsidian2.TFile)) {
        await this.vault.adapter.exists(this.historyFilePath);
      }
    } catch (e) {
      console.error(`Failed to save history to ${this.historyFilePath}:`, e);
      throw e;
    }
  }
};

// src/components/chat/SettingsModal.ts
var import_obsidian3 = require("obsidian");
init_providers();
var SettingsModal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    __publicField(this, "plugin");
    this.plugin = plugin;
    this.titleEl.setText("AI Model Settings");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("ai-settings-modal");
    contentEl.createEl("h2", { text: "AI Model Settings" });
    contentEl.createEl("hr");
    new import_obsidian3.Setting(contentEl).setName("System Message").setDesc("Set the system message for the AI").addTextArea((text) => text.setPlaceholder("You are a helpful assistant.").setValue(this.plugin.settings.systemMessage).onChange(async (value) => {
      this.plugin.settings.systemMessage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(contentEl).setName("Enable Streaming").setDesc("Enable or disable streaming for completions").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableStreaming).onChange(async (value) => {
      this.plugin.settings.enableStreaming = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(contentEl).setName("Temperature").setDesc("Set the randomness of the model's output (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.temperature = value;
      await this.plugin.saveSettings();
    }));
    contentEl.createEl("hr");
    contentEl.createEl("h4", { text: "Date Settings" });
    new import_obsidian3.Setting(contentEl).setName("Include Date with System Message").setDesc("Add the current date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeDateWithSystemMessage).onChange(async (value) => {
      this.plugin.settings.includeDateWithSystemMessage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(contentEl).setName("Include Time with System Message").setDesc("Add the current time along with the date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTimeWithSystemMessage).onChange(async (value) => {
      this.plugin.settings.includeTimeWithSystemMessage = value;
      await this.plugin.saveSettings();
    }));
    contentEl.createEl("hr");
    contentEl.createEl("h4", { text: "Note Reference Settings" });
    new import_obsidian3.Setting(contentEl).setName("Enable Obsidian Links").setDesc("Read Obsidian links in messages using [[filename]] syntax").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableObsidianLinks).onChange(async (value) => {
      this.plugin.settings.enableObsidianLinks = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(contentEl).setName("Enable Context Notes").setDesc("Attach specified note content to chat messages").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableContextNotes).onChange(async (value) => {
      this.plugin.settings.enableContextNotes = value;
      await this.plugin.saveSettings();
    }));
    const contextNotesContainer = contentEl.createDiv("context-notes-container");
    contextNotesContainer.style.marginBottom = "24px";
    new import_obsidian3.Setting(contextNotesContainer).setName("Context Notes").setDesc("Notes to attach as context (supports [[filename]] and [[filename#header]] syntax)").addTextArea((text) => {
      text.setPlaceholder("[[Note Name]]\n[[Another Note#Header]]").setValue(this.plugin.settings.contextNotes || "").onChange(async (value) => {
        this.plugin.settings.contextNotes = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.rows = 4;
      text.inputEl.style.width = "100%";
    });
    new import_obsidian3.Setting(contentEl).setName("Expand Linked Notes Recursively").setDesc("If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).").addToggle((toggle) => {
      var _a2;
      return toggle.setValue((_a2 = this.plugin.settings.expandLinkedNotesRecursively) != null ? _a2 : false).onChange(async (value) => {
        this.plugin.settings.expandLinkedNotesRecursively = value;
        await this.plugin.saveSettings();
      });
    });
    contentEl.createEl("hr");
    contentEl.createEl("h2", { text: "Provider Settings" });
    new import_obsidian3.Setting(contentEl).setName("AI Provider").setDesc("Choose which AI provider to use").addDropdown((dropdown) => {
      dropdown.addOption("openai", "OpenAI (ChatGPT)").addOption("anthropic", "Anthropic (Claude)").addOption("gemini", "Google (Gemini)").addOption("ollama", "Ollama (Local AI)").setValue(this.plugin.settings.provider).onChange(async (value) => {
        this.plugin.settings.provider = value;
        await this.plugin.saveSettings();
        this.onOpen();
      });
    });
    switch (this.plugin.settings.provider) {
      case "openai":
        this.renderProviderSettings(contentEl, this.plugin.settings.openaiSettings, "OpenAI", async () => {
          const provider = createProvider(this.plugin.settings);
          const result = await provider.testConnection();
          if (result.success && result.models) {
            this.plugin.settings.openaiSettings.availableModels = result.models;
            await this.plugin.saveSettings();
            this.plugin.settings.openaiSettings.lastTestResult = {
              timestamp: Date.now(),
              success: true,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
            this.onOpen();
          } else {
            this.plugin.settings.openaiSettings.lastTestResult = {
              timestamp: Date.now(),
              success: false,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
          }
        });
        break;
      case "anthropic":
        this.renderProviderSettings(contentEl, this.plugin.settings.anthropicSettings, "Anthropic", async () => {
          const provider = createProvider(this.plugin.settings);
          const result = await provider.testConnection();
          if (result.success && result.models) {
            this.plugin.settings.anthropicSettings.availableModels = result.models;
            await this.plugin.saveSettings();
            this.plugin.settings.anthropicSettings.lastTestResult = {
              timestamp: Date.now(),
              success: true,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
            this.onOpen();
          } else {
            this.plugin.settings.anthropicSettings.lastTestResult = {
              timestamp: Date.now(),
              success: false,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
          }
        });
        break;
      case "gemini":
        this.renderProviderSettings(contentEl, this.plugin.settings.geminiSettings, "Gemini", async () => {
          const provider = createProvider(this.plugin.settings);
          const result = await provider.testConnection();
          if (result.success && result.models) {
            this.plugin.settings.geminiSettings.availableModels = result.models;
            await this.plugin.saveSettings();
            this.plugin.settings.geminiSettings.lastTestResult = {
              timestamp: Date.now(),
              success: true,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
            this.onOpen();
          } else {
            this.plugin.settings.geminiSettings.lastTestResult = {
              timestamp: Date.now(),
              success: false,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
          }
        });
        break;
      case "ollama":
        this.renderProviderSettings(contentEl, this.plugin.settings.ollamaSettings, "Ollama", async () => {
          const provider = createProvider(this.plugin.settings);
          const result = await provider.testConnection();
          if (result.success && result.models) {
            this.plugin.settings.ollamaSettings.availableModels = result.models;
            await this.plugin.saveSettings();
            this.plugin.settings.ollamaSettings.lastTestResult = {
              timestamp: Date.now(),
              success: true,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
            this.onOpen();
          } else {
            this.plugin.settings.ollamaSettings.lastTestResult = {
              timestamp: Date.now(),
              success: false,
              message: result.message
            };
            new import_obsidian3.Notice(result.message);
          }
        });
        contentEl.createEl("div", {
          cls: "setting-item-description",
          text: "To use Ollama:"
        });
        const steps = contentEl.createEl("ol");
        steps.createEl("li", { text: "Install Ollama from https://ollama.ai" });
        steps.createEl("li", { text: "Start the Ollama server" });
        steps.createEl("li", { text: 'Pull models using "ollama pull model-name"' });
        steps.createEl("li", { text: "Test connection to see available models" });
        break;
    }
  }
  renderProviderSettings(containerEl, settings, providerName, testConnectionCallback) {
    new import_obsidian3.Setting(containerEl).setName("Test Connection").setDesc(`Verify your API key and fetch available models for ${providerName}`).addButton((button) => button.setButtonText("Test").onClick(async () => {
      button.setButtonText("Testing...");
      button.setDisabled(true);
      try {
        await testConnectionCallback();
      } catch (error) {
        new import_obsidian3.Notice(`Error: ${error.message}`);
      } finally {
        button.setButtonText("Test");
        button.setDisabled(false);
      }
    }));
    if (settings.lastTestResult) {
      const date = new Date(settings.lastTestResult.timestamp);
      containerEl.createEl("div", {
        text: `Last test: ${date.toLocaleString()} - ${settings.lastTestResult.message}`,
        cls: settings.lastTestResult.success ? "success" : "error"
      });
    }
    new import_obsidian3.Setting(containerEl).setName("Model").setDesc(`Choose the ${providerName} model to use`).addDropdown((dropdown) => {
      for (const model of settings.availableModels) {
        dropdown.addOption(model, model);
      }
      dropdown.setValue(settings.model).onChange(async (value) => {
        settings.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/components/chat/Message.ts
var import_obsidian6 = require("obsidian");

// src/components/chat/Buttons.ts
var import_obsidian4 = require("obsidian");
function createActionButton(label, tooltip, callback) {
  const button = document.createElement("button");
  button.addClass("ai-chat-action-button");
  button.setAttribute("aria-label", tooltip);
  const labelEl = document.createElement("span");
  labelEl.textContent = label;
  button.appendChild(labelEl);
  button.addEventListener("click", callback);
  return button;
}
async function copyToClipboard(text) {
  try {
    await navigator.clipboard.writeText(text);
  } catch (error) {
  }
}

// src/components/chat/ConfirmationModal.ts
var import_obsidian5 = require("obsidian");
var ConfirmationModal = class extends import_obsidian5.Modal {
  constructor(app, title, message, onConfirm) {
    super(app);
    __publicField(this, "onConfirm");
    __publicField(this, "message");
    this.titleEl.setText(title);
    this.message = message;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("modal-button-container");
    buttonContainer.createEl("button", { text: "Cancel" }).addEventListener("click", () => {
      this.onConfirm(false);
      this.close();
    });
    const confirmButton = buttonContainer.createEl("button", {
      text: "Delete",
      cls: "mod-warning"
    });
    confirmButton.addEventListener("click", () => {
      this.onConfirm(true);
      this.close();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/components/chat/Message.ts
function createMessageElement(app, role, content, chatHistoryManager, plugin, regenerateCallback, parentComponent) {
  const messageEl = document.createElement("div");
  messageEl.addClass("ai-chat-message", role);
  const messageContainer = messageEl.createDiv("message-container");
  const contentEl = messageContainer.createDiv("message-content");
  messageEl.dataset.rawContent = content;
  messageEl.dataset.timestamp = (/* @__PURE__ */ new Date()).toISOString();
  import_obsidian6.MarkdownRenderer.render(app, content, contentEl, "", parentComponent).catch((error) => {
    contentEl.textContent = content;
  });
  const actionsEl = messageContainer.createDiv("message-actions");
  actionsEl.classList.add("hidden");
  messageEl.addEventListener("mouseenter", () => {
    actionsEl.classList.remove("hidden");
    actionsEl.classList.add("visible");
  });
  messageEl.addEventListener("mouseleave", () => {
    actionsEl.classList.remove("visible");
    actionsEl.classList.add("hidden");
  });
  actionsEl.appendChild(createActionButton("Copy", "Copy message", () => {
    const currentContent = messageEl.dataset.rawContent || "";
    if (currentContent.trim() === "") {
      new import_obsidian6.Notice("No content to copy");
      return;
    }
    copyToClipboard(currentContent);
  }));
  actionsEl.appendChild(createActionButton("Edit", "Edit message", async () => {
    if (!contentEl.hasClass("editing")) {
      const textarea = document.createElement("textarea");
      textarea.value = messageEl.dataset.rawContent || "";
      textarea.className = "message-content editing";
      contentEl.empty();
      contentEl.appendChild(textarea);
      textarea.focus();
      contentEl.addClass("editing");
      textarea.addEventListener("keydown", async (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          textarea.blur();
        }
      });
      textarea.addEventListener("blur", async () => {
        const oldContent = messageEl.dataset.rawContent;
        const newContent = textarea.value;
        try {
          await chatHistoryManager.updateMessage(
            messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
            messageEl.classList.contains("user") ? "user" : "assistant",
            oldContent || "",
            newContent
          );
          messageEl.dataset.rawContent = newContent;
          contentEl.empty();
          await import_obsidian6.MarkdownRenderer.render(app, newContent, contentEl, "", parentComponent);
          contentEl.removeClass("editing");
        } catch (e) {
          new import_obsidian6.Notice("Failed to save edited message.");
          messageEl.dataset.rawContent = oldContent || "";
          contentEl.empty();
          await import_obsidian6.MarkdownRenderer.render(app, oldContent || "", contentEl, "", parentComponent);
          contentEl.removeClass("editing");
        }
      });
    }
  }));
  actionsEl.appendChild(createActionButton("Delete", "Delete message", () => {
    const modal = new ConfirmationModal(app, "Delete message", "Are you sure you want to delete this message?", (confirmed) => {
      if (confirmed) {
        chatHistoryManager.deleteMessage(
          messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
          messageEl.classList.contains("user") ? "user" : "assistant",
          messageEl.dataset.rawContent || ""
        ).then(() => {
          messageEl.remove();
        }).catch(() => {
          new import_obsidian6.Notice("Failed to delete message from history.");
        });
      }
    });
    modal.open();
  }));
  actionsEl.appendChild(createActionButton("Regenerate", "Regenerate this response", () => {
    regenerateCallback(messageEl);
  }));
  messageContainer.appendChild(actionsEl);
  return messageEl;
}

// src/components/chat/chatPersistence.ts
var import_obsidian7 = require("obsidian");
init_js_yaml();
function buildChatYaml(settings, provider, model) {
  const yamlObj = {
    provider,
    model,
    system_message: settings.systemMessage,
    temperature: settings.temperature
  };
  return `---
${dump(yamlObj)}---
`;
}
async function saveChatAsNote({
  app,
  messages,
  settings,
  provider,
  model,
  chatSeparator,
  chatNoteFolder
}) {
  let chatContent = "";
  messages.forEach((el, index) => {
    var _a2;
    const rawContent = el.dataset.rawContent;
    const content = rawContent !== void 0 ? rawContent : ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
    chatContent += content;
    if (index < messages.length - 1) {
      chatContent += "\n\n" + chatSeparator + "\n\n";
    }
  });
  const yaml = buildChatYaml(settings, provider, model);
  chatContent = chatContent.replace(/^---[\s\S]*?---\n?/, "");
  const noteContent = yaml + "\n" + chatContent.trimStart();
  const now = /* @__PURE__ */ new Date();
  const pad = (n) => n.toString().padStart(2, "0");
  const fileName = `Chat Export ${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ${pad(now.getHours())}-${pad(now.getMinutes())}.md`;
  let filePath = fileName;
  const folder = chatNoteFolder == null ? void 0 : chatNoteFolder.trim();
  if (folder) {
    filePath = folder.replace(/[/\\]+$/, "") + "/" + fileName;
  }
  try {
    await app.vault.create(filePath, noteContent);
    new import_obsidian7.Notice(`Chat saved as note: ${filePath}`);
  } catch (e) {
    new import_obsidian7.Notice("Failed to save chat as note.");
  }
}
async function loadChatYamlAndApplySettings({
  app,
  plugin,
  settings,
  file
}) {
  var _a2, _b, _c, _d;
  let content = await app.vault.read(file);
  const yamlMatch = content.match(/^---\n([\s\S]*?)\n---/);
  let yamlObj = {};
  if (yamlMatch) {
    try {
      yamlObj = load(yamlMatch[1]) || {};
    } catch (e) {
      yamlObj = {};
    }
  }
  let newProvider = settings.provider;
  let newModel = ((_a2 = settings.openaiSettings) == null ? void 0 : _a2.model) || ((_b = settings.anthropicSettings) == null ? void 0 : _b.model) || ((_c = settings.geminiSettings) == null ? void 0 : _c.model) || ((_d = settings.ollamaSettings) == null ? void 0 : _d.model);
  const availableProviders = plugin.getAvailableProviders ? plugin.getAvailableProviders() : [];
  if (yamlObj.model) {
    let found = false;
    for (const prov of availableProviders) {
      const models = plugin.getModelsForProvider ? plugin.getModelsForProvider(prov) : [];
      if (models.includes(yamlObj.model)) {
        newProvider = prov;
        newModel = yamlObj.model;
        found = true;
        break;
      }
    }
  } else if (yamlObj.provider && availableProviders.includes(yamlObj.provider)) {
    newProvider = yamlObj.provider;
    switch (newProvider) {
      case "openai":
        newModel = settings.openaiSettings.model;
        break;
      case "anthropic":
        newModel = settings.anthropicSettings.model;
        break;
      case "gemini":
        newModel = settings.geminiSettings.model;
        break;
      case "ollama":
        newModel = settings.ollamaSettings.model;
        break;
    }
  }
  let newSystemMessage = yamlObj.system_message || settings.systemMessage;
  let newTemperature = settings.temperature;
  if (yamlObj.temperature !== void 0) {
    const tempNum = parseFloat(yamlObj.temperature);
    if (!isNaN(tempNum)) newTemperature = tempNum;
  }
  settings.provider = newProvider;
  if (newModel) {
    switch (newProvider) {
      case "openai":
        settings.openaiSettings.model = newModel;
        break;
      case "anthropic":
        settings.anthropicSettings.model = newModel;
        break;
      case "gemini":
        settings.geminiSettings.model = newModel;
        break;
      case "ollama":
        settings.ollamaSettings.model = newModel;
        break;
    }
  }
  settings.systemMessage = newSystemMessage;
  settings.temperature = newTemperature;
  if (plugin.onSettingsLoadedFromNote) {
    plugin.onSettingsLoadedFromNote(settings);
  }
  return {
    provider: newProvider,
    model: newModel,
    systemMessage: newSystemMessage,
    temperature: newTemperature
  };
}

// src/components/chat/chatHistoryUtils.ts
async function renderChatHistory({
  messagesContainer,
  loadedHistory,
  chatHistoryManager,
  plugin,
  regenerateResponse,
  scrollToBottom = true
}) {
  messagesContainer.empty();
  for (const msg of loadedHistory) {
    if (msg.sender === "user" || msg.sender === "assistant") {
      const messageEl = await createMessageElement(
        plugin.app,
        msg.sender,
        msg.content,
        chatHistoryManager,
        plugin,
        regenerateResponse,
        plugin
        // parentComponent
      );
      messageEl.dataset.timestamp = msg.timestamp;
      messagesContainer.appendChild(messageEl);
    }
  }
  if (scrollToBottom) {
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
}

// src/components/chat/ChatHelpModal.ts
var import_obsidian8 = require("obsidian");
var ChatHelpModal = class extends import_obsidian8.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    this.titleEl.setText("AI Chat Help");
    this.contentEl.innerHTML = `
            <div style="line-height:1.7;font-size:1em;">
                <b>Slash Commands:</b><br>
                <code>/clear</code> \u2013 Clear the chat<br>
                <code>/copy</code> \u2013 Copy all chat<br>
                <code>/save</code> \u2013 Save chat as note<br>
                <code>/settings</code> \u2013 Open settings<br>
                <code>/help</code> \u2013 Show this help<br>
                <br>
                <b>Keyboard Shortcuts (when input is focused):</b><br>
                <code>Ctrl+Shift+C</code> \u2013 Clear chat<br>
                <code>Ctrl+Shift+Y</code> \u2013 Copy all chat<br>
                <code>Ctrl+Shift+S</code> \u2013 Save as note<br>
                <code>Ctrl+Shift+O</code> \u2013 Open settings<br>
                <code>Ctrl+Shift+H</code> \u2013 Show this help<br>
                <br>
                <b>Other:</b><br>
                <code>Enter</code> \u2013 Send message<br>
                <code>Shift+Enter</code> \u2013 Newline<br>
                <br>
                You can also use the buttons at the top of the chat window.
            </div>
        `;
  }
};

// src/components/chat.ts
var VIEW_TYPE_CHAT = "chat-view";
var ChatView = class extends import_obsidian9.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "messagesContainer");
    __publicField(this, "inputContainer");
    __publicField(this, "activeStream", null);
    __publicField(this, "chatHistoryManager");
    this.plugin = plugin;
    this.chatHistoryManager = new ChatHistoryManager(this.app.vault, this.plugin.manifest.id, "chat-history.json");
  }
  getViewType() {
    return VIEW_TYPE_CHAT;
  }
  getDisplayText() {
    return "AI Chat";
  }
  getIcon() {
    return "message-square";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    let loadedHistory = [];
    try {
      loadedHistory = await this.chatHistoryManager.getHistory();
    } catch (e) {
      new import_obsidian9.Notice("Failed to load chat history.");
      loadedHistory = [];
    }
    contentEl.addClass("ai-chat-view");
    const fadedHelp = contentEl.createDiv();
    fadedHelp.setText("Tip: Type /help or press Ctrl+Shift+H for chat commands and shortcuts.");
    fadedHelp.style.textAlign = "center";
    fadedHelp.style.opacity = "0.6";
    fadedHelp.style.fontSize = "0.95em";
    fadedHelp.style.margin = "0.5em 0 0.2em 0";
    const topButtonContainer = contentEl.createDiv("ai-chat-buttons");
    const settingsButton = document.createElement("button");
    settingsButton.setText("Settings");
    settingsButton.setAttribute("aria-label", "Toggle model settings");
    topButtonContainer.appendChild(settingsButton);
    const copyAllButton = document.createElement("button");
    copyAllButton.textContent = "Copy All";
    topButtonContainer.appendChild(copyAllButton);
    const saveNoteButton = document.createElement("button");
    saveNoteButton.textContent = "Save as Note";
    topButtonContainer.appendChild(saveNoteButton);
    const clearButton = document.createElement("button");
    clearButton.textContent = "Clear Chat";
    topButtonContainer.appendChild(clearButton);
    this.messagesContainer = contentEl.createDiv("ai-chat-messages");
    this.inputContainer = contentEl.createDiv("ai-chat-input-container");
    const textarea = this.inputContainer.createEl("textarea", {
      cls: "ai-chat-input",
      attr: {
        placeholder: "Type your message...",
        rows: "3"
      }
    });
    const sendButton = this.inputContainer.createEl("button", {
      text: "Send",
      cls: "mod-cta"
    });
    const stopButton = this.inputContainer.createEl("button", {
      text: "Stop"
    });
    stopButton.classList.add("hidden");
    const helpButton = this.inputContainer.createEl("button", {
      text: "?"
    });
    helpButton.setAttr("aria-label", "Show chat help");
    helpButton.style.fontSize = "0.9em";
    helpButton.style.width = "1.8em";
    helpButton.style.height = "1.8em";
    helpButton.style.marginBottom = "0.2em";
    helpButton.style.opacity = "0.7";
    helpButton.style.position = "absolute";
    helpButton.style.right = "0.5em";
    helpButton.style.top = "-2.2em";
    helpButton.style.zIndex = "2";
    helpButton.addEventListener("click", () => {
      new ChatHelpModal(this.app).open();
    });
    this.inputContainer.style.position = "relative";
    const sendMessage = async () => {
      const content = textarea.value.trim();
      if (!content) return;
      textarea.disabled = true;
      sendButton.classList.add("hidden");
      stopButton.classList.remove("hidden");
      const userMessageEl = await createMessageElement(this.app, "user", content, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
      this.messagesContainer.appendChild(userMessageEl);
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
      textarea.value = "";
      try {
        const messages = await this.buildContextMessages();
        const messageElements = this.messagesContainer.querySelectorAll(".ai-chat-message");
        messageElements.forEach((el) => {
          var _a2;
          const role = el.classList.contains("user") ? "user" : "assistant";
          const content2 = ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
          messages.push({ role, content: content2 });
        });
        const tempContainer = document.createElement("div");
        tempContainer.addClass("ai-chat-message", "assistant");
        tempContainer.createDiv("message-content");
        this.messagesContainer.appendChild(tempContainer);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        const responseContent = await this.streamAssistantResponse(messages, tempContainer);
        tempContainer.remove();
        if (responseContent.trim() !== "") {
          const messageEl = await createMessageElement(this.app, "assistant", responseContent, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
          this.messagesContainer.appendChild(messageEl);
          await this.chatHistoryManager.addMessage({
            timestamp: messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
            sender: "assistant",
            content: responseContent
          });
        }
      } catch (error) {
        if (error.name !== "AbortError") {
          new import_obsidian9.Notice(`Error: ${error.message}`);
          await createMessageElement(this.app, "assistant", `Error: ${error.message}`, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
        }
      } finally {
        textarea.disabled = false;
        textarea.focus();
        stopButton.classList.add("hidden");
        sendButton.classList.remove("hidden");
        this.activeStream = null;
      }
    };
    sendButton.addEventListener("click", sendMessage);
    stopButton.addEventListener("click", () => {
      if (this.activeStream) {
        this.activeStream.abort();
        this.activeStream = null;
        textarea.disabled = false;
        textarea.focus();
        stopButton.classList.add("hidden");
        sendButton.classList.remove("hidden");
      }
    });
    copyAllButton.addEventListener("click", async () => {
      const messages = this.messagesContainer.querySelectorAll(".ai-chat-message");
      let chatContent = "";
      messages.forEach((el, index) => {
        var _a2;
        const content = ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
        chatContent += content;
        if (index < messages.length - 1) {
          chatContent += "\n\n" + this.plugin.settings.chatSeparator + "\n\n";
        }
      });
      await copyToClipboard(chatContent);
    });
    saveNoteButton.addEventListener("click", async () => {
      const provider = this.plugin.settings.provider;
      let model = "";
      if (provider === "openai") model = this.plugin.settings.openaiSettings.model;
      else if (provider === "anthropic") model = this.plugin.settings.anthropicSettings.model;
      else if (provider === "gemini") model = this.plugin.settings.geminiSettings.model;
      else if (provider === "ollama") model = this.plugin.settings.ollamaSettings.model;
      await saveChatAsNote({
        app: this.app,
        messages: this.messagesContainer.querySelectorAll(".ai-chat-message"),
        settings: this.plugin.settings,
        provider,
        model,
        chatSeparator: this.plugin.settings.chatSeparator,
        chatNoteFolder: this.plugin.settings.chatNoteFolder
      });
    });
    clearButton.addEventListener("click", async () => {
      this.messagesContainer.empty();
      try {
        await this.chatHistoryManager.clearHistory();
      } catch (e) {
        new import_obsidian9.Notice("Failed to clear chat history.");
      }
    });
    settingsButton.addEventListener("click", () => {
      const settingsModal = new SettingsModal(this.app, this.plugin);
      settingsModal.open();
    });
    async function handleSlashCommand(cmd) {
      switch (cmd) {
        case "/clear":
          await clearButton.click();
          break;
        case "/copy":
          await copyAllButton.click();
          break;
        case "/save":
          await saveNoteButton.click();
          break;
        case "/settings":
          settingsButton.click();
          break;
        case "/help":
          new ChatHelpModal(this.app).open();
          break;
      }
    }
    textarea.addEventListener("keydown", async (e) => {
      if (e.ctrlKey && e.shiftKey) {
        if (e.key.toLowerCase() === "c") {
          e.preventDefault();
          await clearButton.click();
          return;
        }
        if (e.key.toLowerCase() === "y") {
          e.preventDefault();
          await copyAllButton.click();
          return;
        }
        if (e.key.toLowerCase() === "s") {
          e.preventDefault();
          await saveNoteButton.click();
          return;
        }
        if (e.key.toLowerCase() === "o") {
          e.preventDefault();
          settingsButton.click();
          return;
        }
        if (e.key.toLowerCase() === "h") {
          e.preventDefault();
          new ChatHelpModal(this.app).open();
          return;
        }
      }
      if (e.key === "Enter" && !e.shiftKey) {
        const val = textarea.value.trim();
        if (val === "/clear" || val === "/copy" || val === "/save" || val === "/settings" || val === "/help") {
          e.preventDefault();
          await handleSlashCommand.call(this, val);
          textarea.value = "";
          return;
        }
        sendMessage();
        e.preventDefault();
      }
    });
    if (loadedHistory.length > 0) {
      this.messagesContainer.empty();
      const file = this.app.workspace.getActiveFile();
      if (file) {
        await loadChatYamlAndApplySettings({
          app: this.app,
          plugin: this.plugin,
          settings: this.plugin.settings,
          file
        });
      }
      await renderChatHistory({
        messagesContainer: this.messagesContainer,
        loadedHistory,
        chatHistoryManager: this.chatHistoryManager,
        plugin: this.plugin,
        regenerateResponse: (el) => this.regenerateResponse(el),
        scrollToBottom: true
      });
    }
  }
  async addMessage(role, content, isError = false) {
    const messageEl = await createMessageElement(this.app, role, content, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
    const uiTimestamp = messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString();
    this.messagesContainer.appendChild(messageEl);
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    try {
      await this.chatHistoryManager.addMessage({
        timestamp: uiTimestamp,
        sender: role,
        content
      });
    } catch (e) {
      new import_obsidian9.Notice("Failed to save chat message: " + e.message);
    }
  }
  async onClose() {
    if (this.activeStream) {
      this.activeStream.abort();
      this.activeStream = null;
    }
  }
  async regenerateResponse(messageEl) {
    const textarea = this.inputContainer.querySelector("textarea");
    if (textarea) textarea.disabled = true;
    const allMessages = Array.from(this.messagesContainer.querySelectorAll(".ai-chat-message"));
    const currentIndex = allMessages.indexOf(messageEl);
    const isUserClicked = messageEl.classList.contains("user");
    let targetIndex = -1;
    if (isUserClicked) {
      for (let i = currentIndex + 1; i < allMessages.length; i++) {
        if (allMessages[i].classList.contains("assistant")) {
          targetIndex = i;
          break;
        }
        if (allMessages[i].classList.contains("user")) {
          break;
        }
      }
    } else {
      targetIndex = currentIndex;
    }
    let userMsgIndex = currentIndex;
    if (!isUserClicked) {
      userMsgIndex = currentIndex - 1;
      while (userMsgIndex >= 0 && !allMessages[userMsgIndex].classList.contains("user")) {
        userMsgIndex--;
      }
    }
    const messages = await this.buildContextMessages();
    for (let i = 0; i <= userMsgIndex; i++) {
      const el = allMessages[i];
      const role = el.classList.contains("user") ? "user" : "assistant";
      const content = el.dataset.rawContent || "";
      messages.push({ role, content });
    }
    let originalTimestamp = (/* @__PURE__ */ new Date()).toISOString();
    let originalContent = "";
    let insertAfterNode = null;
    if (targetIndex !== -1) {
      const targetEl = allMessages[targetIndex];
      originalTimestamp = targetEl.dataset.timestamp || originalTimestamp;
      originalContent = targetEl.dataset.rawContent || "";
      insertAfterNode = targetEl.previousElementSibling;
      targetEl.remove();
    } else if (isUserClicked) {
      insertAfterNode = messageEl;
    } else {
      insertAfterNode = null;
    }
    const assistantContainer = await createMessageElement(this.app, "assistant", "", this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
    assistantContainer.dataset.timestamp = originalTimestamp;
    if (insertAfterNode && insertAfterNode.nextSibling) {
      this.messagesContainer.insertBefore(assistantContainer, insertAfterNode.nextSibling);
    } else {
      this.messagesContainer.appendChild(assistantContainer);
    }
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    try {
      await this.streamAssistantResponse(messages, assistantContainer, originalTimestamp, originalContent);
    } catch (error) {
      if (error.name !== "AbortError") {
        new import_obsidian9.Notice(`Error: ${error.message}`);
        assistantContainer.remove();
      }
    } finally {
      if (textarea) {
        textarea.disabled = false;
        textarea.focus();
      }
      this.activeStream = null;
    }
  }
  async buildContextMessages() {
    const messages = [
      { role: "system", content: this.plugin.getSystemMessage() }
    ];
    if (this.plugin.settings.enableContextNotes && this.plugin.settings.contextNotes) {
      const contextContent = await this.plugin.getContextNotesContent(this.plugin.settings.contextNotes);
      messages[0].content += `

Context Notes:
${contextContent}`;
    }
    if (this.plugin.settings.referenceCurrentNote) {
      const currentFile = this.app.workspace.getActiveFile();
      if (currentFile) {
        const currentNoteContent = await this.app.vault.cachedRead(currentFile);
        messages.push({
          role: "system",
          content: `Here is the content of the current note:

${currentNoteContent}`
        });
      }
    }
    return messages;
  }
  async streamAssistantResponse(messages, container, originalTimestamp, originalContent) {
    let responseContent = "";
    this.activeStream = new AbortController();
    try {
      const provider = createProvider(this.plugin.settings);
      await provider.getCompletion(
        messages,
        {
          temperature: this.plugin.settings.temperature,
          maxTokens: this.plugin.settings.maxTokens,
          streamCallback: async (chunk) => {
            responseContent += chunk;
            const contentEl = container.querySelector(".message-content");
            if (contentEl) {
              container.dataset.rawContent = responseContent;
              contentEl.empty();
              await import_obsidian9.MarkdownRenderer.render(
                this.app,
                responseContent,
                contentEl,
                "",
                this
              );
              this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            }
          },
          abortController: this.activeStream
        }
      );
      if (originalTimestamp && responseContent.trim() !== "") {
        await this.chatHistoryManager.updateMessage(
          originalTimestamp,
          "assistant",
          originalContent || "",
          responseContent
        );
      }
      return responseContent;
    } catch (error) {
      if (error.name !== "AbortError") {
        throw error;
      }
      return "";
    }
  }
};

// src/components/parseSelection.ts
function parseSelection(selection, chatSeparator, chatBoundaryString) {
  let insideChat = !chatBoundaryString;
  const lines = selection.split("\n");
  let messages = [];
  let currentRole = "user";
  let currentContent = "";
  for (const line of lines) {
    if (chatBoundaryString && line.trim() === chatBoundaryString) {
      if (!insideChat && currentContent.trim()) {
        messages.push({ role: currentRole, content: currentContent.trim() });
        currentContent = "";
      }
      insideChat = !insideChat;
      continue;
    }
    if (!insideChat) continue;
    if (line.trim() === chatSeparator) {
      if (currentContent.trim()) {
        messages.push({ role: currentRole, content: currentContent.trim() });
      }
      currentRole = currentRole === "user" ? "assistant" : "user";
      currentContent = "";
    } else {
      currentContent += line + "\n";
    }
  }
  if (currentContent.trim()) {
    messages.push({ role: currentRole, content: currentContent.trim() });
  }
  return messages;
}

// src/components/ModelSettingsView.ts
var import_obsidian10 = require("obsidian");
init_providers();
var VIEW_TYPE_MODEL_SETTINGS = "model-settings-view";
var ModelSettingsView = class extends import_obsidian10.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_MODEL_SETTINGS;
  }
  getDisplayText() {
    return "AI Model Settings";
  }
  getIcon() {
    return "file-sliders";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "AI Model Settings" });
    new import_obsidian10.Setting(contentEl).setName("System Message").setDesc("Set the system message for the AI").addTextArea((text) => text.setPlaceholder("You are a helpful assistant.").setValue(this.plugin.settings.systemMessage).onChange(async (value) => {
      this.plugin.settings.systemMessage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian10.Setting(contentEl).setName("Enable Streaming").setDesc("Enable or disable streaming for completions").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableStreaming).onChange(async (value) => {
      this.plugin.settings.enableStreaming = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian10.Setting(contentEl).setName("Temperature").setDesc("Set the randomness of the model's output (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.temperature = value;
      await this.plugin.saveSettings();
    }));
    contentEl.createEl("h4", { text: "Date Settings" });
    new import_obsidian10.Setting(contentEl).setName("Include Date with System Message").setDesc("Add the current date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeDateWithSystemMessage).onChange(async (value) => {
      this.plugin.settings.includeDateWithSystemMessage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian10.Setting(contentEl).setName("Include Time with System Message").setDesc("Add the current time along with the date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTimeWithSystemMessage).onChange(async (value) => {
      this.plugin.settings.includeTimeWithSystemMessage = value;
      await this.plugin.saveSettings();
    }));
    contentEl.createEl("h4", { text: "Note Reference Settings" });
    new import_obsidian10.Setting(contentEl).setName("Enable Obsidian Links").setDesc("Read Obsidian links in messages using [[filename]] syntax").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableObsidianLinks).onChange(async (value) => {
      this.plugin.settings.enableObsidianLinks = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian10.Setting(contentEl).setName("Enable Context Notes").setDesc("Attach specified note content to chat messages").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableContextNotes).onChange(async (value) => {
      this.plugin.settings.enableContextNotes = value;
      await this.plugin.saveSettings();
    }));
    const contextNotesContainer = contentEl.createDiv("context-notes-container");
    contextNotesContainer.style.marginBottom = "24px";
    new import_obsidian10.Setting(contextNotesContainer).setName("Context Notes").setDesc("Notes to attach as context (supports [[filename]] and [[filename#header]] syntax)").addTextArea((text) => {
      text.setPlaceholder("[[Note Name]]\n[[Another Note#Header]]").setValue(this.plugin.settings.contextNotes || "").onChange(async (value) => {
        this.plugin.settings.contextNotes = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.rows = 4;
      text.inputEl.style.width = "100%";
    });
    new import_obsidian10.Setting(contentEl).setName("Expand Linked Notes Recursively").setDesc("If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).").addToggle((toggle) => {
      var _a2;
      return toggle.setValue((_a2 = this.plugin.settings.expandLinkedNotesRecursively) != null ? _a2 : false).onChange(async (value) => {
        this.plugin.settings.expandLinkedNotesRecursively = value;
        await this.plugin.saveSettings();
      });
    });
    contentEl.createEl("h2", { text: "Provider Settings" });
    new import_obsidian10.Setting(contentEl).setName("AI Provider").setDesc("Choose which AI provider to use").addDropdown((dropdown) => {
      dropdown.addOption("openai", "OpenAI (ChatGPT)").addOption("anthropic", "Anthropic (Claude)").addOption("gemini", "Google (Gemini)").addOption("ollama", "Ollama (Local AI)").setValue(this.plugin.settings.provider).onChange(async (value) => {
        this.plugin.settings.provider = value;
        await this.plugin.saveSettings();
        this.onOpen();
      });
    });
    switch (this.plugin.settings.provider) {
      case "openai":
        this.renderOpenAISettings(contentEl);
        break;
      case "anthropic":
        this.renderAnthropicSettings(contentEl);
        break;
      case "gemini":
        this.renderGeminiSettings(contentEl);
        break;
      case "ollama":
        this.renderOllamaSettings(contentEl);
        break;
    }
  }
  renderProviderSettings(containerEl, settings, providerName, testConnectionCallback) {
    new import_obsidian10.Setting(containerEl).setName("Test Connection").setDesc(`Verify your API key and fetch available models for ${providerName}`).addButton((button) => button.setButtonText("Test").onClick(async () => {
      button.setButtonText("Testing...");
      button.setDisabled(true);
      try {
        await testConnectionCallback();
      } catch (error) {
        new import_obsidian10.Notice(`Error: ${error.message}`);
      } finally {
        button.setButtonText("Test");
        button.setDisabled(false);
      }
    }));
    if (settings.lastTestResult) {
      const date = new Date(settings.lastTestResult.timestamp);
      containerEl.createEl("div", {
        text: `Last test: ${date.toLocaleString()} - ${settings.lastTestResult.message}`,
        cls: settings.lastTestResult.success ? "success" : "error"
      });
    }
    new import_obsidian10.Setting(containerEl).setName("Model").setDesc(`Choose the ${providerName} model to use`).addDropdown((dropdown) => {
      for (const model of settings.availableModels) {
        dropdown.addOption(model, model);
      }
      dropdown.setValue(settings.model).onChange(async (value) => {
        settings.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  renderOpenAISettings(containerEl) {
    this.renderProviderSettings(containerEl, this.plugin.settings.openaiSettings, "OpenAI", async () => {
      const provider = createProvider(this.plugin.settings);
      const result = await provider.testConnection();
      if (result.success && result.models) {
        this.plugin.settings.openaiSettings.availableModels = result.models;
        await this.plugin.saveSettings();
        this.plugin.settings.openaiSettings.lastTestResult = {
          timestamp: Date.now(),
          success: true,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
        this.onOpen();
      } else {
        this.plugin.settings.openaiSettings.lastTestResult = {
          timestamp: Date.now(),
          success: false,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
      }
    });
  }
  renderAnthropicSettings(containerEl) {
    this.renderProviderSettings(containerEl, this.plugin.settings.anthropicSettings, "Anthropic", async () => {
      const provider = createProvider(this.plugin.settings);
      const result = await provider.testConnection();
      if (result.success && result.models) {
        this.plugin.settings.anthropicSettings.availableModels = result.models;
        await this.plugin.saveSettings();
        this.plugin.settings.anthropicSettings.lastTestResult = {
          timestamp: Date.now(),
          success: true,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
        this.onOpen();
      } else {
        this.plugin.settings.anthropicSettings.lastTestResult = {
          timestamp: Date.now(),
          success: false,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
      }
    });
  }
  renderGeminiSettings(containerEl) {
    this.renderProviderSettings(containerEl, this.plugin.settings.geminiSettings, "Gemini", async () => {
      const provider = createProvider(this.plugin.settings);
      const result = await provider.testConnection();
      if (result.success && result.models) {
        this.plugin.settings.geminiSettings.availableModels = result.models;
        await this.plugin.saveSettings();
        this.plugin.settings.geminiSettings.lastTestResult = {
          timestamp: Date.now(),
          success: true,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
        this.onOpen();
      } else {
        this.plugin.settings.geminiSettings.lastTestResult = {
          timestamp: Date.now(),
          success: false,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
      }
    });
  }
  renderOllamaSettings(containerEl) {
    this.renderProviderSettings(containerEl, this.plugin.settings.ollamaSettings, "Ollama", async () => {
      const provider = createProvider(this.plugin.settings);
      const result = await provider.testConnection();
      if (result.success && result.models) {
        this.plugin.settings.ollamaSettings.availableModels = result.models;
        await this.plugin.saveSettings();
        this.plugin.settings.ollamaSettings.lastTestResult = {
          timestamp: Date.now(),
          success: true,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
        this.onOpen();
      } else {
        this.plugin.settings.ollamaSettings.lastTestResult = {
          timestamp: Date.now(),
          success: false,
          message: result.message
        };
        new import_obsidian10.Notice(result.message);
      }
    });
    containerEl.createEl("div", {
      cls: "setting-item-description",
      text: "To use Ollama:"
    });
    const steps = containerEl.createEl("ol");
    steps.createEl("li", { text: "Install Ollama from https://ollama.ai" });
    steps.createEl("li", { text: "Start the Ollama server" });
    steps.createEl("li", { text: 'Pull models using "ollama pull model-name"' });
    steps.createEl("li", { text: "Test connection to see available models" });
  }
  async onClose() {
  }
};

// src/components/noteUtils.ts
var import_obsidian11 = require("obsidian");
function extractContentUnderHeader(content, headerText) {
  const lines = content.split("\n");
  let foundHeader = false;
  let extractedContent = [];
  let headerLevel = 0;
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const headerMatch = line.match(/^(#+)\s+(.*?)$/);
    if (headerMatch) {
      const currentHeaderLevel = headerMatch[1].length;
      const currentHeaderText = headerMatch[2].trim();
      if (foundHeader) {
        if (currentHeaderLevel <= headerLevel) {
          break;
        }
      } else if (currentHeaderText.toLowerCase() === headerText.toLowerCase()) {
        foundHeader = true;
        headerLevel = currentHeaderLevel;
        extractedContent.push(line);
        continue;
      }
    }
    if (foundHeader) {
      extractedContent.push(line);
    }
  }
  return extractedContent.join("\n");
}
async function processObsidianLinks(content, app, settings, visitedNotes = /* @__PURE__ */ new Set(), currentDepth = 0) {
  var _a2;
  if (!settings.enableObsidianLinks) return content;
  const linkRegex = /\[\[(.*?)\]\]/g;
  let match;
  let processedContent = content;
  while ((match = linkRegex.exec(content)) !== null) {
    if (match && match[0] && match[1]) {
      const parts = match[1].split("|");
      const filePath = parts[0].trim();
      const displayText = parts.length > 1 ? parts[1].trim() : filePath;
      try {
        let file = app.vault.getAbstractFileByPath(filePath) || app.vault.getAbstractFileByPath(`${filePath}.md`);
        if (!file) {
          const allFiles = app.vault.getFiles();
          file = allFiles.find((f) => f.name === filePath || f.name === `${filePath}.md` || f.basename.toLowerCase() === filePath.toLowerCase() || f.path === filePath || f.path === `${filePath}.md`) || null;
        }
        const headerMatch = filePath.match(/(.*?)#(.*)/);
        let extractedContent = "";
        if (file && file instanceof import_obsidian11.TFile) {
          if (visitedNotes.has(file.path)) {
            extractedContent = "[Recursive link omitted: already included]";
          } else {
            visitedNotes.add(file.path);
            const noteContent = await app.vault.cachedRead(file);
            if (headerMatch) {
              extractedContent = extractContentUnderHeader(noteContent, headerMatch[2].trim());
            } else {
              extractedContent = noteContent;
            }
            if (settings.expandLinkedNotesRecursively && currentDepth < ((_a2 = settings.maxLinkExpansionDepth) != null ? _a2 : 2)) {
              extractedContent = await processObsidianLinks(extractedContent, app, settings, visitedNotes, currentDepth + 1);
            }
          }
          processedContent = processedContent.replace(
            match[0],
            `${match[0]}

---
Note Name: ${filePath}
Content:
${extractedContent}
---
`
          );
        } else {
          new import_obsidian11.Notice(`File not found: ${filePath}. Ensure the file name and path are correct.`);
        }
      } catch (error) {
        new import_obsidian11.Notice(`Error processing link for ${filePath}: ${error.message}`);
      }
    }
  }
  return processedContent;
}
async function processContextNotes(contextNotesText, app) {
  const linkRegex = /\[\[(.*?)\]\]/g;
  let match;
  let contextContent = "";
  while ((match = linkRegex.exec(contextNotesText)) !== null) {
    if (match && match[1]) {
      const fileName = match[1].trim();
      try {
        const headerMatch = fileName.match(/(.*?)#(.*)/);
        const baseFileName = headerMatch ? headerMatch[1].trim() : fileName;
        const headerName = headerMatch ? headerMatch[2].trim() : null;
        let file = app.vault.getAbstractFileByPath(baseFileName) || app.vault.getAbstractFileByPath(`${baseFileName}.md`);
        if (!file) {
          const allFiles = app.vault.getFiles();
          file = allFiles.find(
            (f) => f.basename.toLowerCase() === baseFileName.toLowerCase() || f.name.toLowerCase() === `${baseFileName.toLowerCase()}.md`
          ) || null;
        }
        if (file && file instanceof import_obsidian11.TFile) {
          const noteContent = await app.vault.cachedRead(file);
          contextContent += `---
From note: ${file.basename}

`;
          if (headerName) {
            const headerContent = extractContentUnderHeader(noteContent, headerName);
            contextContent += headerContent;
          } else {
            contextContent += noteContent;
          }
          contextContent += "\n\n";
        } else {
          contextContent += `Note not found: ${fileName}

`;
        }
      } catch (error) {
        contextContent += `Error processing note ${fileName}: ${error.message}

`;
      }
    }
  }
  return contextContent;
}
async function processMessages(messages, app, settings) {
  const processedMessages = [];
  if (settings.enableContextNotes && settings.contextNotes) {
    const contextContent = await processContextNotes(settings.contextNotes, app);
    if (contextContent) {
      if (messages.length > 0 && messages[0].role === "system") {
        processedMessages.push({
          role: "system",
          content: `${messages[0].content}

Here is additional context:
${contextContent}`
        });
        messages = messages.slice(1);
      } else {
        processedMessages.push({
          role: "system",
          content: `Here is context for our conversation:
${contextContent}`
        });
      }
    }
  }
  for (const message of messages) {
    const processedContent = await processObsidianLinks(message.content, app, settings, /* @__PURE__ */ new Set());
    processedMessages.push({
      role: message.role,
      content: processedContent
    });
  }
  return processedMessages;
}
async function getContextNotesContent(contextNotesText, app) {
  return processContextNotes(contextNotesText, app);
}

// src/components/systemMessage.ts
function getSystemMessage(settings) {
  let systemMessage = settings.systemMessage;
  if (settings.includeDateWithSystemMessage) {
    const currentDate = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    systemMessage = `${systemMessage}

The current date is ${currentDate}.`;
  }
  if (settings.includeTimeWithSystemMessage) {
    const now = /* @__PURE__ */ new Date();
    const timeZoneOffset = now.getTimezoneOffset();
    const offsetHours = Math.abs(timeZoneOffset) / 60;
    const offsetMinutes = Math.abs(timeZoneOffset) % 60;
    const sign = timeZoneOffset > 0 ? "-" : "+";
    const currentTime = now.toLocaleTimeString();
    const timeZoneString = `UTC${sign}${offsetHours.toString().padStart(2, "0")}:${offsetMinutes.toString().padStart(2, "0")}`;
    systemMessage = `${systemMessage}

The current time is ${currentTime} ${timeZoneString}.`;
  }
  return systemMessage;
}

// src/main.ts
var VIEW_TYPE_MODEL_SETTINGS2 = "model-settings-view";
var MyPlugin = class extends import_obsidian13.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "modelSettingsView", null);
    __publicField(this, "activeStream", null);
    __publicField(this, "_yamlAttributeCommandIds", []);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerView(
      VIEW_TYPE_MODEL_SETTINGS2,
      (leaf) => new ModelSettingsView(leaf, this)
    );
    this.registerView(
      VIEW_TYPE_CHAT,
      (leaf) => new ChatView(leaf, this)
    );
    this.addRibbonIcon("file-sliders", "Open AI Settings", () => {
      this.activateView();
    });
    this.addRibbonIcon("message-square", "Open AI Chat", () => {
      this.activateChatView();
    });
    this.app.workspace.onLayoutReady(() => {
      if (this.settings.autoOpenModelSettings) {
        this.activateView();
      }
    });
    this.addCommand({
      id: "ai-completion",
      name: "Get AI Completion",
      editorCallback: async (editor) => {
        var _a2, _b, _c;
        let text;
        let insertPosition;
        if (editor.somethingSelected()) {
          text = editor.getSelection();
          insertPosition = editor.getCursor("to");
        } else {
          const currentLineNumber = editor.getCursor().line;
          let lines = [];
          for (let i = 0; i <= currentLineNumber; i++) {
            lines.push(editor.getLine(i));
          }
          const chatStartString = this.settings.chatStartString;
          if (chatStartString) {
            const startIdx = lines.findIndex((line) => line.trim() === chatStartString.trim());
            if (startIdx !== -1) {
              lines = lines.slice(startIdx + 1);
            }
          }
          text = lines.join("\n");
          insertPosition = { line: currentLineNumber + 1, ch: 0 };
        }
        console.log("Extracted text for completion:", text);
        const messages = parseSelection(text, this.settings.chatSeparator);
        if (messages.length === 0) {
          new import_obsidian13.Notice("No valid messages found in the selection.");
          return;
        }
        const lineContent = (_a2 = editor.getLine(insertPosition.line)) != null ? _a2 : "";
        let prefix = "";
        if (lineContent.trim() !== "") {
          prefix = "\n";
        }
        editor.replaceRange(`${prefix}
${this.settings.chatSeparator}
`, insertPosition);
        let currentPosition = {
          line: insertPosition.line + (prefix ? 1 : 0) + 2,
          ch: 0
        };
        this.activeStream = new AbortController();
        try {
          const provider = createProvider(this.settings);
          const processedMessages = await this.processMessages([
            { role: "system", content: this.getSystemMessage() },
            ...messages
          ]);
          let bufferedChunk = "";
          const flushBuffer = () => {
            if (bufferedChunk) {
              editor.replaceRange(bufferedChunk, currentPosition);
              currentPosition = editor.offsetToPos(
                editor.posToOffset(currentPosition) + bufferedChunk.length
              );
              bufferedChunk = "";
            }
          };
          await provider.getCompletion(
            processedMessages,
            {
              temperature: this.settings.temperature,
              maxTokens: this.settings.maxTokens,
              streamCallback: (chunk) => {
                bufferedChunk += chunk;
                setTimeout(flushBuffer, 100);
              },
              abortController: this.activeStream
            }
          );
          flushBuffer();
          const endLineContent = (_b = editor.getLine(currentPosition.line)) != null ? _b : "";
          let endPrefix = "";
          if (endLineContent.trim() !== "") {
            endPrefix = "\n";
          }
          editor.replaceRange(`${endPrefix}
${this.settings.chatSeparator}

`, currentPosition);
          const newCursorPos = editor.offsetToPos(
            editor.posToOffset(currentPosition) + (endPrefix ? 1 : 0) + 1 + this.settings.chatSeparator.length + 1
          );
          editor.setCursor(newCursorPos);
        } catch (error) {
          new import_obsidian13.Notice(`Error: ${error.message}`);
          const errLineContent = (_c = editor.getLine(currentPosition.line)) != null ? _c : "";
          let errPrefix = "";
          if (errLineContent.trim() !== "") {
            errPrefix = "\n";
          }
          editor.replaceRange(`Error: ${error.message}
${errPrefix}
${this.settings.chatSeparator}

`, currentPosition);
        } finally {
          this.activeStream = null;
        }
      }
    });
    this.addCommand({
      id: "end-ai-stream",
      name: "End AI Stream",
      callback: () => {
        if (this.activeStream) {
          this.activeStream.abort();
          this.activeStream = null;
          new import_obsidian13.Notice("AI stream ended");
        } else {
          new import_obsidian13.Notice("No active AI stream to end");
        }
      }
    });
    this.addCommand({
      id: "show-ai-settings",
      name: "Show AI Settings",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "show-ai-chat",
      name: "Show AI Chat",
      callback: () => {
        this.activateChatView();
      }
    });
    this.addCommand({
      id: "copy-active-note-name",
      name: "Copy Active Note Name",
      callback: async () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          const noteName = `[[${activeFile.basename}]]`;
          try {
            await navigator.clipboard.writeText(noteName);
            new import_obsidian13.Notice(`Copied to clipboard: ${noteName}`);
          } catch (error) {
            new import_obsidian13.Notice("Failed to copy to clipboard");
            console.error("Clipboard error:", error);
          }
        } else {
          new import_obsidian13.Notice("No active note found");
        }
      }
    });
    this.addCommand({
      id: "insert-chat-start-string",
      name: "Insert Chat Start String",
      editorCallback: (editor) => {
        var _a2;
        const chatStartString = (_a2 = this.settings.chatStartString) != null ? _a2 : "";
        if (!chatStartString) {
          new import_obsidian13.Notice("chatStartString is not set in settings.");
          return;
        }
        const cursor = editor.getCursor();
        editor.replaceRange(chatStartString, cursor);
        const lines = chatStartString.split("\n");
        if (lines.length === 1) {
          editor.setCursor({
            line: cursor.line,
            ch: cursor.ch + chatStartString.length
          });
        } else {
          editor.setCursor({
            line: cursor.line + lines.length - 1,
            ch: lines[lines.length - 1].length
          });
        }
      }
    });
    this.addCommand({
      id: "generate-note-title",
      name: "Generate Note Title",
      callback: async () => {
        const { generateNoteTitle: generateNoteTitle2 } = await Promise.resolve().then(() => (init_filechanger(), filechanger_exports));
        await generateNoteTitle2(
          this.app,
          this.settings,
          (messages) => this.processMessages(messages)
        );
      }
    });
    this.addCommand({
      id: "load-chat-note-into-chat",
      name: "Load Chat Note into Chat",
      callback: async () => {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
          new import_obsidian13.Notice("No active note found. Please open a note to load as chat.");
          return;
        }
        let content = await this.app.vault.read(file);
        const messages = parseSelection(content, this.settings.chatSeparator);
        if (!messages.length) {
          new import_obsidian13.Notice("No chat messages found in the selected note.");
          return;
        }
        await this.activateChatView();
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT);
        if (!leaves.length) {
          new import_obsidian13.Notice("Could not find chat view.");
          return;
        }
        const chatView = leaves[0].view;
        chatView.messagesContainer.empty();
        for (const msg of messages) {
          if (msg.role === "user" || msg.role === "assistant") {
            await chatView["addMessage"](msg.role, msg.content);
          }
        }
        chatView.messagesContainer.scrollTop = chatView.messagesContainer.scrollHeight;
        new import_obsidian13.Notice("Loaded chat note into chat.");
      }
    });
    this.registerYamlAttributeCommands();
  }
  /**
   * Register YAML attribute generator commands dynamically based on settings.
   * Unregisters previous commands before registering new ones.
   */
  registerYamlAttributeCommands() {
    if (this._yamlAttributeCommandIds && this._yamlAttributeCommandIds.length > 0) {
      for (const id of this._yamlAttributeCommandIds) {
        this.app.commands.removeCommand(id);
      }
    }
    this._yamlAttributeCommandIds = [];
    if (this.settings.yamlAttributeGenerators && Array.isArray(this.settings.yamlAttributeGenerators)) {
      for (const gen of this.settings.yamlAttributeGenerators) {
        if (!gen.attributeName || !gen.prompt || !gen.commandName) continue;
        const id = `generate-yaml-attribute-${gen.attributeName}`;
        this.addCommand({
          id,
          name: gen.commandName,
          callback: async () => {
            const { generateYamlAttribute: generateYamlAttribute2 } = await Promise.resolve().then(() => (init_filechanger(), filechanger_exports));
            await generateYamlAttribute2(
              this.app,
              this.settings,
              (messages) => this.processMessages(messages),
              gen.attributeName,
              gen.prompt,
              gen.outputMode
            );
          }
        });
        this._yamlAttributeCommandIds.push(id);
      }
    }
  }
  getSystemMessage() {
    return getSystemMessage(this.settings);
  }
  async activateView(viewType = VIEW_TYPE_MODEL_SETTINGS2) {
    this.app.workspace.detachLeavesOfType(viewType);
    let leaf = this.app.workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: viewType,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    } else {
      leaf = this.app.workspace.getLeaf(true);
      await leaf.setViewState({
        type: viewType,
        active: true
      });
    }
  }
  async activateChatView() {
    await this.activateView(VIEW_TYPE_CHAT);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.registerYamlAttributeCommands();
  }
  async processMessages(messages) {
    return processMessages(messages, this.app, this.settings);
  }
  async getContextNotesContent(contextNotesText) {
    return getContextNotesContent(contextNotesText, this.app);
  }
};
/*! Bundled license information:

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL3Byb21wdHMudHMiLCAic3JjL3R5cGVzLnRzIiwgInByb3ZpZGVycy9iYXNlLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvdmVyc2lvbi50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL19zaGltcy9yZWdpc3RyeS50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL19zaGltcy9NdWx0aXBhcnRCb2R5LnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvX3NoaW1zL3dlYi1ydW50aW1lLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9fc2hpbXMvYXV0by9ydW50aW1lLm1qcyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvX3NoaW1zL2luZGV4Lm1qcyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL2Vycm9yLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvaW50ZXJuYWwvZGVjb2RlcnMvbGluZS50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL2ludGVybmFsL3N0cmVhbS11dGlscy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3N0cmVhbWluZy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3VwbG9hZHMudHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9jb3JlLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvcGFnaW5hdGlvbi50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3Jlc291cmNlcy9zaGFyZWQudHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9yZXNvdXJjZS50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3Jlc291cmNlcy9iZXRhL21vZGVscy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL2ludGVybmFsL2RlY29kZXJzL2pzb25sLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvcmVzb3VyY2VzL2JldGEvbWVzc2FnZXMvYmF0Y2hlcy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL192ZW5kb3IvcGFydGlhbC1qc29uLXBhcnNlci9wYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9saWIvQmV0YU1lc3NhZ2VTdHJlYW0udHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9yZXNvdXJjZXMvYmV0YS9tZXNzYWdlcy9tZXNzYWdlcy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3Jlc291cmNlcy9iZXRhL2JldGEudHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9yZXNvdXJjZXMvY29tcGxldGlvbnMudHMiLCAibm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3NyYy9yZXNvdXJjZXMvbWVzc2FnZXMvYmF0Y2hlcy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL2xpYi9NZXNzYWdlU3RyZWFtLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvcmVzb3VyY2VzL21lc3NhZ2VzL21lc3NhZ2VzLnRzIiwgIm5vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9zcmMvcmVzb3VyY2VzL21vZGVscy50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL3Jlc291cmNlcy9pbmRleC50cyIsICJub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3JjL2luZGV4LnRzIiwgInByb3ZpZGVycy9hbnRocm9waWMudHMiLCAicHJvdmlkZXJzL29wZW5haS50cyIsICJwcm92aWRlcnMvZ2VtaW5pLnRzIiwgInByb3ZpZGVycy9vbGxhbWEudHMiLCAicHJvdmlkZXJzL2luZGV4LnRzIiwgIm5vZGVfbW9kdWxlcy9qcy15YW1sL2Rpc3QvanMteWFtbC5tanMiLCAic3JjL2ZpbGVjaGFuZ2VyLnRzIiwgInNyYy9tYWluLnRzIiwgInNyYy9zZXR0aW5ncy50cyIsICJzcmMvY29tcG9uZW50cy9jaGF0LnRzIiwgInNyYy9jb21wb25lbnRzL2NoYXQvQ2hhdEhpc3RvcnlNYW5hZ2VyLnRzIiwgInNyYy9jb21wb25lbnRzL2NoYXQvU2V0dGluZ3NNb2RhbC50cyIsICJzcmMvY29tcG9uZW50cy9jaGF0L01lc3NhZ2UudHMiLCAic3JjL2NvbXBvbmVudHMvY2hhdC9CdXR0b25zLnRzIiwgInNyYy9jb21wb25lbnRzL2NoYXQvQ29uZmlybWF0aW9uTW9kYWwudHMiLCAic3JjL2NvbXBvbmVudHMvY2hhdC9jaGF0UGVyc2lzdGVuY2UudHMiLCAic3JjL2NvbXBvbmVudHMvY2hhdC9jaGF0SGlzdG9yeVV0aWxzLnRzIiwgInNyYy9jb21wb25lbnRzL2NoYXQvQ2hhdEhlbHBNb2RhbC50cyIsICJzcmMvY29tcG9uZW50cy9wYXJzZVNlbGVjdGlvbi50cyIsICJzcmMvY29tcG9uZW50cy9Nb2RlbFNldHRpbmdzVmlldy50cyIsICJzcmMvY29tcG9uZW50cy9ub3RlVXRpbHMudHMiLCAic3JjL2NvbXBvbmVudHMvc3lzdGVtTWVzc2FnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGNvbnN0IERFRkFVTFRfVElUTEVfUFJPTVBUID0gXCJZb3UgYXJlIGEgdGl0bGUgZ2VuZXJhdG9yLiBZb3Ugd2lsbCBnaXZlIHN1Y2NpbmN0IHRpdGxlcyB0aGF0IGRvIG5vdCBjb250YWluIGJhY2tzbGFzaGVzLCBmb3J3YXJkIHNsYXNoZXMsIG9yIGNvbG9ucy4gT25seSBnZW5lcmF0ZSBhIHRpdGxlIGFzIHlvdXIgcmVzcG9uc2UuXCI7XHJcblxyXG4vLyBUaGUgWUFNTCBzeXN0ZW0gbWVzc2FnZSBub3cgY292ZXJzIGNvbmNpc2VuZXNzLCBmb3JiaWRkZW4gY2hhcmFjdGVycywgYW5kIG91dHB1dCBmb3JtYXQuXHJcbi8vIFRoaXMgc3VtbWFyeSBwcm9tcHQgaXMgbm93IGZvY3VzZWQgb24gc3VtbWFyaXphdGlvbiBpbnRlbnQgb25seS5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1VNTUFSWV9QUk9NUFQgPSBcIlN1bW1hcml6ZSB0aGUgbm90ZSBjb250ZW50IGluIDEtMiBzZW50ZW5jZXMsIGZvY3VzaW5nIG9uIHRoZSBtYWluIGlkZWFzIGFuZCBwdXJwb3NlLlwiO1xyXG5cclxuLy8gR2VuZXJhbCBzeXN0ZW0gcHJvbXB0IGZvciB0aGUgYXNzaXN0YW50XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0dFTkVSQUxfU1lTVEVNX1BST01QVCA9IFwiWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50LlwiO1xyXG5cclxuLy8gRGVmYXVsdCBzeXN0ZW0gbWVzc2FnZSBmb3IgWUFNTCBhdHRyaWJ1dGUgZ2VuZXJhdGlvbiAodXNlZCBpbiBmaWxlY2hhbmdlci50cylcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfWUFNTF9TWVNURU1fTUVTU0FHRSA9XHJcbiAgICBcIllvdSBhcmUgYW4gYXNzaXN0YW50IHRoYXQgZ2VuZXJhdGVzIFlBTUwgYXR0cmlidXRlIHZhbHVlcyBmb3IgT2JzaWRpYW4gbm90ZXMuIFwiICtcclxuICAgIFwiUmVhZCB0aGUgbm90ZSBhbmQgZ2VuZXJhdGUgYSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmllZCBZQU1MIGZpZWxkLiBcIiArXHJcbiAgICBcIk9ubHkgb3V0cHV0IHRoZSB2YWx1ZSwgbm90IHRoZSBrZXkgb3IgZXh0cmEgdGV4dC5cIjtcclxuIiwgImltcG9ydCB7IERFRkFVTFRfVElUTEVfUFJPTVBULCBERUZBVUxUX1NVTU1BUllfUFJPTVBULCBERUZBVUxUX1lBTUxfU1lTVEVNX01FU1NBR0UsIERFRkFVTFRfR0VORVJBTF9TWVNURU1fUFJPTVBUIH0gZnJvbSBcIi4vcHJvbXB0c1wiO1xyXG5cclxuLyoqXHJcbiAqIEFJIEFzc2lzdGFudCBQbHVnaW4gVHlwZXNcclxuICogXHJcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgY29yZSB0eXBlcyBhbmQgaW50ZXJmYWNlcyB1c2VkIHRocm91Z2hvdXQgdGhlIHBsdWdpbi5cclxuICogVGhlc2UgZGVmaW5pdGlvbnMgZW5zdXJlIGNvbnNpc3RlbmN5IGFjcm9zcyBkaWZmZXJlbnQgQUkgcHJvdmlkZXJzIGFuZFxyXG4gKiBtYWtlIHRoZSBjb2RlIG1vcmUgbWFpbnRhaW5hYmxlIGFuZCB0eXBlLXNhZmUuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjaGF0IG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb25cclxuICogXHJcbiAqIEBwcm9wZXJ0eSByb2xlIC0gV2hvIHNlbnQgdGhlIG1lc3NhZ2UgKCdzeXN0ZW0nLCAndXNlcicsIG9yICdhc3Npc3RhbnQnKVxyXG4gKiBAcHJvcGVydHkgY29udGVudCAtIFRoZSBhY3R1YWwgdGV4dCBjb250ZW50IG9mIHRoZSBtZXNzYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xyXG4gICAgcm9sZTogJ3N5c3RlbScgfCAndXNlcicgfCAnYXNzaXN0YW50JztcclxuICAgIGNvbnRlbnQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIGdlbmVyYXRpbmcgQUkgY29tcGxldGlvbnNcclxuICogXHJcbiAqIFRoZXNlIHNldHRpbmdzIGNvbnRyb2wgaG93IHRoZSBBSSBnZW5lcmF0ZXMgaXRzIHJlc3BvbnNlLlxyXG4gKiBOb3QgYWxsIG9wdGlvbnMgYXJlIHN1cHBvcnRlZCBieSBhbGwgcHJvdmlkZXJzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uT3B0aW9ucyB7XHJcbiAgICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcclxuICAgIG1heFRva2Vucz86IG51bWJlcjtcclxuICAgIHN0cmVhbUNhbGxiYWNrPzogKGNodW5rOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgICBhYm9ydENvbnRyb2xsZXI/OiBBYm9ydENvbnRyb2xsZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN1bHQgb2YgdGVzdGluZyBhbiBBSSBwcm92aWRlciBjb25uZWN0aW9uXHJcbiAqIFxyXG4gKiBAcHJvcGVydHkgc3VjY2VzcyAtIFdoZXRoZXIgdGhlIGNvbm5lY3Rpb24gdGVzdCBwYXNzZWRcclxuICogQHByb3BlcnR5IG1lc3NhZ2UgLSBIdW1hbi1yZWFkYWJsZSByZXN1bHQgbWVzc2FnZVxyXG4gKiBAcHJvcGVydHkgbW9kZWxzIC0gTGlzdCBvZiBhdmFpbGFibGUgbW9kZWxzIChpZiB0ZXN0IHN1Y2Nlc3NmdWwpXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3Rpb25UZXN0UmVzdWx0IHtcclxuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICBtb2RlbHM/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbW1vbiBpbnRlcmZhY2UgZm9yIGFsbCBBSSBwcm92aWRlcnNcclxuICogXHJcbiAqIFRoaXMgaW50ZXJmYWNlIGVuc3VyZXMgdGhhdCBhbGwgQUkgcHJvdmlkZXJzIChPcGVuQUksIEFudGhyb3BpYywgZXRjLilcclxuICogaW1wbGVtZW50IHRoZSBzYW1lIGJhc2ljIGZ1bmN0aW9uYWxpdHksIG1ha2luZyBpdCBlYXN5IHRvIHN3aXRjaCBiZXR3ZWVuIHRoZW0uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFJUHJvdmlkZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjb21wbGV0aW9uIGZyb20gdGhlIEFJIG1vZGVsXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlcyAtIFRoZSBjb252ZXJzYXRpb24gaGlzdG9yeVxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBTZXR0aW5ncyBmb3IgdGhpcyBjb21wbGV0aW9uXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29tcGxldGlvbiBpcyBmaW5pc2hlZFxyXG4gICAgICovXHJcbiAgICBnZXRDb21wbGV0aW9uKG1lc3NhZ2VzOiBNZXNzYWdlW10sIG9wdGlvbnM6IENvbXBsZXRpb25PcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbGlzdCBvZiBhdmFpbGFibGUgbW9kZWxzIGZyb20gdGhpcyBwcm92aWRlclxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBsaXN0IG9mIG1vZGVsIG5hbWVzXHJcbiAgICAgKi9cclxuICAgIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcm9taXNlPHN0cmluZ1tdPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgdGhlIGNvbm5lY3Rpb24gdG8gdGhpcyBwcm92aWRlclxyXG4gICAgICogXHJcbiAgICAgKiBWZXJpZmllcyBBUEkga2V5cywgc2VydmVyIGNvbm5lY3Rpb25zLCBhbmQgcGVybWlzc2lvbnMuXHJcbiAgICAgKiBBbHNvIGZldGNoZXMgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIG1vZGVscyBpZiBzdWNjZXNzZnVsLlxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0ZXN0IHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgdGVzdENvbm5lY3Rpb24oKTogUHJvbWlzZTxDb25uZWN0aW9uVGVzdFJlc3VsdD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgWUFNTCBhdHRyaWJ1dGUgZ2VuZXJhdG9yIGZvciB0aGUgc2V0dGluZ3MgVUlcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgWWFtbEF0dHJpYnV0ZUdlbmVyYXRvciB7XHJcbiAgICBhdHRyaWJ1dGVOYW1lOiBzdHJpbmc7IC8vIFRoZSBZQU1MIGZpZWxkIHRvIGluc2VydC91cGRhdGVcclxuICAgIHByb21wdDogc3RyaW5nOyAgICAgICAgLy8gVGhlIExMTSBwcm9tcHQgdG8gdXNlIGZvciBnZW5lcmF0aW5nIHRoZSB2YWx1ZVxyXG4gICAgb3V0cHV0TW9kZTogXCJjbGlwYm9hcmRcIiB8IFwibWV0YWRhdGFcIjsgLy8gT3V0cHV0IG1vZGVcclxuICAgIGNvbW1hbmROYW1lOiBzdHJpbmc7ICAgLy8gVGhlIG5hbWUvbGFiZWwgZm9yIHRoZSBjb21tYW5kXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQbHVnaW4gU2V0dGluZ3NcclxuICogXHJcbiAqIFRoZXNlIHNldHRpbmdzIGNvbnRyb2wgaG93IHRoZSBBSSBBc3Npc3RhbnQgcGx1Z2luIHdvcmtzLlxyXG4gKiBUaGV5IGFyZSBzYXZlZCBiZXR3ZWVuIHNlc3Npb25zIGFuZCBjYW4gYmUgY29uZmlndXJlZCBpbiB0aGUgc2V0dGluZ3MgdGFiLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNeVBsdWdpblNldHRpbmdzIHtcclxuICAgIC8qKiBXaGljaCBBSSBwcm92aWRlciB0byB1c2UgKi9cclxuICAgIHByb3ZpZGVyOiAnb3BlbmFpJyB8ICdhbnRocm9waWMnIHwgJ2dlbWluaScgfCAnb2xsYW1hJztcclxuICAgIHJlZmVyZW5jZUN1cnJlbnROb3RlOiBib29sZWFuO1xyXG5cclxuICAgIC8qKiBPcGVuQUktc3BlY2lmaWMgc2V0dGluZ3MgKi9cclxuICAgIG9wZW5haVNldHRpbmdzOiB7XHJcbiAgICAgICAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgICAgICAgbW9kZWw6IHN0cmluZztcclxuICAgICAgICBhdmFpbGFibGVNb2RlbHM6IHN0cmluZ1tdO1xyXG4gICAgICAgIGxhc3RUZXN0UmVzdWx0Pzoge1xyXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICAgICAgICAgICAgc3VjY2VzczogYm9vbGVhbjtcclxuICAgICAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBBbnRocm9waWMtc3BlY2lmaWMgc2V0dGluZ3MgKi9cclxuICAgIGFudGhyb3BpY1NldHRpbmdzOiB7XHJcbiAgICAgICAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgICAgICAgbW9kZWw6IHN0cmluZztcclxuICAgICAgICBhdmFpbGFibGVNb2RlbHM6IHN0cmluZ1tdO1xyXG4gICAgICAgIGxhc3RUZXN0UmVzdWx0Pzoge1xyXG4gICAgICAgICAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICAgICAgICAgICAgc3VjY2VzczogYm9vbGVhbjtcclxuICAgICAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBHb29nbGUgR2VtaW5pLXNwZWNpZmljIHNldHRpbmdzICovXHJcbiAgICBnZW1pbmlTZXR0aW5nczoge1xyXG4gICAgICAgIGFwaUtleTogc3RyaW5nO1xyXG4gICAgICAgIG1vZGVsOiBzdHJpbmc7XHJcbiAgICAgICAgYXZhaWxhYmxlTW9kZWxzOiBzdHJpbmdbXTtcclxuICAgICAgICBsYXN0VGVzdFJlc3VsdD86IHtcclxuICAgICAgICAgICAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogT2xsYW1hLXNwZWNpZmljIHNldHRpbmdzICovXHJcbiAgICBvbGxhbWFTZXR0aW5nczoge1xyXG4gICAgICAgIHNlcnZlclVybDogc3RyaW5nO1xyXG4gICAgICAgIG1vZGVsOiBzdHJpbmc7XHJcbiAgICAgICAgYXZhaWxhYmxlTW9kZWxzOiBzdHJpbmdbXTtcclxuICAgICAgICBsYXN0VGVzdFJlc3VsdD86IHtcclxuICAgICAgICAgICAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogU2V0dGluZ3MgdGhhdCBhcHBseSB0byBhbGwgcHJvdmlkZXJzICovXHJcbiAgICBzeXN0ZW1NZXNzYWdlOiBzdHJpbmc7XHJcbiAgICB0ZW1wZXJhdHVyZTogbnVtYmVyO1xyXG4gICAgbWF4VG9rZW5zOiBudW1iZXI7XHJcbiAgICBpbmNsdWRlRGF0ZVdpdGhTeXN0ZW1NZXNzYWdlOiBib29sZWFuO1xyXG4gICAgaW5jbHVkZVRpbWVXaXRoU3lzdGVtTWVzc2FnZTogYm9vbGVhbjtcclxuICAgIGVuYWJsZVN0cmVhbWluZzogYm9vbGVhbjtcclxuICAgIGF1dG9PcGVuTW9kZWxTZXR0aW5nczogYm9vbGVhbjtcclxuICAgIGVuYWJsZU9ic2lkaWFuTGlua3M6IGJvb2xlYW47XHJcbiAgICAvKiogT3V0cHV0IG1vZGUgZm9yIGdlbmVyYXRlZCBub3RlIHRpdGxlOiBjbGlwYm9hcmQsIHJlcGxhY2UtZmlsZW5hbWUsIG9yIG1ldGFkYXRhICovXHJcbiAgICB0aXRsZU91dHB1dE1vZGU/OiBcImNsaXBib2FyZFwiIHwgXCJyZXBsYWNlLWZpbGVuYW1lXCIgfCBcIm1ldGFkYXRhXCI7XHJcbiAgICAvKiogT3V0cHV0IG1vZGUgZm9yIGdlbmVyYXRlZCBub3RlIHN1bW1hcnk6IGNsaXBib2FyZCBvciBtZXRhZGF0YSAqL1xyXG4gICAgc3VtbWFyeU91dHB1dE1vZGU/OiBcImNsaXBib2FyZFwiIHwgXCJtZXRhZGF0YVwiO1xyXG4gICAgLyoqIFRoZSBzdHJpbmcgdGhhdCBzZXBhcmF0ZXMgY2hhdCBtZXNzYWdlcyAqL1xyXG4gICAgY2hhdFNlcGFyYXRvcjogc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBzdHJpbmcgdGhhdCBzdGFydHMgY2hhdCBtZXNzYWdlcyBpbiBhIG5vdGUsIGlmIHByZXNlbnQgKi9cclxuICAgIGNoYXRTdGFydFN0cmluZz86IHN0cmluZztcclxuICAgIC8qKiBUaGUgc3RyaW5nIHRoYXQgZW5kcyBjaGF0IG1lc3NhZ2VzIGluIGEgbm90ZSwgaWYgcHJlc2VudCAqL1xyXG4gICAgY2hhdEVuZFN0cmluZz86IHN0cmluZztcclxuICAgIGVuYWJsZUNvbnRleHROb3RlczogYm9vbGVhbjtcclxuICAgIGNvbnRleHROb3Rlczogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBQcm9tcHRzIGZvciB0aXRsZSBhbmQgc3VtbWFyeSBnZW5lcmF0aW9uICovXHJcbiAgICB0aXRsZVByb21wdDogc3RyaW5nO1xyXG4gICAgc3VtbWFyeVByb21wdDogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBDaGF0IGhpc3Rvcnkgc2V0dGluZ3MgKi9cclxuICAgIG1heFNlc3Npb25zOiBudW1iZXI7XHJcbiAgICBhdXRvU2F2ZVNlc3Npb25zOiBib29sZWFuO1xyXG4gICAgc2Vzc2lvbnM6IENoYXRTZXNzaW9uW107XHJcbiAgICBhY3RpdmVTZXNzaW9uSWQ/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0cnVlLCByZWN1cnNpdmVseSBleHBhbmQgbGlua3Mgd2l0aGluIGZldGNoZWQgbm90ZXMgKHdpdGggbG9vcCBwcm90ZWN0aW9uKVxyXG4gICAgICovXHJcbiAgICBleHBhbmRMaW5rZWROb3Rlc1JlY3Vyc2l2ZWx5PzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltdW0gZGVwdGggZm9yIHJlY3Vyc2l2ZWx5IGV4cGFuZGluZyBsaW5rZWQgbm90ZXMuIDAgPSBubyByZWN1cnNpb24sIDEgPSBkaXJlY3QgbGlua3Mgb25seSwgZXRjLlxyXG4gICAgICovXHJcbiAgICBtYXhMaW5rRXhwYW5zaW9uRGVwdGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb2xkZXIgcGF0aCAocmVsYXRpdmUgdG8gdmF1bHQgcm9vdCkgd2hlcmUgY2hhdCBub3RlcyB3aWxsIGJlIHNhdmVkLiBJZiBlbXB0eSwgc2F2ZXMgdG8gdmF1bHQgcm9vdC5cclxuICAgICAqL1xyXG4gICAgY2hhdE5vdGVGb2xkZXI/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIFlBTUwgYXR0cmlidXRlIGdlbmVyYXRvcnMgZm9yIHRoZSBzZXR0aW5ncyBVSSAqL1xyXG4gICAgeWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnM/OiBZYW1sQXR0cmlidXRlR2VuZXJhdG9yW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IHNldHRpbmdzIHVzZWQgd2hlbiBpbml0aWFsaXppbmcgdGhlIHBsdWdpblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE15UGx1Z2luU2V0dGluZ3MgPSB7XHJcbiAgICByZWZlcmVuY2VDdXJyZW50Tm90ZTogZmFsc2UsXHJcbiAgICBwcm92aWRlcjogJ29wZW5haScsXHJcbiAgICBvcGVuYWlTZXR0aW5nczoge1xyXG4gICAgICAgIGFwaUtleTogJycsXHJcbiAgICAgICAgbW9kZWw6ICdncHQtNC4xJyxcclxuICAgICAgICBhdmFpbGFibGVNb2RlbHM6IFtdXHJcbiAgICB9LFxyXG4gICAgYW50aHJvcGljU2V0dGluZ3M6IHtcclxuICAgICAgICBhcGlLZXk6ICcnLFxyXG4gICAgICAgIG1vZGVsOiAnY2xhdWRlLTMtNS1zb25uZXQtbGF0ZXN0JyxcclxuICAgICAgICBhdmFpbGFibGVNb2RlbHM6IFtdXHJcbiAgICB9LFxyXG4gICAgZ2VtaW5pU2V0dGluZ3M6IHtcclxuICAgICAgICBhcGlLZXk6ICcnLFxyXG4gICAgICAgIG1vZGVsOiAnZ2VtaW5pLTIuNS1mbGFzaC1wcmV2aWV3LTA1LTIwJyxcclxuICAgICAgICBhdmFpbGFibGVNb2RlbHM6IFtdXHJcbiAgICB9LFxyXG4gICAgb2xsYW1hU2V0dGluZ3M6IHtcclxuICAgICAgICBzZXJ2ZXJVcmw6ICdodHRwOi8vbG9jYWxob3N0OjExNDM0JyxcclxuICAgICAgICBtb2RlbDogJ2xsYW1hMicsXHJcbiAgICAgICAgYXZhaWxhYmxlTW9kZWxzOiBbXVxyXG4gICAgfSxcclxuICAgIHN5c3RlbU1lc3NhZ2U6IERFRkFVTFRfR0VORVJBTF9TWVNURU1fUFJPTVBULFxyXG4gICAgdGVtcGVyYXR1cmU6IDAuNyxcclxuICAgIG1heFRva2VuczogMTAwMCxcclxuICAgIGluY2x1ZGVEYXRlV2l0aFN5c3RlbU1lc3NhZ2U6IGZhbHNlLFxyXG4gICAgaW5jbHVkZVRpbWVXaXRoU3lzdGVtTWVzc2FnZTogZmFsc2UsXHJcbiAgICBlbmFibGVTdHJlYW1pbmc6IHRydWUsXHJcbiAgICBhdXRvT3Blbk1vZGVsU2V0dGluZ3M6IHRydWUsXHJcbiAgICBlbmFibGVPYnNpZGlhbkxpbmtzOiB0cnVlLFxyXG4gICAgdGl0bGVPdXRwdXRNb2RlOiBcImNsaXBib2FyZFwiLFxyXG4gICAgc3VtbWFyeU91dHB1dE1vZGU6IFwiY2xpcGJvYXJkXCIsXHJcbiAgICBjaGF0U2VwYXJhdG9yOiAnLS0tLScsXHJcbiAgICBjaGF0U3RhcnRTdHJpbmc6IHVuZGVmaW5lZCxcclxuICAgIGNoYXRFbmRTdHJpbmc6IHVuZGVmaW5lZCxcclxuICAgIGVuYWJsZUNvbnRleHROb3RlczogZmFsc2UsXHJcbiAgICBjb250ZXh0Tm90ZXM6ICcnLFxyXG5cclxuICAgIHRpdGxlUHJvbXB0OiBERUZBVUxUX1RJVExFX1BST01QVCxcclxuICAgIHN1bW1hcnlQcm9tcHQ6IERFRkFVTFRfU1VNTUFSWV9QUk9NUFQsXHJcblxyXG4gICAgbWF4U2Vzc2lvbnM6IDEwLFxyXG4gICAgYXV0b1NhdmVTZXNzaW9uczogdHJ1ZSxcclxuICAgIHNlc3Npb25zOiBbXSxcclxuICAgIGFjdGl2ZVNlc3Npb25JZDogdW5kZWZpbmVkLFxyXG5cclxuICAgIGV4cGFuZExpbmtlZE5vdGVzUmVjdXJzaXZlbHk6IGZhbHNlLFxyXG4gICAgbWF4TGlua0V4cGFuc2lvbkRlcHRoOiAyLFxyXG5cclxuICAgIGNoYXROb3RlRm9sZGVyOiAnJywgLy8gRGVmYXVsdCB0byB2YXVsdCByb290XHJcblxyXG4gICAgeWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IFwic3VtbWFyeVwiLFxyXG4gICAgICAgICAgICBwcm9tcHQ6IERFRkFVTFRfU1VNTUFSWV9QUk9NUFQsXHJcbiAgICAgICAgICAgIG91dHB1dE1vZGU6IFwibWV0YWRhdGFcIixcclxuICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwiR2VuZXJhdGUgWUFNTDogc3VtbWFyeVwiXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBjaGF0IHNlc3Npb25cclxuICogXHJcbiAqIEBwcm9wZXJ0eSBpZCAtIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgc2Vzc2lvblxyXG4gKiBAcHJvcGVydHkgbmFtZSAtIEh1bWFuLXJlYWRhYmxlIG5hbWUgZm9yIHRoZSBzZXNzaW9uXHJcbiAqIEBwcm9wZXJ0eSBjcmVhdGVkIC0gVGltZXN0YW1wIHdoZW4gdGhlIHNlc3Npb24gd2FzIGNyZWF0ZWRcclxuICogQHByb3BlcnR5IGxhc3RVcGRhdGVkIC0gVGltZXN0YW1wIHdoZW4gdGhlIHNlc3Npb24gd2FzIGxhc3QgdXBkYXRlZFxyXG4gKiBAcHJvcGVydHkgbWVzc2FnZXMgLSBMaXN0IG9mIG1lc3NhZ2VzIGluIHRoZSBzZXNzaW9uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENoYXRTZXNzaW9uIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjcmVhdGVkOiBudW1iZXI7XHJcbiAgICBsYXN0VXBkYXRlZDogbnVtYmVyO1xyXG4gICAgbWVzc2FnZXM6IE1lc3NhZ2VbXTtcclxufVxyXG4iLCAiLyoqXHJcbiAqIEJhc2UgQUkgUHJvdmlkZXIgSW1wbGVtZW50YXRpb25cclxuICogXHJcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgYmFzZSBjbGFzcyBmb3IgQUkgcHJvdmlkZXJzIHdpdGggc2hhcmVkIGZ1bmN0aW9uYWxpdHlcclxuICogYW5kIGNvbW1vbiBlcnJvciBoYW5kbGluZyBwYXR0ZXJucy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBBSVByb3ZpZGVyLCBNZXNzYWdlLCBDb21wbGV0aW9uT3B0aW9ucywgQ29ubmVjdGlvblRlc3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIENvbW1vbiBlcnJvciB0eXBlcyBhY3Jvc3MgcHJvdmlkZXJzXHJcbiAqL1xyXG5leHBvcnQgZW51bSBQcm92aWRlckVycm9yVHlwZSB7XHJcbiAgICBJbnZhbGlkQXBpS2V5ID0gJ2ludmFsaWRfYXBpX2tleScsXHJcbiAgICBSYXRlTGltaXQgPSAncmF0ZV9saW1pdCcsXHJcbiAgICBJbnZhbGlkUmVxdWVzdCA9ICdpbnZhbGlkX3JlcXVlc3QnLFxyXG4gICAgU2VydmVyRXJyb3IgPSAnc2VydmVyX2Vycm9yJyxcclxuICAgIE5ldHdvcmtFcnJvciA9ICduZXR3b3JrX2Vycm9yJ1xyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBlcnJvciBjbGFzcyBmb3IgcHJvdmlkZXItc3BlY2lmaWMgZXJyb3JzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIHR5cGU6IFByb3ZpZGVyRXJyb3JUeXBlO1xyXG4gICAgc3RhdHVzQ29kZT86IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBQcm92aWRlckVycm9yVHlwZSwgbWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlPzogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdQcm92aWRlckVycm9yJztcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIEFJIHByb3ZpZGVycyBpbXBsZW1lbnRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHlcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlUHJvdmlkZXIgaW1wbGVtZW50cyBBSVByb3ZpZGVyIHtcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBhcGlLZXk6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBiYXNlVXJsOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgbW9kZWw6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGNvbXBsZXRpb24gZnJvbSB0aGUgQUkgbW9kZWxcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZ2V0Q29tcGxldGlvbihtZXNzYWdlczogTWVzc2FnZVtdLCBvcHRpb25zOiBDb21wbGV0aW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXZhaWxhYmxlIG1vZGVsc1xyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBnZXRBdmFpbGFibGVNb2RlbHMoKTogUHJvbWlzZTxzdHJpbmdbXT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGNvbm5lY3Rpb24gdG8gdGhlIHByb3ZpZGVyXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0IHRlc3RDb25uZWN0aW9uKCk6IFByb21pc2U8Q29ubmVjdGlvblRlc3RSZXN1bHQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIGNvbW1vbiBIVFRQIGVycm9yc1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaGFuZGxlSHR0cEVycm9yKGVycm9yOiBhbnkpOiBuZXZlciB7XHJcbiAgICAgICAgLy8gSGFuZGxlIFJlc3BvbnNlIG9iamVjdHMgZnJvbSBmZXRjaCBBUElcclxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBlcnJvci5zdGF0dXM7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwMTpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuSW52YWxpZEFwaUtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgQVBJIGtleScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQyOTpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuUmF0ZUxpbWl0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnUmF0ZSBsaW1pdCBleGNlZWRlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwMDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuSW52YWxpZFJlcXVlc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIHJlcXVlc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1MDA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIDUwMjpcclxuICAgICAgICAgICAgICAgIGNhc2UgNTAzOlxyXG4gICAgICAgICAgICAgICAgY2FzZSA1MDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLlNlcnZlckVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VydmVyIGVycm9yIG9jY3VycmVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLlNlcnZlckVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgVW5rbm93biBlcnJvciBvY2N1cnJlZDogJHtzdGF0dXN9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIGVycm9yIG9iamVjdHMgd2l0aCByZXNwb25zZSBwcm9wZXJ0eSAobGlrZSBBeGlvcyBlcnJvcnMpXHJcbiAgICAgICAgaWYgKCFlcnJvci5yZXNwb25zZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcclxuICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLk5ldHdvcmtFcnJvcixcclxuICAgICAgICAgICAgICAgICdOZXR3b3JrIGVycm9yIG9jY3VycmVkJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gZXJyb3IucmVzcG9uc2Uuc3RhdHVzO1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgNDAxOlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuSW52YWxpZEFwaUtleSxcclxuICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBBUEkga2V5JyxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgNDI5OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuUmF0ZUxpbWl0LFxyXG4gICAgICAgICAgICAgICAgICAgICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNhc2UgNDAwOlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXJFcnJvclR5cGUuSW52YWxpZFJlcXVlc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgcmVxdWVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjYXNlIDUwMDpcclxuICAgICAgICAgICAgY2FzZSA1MDI6XHJcbiAgICAgICAgICAgIGNhc2UgNTAzOlxyXG4gICAgICAgICAgICBjYXNlIDUwNDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQcm92aWRlckVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLlNlcnZlckVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgICdTZXJ2ZXIgZXJyb3Igb2NjdXJyZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQcm92aWRlckVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLlNlcnZlckVycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGBVbmtub3duIGVycm9yIG9jY3VycmVkOiAke3N0YXR1c31gLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JtYXQgZXJyb3IgbWVzc2FnZSBmb3IgY29ubmVjdGlvbiB0ZXN0IHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGZvcm1hdEVycm9yTWVzc2FnZShlcnJvcjogYW55KTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQcm92aWRlckVycm9yKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXJyb3IudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm92aWRlckVycm9yVHlwZS5JbnZhbGlkQXBpS2V5OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnSW52YWxpZCBBUEkga2V5LiBQbGVhc2UgY2hlY2sgeW91ciBjcmVkZW50aWFscy4nO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm92aWRlckVycm9yVHlwZS5SYXRlTGltaXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdSYXRlIGxpbWl0IGV4Y2VlZGVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLic7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFByb3ZpZGVyRXJyb3JUeXBlLk5ldHdvcmtFcnJvcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ05ldHdvcmsgZXJyb3IuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24uJztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2UgfHwgJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgc3RhbmRhcmQgZXJyb3IgcmVzcG9uc2UgZm9yIGNvbm5lY3Rpb24gdGVzdHNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUVycm9yUmVzcG9uc2UoZXJyb3I6IGFueSk6IENvbm5lY3Rpb25UZXN0UmVzdWx0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5mb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCAiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnMC4zNi4zJzsgLy8geC1yZWxlYXNlLXBsZWFzZS12ZXJzaW9uXG4iLCAiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5pbXBvcnQgeyB0eXBlIFJlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uL2NvcmUuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTaGltcyB7XG4gIGtpbmQ6IHN0cmluZztcbiAgZmV0Y2g6IGFueTtcbiAgUmVxdWVzdDogYW55O1xuICBSZXNwb25zZTogYW55O1xuICBIZWFkZXJzOiBhbnk7XG4gIEZvcm1EYXRhOiBhbnk7XG4gIEJsb2I6IGFueTtcbiAgRmlsZTogYW55O1xuICBSZWFkYWJsZVN0cmVhbTogYW55O1xuICBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9uczogPFQgPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oXG4gICAgZm9ybTogU2hpbXNbJ0Zvcm1EYXRhJ10sXG4gICAgb3B0czogUmVxdWVzdE9wdGlvbnM8VD4sXG4gICkgPT4gUHJvbWlzZTxSZXF1ZXN0T3B0aW9uczxUPj47XG4gIGdldERlZmF1bHRBZ2VudDogKHVybDogc3RyaW5nKSA9PiBhbnk7XG4gIGZpbGVGcm9tUGF0aDpcbiAgICB8ICgocGF0aDogc3RyaW5nLCBmaWxlbmFtZT86IHN0cmluZywgb3B0aW9ucz86IHt9KSA9PiBQcm9taXNlPFNoaW1zWydGaWxlJ10+KVxuICAgIHwgKChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiB7fSkgPT4gUHJvbWlzZTxTaGltc1snRmlsZSddPik7XG4gIGlzRnNSZWFkU3RyZWFtOiAodmFsdWU6IGFueSkgPT4gYm9vbGVhbjtcbn1cblxuZXhwb3J0IGxldCBhdXRvID0gZmFsc2U7XG5leHBvcnQgbGV0IGtpbmQ6IFNoaW1zWydraW5kJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGZldGNoOiBTaGltc1snZmV0Y2gnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVxdWVzdDogU2hpbXNbJ1JlcXVlc3QnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVzcG9uc2U6IFNoaW1zWydSZXNwb25zZSddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBIZWFkZXJzOiBTaGltc1snSGVhZGVycyddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBGb3JtRGF0YTogU2hpbXNbJ0Zvcm1EYXRhJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEJsb2I6IFNoaW1zWydCbG9iJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZpbGU6IFNoaW1zWydGaWxlJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlYWRhYmxlU3RyZWFtOiBTaGltc1snUmVhZGFibGVTdHJlYW0nXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM6IFNoaW1zWydnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBnZXREZWZhdWx0QWdlbnQ6IFNoaW1zWydnZXREZWZhdWx0QWdlbnQnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZmlsZUZyb21QYXRoOiBTaGltc1snZmlsZUZyb21QYXRoJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGlzRnNSZWFkU3RyZWFtOiBTaGltc1snaXNGc1JlYWRTdHJlYW0nXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNoaW1zKHNoaW1zOiBTaGltcywgb3B0aW9uczogeyBhdXRvOiBib29sZWFuIH0gPSB7IGF1dG86IGZhbHNlIH0pIHtcbiAgaWYgKGF1dG8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgeW91IG11c3QgXFxgaW1wb3J0ICdAYW50aHJvcGljLWFpL3Nkay9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBiZWZvcmUgaW1wb3J0aW5nIGFueXRoaW5nIGVsc2UgZnJvbSBAYW50aHJvcGljLWFpL3Nka2AsXG4gICAgKTtcbiAgfVxuICBpZiAoa2luZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBjYW4ndCBcXGBpbXBvcnQgJ0BhbnRocm9waWMtYWkvc2RrL3NoaW1zLyR7c2hpbXMua2luZH0nXFxgIGFmdGVyIFxcYGltcG9ydCAnQGFudGhyb3BpYy1haS9zZGsvc2hpbXMvJHtraW5kfSdcXGBgLFxuICAgICk7XG4gIH1cbiAgYXV0byA9IG9wdGlvbnMuYXV0bztcbiAga2luZCA9IHNoaW1zLmtpbmQ7XG4gIGZldGNoID0gc2hpbXMuZmV0Y2g7XG4gIFJlcXVlc3QgPSBzaGltcy5SZXF1ZXN0O1xuICBSZXNwb25zZSA9IHNoaW1zLlJlc3BvbnNlO1xuICBIZWFkZXJzID0gc2hpbXMuSGVhZGVycztcbiAgRm9ybURhdGEgPSBzaGltcy5Gb3JtRGF0YTtcbiAgQmxvYiA9IHNoaW1zLkJsb2I7XG4gIEZpbGUgPSBzaGltcy5GaWxlO1xuICBSZWFkYWJsZVN0cmVhbSA9IHNoaW1zLlJlYWRhYmxlU3RyZWFtO1xuICBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyA9IHNoaW1zLmdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zO1xuICBnZXREZWZhdWx0QWdlbnQgPSBzaGltcy5nZXREZWZhdWx0QWdlbnQ7XG4gIGZpbGVGcm9tUGF0aCA9IHNoaW1zLmZpbGVGcm9tUGF0aDtcbiAgaXNGc1JlYWRTdHJlYW0gPSBzaGltcy5pc0ZzUmVhZFN0cmVhbTtcbn1cbiIsICIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aXBhcnRCb2R5IHtcbiAgY29uc3RydWN0b3IocHVibGljIGJvZHk6IGFueSkge31cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdNdWx0aXBhcnRCb2R5JztcbiAgfVxufVxuIiwgIi8qKlxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cbiAqL1xuaW1wb3J0IHsgTXVsdGlwYXJ0Qm9keSB9IGZyb20gXCIuL011bHRpcGFydEJvZHkuanNcIjtcbmltcG9ydCB7IHR5cGUgUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vY29yZS5qc1wiO1xuaW1wb3J0IHsgdHlwZSBTaGltcyB9IGZyb20gXCIuL3JlZ2lzdHJ5LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSdW50aW1lKHsgbWFudWFsbHlJbXBvcnRlZCB9OiB7IG1hbnVhbGx5SW1wb3J0ZWQ/OiBib29sZWFuIH0gPSB7fSk6IFNoaW1zIHtcbiAgY29uc3QgcmVjb21tZW5kYXRpb24gPVxuICAgIG1hbnVhbGx5SW1wb3J0ZWQgP1xuICAgICAgYFlvdSBtYXkgbmVlZCB0byB1c2UgcG9seWZpbGxzYFxuICAgIDogYEFkZCBvbmUgb2YgdGhlc2UgaW1wb3J0cyBiZWZvcmUgeW91ciBmaXJzdCBcXGBpbXBvcnQgXHUyMDI2IGZyb20gJ0BhbnRocm9waWMtYWkvc2RrJ1xcYDpcbi0gXFxgaW1wb3J0ICdAYW50aHJvcGljLWFpL3Nkay9zaGltcy9ub2RlJ1xcYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbi0gXFxgaW1wb3J0ICdAYW50aHJvcGljLWFpL3Nkay9zaGltcy93ZWInXFxgIChvdGhlcndpc2UpXG5gO1xuXG4gIGxldCBfZmV0Y2gsIF9SZXF1ZXN0LCBfUmVzcG9uc2UsIF9IZWFkZXJzO1xuICB0cnkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBfZmV0Y2ggPSBmZXRjaDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgX1JlcXVlc3QgPSBSZXF1ZXN0O1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBfUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgX0hlYWRlcnMgPSBIZWFkZXJzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGB0aGlzIGVudmlyb25tZW50IGlzIG1pc3NpbmcgdGhlIGZvbGxvd2luZyBXZWIgRmV0Y2ggQVBJIHR5cGU6ICR7XG4gICAgICAgIChlcnJvciBhcyBhbnkpLm1lc3NhZ2VcbiAgICAgIH0uICR7cmVjb21tZW5kYXRpb259YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnd2ViJyxcbiAgICBmZXRjaDogX2ZldGNoLFxuICAgIFJlcXVlc3Q6IF9SZXF1ZXN0LFxuICAgIFJlc3BvbnNlOiBfUmVzcG9uc2UsXG4gICAgSGVhZGVyczogX0hlYWRlcnMsXG4gICAgRm9ybURhdGE6XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiAoXG4gICAgICAgIGNsYXNzIEZvcm1EYXRhIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBmaWxlIHVwbG9hZHMgYXJlbid0IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHlldCBhcyAnRm9ybURhdGEnIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICksXG4gICAgQmxvYjpcbiAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiAoXG4gICAgICAgIGNsYXNzIEJsb2Ige1xuICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgZmlsZSB1cGxvYWRzIGFyZW4ndCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCB5ZXQgYXMgJ0Jsb2InIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICksXG4gICAgRmlsZTpcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyA/IEZpbGUgOiAoXG4gICAgICAgIGNsYXNzIEZpbGUge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdGaWxlJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApLFxuICAgIFJlYWRhYmxlU3RyZWFtOlxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSAndW5kZWZpbmVkJyA/IFJlYWRhYmxlU3RyZWFtIDogKFxuICAgICAgICBjbGFzcyBSZWFkYWJsZVN0cmVhbSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgc3RyZWFtaW5nIGlzbid0IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHlldCBhcyAnUmVhZGFibGVTdHJlYW0nIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICksXG4gICAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM6IGFzeW5jIDxUID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZm9ybTogRm9ybURhdGEsXG4gICAgICBvcHRzOiBSZXF1ZXN0T3B0aW9uczxUPixcbiAgICApOiBQcm9taXNlPFJlcXVlc3RPcHRpb25zPFQ+PiA9PiAoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGJvZHk6IG5ldyBNdWx0aXBhcnRCb2R5KGZvcm0pIGFzIGFueSxcbiAgICB9KSxcbiAgICBnZXREZWZhdWx0QWdlbnQ6ICh1cmw6IHN0cmluZykgPT4gdW5kZWZpbmVkLFxuICAgIGZpbGVGcm9tUGF0aDogKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIGBmaWxlRnJvbVBhdGhgIGZ1bmN0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuIFNlZSB0aGUgUkVBRE1FIGZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vYW50aHJvcGljcy9hbnRocm9waWMtc2RrLXR5cGVzY3JpcHQjZmlsZS11cGxvYWRzJyxcbiAgICAgICk7XG4gICAgfSxcbiAgICBpc0ZzUmVhZFN0cmVhbTogKHZhbHVlOiBhbnkpID0+IGZhbHNlLFxuICB9O1xufVxuIiwgImV4cG9ydCAqIGZyb20gXCIuLi93ZWItcnVudGltZS5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnRpbWUubWpzLm1hcCIsICIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCAqIGFzIHNoaW1zIGZyb20gJy4vcmVnaXN0cnkubWpzJztcbmltcG9ydCAqIGFzIGF1dG8gZnJvbSAnQGFudGhyb3BpYy1haS9zZGsvX3NoaW1zL2F1dG8vcnVudGltZSc7XG5pZiAoIXNoaW1zLmtpbmQpIHNoaW1zLnNldFNoaW1zKGF1dG8uZ2V0UnVudGltZSgpLCB7IGF1dG86IHRydWUgfSk7XG5leHBvcnQgKiBmcm9tICcuL3JlZ2lzdHJ5Lm1qcyc7XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgY2FzdFRvRXJyb3IsIEhlYWRlcnMgfSBmcm9tIFwiLi9jb3JlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBBbnRocm9waWNFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBBUElFcnJvcjxcbiAgVFN0YXR1cyBleHRlbmRzIG51bWJlciB8IHVuZGVmaW5lZCA9IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgVEhlYWRlcnMgZXh0ZW5kcyBIZWFkZXJzIHwgdW5kZWZpbmVkID0gSGVhZGVycyB8IHVuZGVmaW5lZCxcbiAgVEVycm9yIGV4dGVuZHMgT2JqZWN0IHwgdW5kZWZpbmVkID0gT2JqZWN0IHwgdW5kZWZpbmVkLFxuPiBleHRlbmRzIEFudGhyb3BpY0Vycm9yIHtcbiAgLyoqIEhUVFAgc3RhdHVzIGZvciB0aGUgcmVzcG9uc2UgdGhhdCBjYXVzZWQgdGhlIGVycm9yICovXG4gIHJlYWRvbmx5IHN0YXR1czogVFN0YXR1cztcbiAgLyoqIEhUVFAgaGVhZGVycyBmb3IgdGhlIHJlc3BvbnNlIHRoYXQgY2F1c2VkIHRoZSBlcnJvciAqL1xuICByZWFkb25seSBoZWFkZXJzOiBUSGVhZGVycztcbiAgLyoqIEpTT04gYm9keSBvZiB0aGUgcmVzcG9uc2UgdGhhdCBjYXVzZWQgdGhlIGVycm9yICovXG4gIHJlYWRvbmx5IGVycm9yOiBURXJyb3I7XG5cbiAgcmVhZG9ubHkgcmVxdWVzdF9pZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihzdGF0dXM6IFRTdGF0dXMsIGVycm9yOiBURXJyb3IsIG1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCwgaGVhZGVyczogVEhlYWRlcnMpIHtcbiAgICBzdXBlcihgJHtBUElFcnJvci5tYWtlTWVzc2FnZShzdGF0dXMsIGVycm9yLCBtZXNzYWdlKX1gKTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMucmVxdWVzdF9pZCA9IGhlYWRlcnM/LlsncmVxdWVzdC1pZCddO1xuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG1ha2VNZXNzYWdlKHN0YXR1czogbnVtYmVyIHwgdW5kZWZpbmVkLCBlcnJvcjogYW55LCBtZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtc2cgPVxuICAgICAgZXJyb3I/Lm1lc3NhZ2UgP1xuICAgICAgICB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgOiBKU09OLnN0cmluZ2lmeShlcnJvci5tZXNzYWdlKVxuICAgICAgOiBlcnJvciA/IEpTT04uc3RyaW5naWZ5KGVycm9yKVxuICAgICAgOiBtZXNzYWdlO1xuXG4gICAgaWYgKHN0YXR1cyAmJiBtc2cpIHtcbiAgICAgIHJldHVybiBgJHtzdGF0dXN9ICR7bXNnfWA7XG4gICAgfVxuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHJldHVybiBgJHtzdGF0dXN9IHN0YXR1cyBjb2RlIChubyBib2R5KWA7XG4gICAgfVxuICAgIGlmIChtc2cpIHtcbiAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuICAgIHJldHVybiAnKG5vIHN0YXR1cyBjb2RlIG9yIGJvZHkpJztcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZShcbiAgICBzdGF0dXM6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICBlcnJvclJlc3BvbnNlOiBPYmplY3QgfCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGhlYWRlcnM6IEhlYWRlcnMgfCB1bmRlZmluZWQsXG4gICk6IEFQSUVycm9yIHtcbiAgICBpZiAoIXN0YXR1cyB8fCAhaGVhZGVycykge1xuICAgICAgcmV0dXJuIG5ldyBBUElDb25uZWN0aW9uRXJyb3IoeyBtZXNzYWdlLCBjYXVzZTogY2FzdFRvRXJyb3IoZXJyb3JSZXNwb25zZSkgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3IgPSBlcnJvclJlc3BvbnNlIGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG5cbiAgICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICAgIHJldHVybiBuZXcgQmFkUmVxdWVzdEVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IDQwMSkge1xuICAgICAgcmV0dXJuIG5ldyBBdXRoZW50aWNhdGlvbkVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgICAgcmV0dXJuIG5ldyBQZXJtaXNzaW9uRGVuaWVkRXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICByZXR1cm4gbmV3IE5vdEZvdW5kRXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDA5KSB7XG4gICAgICByZXR1cm4gbmV3IENvbmZsaWN0RXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICByZXR1cm4gbmV3IFVucHJvY2Vzc2FibGVFbnRpdHlFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSA0MjkpIHtcbiAgICAgIHJldHVybiBuZXcgUmF0ZUxpbWl0RXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFQSUVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBUElVc2VyQWJvcnRFcnJvciBleHRlbmRzIEFQSUVycm9yPHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQ+IHtcbiAgY29uc3RydWN0b3IoeyBtZXNzYWdlIH06IHsgbWVzc2FnZT86IHN0cmluZyB9ID0ge30pIHtcbiAgICBzdXBlcih1bmRlZmluZWQsIHVuZGVmaW5lZCwgbWVzc2FnZSB8fCAnUmVxdWVzdCB3YXMgYWJvcnRlZC4nLCB1bmRlZmluZWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBUElDb25uZWN0aW9uRXJyb3IgZXh0ZW5kcyBBUElFcnJvcjx1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSwgY2F1c2UgfTogeyBtZXNzYWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkOyBjYXVzZT86IEVycm9yIHwgdW5kZWZpbmVkIH0pIHtcbiAgICBzdXBlcih1bmRlZmluZWQsIHVuZGVmaW5lZCwgbWVzc2FnZSB8fCAnQ29ubmVjdGlvbiBlcnJvci4nLCB1bmRlZmluZWQpO1xuICAgIC8vIGluIHNvbWUgZW52aXJvbm1lbnRzIHRoZSAnY2F1c2UnIHByb3BlcnR5IGlzIGFscmVhZHkgZGVjbGFyZWRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGNhdXNlKSB0aGlzLmNhdXNlID0gY2F1c2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IgZXh0ZW5kcyBBUElDb25uZWN0aW9uRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgfTogeyBtZXNzYWdlPzogc3RyaW5nIH0gPSB7fSkge1xuICAgIHN1cGVyKHsgbWVzc2FnZTogbWVzc2FnZSA/PyAnUmVxdWVzdCB0aW1lZCBvdXQuJyB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgQVBJRXJyb3I8NDAwLCBIZWFkZXJzPiB7fVxuXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25FcnJvciBleHRlbmRzIEFQSUVycm9yPDQwMSwgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25EZW5pZWRFcnJvciBleHRlbmRzIEFQSUVycm9yPDQwMywgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBBUElFcnJvcjw0MDQsIEhlYWRlcnM+IHt9XG5cbmV4cG9ydCBjbGFzcyBDb25mbGljdEVycm9yIGV4dGVuZHMgQVBJRXJyb3I8NDA5LCBIZWFkZXJzPiB7fVxuXG5leHBvcnQgY2xhc3MgVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yIGV4dGVuZHMgQVBJRXJyb3I8NDIyLCBIZWFkZXJzPiB7fVxuXG5leHBvcnQgY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBBUElFcnJvcjw0MjksIEhlYWRlcnM+IHt9XG5cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgQVBJRXJyb3I8bnVtYmVyLCBIZWFkZXJzPiB7fVxuIiwgImltcG9ydCB7IEFudGhyb3BpY0Vycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yLmpzXCI7XG5cbmV4cG9ydCB0eXBlIEJ5dGVzID0gc3RyaW5nIHwgQXJyYXlCdWZmZXIgfCBVaW50OEFycmF5IHwgQnVmZmVyIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHJlLWltcGxlbWVudGF0aW9uIG9mIGh0dHB4J3MgYExpbmVEZWNvZGVyYCBpbiBQeXRob24gdGhhdCBoYW5kbGVzIGluY3JlbWVudGFsbHlcbiAqIHJlYWRpbmcgbGluZXMgZnJvbSB0ZXh0LlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lbmNvZGUvaHR0cHgvYmxvYi85MjAzMzNlYTk4MTE4ZTljZjYxN2YyNDY5MDVkN2IyMDI1MTA5NDFjL2h0dHB4L19kZWNvZGVycy5weSNMMjU4XG4gKi9cbmV4cG9ydCBjbGFzcyBMaW5lRGVjb2RlciB7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICBzdGF0aWMgTkVXTElORV9DSEFSUyA9IG5ldyBTZXQoWydcXG4nLCAnXFxyJ10pO1xuICBzdGF0aWMgTkVXTElORV9SRUdFWFAgPSAvXFxyXFxufFtcXG5cXHJdL2c7XG5cbiAgYnVmZmVyOiBzdHJpbmdbXTtcbiAgdHJhaWxpbmdDUjogYm9vbGVhbjtcbiAgdGV4dERlY29kZXI6IGFueTsgLy8gVGV4dERlY29kZXIgZm91bmQgaW4gYnJvd3NlcnM7IG5vdCB0eXBlZCB0byBhdm9pZCBwdWxsaW5nIGluIGVpdGhlciBcImRvbVwiIG9yIFwibm9kZVwiIHR5cGVzLlxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgdGhpcy50cmFpbGluZ0NSID0gZmFsc2U7XG4gIH1cblxuICBkZWNvZGUoY2h1bms6IEJ5dGVzKTogc3RyaW5nW10ge1xuICAgIGxldCB0ZXh0ID0gdGhpcy5kZWNvZGVUZXh0KGNodW5rKTtcblxuICAgIGlmICh0aGlzLnRyYWlsaW5nQ1IpIHtcbiAgICAgIHRleHQgPSAnXFxyJyArIHRleHQ7XG4gICAgICB0aGlzLnRyYWlsaW5nQ1IgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRleHQuZW5kc1dpdGgoJ1xccicpKSB7XG4gICAgICB0aGlzLnRyYWlsaW5nQ1IgPSB0cnVlO1xuICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgLTEpO1xuICAgIH1cblxuICAgIGlmICghdGV4dCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHRyYWlsaW5nTmV3bGluZSA9IExpbmVEZWNvZGVyLk5FV0xJTkVfQ0hBUlMuaGFzKHRleHRbdGV4dC5sZW5ndGggLSAxXSB8fCAnJyk7XG4gICAgbGV0IGxpbmVzID0gdGV4dC5zcGxpdChMaW5lRGVjb2Rlci5ORVdMSU5FX1JFR0VYUCk7XG5cbiAgICAvLyBpZiB0aGVyZSBpcyBhIHRyYWlsaW5nIG5ldyBsaW5lIHRoZW4gdGhlIGxhc3QgZW50cnkgd2lsbCBiZSBhbiBlbXB0eVxuICAgIC8vIHN0cmluZyB3aGljaCB3ZSBkb24ndCBjYXJlIGFib3V0XG4gICAgaWYgKHRyYWlsaW5nTmV3bGluZSkge1xuICAgICAgbGluZXMucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSAmJiAhdHJhaWxpbmdOZXdsaW5lKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKGxpbmVzWzBdISk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgIGxpbmVzID0gW3RoaXMuYnVmZmVyLmpvaW4oJycpICsgbGluZXNbMF0sIC4uLmxpbmVzLnNsaWNlKDEpXTtcbiAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgfVxuXG4gICAgaWYgKCF0cmFpbGluZ05ld2xpbmUpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gW2xpbmVzLnBvcCgpIHx8ICcnXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGluZXM7XG4gIH1cblxuICBkZWNvZGVUZXh0KGJ5dGVzOiBCeXRlcyk6IHN0cmluZyB7XG4gICAgaWYgKGJ5dGVzID09IG51bGwpIHJldHVybiAnJztcbiAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykgcmV0dXJuIGJ5dGVzO1xuXG4gICAgLy8gTm9kZTpcbiAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChieXRlcyBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gYnl0ZXMudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIGlmIChieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkOiByZWNlaXZlZCBub24tVWludDhBcnJheSAoJHtieXRlcy5jb25zdHJ1Y3Rvci5uYW1lfSkgc3RyZWFtIGNodW5rIGluIGFuIGVudmlyb25tZW50IHdpdGggYSBnbG9iYWwgXCJCdWZmZXJcIiBkZWZpbmVkLCB3aGljaCB0aGlzIGxpYnJhcnkgYXNzdW1lcyB0byBiZSBOb2RlLiBQbGVhc2UgcmVwb3J0IHRoaXMgZXJyb3IuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQnJvd3NlclxuICAgIGlmICh0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGJ5dGVzIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgdGhpcy50ZXh0RGVjb2RlciA/Pz0gbmV3IFRleHREZWNvZGVyKCd1dGY4Jyk7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHREZWNvZGVyLmRlY29kZShieXRlcyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihcbiAgICAgICAgYFVuZXhwZWN0ZWQ6IHJlY2VpdmVkIG5vbi1VaW50OEFycmF5L0FycmF5QnVmZmVyICgke1xuICAgICAgICAgIChieXRlcyBhcyBhbnkpLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgfSkgaW4gYSB3ZWIgcGxhdGZvcm0uIFBsZWFzZSByZXBvcnQgdGhpcyBlcnJvci5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoXG4gICAgICBgVW5leHBlY3RlZDogbmVpdGhlciBCdWZmZXIgbm9yIFRleHREZWNvZGVyIGFyZSBhdmFpbGFibGUgYXMgZ2xvYmFscy4gUGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yLmAsXG4gICAgKTtcbiAgfVxuXG4gIGZsdXNoKCk6IHN0cmluZ1tdIHtcbiAgICBpZiAoIXRoaXMuYnVmZmVyLmxlbmd0aCAmJiAhdGhpcy50cmFpbGluZ0NSKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgbGluZXMgPSBbdGhpcy5idWZmZXIuam9pbignJyldO1xuICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgdGhpcy50cmFpbGluZ0NSID0gZmFsc2U7XG4gICAgcmV0dXJuIGxpbmVzO1xuICB9XG59XG4iLCAiLyoqXG4gKiBNb3N0IGJyb3dzZXJzIGRvbid0IHlldCBoYXZlIGFzeW5jIGl0ZXJhYmxlIHN1cHBvcnQgZm9yIFJlYWRhYmxlU3RyZWFtLFxuICogYW5kIE5vZGUgaGFzIGEgdmVyeSBkaWZmZXJlbnQgd2F5IG9mIHJlYWRpbmcgYnl0ZXMgZnJvbSBpdHMgXCJSZWFkYWJsZVN0cmVhbVwiLlxuICpcbiAqIFRoaXMgcG9seWZpbGwgd2FzIHB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aWFzQnVlbGVucy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9wdWxsLzEyMiNpc3N1ZWNvbW1lbnQtMTYyNzM1NDQ5MFxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGU8VD4oc3RyZWFtOiBhbnkpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkgcmV0dXJuIHN0cmVhbTtcblxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIHJldHVybiB7XG4gICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIGlmIChyZXN1bHQ/LmRvbmUpIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBjbG9zZWRcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGVycm9yZWRcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJldHVybigpIHtcbiAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgfTtcbn1cbiIsICJpbXBvcnQgeyBSZWFkYWJsZVN0cmVhbSwgdHlwZSBSZXNwb25zZSB9IGZyb20gXCIuL19zaGltcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQW50aHJvcGljRXJyb3IgfSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuaW1wb3J0IHsgTGluZURlY29kZXIgfSBmcm9tIFwiLi9pbnRlcm5hbC9kZWNvZGVycy9saW5lLmpzXCI7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuL2ludGVybmFsL3N0cmVhbS11dGlscy5qc1wiO1xuXG5pbXBvcnQgeyBjcmVhdGVSZXNwb25zZUhlYWRlcnMgfSBmcm9tIFwiLi9jb3JlLmpzXCI7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gXCIuL2Vycm9yLmpzXCI7XG5cbnR5cGUgQnl0ZXMgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBTZXJ2ZXJTZW50RXZlbnQgPSB7XG4gIGV2ZW50OiBzdHJpbmcgfCBudWxsO1xuICBkYXRhOiBzdHJpbmc7XG4gIHJhdzogc3RyaW5nW107XG59O1xuXG5leHBvcnQgY2xhc3MgU3RyZWFtPEl0ZW0+IGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxJdGVtPiB7XG4gIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGl0ZXJhdG9yOiAoKSA9PiBBc3luY0l0ZXJhdG9yPEl0ZW0+LFxuICAgIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcbiAgKSB7XG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tU1NFUmVzcG9uc2U8SXRlbT4ocmVzcG9uc2U6IFJlc3BvbnNlLCBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIpOiBTdHJlYW08SXRlbT4ge1xuICAgIGxldCBjb25zdW1lZCA9IGZhbHNlO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yKCk6IEFzeW5jSXRlcmF0b3I8SXRlbSwgYW55LCB1bmRlZmluZWQ+IHtcbiAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpdGVyYXRlIG92ZXIgYSBjb25zdW1lZCBzdHJlYW0sIHVzZSBgLnRlZSgpYCB0byBzcGxpdCB0aGUgc3RyZWFtLicpO1xuICAgICAgfVxuICAgICAgY29uc3VtZWQgPSB0cnVlO1xuICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3Qgc3NlIG9mIF9pdGVyU1NFTWVzc2FnZXMocmVzcG9uc2UsIGNvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgaWYgKHNzZS5ldmVudCA9PT0gJ2NvbXBsZXRpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKHNzZS5kYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgaW50byBKU09OOmAsIHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRnJvbSBjaHVuazpgLCBzc2UucmF3KTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzc2UuZXZlbnQgPT09ICdtZXNzYWdlX3N0YXJ0JyB8fFxuICAgICAgICAgICAgc3NlLmV2ZW50ID09PSAnbWVzc2FnZV9kZWx0YScgfHxcbiAgICAgICAgICAgIHNzZS5ldmVudCA9PT0gJ21lc3NhZ2Vfc3RvcCcgfHxcbiAgICAgICAgICAgIHNzZS5ldmVudCA9PT0gJ2NvbnRlbnRfYmxvY2tfc3RhcnQnIHx8XG4gICAgICAgICAgICBzc2UuZXZlbnQgPT09ICdjb250ZW50X2Jsb2NrX2RlbHRhJyB8fFxuICAgICAgICAgICAgc3NlLmV2ZW50ID09PSAnY29udGVudF9ibG9ja19zdG9wJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgeWllbGQgSlNPTi5wYXJzZShzc2UuZGF0YSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBwYXJzZSBtZXNzYWdlIGludG8gSlNPTjpgLCBzc2UuZGF0YSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZyb20gY2h1bms6YCwgc3NlLnJhdyk7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNzZS5ldmVudCA9PT0gJ3BpbmcnKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3NlLmV2ZW50ID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBUElFcnJvci5nZW5lcmF0ZShcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBgU1NFIEVycm9yOiAke3NzZS5kYXRhfWAsXG4gICAgICAgICAgICAgIHNzZS5kYXRhLFxuICAgICAgICAgICAgICBjcmVhdGVSZXNwb25zZUhlYWRlcnMocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgY2FsbHMgYHN0cmVhbS5jb250cm9sbGVyLmFib3J0KClgLCB3ZSBzaG91bGQgZXhpdCB3aXRob3V0IHRocm93aW5nLlxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSByZXR1cm47XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBgYnJlYWtgcywgYWJvcnQgdGhlIG9uZ29pbmcgcmVxdWVzdC5cbiAgICAgICAgaWYgKCFkb25lKSBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oaXRlcmF0b3IsIGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFN0cmVhbSBmcm9tIGEgbmV3bGluZS1zZXBhcmF0ZWQgUmVhZGFibGVTdHJlYW1cbiAgICogd2hlcmUgZWFjaCBpdGVtIGlzIGEgSlNPTiB2YWx1ZS5cbiAgICovXG4gIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW08SXRlbT4ocmVhZGFibGVTdHJlYW06IFJlYWRhYmxlU3RyZWFtLCBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIpOiBTdHJlYW08SXRlbT4ge1xuICAgIGxldCBjb25zdW1lZCA9IGZhbHNlO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJMaW5lcygpOiBBc3luY0dlbmVyYXRvcjxzdHJpbmcsIHZvaWQsIHVua25vd24+IHtcbiAgICAgIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG5cbiAgICAgIGNvbnN0IGl0ZXIgPSBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZTxCeXRlcz4ocmVhZGFibGVTdHJlYW0pO1xuICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBpdGVyKSB7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5kZWNvZGUoY2h1bmspKSB7XG4gICAgICAgICAgeWllbGQgbGluZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZmx1c2goKSkge1xuICAgICAgICB5aWVsZCBsaW5lO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRvcigpOiBBc3luY0l0ZXJhdG9yPEl0ZW0sIGFueSwgdW5kZWZpbmVkPiB7XG4gICAgICBpZiAoY29uc3VtZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaXRlcmF0ZSBvdmVyIGEgY29uc3VtZWQgc3RyZWFtLCB1c2UgYC50ZWUoKWAgdG8gc3BsaXQgdGhlIHN0cmVhbS4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN1bWVkID0gdHJ1ZTtcbiAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGxpbmUgb2YgaXRlckxpbmVzKCkpIHtcbiAgICAgICAgICBpZiAoZG9uZSkgY29udGludWU7XG4gICAgICAgICAgaWYgKGxpbmUpIHlpZWxkIEpTT04ucGFyc2UobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGNhbGxzIGBzdHJlYW0uY29udHJvbGxlci5hYm9ydCgpYCwgd2Ugc2hvdWxkIGV4aXQgd2l0aG91dCB0aHJvd2luZy5cbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm5hbWUgPT09ICdBYm9ydEVycm9yJykgcmV0dXJuO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgYGJyZWFrYHMsIGFib3J0IHRoZSBvbmdvaW5nIHJlcXVlc3QuXG4gICAgICAgIGlmICghZG9uZSkgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3RyZWFtKGl0ZXJhdG9yLCBjb250cm9sbGVyKTtcbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxJdGVtPiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgdGhlIHN0cmVhbSBpbnRvIHR3byBzdHJlYW1zIHdoaWNoIGNhbiBiZVxuICAgKiBpbmRlcGVuZGVudGx5IHJlYWQgZnJvbSBhdCBkaWZmZXJlbnQgc3BlZWRzLlxuICAgKi9cbiAgdGVlKCk6IFtTdHJlYW08SXRlbT4sIFN0cmVhbTxJdGVtPl0ge1xuICAgIGNvbnN0IGxlZnQ6IEFycmF5PFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8SXRlbT4+PiA9IFtdO1xuICAgIGNvbnN0IHJpZ2h0OiBBcnJheTxQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PEl0ZW0+Pj4gPSBbXTtcbiAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3IoKTtcblxuICAgIGNvbnN0IHRlZUl0ZXJhdG9yID0gKHF1ZXVlOiBBcnJheTxQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PEl0ZW0+Pj4pOiBBc3luY0l0ZXJhdG9yPEl0ZW0+ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBsZWZ0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIHJpZ2h0LnB1c2gocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHF1ZXVlLnNoaWZ0KCkhO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBTdHJlYW0oKCkgPT4gdGVlSXRlcmF0b3IobGVmdCksIHRoaXMuY29udHJvbGxlciksXG4gICAgICBuZXcgU3RyZWFtKCgpID0+IHRlZUl0ZXJhdG9yKHJpZ2h0KSwgdGhpcy5jb250cm9sbGVyKSxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoaXMgc3RyZWFtIHRvIGEgbmV3bGluZS1zZXBhcmF0ZWQgUmVhZGFibGVTdHJlYW0gb2ZcbiAgICogSlNPTiBzdHJpbmdpZmllZCB2YWx1ZXMgaW4gdGhlIHN0cmVhbVxuICAgKiB3aGljaCBjYW4gYmUgdHVybmVkIGJhY2sgaW50byBhIFN0cmVhbSB3aXRoIGBTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtKClgLlxuICAgKi9cbiAgdG9SZWFkYWJsZVN0cmVhbSgpOiBSZWFkYWJsZVN0cmVhbSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGl0ZXI6IEFzeW5jSXRlcmF0b3I8SXRlbT47XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG4gICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgaXRlciA9IHNlbGZbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICB9LFxuICAgICAgYXN5bmMgcHVsbChjdHJsOiBhbnkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBpdGVyLm5leHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIGN0cmwuY2xvc2UoKTtcblxuICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ1xcbicpO1xuXG4gICAgICAgICAgY3RybC5lbnF1ZXVlKGJ5dGVzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY3RybC5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYXN5bmMgY2FuY2VsKCkge1xuICAgICAgICBhd2FpdCBpdGVyLnJldHVybj8uKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogX2l0ZXJTU0VNZXNzYWdlcyhcbiAgcmVzcG9uc2U6IFJlc3BvbnNlLFxuICBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIsXG4pOiBBc3luY0dlbmVyYXRvcjxTZXJ2ZXJTZW50RXZlbnQsIHZvaWQsIHVua25vd24+IHtcbiAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgQXR0ZW1wdGVkIHRvIGl0ZXJhdGUgb3ZlciBhIHJlc3BvbnNlIHdpdGggbm8gYm9keWApO1xuICB9XG5cbiAgY29uc3Qgc3NlRGVjb2RlciA9IG5ldyBTU0VEZWNvZGVyKCk7XG4gIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG5cbiAgY29uc3QgaXRlciA9IFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlPEJ5dGVzPihyZXNwb25zZS5ib2R5KTtcbiAgZm9yIGF3YWl0IChjb25zdCBzc2VDaHVuayBvZiBpdGVyU1NFQ2h1bmtzKGl0ZXIpKSB7XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmRlY29kZShzc2VDaHVuaykpIHtcbiAgICAgIGNvbnN0IHNzZSA9IHNzZURlY29kZXIuZGVjb2RlKGxpbmUpO1xuICAgICAgaWYgKHNzZSkgeWllbGQgc3NlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgY29uc3Qgc3NlID0gc3NlRGVjb2Rlci5kZWNvZGUobGluZSk7XG4gICAgaWYgKHNzZSkgeWllbGQgc3NlO1xuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gYXN5bmMgaXRlcmFibGUgaXRlcmF0b3IsIGl0ZXJhdGVzIG92ZXIgaXQgYW5kIHlpZWxkcyBmdWxsXG4gKiBTU0UgY2h1bmtzLCBpLmUuIHlpZWxkcyB3aGVuIGEgZG91YmxlIG5ldy1saW5lIGlzIGVuY291bnRlcmVkLlxuICovXG5hc3luYyBmdW5jdGlvbiogaXRlclNTRUNodW5rcyhpdGVyYXRvcjogQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPEJ5dGVzPik6IEFzeW5jR2VuZXJhdG9yPFVpbnQ4QXJyYXk+IHtcbiAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheSgpO1xuXG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcmF0b3IpIHtcbiAgICBpZiAoY2h1bmsgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYmluYXJ5Q2h1bmsgPVxuICAgICAgY2h1bmsgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBVaW50OEFycmF5KGNodW5rKVxuICAgICAgOiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNodW5rKVxuICAgICAgOiBjaHVuaztcblxuICAgIGxldCBuZXdEYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGggKyBiaW5hcnlDaHVuay5sZW5ndGgpO1xuICAgIG5ld0RhdGEuc2V0KGRhdGEpO1xuICAgIG5ld0RhdGEuc2V0KGJpbmFyeUNodW5rLCBkYXRhLmxlbmd0aCk7XG4gICAgZGF0YSA9IG5ld0RhdGE7XG5cbiAgICBsZXQgcGF0dGVybkluZGV4O1xuICAgIHdoaWxlICgocGF0dGVybkluZGV4ID0gZmluZERvdWJsZU5ld2xpbmVJbmRleChkYXRhKSkgIT09IC0xKSB7XG4gICAgICB5aWVsZCBkYXRhLnNsaWNlKDAsIHBhdHRlcm5JbmRleCk7XG4gICAgICBkYXRhID0gZGF0YS5zbGljZShwYXR0ZXJuSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcbiAgICB5aWVsZCBkYXRhO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmREb3VibGVOZXdsaW5lSW5kZXgoYnVmZmVyOiBVaW50OEFycmF5KTogbnVtYmVyIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBzZWFyY2hlcyB0aGUgYnVmZmVyIGZvciB0aGUgZW5kIHBhdHRlcm5zIChcXHJcXHIsIFxcblxcbiwgXFxyXFxuXFxyXFxuKVxuICAvLyBhbmQgcmV0dXJucyB0aGUgaW5kZXggcmlnaHQgYWZ0ZXIgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW55IHBhdHRlcm4sXG4gIC8vIG9yIC0xIGlmIG5vbmUgb2YgdGhlIHBhdHRlcm5zIGFyZSBmb3VuZC5cbiAgY29uc3QgbmV3bGluZSA9IDB4MGE7IC8vIFxcblxuICBjb25zdCBjYXJyaWFnZSA9IDB4MGQ7IC8vIFxcclxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aCAtIDI7IGkrKykge1xuICAgIGlmIChidWZmZXJbaV0gPT09IG5ld2xpbmUgJiYgYnVmZmVyW2kgKyAxXSA9PT0gbmV3bGluZSkge1xuICAgICAgLy8gXFxuXFxuXG4gICAgICByZXR1cm4gaSArIDI7XG4gICAgfVxuICAgIGlmIChidWZmZXJbaV0gPT09IGNhcnJpYWdlICYmIGJ1ZmZlcltpICsgMV0gPT09IGNhcnJpYWdlKSB7XG4gICAgICAvLyBcXHJcXHJcbiAgICAgIHJldHVybiBpICsgMjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgYnVmZmVyW2ldID09PSBjYXJyaWFnZSAmJlxuICAgICAgYnVmZmVyW2kgKyAxXSA9PT0gbmV3bGluZSAmJlxuICAgICAgaSArIDMgPCBidWZmZXIubGVuZ3RoICYmXG4gICAgICBidWZmZXJbaSArIDJdID09PSBjYXJyaWFnZSAmJlxuICAgICAgYnVmZmVyW2kgKyAzXSA9PT0gbmV3bGluZVxuICAgICkge1xuICAgICAgLy8gXFxyXFxuXFxyXFxuXG4gICAgICByZXR1cm4gaSArIDQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG5jbGFzcyBTU0VEZWNvZGVyIHtcbiAgcHJpdmF0ZSBkYXRhOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBldmVudDogc3RyaW5nIHwgbnVsbDtcbiAgcHJpdmF0ZSBjaHVua3M6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuY2h1bmtzID0gW107XG4gIH1cblxuICBkZWNvZGUobGluZTogc3RyaW5nKSB7XG4gICAgaWYgKGxpbmUuZW5kc1dpdGgoJ1xccicpKSB7XG4gICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcoMCwgbGluZS5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIC8vIGVtcHR5IGxpbmUgYW5kIHdlIGRpZG4ndCBwcmV2aW91c2x5IGVuY291bnRlciBhbnkgbWVzc2FnZXNcbiAgICAgIGlmICghdGhpcy5ldmVudCAmJiAhdGhpcy5kYXRhLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIGNvbnN0IHNzZTogU2VydmVyU2VudEV2ZW50ID0ge1xuICAgICAgICBldmVudDogdGhpcy5ldmVudCxcbiAgICAgICAgZGF0YTogdGhpcy5kYXRhLmpvaW4oJ1xcbicpLFxuICAgICAgICByYXc6IHRoaXMuY2h1bmtzLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5ldmVudCA9IG51bGw7XG4gICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgIHRoaXMuY2h1bmtzID0gW107XG5cbiAgICAgIHJldHVybiBzc2U7XG4gICAgfVxuXG4gICAgdGhpcy5jaHVua3MucHVzaChsaW5lKTtcblxuICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IFtmaWVsZG5hbWUsIF8sIHZhbHVlXSA9IHBhcnRpdGlvbihsaW5lLCAnOicpO1xuXG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJyAnKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkbmFtZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgdGhpcy5ldmVudCA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZmllbGRuYW1lID09PSAnZGF0YScpIHtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKiogVGhpcyBpcyBhbiBpbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24gdGhhdCdzIGp1c3QgdXNlZCBmb3IgdGVzdGluZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9kZWNvZGVDaHVua3MoY2h1bmtzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgY29uc3QgZGVjb2RlciA9IG5ldyBMaW5lRGVjb2RlcigpO1xuICBjb25zdCBsaW5lczogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICBsaW5lcy5wdXNoKC4uLmRlY29kZXIuZGVjb2RlKGNodW5rKSk7XG4gIH1cblxuICByZXR1cm4gbGluZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihzdHI6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZ10ge1xuICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGRlbGltaXRlcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gW3N0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLCBkZWxpbWl0ZXIsIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBkZWxpbWl0ZXIubGVuZ3RoKV07XG4gIH1cblxuICByZXR1cm4gW3N0ciwgJycsICcnXTtcbn1cbiIsICJpbXBvcnQgeyB0eXBlIFJlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4vY29yZS5qc1wiO1xuaW1wb3J0IHtcbiAgRm9ybURhdGEsXG4gIEZpbGUsXG4gIHR5cGUgQmxvYixcbiAgdHlwZSBGaWxlUHJvcGVydHlCYWcsXG4gIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLFxuICB0eXBlIEZzUmVhZFN0cmVhbSxcbiAgaXNGc1JlYWRTdHJlYW0sXG59IGZyb20gXCIuL19zaGltcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgTXVsdGlwYXJ0Qm9keSB9IGZyb20gXCIuL19zaGltcy9NdWx0aXBhcnRCb2R5LmpzXCI7XG5leHBvcnQgeyBmaWxlRnJvbVBhdGggfSBmcm9tIFwiLi9fc2hpbXMvaW5kZXguanNcIjtcblxudHlwZSBCbG9iTGlrZVBhcnQgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyB8IEJsb2JMaWtlIHwgVWludDhBcnJheSB8IERhdGFWaWV3O1xuZXhwb3J0IHR5cGUgQmxvYlBhcnQgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyB8IEJsb2IgfCBVaW50OEFycmF5IHwgRGF0YVZpZXc7XG5cbi8qKlxuICogVHlwaWNhbGx5LCB0aGlzIGlzIGEgbmF0aXZlIFwiRmlsZVwiIGNsYXNzLlxuICpcbiAqIFdlIHByb3ZpZGUgdGhlIHtAbGluayB0b0ZpbGV9IHV0aWxpdHkgdG8gY29udmVydCBhIHZhcmlldHkgb2Ygb2JqZWN0c1xuICogaW50byB0aGUgRmlsZSBjbGFzcy5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgZmV0Y2ggUmVzcG9uc2UsIG9yIGluIE5vZGUsXG4gKiB0aGUgcmVzdWx0IG9mIGZzLmNyZWF0ZVJlYWRTdHJlYW0oKS5cbiAqL1xuZXhwb3J0IHR5cGUgVXBsb2FkYWJsZSA9IEZpbGVMaWtlIHwgUmVzcG9uc2VMaWtlIHwgRnNSZWFkU3RyZWFtO1xuXG4vKipcbiAqIEludGVuZGVkIHRvIG1hdGNoIHdlYi5CbG9iLCBub2RlLkJsb2IsIG5vZGUtZmV0Y2guQmxvYiwgZXRjLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJsb2JMaWtlIHtcbiAgLyoqIFtNRE4gUmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQmxvYi9zaXplKSAqL1xuICByZWFkb25seSBzaXplOiBudW1iZXI7XG4gIC8qKiBbTUROIFJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0Jsb2IvdHlwZSkgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuICAvKiogW01ETiBSZWZlcmVuY2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iL3RleHQpICovXG4gIHRleHQoKTogUHJvbWlzZTxzdHJpbmc+O1xuICAvKiogW01ETiBSZWZlcmVuY2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iL3NsaWNlKSAqL1xuICBzbGljZShzdGFydD86IG51bWJlciwgZW5kPzogbnVtYmVyKTogQmxvYkxpa2U7XG4gIC8vIHVuZm9ydHVuYXRlbHkgQHR5cGVzL25vZGUtZmV0Y2hAXjIuNi40IGRvZXNuJ3QgdHlwZSB0aGUgYXJyYXlCdWZmZXIgbWV0aG9kXG59XG5cbi8qKlxuICogSW50ZW5kZWQgdG8gbWF0Y2ggd2ViLkZpbGUsIG5vZGUuRmlsZSwgbm9kZS1mZXRjaC5GaWxlLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpa2UgZXh0ZW5kcyBCbG9iTGlrZSB7XG4gIC8qKiBbTUROIFJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0ZpbGUvbGFzdE1vZGlmaWVkKSAqL1xuICByZWFkb25seSBsYXN0TW9kaWZpZWQ6IG51bWJlcjtcbiAgLyoqIFtNRE4gUmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmlsZS9uYW1lKSAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogSW50ZW5kZWQgdG8gbWF0Y2ggd2ViLlJlc3BvbnNlLCBub2RlLlJlc3BvbnNlLCBub2RlLWZldGNoLlJlc3BvbnNlLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VMaWtlIHtcbiAgdXJsOiBzdHJpbmc7XG4gIGJsb2IoKTogUHJvbWlzZTxCbG9iTGlrZT47XG59XG5cbmV4cG9ydCBjb25zdCBpc1Jlc3BvbnNlTGlrZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVzcG9uc2VMaWtlID0+XG4gIHZhbHVlICE9IG51bGwgJiZcbiAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdmFsdWUudXJsID09PSAnc3RyaW5nJyAmJlxuICB0eXBlb2YgdmFsdWUuYmxvYiA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGlzRmlsZUxpa2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZpbGVMaWtlID0+XG4gIHZhbHVlICE9IG51bGwgJiZcbiAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdmFsdWUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgdHlwZW9mIHZhbHVlLmxhc3RNb2RpZmllZCA9PT0gJ251bWJlcicgJiZcbiAgaXNCbG9iTGlrZSh2YWx1ZSk7XG5cbi8qKlxuICogVGhlIEJsb2JMaWtlIHR5cGUgb21pdHMgYXJyYXlCdWZmZXIoKSBiZWNhdXNlIEB0eXBlcy9ub2RlLWZldGNoQF4yLjYuNCBsYWNrcyBpdDsgYnV0IHRoaXMgY2hlY2tcbiAqIGFkZHMgdGhlIGFycmF5QnVmZmVyKCkgbWV0aG9kIHR5cGUgYmVjYXVzZSBpdCBpcyBhdmFpbGFibGUgYW5kIHVzZWQgYXQgcnVudGltZVxuICovXG5leHBvcnQgY29uc3QgaXNCbG9iTGlrZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgQmxvYkxpa2UgJiB7IGFycmF5QnVmZmVyKCk6IFByb21pc2U8QXJyYXlCdWZmZXI+IH0gPT5cbiAgdmFsdWUgIT0gbnVsbCAmJlxuICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gIHR5cGVvZiB2YWx1ZS5zaXplID09PSAnbnVtYmVyJyAmJlxuICB0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycgJiZcbiAgdHlwZW9mIHZhbHVlLnRleHQgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIHZhbHVlLnNsaWNlID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiB2YWx1ZS5hcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGlzVXBsb2FkYWJsZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgVXBsb2FkYWJsZSA9PiB7XG4gIHJldHVybiBpc0ZpbGVMaWtlKHZhbHVlKSB8fCBpc1Jlc3BvbnNlTGlrZSh2YWx1ZSkgfHwgaXNGc1JlYWRTdHJlYW0odmFsdWUpO1xufTtcblxuZXhwb3J0IHR5cGUgVG9GaWxlSW5wdXQgPSBVcGxvYWRhYmxlIHwgRXhjbHVkZTxCbG9iTGlrZVBhcnQsIHN0cmluZz4gfCBBc3luY0l0ZXJhYmxlPEJsb2JMaWtlUGFydD47XG5cbi8qKlxuICogSGVscGVyIGZvciBjcmVhdGluZyBhIHtAbGluayBGaWxlfSB0byBwYXNzIHRvIGFuIFNESyB1cGxvYWQgbWV0aG9kIGZyb20gYSB2YXJpZXR5IG9mIGRpZmZlcmVudCBkYXRhIGZvcm1hdHNcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgcmF3IGNvbnRlbnQgb2YgdGhlIGZpbGUuICBDYW4gYmUgYW4ge0BsaW5rIFVwbG9hZGFibGV9LCB7QGxpbmsgQmxvYkxpa2VQYXJ0fSwgb3Ige0BsaW5rIEFzeW5jSXRlcmFibGV9IG9mIHtAbGluayBCbG9iTGlrZVBhcnR9c1xuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlLiBJZiBvbWl0dGVkLCB0b0ZpbGUgd2lsbCB0cnkgdG8gZGV0ZXJtaW5lIGEgZmlsZSBuYW1lIGZyb20gYml0cyBpZiBwb3NzaWJsZVxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLnR5cGUgdGhlIE1JTUUgdHlwZSBvZiB0aGUgY29udGVudFxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRpb25zLmxhc3RNb2RpZmllZCB0aGUgbGFzdCBtb2RpZmllZCB0aW1lc3RhbXBcbiAqIEByZXR1cm5zIGEge0BsaW5rIEZpbGV9IHdpdGggdGhlIGdpdmVuIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvRmlsZShcbiAgdmFsdWU6IFRvRmlsZUlucHV0IHwgUHJvbWlzZUxpa2U8VG9GaWxlSW5wdXQ+LFxuICBuYW1lPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgb3B0aW9ucz86IEZpbGVQcm9wZXJ0eUJhZyB8IHVuZGVmaW5lZCxcbik6IFByb21pc2U8RmlsZUxpa2U+IHtcbiAgLy8gSWYgaXQncyBhIHByb21pc2UsIHJlc29sdmUgaXQuXG4gIHZhbHVlID0gYXdhaXQgdmFsdWU7XG5cbiAgLy8gSWYgd2UndmUgYmVlbiBnaXZlbiBhIGBGaWxlYCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gIGlmIChpc0ZpbGVMaWtlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChpc1Jlc3BvbnNlTGlrZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBibG9iID0gYXdhaXQgdmFsdWUuYmxvYigpO1xuICAgIG5hbWUgfHw9IG5ldyBVUkwodmFsdWUudXJsKS5wYXRobmFtZS5zcGxpdCgvW1xcXFwvXS8pLnBvcCgpID8/ICd1bmtub3duX2ZpbGUnO1xuXG4gICAgLy8gd2UgbmVlZCB0byBjb252ZXJ0IHRoZSBgQmxvYmAgaW50byBhbiBhcnJheSBidWZmZXIgYmVjYXVzZSB0aGUgYEJsb2JgIGNsYXNzXG4gICAgLy8gdGhhdCBgbm9kZS1mZXRjaGAgZGVmaW5lcyBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgd2ViIHN0YW5kYXJkIHdoaWNoIHJlc3VsdHNcbiAgICAvLyBpbiBgbmV3IEZpbGVgIGludGVycHJldGluZyBpdCBhcyBhIHN0cmluZyBpbnN0ZWFkIG9mIGJpbmFyeSBkYXRhLlxuICAgIGNvbnN0IGRhdGEgPSBpc0Jsb2JMaWtlKGJsb2IpID8gWyhhd2FpdCBibG9iLmFycmF5QnVmZmVyKCkpIGFzIGFueV0gOiBbYmxvYl07XG5cbiAgICByZXR1cm4gbmV3IEZpbGUoZGF0YSwgbmFtZSwgb3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCBiaXRzID0gYXdhaXQgZ2V0Qnl0ZXModmFsdWUpO1xuXG4gIG5hbWUgfHw9IGdldE5hbWUodmFsdWUpID8/ICd1bmtub3duX2ZpbGUnO1xuXG4gIGlmICghb3B0aW9ucz8udHlwZSkge1xuICAgIGNvbnN0IHR5cGUgPSAoYml0c1swXSBhcyBhbnkpPy50eXBlO1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHR5cGUgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEZpbGUoYml0cywgbmFtZSwgb3B0aW9ucyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJ5dGVzKHZhbHVlOiBUb0ZpbGVJbnB1dCk6IFByb21pc2U8QXJyYXk8QmxvYlBhcnQ+PiB7XG4gIGxldCBwYXJ0czogQXJyYXk8QmxvYlBhcnQ+ID0gW107XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSB8fCAvLyBpbmNsdWRlcyBVaW50OEFycmF5LCBCdWZmZXIsIGV0Yy5cbiAgICB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICkge1xuICAgIHBhcnRzLnB1c2godmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQmxvYkxpa2UodmFsdWUpKSB7XG4gICAgcGFydHMucHVzaChhd2FpdCB2YWx1ZS5hcnJheUJ1ZmZlcigpKTtcbiAgfSBlbHNlIGlmIChcbiAgICBpc0FzeW5jSXRlcmFibGVJdGVyYXRvcih2YWx1ZSkgLy8gaW5jbHVkZXMgUmVhZGFibGUsIFJlYWRhYmxlU3RyZWFtLCBldGMuXG4gICkge1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdmFsdWUpIHtcbiAgICAgIHBhcnRzLnB1c2goY2h1bmsgYXMgQmxvYlBhcnQpOyAvLyBUT0RPLCBjb25zaWRlciB2YWxpZGF0aW5nP1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVW5leHBlY3RlZCBkYXRhIHR5cGU6ICR7dHlwZW9mIHZhbHVlfTsgY29uc3RydWN0b3I6ICR7dmFsdWU/LmNvbnN0cnVjdG9yXG4gICAgICAgID8ubmFtZX07IHByb3BzOiAke3Byb3BzRm9yRXJyb3IodmFsdWUpfWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZnVuY3Rpb24gcHJvcHNGb3JFcnJvcih2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgY29uc3QgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIHJldHVybiBgWyR7cHJvcHMubWFwKChwKSA9PiBgXCIke3B9XCJgKS5qb2luKCcsICcpfV1gO1xufVxuXG5mdW5jdGlvbiBnZXROYW1lKHZhbHVlOiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gKFxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5uYW1lKSB8fFxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5maWxlbmFtZSkgfHxcbiAgICAvLyBGb3IgZnMuUmVhZFN0cmVhbVxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5wYXRoKT8uc3BsaXQoL1tcXFxcL10vKS5wb3AoKVxuICApO1xufVxuXG5jb25zdCBnZXRTdHJpbmdGcm9tTWF5YmVCdWZmZXIgPSAoeDogc3RyaW5nIHwgQnVmZmVyIHwgdW5rbm93bik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHJldHVybiB4O1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIFN0cmluZyh4KTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8dW5rbm93bj4gPT5cbiAgdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG5cbmV4cG9ydCBjb25zdCBpc011bHRpcGFydEJvZHkgPSAoYm9keTogYW55KTogYm9keSBpcyBNdWx0aXBhcnRCb2R5ID0+XG4gIGJvZHkgJiYgdHlwZW9mIGJvZHkgPT09ICdvYmplY3QnICYmIGJvZHkuYm9keSAmJiBib2R5W1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNdWx0aXBhcnRCb2R5JztcblxuLyoqXG4gKiBSZXR1cm5zIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSByZXF1ZXN0IGlmIGFueSBwYXJ0IG9mIHRoZSBnaXZlbiByZXF1ZXN0IGJvZHkgY29udGFpbnMgYSBGaWxlIC8gQmxvYiB2YWx1ZS5cbiAqIE90aGVyd2lzZSByZXR1cm5zIHRoZSByZXF1ZXN0IGFzIGlzLlxuICovXG5leHBvcnQgY29uc3QgbWF5YmVNdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgPSBhc3luYyA8VCA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgb3B0czogUmVxdWVzdE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFJlcXVlc3RPcHRpb25zPFQgfCBNdWx0aXBhcnRCb2R5Pj4gPT4ge1xuICBpZiAoIWhhc1VwbG9hZGFibGVWYWx1ZShvcHRzLmJvZHkpKSByZXR1cm4gb3B0cztcblxuICBjb25zdCBmb3JtID0gYXdhaXQgY3JlYXRlRm9ybShvcHRzLmJvZHkpO1xuICByZXR1cm4gZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMoZm9ybSwgb3B0cyk7XG59O1xuXG5leHBvcnQgY29uc3QgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zID0gYXN5bmMgPFQgPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oXG4gIG9wdHM6IFJlcXVlc3RPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxSZXF1ZXN0T3B0aW9uczxUIHwgTXVsdGlwYXJ0Qm9keT4+ID0+IHtcbiAgY29uc3QgZm9ybSA9IGF3YWl0IGNyZWF0ZUZvcm0ob3B0cy5ib2R5KTtcbiAgcmV0dXJuIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUZvcm0gPSBhc3luYyA8VCA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+Pihib2R5OiBUIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxGb3JtRGF0YT4gPT4ge1xuICBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gIGF3YWl0IFByb21pc2UuYWxsKE9iamVjdC5lbnRyaWVzKGJvZHkgfHwge30pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwga2V5LCB2YWx1ZSkpKTtcbiAgcmV0dXJuIGZvcm07XG59O1xuXG5jb25zdCBoYXNVcGxvYWRhYmxlVmFsdWUgPSAodmFsdWU6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgaWYgKGlzVXBsb2FkYWJsZSh2YWx1ZSkpIHJldHVybiB0cnVlO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5zb21lKGhhc1VwbG9hZGFibGVWYWx1ZSk7XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yIChjb25zdCBrIGluIHZhbHVlKSB7XG4gICAgICBpZiAoaGFzVXBsb2FkYWJsZVZhbHVlKCh2YWx1ZSBhcyBhbnkpW2tdKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGFkZEZvcm1WYWx1ZSA9IGFzeW5jIChmb3JtOiBGb3JtRGF0YSwga2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBSZWNlaXZlZCBudWxsIGZvciBcIiR7a2V5fVwiOyB0byBwYXNzIG51bGwgaW4gRm9ybURhdGEsIHlvdSBtdXN0IHVzZSB0aGUgc3RyaW5nICdudWxsJ2AsXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRPRE86IG1ha2UgbmVzdGVkIGZvcm1hdHMgY29uZmlndXJhYmxlXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBmb3JtLmFwcGVuZChrZXksIFN0cmluZyh2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzVXBsb2FkYWJsZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgdG9GaWxlKHZhbHVlKTtcbiAgICBmb3JtLmFwcGVuZChrZXksIGZpbGUgYXMgRmlsZSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoKGVudHJ5KSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwga2V5ICsgJ1tdJywgZW50cnkpKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW25hbWUsIHByb3BdKSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwgYCR7a2V5fVske25hbWV9XWAsIHByb3ApKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgSW52YWxpZCB2YWx1ZSBnaXZlbiB0byBmb3JtLCBleHBlY3RlZCBhIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvYmplY3QsIEFycmF5LCBGaWxlIG9yIEJsb2IgYnV0IGdvdCAke3ZhbHVlfSBpbnN0ZWFkYCxcbiAgICApO1xuICB9XG59O1xuIiwgImltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi92ZXJzaW9uLmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi9zdHJlYW1pbmcuanNcIjtcbmltcG9ydCB7XG4gIEFudGhyb3BpY0Vycm9yLFxuICBBUElFcnJvcixcbiAgQVBJQ29ubmVjdGlvbkVycm9yLFxuICBBUElDb25uZWN0aW9uVGltZW91dEVycm9yLFxuICBBUElVc2VyQWJvcnRFcnJvcixcbn0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmltcG9ydCB7XG4gIGtpbmQgYXMgc2hpbXNLaW5kLFxuICB0eXBlIFJlYWRhYmxlLFxuICBnZXREZWZhdWx0QWdlbnQsXG4gIHR5cGUgQWdlbnQsXG4gIGZldGNoLFxuICB0eXBlIFJlcXVlc3RJbmZvLFxuICB0eXBlIFJlcXVlc3RJbml0LFxuICB0eXBlIFJlc3BvbnNlLFxuICB0eXBlIEhlYWRlcnNJbml0LFxufSBmcm9tIFwiLi9fc2hpbXMvaW5kZXguanNcIjtcbmV4cG9ydCB7IHR5cGUgUmVzcG9uc2UgfTtcbmltcG9ydCB7IEJsb2JMaWtlLCBpc0Jsb2JMaWtlLCBpc011bHRpcGFydEJvZHkgfSBmcm9tIFwiLi91cGxvYWRzLmpzXCI7XG5leHBvcnQge1xuICBtYXliZU11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyxcbiAgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zLFxuICBjcmVhdGVGb3JtLFxuICB0eXBlIFVwbG9hZGFibGUsXG59IGZyb20gXCIuL3VwbG9hZHMuanNcIjtcblxuZXhwb3J0IHR5cGUgRmV0Y2ggPSAodXJsOiBSZXF1ZXN0SW5mbywgaW5pdD86IFJlcXVlc3RJbml0KSA9PiBQcm9taXNlPFJlc3BvbnNlPjtcblxudHlwZSBQcm9taXNlT3JWYWx1ZTxUPiA9IFQgfCBQcm9taXNlPFQ+O1xuXG50eXBlIEFQSVJlc3BvbnNlUHJvcHMgPSB7XG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcbiAgb3B0aW9uczogRmluYWxSZXF1ZXN0T3B0aW9ucztcbiAgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZGVmYXVsdFBhcnNlUmVzcG9uc2U8VD4ocHJvcHM6IEFQSVJlc3BvbnNlUHJvcHMpOiBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+IHtcbiAgY29uc3QgeyByZXNwb25zZSB9ID0gcHJvcHM7XG4gIGlmIChwcm9wcy5vcHRpb25zLnN0cmVhbSkge1xuICAgIGRlYnVnKCdyZXNwb25zZScsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudXJsLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5ib2R5KTtcblxuICAgIC8vIE5vdGU6IHRoZXJlIGlzIGFuIGludmFyaWFudCBoZXJlIHRoYXQgaXNuJ3QgcmVwcmVzZW50ZWQgaW4gdGhlIHR5cGUgc3lzdGVtXG4gICAgLy8gdGhhdCBpZiB5b3Ugc2V0IGBzdHJlYW06IHRydWVgIHRoZSByZXNwb25zZSB0eXBlIG11c3QgYWxzbyBiZSBgU3RyZWFtPFQ+YFxuXG4gICAgaWYgKHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcykge1xuICAgICAgcmV0dXJuIHByb3BzLm9wdGlvbnMuX19zdHJlYW1DbGFzcy5mcm9tU1NFUmVzcG9uc2UocmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpIGFzIGFueTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyZWFtLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgcHJvcHMuY29udHJvbGxlcikgYXMgYW55O1xuICB9XG5cbiAgLy8gZmV0Y2ggcmVmdXNlcyB0byByZWFkIHRoZSBib2R5IHdoZW4gdGhlIHN0YXR1cyBjb2RlIGlzIDIwNC5cbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0KSB7XG4gICAgcmV0dXJuIG51bGwgYXMgV2l0aFJlcXVlc3RJRDxUPjtcbiAgfVxuXG4gIGlmIChwcm9wcy5vcHRpb25zLl9fYmluYXJ5UmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UgYXMgdW5rbm93biBhcyBXaXRoUmVxdWVzdElEPFQ+O1xuICB9XG5cbiAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG4gIGNvbnN0IGlzSlNPTiA9XG4gICAgY29udGVudFR5cGU/LmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykgfHwgY29udGVudFR5cGU/LmluY2x1ZGVzKCdhcHBsaWNhdGlvbi92bmQuYXBpK2pzb24nKTtcbiAgaWYgKGlzSlNPTikge1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBkZWJ1ZygncmVzcG9uc2UnLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnVybCwgcmVzcG9uc2UuaGVhZGVycywganNvbik7XG5cbiAgICByZXR1cm4gX2FkZFJlcXVlc3RJRChqc29uIGFzIFQsIHJlc3BvbnNlKTtcbiAgfVxuXG4gIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIGRlYnVnKCdyZXNwb25zZScsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudXJsLCByZXNwb25zZS5oZWFkZXJzLCB0ZXh0KTtcblxuICAvLyBUT0RPIGhhbmRsZSBibG9iLCBhcnJheWJ1ZmZlciwgb3RoZXIgY29udGVudCB0eXBlcywgZXRjLlxuICByZXR1cm4gdGV4dCBhcyB1bmtub3duIGFzIFdpdGhSZXF1ZXN0SUQ8VD47XG59XG5cbnR5cGUgV2l0aFJlcXVlc3RJRDxUPiA9XG4gIFQgZXh0ZW5kcyBBcnJheTxhbnk+IHwgUmVzcG9uc2UgfCBBYnN0cmFjdFBhZ2U8YW55PiA/IFRcbiAgOiBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA/IFQgJiB7IF9yZXF1ZXN0X2lkPzogc3RyaW5nIHwgbnVsbCB9XG4gIDogVDtcblxuZnVuY3Rpb24gX2FkZFJlcXVlc3RJRDxUPih2YWx1ZTogVCwgcmVzcG9uc2U6IFJlc3BvbnNlKTogV2l0aFJlcXVlc3RJRDxUPiB7XG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZSBhcyBXaXRoUmVxdWVzdElEPFQ+O1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ19yZXF1ZXN0X2lkJywge1xuICAgIHZhbHVlOiByZXNwb25zZS5oZWFkZXJzLmdldCgncmVxdWVzdC1pZCcpLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICB9KSBhcyBXaXRoUmVxdWVzdElEPFQ+O1xufVxuXG4vKipcbiAqIEEgc3ViY2xhc3Mgb2YgYFByb21pc2VgIHByb3ZpZGluZyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzXG4gKiBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgU0RLLlxuICovXG5leHBvcnQgY2xhc3MgQVBJUHJvbWlzZTxUPiBleHRlbmRzIFByb21pc2U8V2l0aFJlcXVlc3RJRDxUPj4ge1xuICBwcml2YXRlIHBhcnNlZFByb21pc2U6IFByb21pc2U8V2l0aFJlcXVlc3RJRDxUPj4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZXNwb25zZVByb21pc2U6IFByb21pc2U8QVBJUmVzcG9uc2VQcm9wcz4sXG4gICAgcHJpdmF0ZSBwYXJzZVJlc3BvbnNlOiAoXG4gICAgICBwcm9wczogQVBJUmVzcG9uc2VQcm9wcyxcbiAgICApID0+IFByb21pc2VPclZhbHVlPFdpdGhSZXF1ZXN0SUQ8VD4+ID0gZGVmYXVsdFBhcnNlUmVzcG9uc2UsXG4gICkge1xuICAgIHN1cGVyKChyZXNvbHZlKSA9PiB7XG4gICAgICAvLyB0aGlzIGlzIG1heWJlIGEgYml0IHdlaXJkIGJ1dCB0aGlzIGhhcyB0byBiZSBhIG5vLW9wIHRvIG5vdCBpbXBsaWNpdGx5XG4gICAgICAvLyBwYXJzZSB0aGUgcmVzcG9uc2UgYm9keTsgaW5zdGVhZCAudGhlbiwgLmNhdGNoLCAuZmluYWxseSBhcmUgb3ZlcnJpZGRlblxuICAgICAgLy8gdG8gcGFyc2UgdGhlIHJlc3BvbnNlXG4gICAgICByZXNvbHZlKG51bGwgYXMgYW55KTtcbiAgICB9KTtcbiAgfVxuXG4gIF90aGVuVW53cmFwPFU+KHRyYW5zZm9ybTogKGRhdGE6IFQsIHByb3BzOiBBUElSZXNwb25zZVByb3BzKSA9PiBVKTogQVBJUHJvbWlzZTxVPiB7XG4gICAgcmV0dXJuIG5ldyBBUElQcm9taXNlKHRoaXMucmVzcG9uc2VQcm9taXNlLCBhc3luYyAocHJvcHMpID0+XG4gICAgICBfYWRkUmVxdWVzdElEKHRyYW5zZm9ybShhd2FpdCB0aGlzLnBhcnNlUmVzcG9uc2UocHJvcHMpLCBwcm9wcyksIHByb3BzLnJlc3BvbnNlKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIGluc3RlYWQgb2YgcGFyc2luZyB0aGUgcmVzcG9uc2VcbiAgICogZGF0YS5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gcGFyc2UgdGhlIHJlc3BvbnNlIGJvZHkgYnV0IHN0aWxsIGdldCB0aGUgYFJlc3BvbnNlYFxuICAgKiBpbnN0YW5jZSwgeW91IGNhbiB1c2Uge0BsaW5rIHdpdGhSZXNwb25zZSgpfS5cbiAgICpcbiAgICogXHVEODNEXHVEQzRCIEdldHRpbmcgdGhlIHdyb25nIFR5cGVTY3JpcHQgdHlwZSBmb3IgYFJlc3BvbnNlYD9cbiAgICogVHJ5IHNldHRpbmcgYFwibW9kdWxlUmVzb2x1dGlvblwiOiBcIk5vZGVOZXh0XCJgIGlmIHlvdSBjYW4sXG4gICAqIG9yIGFkZCBvbmUgb2YgdGhlc2UgaW1wb3J0cyBiZWZvcmUgeW91ciBmaXJzdCBgaW1wb3J0IFx1MjAyNiBmcm9tICdAYW50aHJvcGljLWFpL3NkaydgOlxuICAgKiAtIGBpbXBvcnQgJ0BhbnRocm9waWMtYWkvc2RrL3NoaW1zL25vZGUnYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbiAgICogLSBgaW1wb3J0ICdAYW50aHJvcGljLWFpL3Nkay9zaGltcy93ZWInYCAob3RoZXJ3aXNlKVxuICAgKi9cbiAgYXNSZXNwb25zZSgpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMucmVzcG9uc2VQcm9taXNlLnRoZW4oKHApID0+IHAucmVzcG9uc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHBhcnNlZCByZXNwb25zZSBkYXRhLCB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2UgYW5kIHRoZSBJRCBvZiB0aGUgcmVxdWVzdCxcbiAgICogcmV0dXJuZWQgdmllIHRoZSBgcmVxdWVzdC1pZGAgaGVhZGVyIHdoaWNoIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHJlcXVlc3RzIGFuZCByZXNwb3J0aW5nXG4gICAqIGlzc3VlcyB0byBBbnRocm9waWMuXG4gICAqXG4gICAqIElmIHlvdSBqdXN0IHdhbnQgdG8gZ2V0IHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSB3aXRob3V0IHBhcnNpbmcgaXQsXG4gICAqIHlvdSBjYW4gdXNlIHtAbGluayBhc1Jlc3BvbnNlKCl9LlxuICAgKlxuICAgKiBcdUQ4M0RcdURDNEIgR2V0dGluZyB0aGUgd3JvbmcgVHlwZVNjcmlwdCB0eXBlIGZvciBgUmVzcG9uc2VgP1xuICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgaWYgeW91IGNhbixcbiAgICogb3IgYWRkIG9uZSBvZiB0aGVzZSBpbXBvcnRzIGJlZm9yZSB5b3VyIGZpcnN0IGBpbXBvcnQgXHUyMDI2IGZyb20gJ0BhbnRocm9waWMtYWkvc2RrJ2A6XG4gICAqIC0gYGltcG9ydCAnQGFudGhyb3BpYy1haS9zZGsvc2hpbXMvbm9kZSdgIChpZiB5b3UncmUgcnVubmluZyBvbiBOb2RlKVxuICAgKiAtIGBpbXBvcnQgJ0BhbnRocm9waWMtYWkvc2RrL3NoaW1zL3dlYidgIChvdGhlcndpc2UpXG4gICAqL1xuICBhc3luYyB3aXRoUmVzcG9uc2UoKTogUHJvbWlzZTx7IGRhdGE6IFQ7IHJlc3BvbnNlOiBSZXNwb25zZTsgcmVxdWVzdF9pZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCB9PiB7XG4gICAgY29uc3QgW2RhdGEsIHJlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnBhcnNlKCksIHRoaXMuYXNSZXNwb25zZSgpXSk7XG4gICAgcmV0dXJuIHsgZGF0YSwgcmVzcG9uc2UsIHJlcXVlc3RfaWQ6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdyZXF1ZXN0LWlkJykgfTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2UoKTogUHJvbWlzZTxXaXRoUmVxdWVzdElEPFQ+PiB7XG4gICAgaWYgKCF0aGlzLnBhcnNlZFByb21pc2UpIHtcbiAgICAgIHRoaXMucGFyc2VkUHJvbWlzZSA9IHRoaXMucmVzcG9uc2VQcm9taXNlLnRoZW4odGhpcy5wYXJzZVJlc3BvbnNlKSBhcyBhbnkgYXMgUHJvbWlzZTxXaXRoUmVxdWVzdElEPFQ+PjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VkUHJvbWlzZTtcbiAgfVxuXG4gIG92ZXJyaWRlIHRoZW48VFJlc3VsdDEgPSBXaXRoUmVxdWVzdElEPFQ+LCBUUmVzdWx0MiA9IG5ldmVyPihcbiAgICBvbmZ1bGZpbGxlZD86ICgodmFsdWU6IFdpdGhSZXF1ZXN0SUQ8VD4pID0+IFRSZXN1bHQxIHwgUHJvbWlzZUxpa2U8VFJlc3VsdDE+KSB8IHVuZGVmaW5lZCB8IG51bGwsXG4gICAgb25yZWplY3RlZD86ICgocmVhc29uOiBhbnkpID0+IFRSZXN1bHQyIHwgUHJvbWlzZUxpa2U8VFJlc3VsdDI+KSB8IHVuZGVmaW5lZCB8IG51bGwsXG4gICk6IFByb21pc2U8VFJlc3VsdDEgfCBUUmVzdWx0Mj4ge1xuICAgIHJldHVybiB0aGlzLnBhcnNlKCkudGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCk7XG4gIH1cblxuICBvdmVycmlkZSBjYXRjaDxUUmVzdWx0ID0gbmV2ZXI+KFxuICAgIG9ucmVqZWN0ZWQ/OiAoKHJlYXNvbjogYW55KSA9PiBUUmVzdWx0IHwgUHJvbWlzZUxpa2U8VFJlc3VsdD4pIHwgdW5kZWZpbmVkIHwgbnVsbCxcbiAgKTogUHJvbWlzZTxXaXRoUmVxdWVzdElEPFQ+IHwgVFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnBhcnNlKCkuY2F0Y2gob25yZWplY3RlZCk7XG4gIH1cblxuICBvdmVycmlkZSBmaW5hbGx5KG9uZmluYWxseT86ICgoKSA9PiB2b2lkKSB8IHVuZGVmaW5lZCB8IG51bGwpOiBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZSgpLmZpbmFsbHkob25maW5hbGx5KTtcbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQVBJQ2xpZW50IHtcbiAgYmFzZVVSTDogc3RyaW5nO1xuICBtYXhSZXRyaWVzOiBudW1iZXI7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgaHR0cEFnZW50OiBBZ2VudCB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIGZldGNoOiBGZXRjaDtcbiAgcHJvdGVjdGVkIGlkZW1wb3RlbmN5SGVhZGVyPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBiYXNlVVJMLFxuICAgIG1heFJldHJpZXMgPSAyLFxuICAgIHRpbWVvdXQgPSA2MDAwMDAsIC8vIDEwIG1pbnV0ZXNcbiAgICBodHRwQWdlbnQsXG4gICAgZmV0Y2g6IG92ZXJyaWRkZW5GZXRjaCxcbiAgfToge1xuICAgIGJhc2VVUkw6IHN0cmluZztcbiAgICBtYXhSZXRyaWVzPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIHRpbWVvdXQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBodHRwQWdlbnQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuICAgIGZldGNoOiBGZXRjaCB8IHVuZGVmaW5lZDtcbiAgfSkge1xuICAgIHRoaXMuYmFzZVVSTCA9IGJhc2VVUkw7XG4gICAgdGhpcy5tYXhSZXRyaWVzID0gdmFsaWRhdGVQb3NpdGl2ZUludGVnZXIoJ21heFJldHJpZXMnLCBtYXhSZXRyaWVzKTtcbiAgICB0aGlzLnRpbWVvdXQgPSB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcigndGltZW91dCcsIHRpbWVvdXQpO1xuICAgIHRoaXMuaHR0cEFnZW50ID0gaHR0cEFnZW50O1xuXG4gICAgdGhpcy5mZXRjaCA9IG92ZXJyaWRkZW5GZXRjaCA/PyBmZXRjaDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhdXRoSGVhZGVycyhvcHRzOiBGaW5hbFJlcXVlc3RPcHRpb25zKTogSGVhZGVycyB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoaXMgdG8gYWRkIHlvdXIgb3duIGRlZmF1bHQgaGVhZGVycywgZm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB7XG4gICAqICAgIC4uLnN1cGVyLmRlZmF1bHRIZWFkZXJzKCksXG4gICAqICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgMTIzJyxcbiAgICogIH1cbiAgICovXG4gIHByb3RlY3RlZCBkZWZhdWx0SGVhZGVycyhvcHRzOiBGaW5hbFJlcXVlc3RPcHRpb25zKTogSGVhZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdVc2VyLUFnZW50JzogdGhpcy5nZXRVc2VyQWdlbnQoKSxcbiAgICAgIC4uLmdldFBsYXRmb3JtSGVhZGVycygpLFxuICAgICAgLi4udGhpcy5hdXRoSGVhZGVycyhvcHRzKSxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGRlZmF1bHRRdWVyeSgpOiBEZWZhdWx0UXVlcnkgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoaXMgdG8gYWRkIHlvdXIgb3duIGhlYWRlcnMgdmFsaWRhdGlvbjpcbiAgICovXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUhlYWRlcnMoaGVhZGVyczogSGVhZGVycywgY3VzdG9tSGVhZGVyczogSGVhZGVycykge31cblxuICBwcm90ZWN0ZWQgZGVmYXVsdElkZW1wb3RlbmN5S2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBzdGFpbmxlc3Mtbm9kZS1yZXRyeS0ke3V1aWQ0KCl9YDtcbiAgfVxuXG4gIGdldDxSZXEsIFJzcD4ocGF0aDogc3RyaW5nLCBvcHRzPzogUHJvbWlzZU9yVmFsdWU8UmVxdWVzdE9wdGlvbnM8UmVxPj4pOiBBUElQcm9taXNlPFJzcD4ge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZFJlcXVlc3QoJ2dldCcsIHBhdGgsIG9wdHMpO1xuICB9XG5cbiAgcG9zdDxSZXEsIFJzcD4ocGF0aDogc3RyaW5nLCBvcHRzPzogUHJvbWlzZU9yVmFsdWU8UmVxdWVzdE9wdGlvbnM8UmVxPj4pOiBBUElQcm9taXNlPFJzcD4ge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZFJlcXVlc3QoJ3Bvc3QnLCBwYXRoLCBvcHRzKTtcbiAgfVxuXG4gIHBhdGNoPFJlcSwgUnNwPihwYXRoOiBzdHJpbmcsIG9wdHM/OiBQcm9taXNlT3JWYWx1ZTxSZXF1ZXN0T3B0aW9uczxSZXE+Pik6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgncGF0Y2gnLCBwYXRoLCBvcHRzKTtcbiAgfVxuXG4gIHB1dDxSZXEsIFJzcD4ocGF0aDogc3RyaW5nLCBvcHRzPzogUHJvbWlzZU9yVmFsdWU8UmVxdWVzdE9wdGlvbnM8UmVxPj4pOiBBUElQcm9taXNlPFJzcD4ge1xuICAgIHJldHVybiB0aGlzLm1ldGhvZFJlcXVlc3QoJ3B1dCcsIHBhdGgsIG9wdHMpO1xuICB9XG5cbiAgZGVsZXRlPFJlcSwgUnNwPihwYXRoOiBzdHJpbmcsIG9wdHM/OiBQcm9taXNlT3JWYWx1ZTxSZXF1ZXN0T3B0aW9uczxSZXE+Pik6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgnZGVsZXRlJywgcGF0aCwgb3B0cyk7XG4gIH1cblxuICBwcml2YXRlIG1ldGhvZFJlcXVlc3Q8UmVxLCBSc3A+KFxuICAgIG1ldGhvZDogSFRUUE1ldGhvZCxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgb3B0cz86IFByb21pc2VPclZhbHVlPFJlcXVlc3RPcHRpb25zPFJlcT4+LFxuICApOiBBUElQcm9taXNlPFJzcD4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXG4gICAgICBQcm9taXNlLnJlc29sdmUob3B0cykudGhlbihhc3luYyAob3B0cykgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID1cbiAgICAgICAgICBvcHRzICYmIGlzQmxvYkxpa2Uob3B0cz8uYm9keSkgPyBuZXcgRGF0YVZpZXcoYXdhaXQgb3B0cy5ib2R5LmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgOiBvcHRzPy5ib2R5IGluc3RhbmNlb2YgRGF0YVZpZXcgPyBvcHRzLmJvZHlcbiAgICAgICAgICA6IG9wdHM/LmJvZHkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBEYXRhVmlldyhvcHRzLmJvZHkpXG4gICAgICAgICAgOiBvcHRzICYmIEFycmF5QnVmZmVyLmlzVmlldyhvcHRzPy5ib2R5KSA/IG5ldyBEYXRhVmlldyhvcHRzLmJvZHkuYnVmZmVyKVxuICAgICAgICAgIDogb3B0cz8uYm9keTtcbiAgICAgICAgcmV0dXJuIHsgbWV0aG9kLCBwYXRoLCAuLi5vcHRzLCBib2R5IH07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgZ2V0QVBJTGlzdDxJdGVtLCBQYWdlQ2xhc3MgZXh0ZW5kcyBBYnN0cmFjdFBhZ2U8SXRlbT4gPSBBYnN0cmFjdFBhZ2U8SXRlbT4+KFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBQYWdlOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBQYWdlQ2xhc3MsXG4gICAgb3B0cz86IFJlcXVlc3RPcHRpb25zPGFueT4sXG4gICk6IFBhZ2VQcm9taXNlPFBhZ2VDbGFzcywgSXRlbT4ge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RBUElMaXN0KFBhZ2UsIHsgbWV0aG9kOiAnZ2V0JywgcGF0aCwgLi4ub3B0cyB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQ29udGVudExlbmd0aChib2R5OiB1bmtub3duKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5LCAndXRmOCcpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZXIuZW5jb2RlKGJvZHkpO1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSkge1xuICAgICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYnVpbGRSZXF1ZXN0PFJlcT4oXG4gICAgb3B0aW9uczogRmluYWxSZXF1ZXN0T3B0aW9uczxSZXE+LFxuICAgIHsgcmV0cnlDb3VudCA9IDAgfTogeyByZXRyeUNvdW50PzogbnVtYmVyIH0gPSB7fSxcbiAgKTogeyByZXE6IFJlcXVlc3RJbml0OyB1cmw6IHN0cmluZzsgdGltZW91dDogbnVtYmVyIH0ge1xuICAgIGNvbnN0IHsgbWV0aG9kLCBwYXRoLCBxdWVyeSwgaGVhZGVyczogaGVhZGVycyA9IHt9IH0gPSBvcHRpb25zO1xuXG4gICAgY29uc3QgYm9keSA9XG4gICAgICBBcnJheUJ1ZmZlci5pc1ZpZXcob3B0aW9ucy5ib2R5KSB8fCAob3B0aW9ucy5fX2JpbmFyeVJlcXVlc3QgJiYgdHlwZW9mIG9wdGlvbnMuYm9keSA9PT0gJ3N0cmluZycpID9cbiAgICAgICAgb3B0aW9ucy5ib2R5XG4gICAgICA6IGlzTXVsdGlwYXJ0Qm9keShvcHRpb25zLmJvZHkpID8gb3B0aW9ucy5ib2R5LmJvZHlcbiAgICAgIDogb3B0aW9ucy5ib2R5ID8gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5ib2R5LCBudWxsLCAyKVxuICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSB0aGlzLmNhbGN1bGF0ZUNvbnRlbnRMZW5ndGgoYm9keSk7XG5cbiAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVVJMKHBhdGghLCBxdWVyeSk7XG4gICAgaWYgKCd0aW1lb3V0JyBpbiBvcHRpb25zKSB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcigndGltZW91dCcsIG9wdGlvbnMudGltZW91dCk7XG4gICAgY29uc3QgdGltZW91dCA9IG9wdGlvbnMudGltZW91dCA/PyB0aGlzLnRpbWVvdXQ7XG4gICAgY29uc3QgaHR0cEFnZW50ID0gb3B0aW9ucy5odHRwQWdlbnQgPz8gdGhpcy5odHRwQWdlbnQgPz8gZ2V0RGVmYXVsdEFnZW50KHVybCk7XG4gICAgY29uc3QgbWluQWdlbnRUaW1lb3V0ID0gdGltZW91dCArIDEwMDA7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIChodHRwQWdlbnQgYXMgYW55KT8ub3B0aW9ucz8udGltZW91dCA9PT0gJ251bWJlcicgJiZcbiAgICAgIG1pbkFnZW50VGltZW91dCA+ICgoaHR0cEFnZW50IGFzIGFueSkub3B0aW9ucy50aW1lb3V0ID8/IDApXG4gICAgKSB7XG4gICAgICAvLyBBbGxvdyBhbnkgZ2l2ZW4gcmVxdWVzdCB0byBidW1wIG91ciBhZ2VudCBhY3RpdmUgc29ja2V0IHRpbWVvdXQuXG4gICAgICAvLyBUaGlzIG1heSBzZWVtIHN0cmFuZ2UsIGJ1dCBsZWFraW5nIGFjdGl2ZSBzb2NrZXRzIHNob3VsZCBiZSByYXJlIGFuZCBub3QgcGFydGljdWxhcmx5IHByb2JsZW1hdGljLFxuICAgICAgLy8gYW5kIHdpdGhvdXQgbXV0YXRpbmcgYWdlbnQgd2Ugd291bGQgbmVlZCB0byBjcmVhdGUgbW9yZSBvZiB0aGVtLlxuICAgICAgLy8gVGhpcyB0cmFkZW9mZiBvcHRpbWl6ZXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgKGh0dHBBZ2VudCBhcyBhbnkpLm9wdGlvbnMudGltZW91dCA9IG1pbkFnZW50VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pZGVtcG90ZW5jeUhlYWRlciAmJiBtZXRob2QgIT09ICdnZXQnKSB7XG4gICAgICBpZiAoIW9wdGlvbnMuaWRlbXBvdGVuY3lLZXkpIG9wdGlvbnMuaWRlbXBvdGVuY3lLZXkgPSB0aGlzLmRlZmF1bHRJZGVtcG90ZW5jeUtleSgpO1xuICAgICAgaGVhZGVyc1t0aGlzLmlkZW1wb3RlbmN5SGVhZGVyXSA9IG9wdGlvbnMuaWRlbXBvdGVuY3lLZXk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVxSGVhZGVycyA9IHRoaXMuYnVpbGRIZWFkZXJzKHsgb3B0aW9ucywgaGVhZGVycywgY29udGVudExlbmd0aCwgcmV0cnlDb3VudCB9KTtcblxuICAgIGNvbnN0IHJlcTogUmVxdWVzdEluaXQgPSB7XG4gICAgICBtZXRob2QsXG4gICAgICAuLi4oYm9keSAmJiB7IGJvZHk6IGJvZHkgYXMgYW55IH0pLFxuICAgICAgaGVhZGVyczogcmVxSGVhZGVycyxcbiAgICAgIC4uLihodHRwQWdlbnQgJiYgeyBhZ2VudDogaHR0cEFnZW50IH0pLFxuICAgICAgLy8gQHRzLWlnbm9yZSBub2RlLWZldGNoIHVzZXMgYSBjdXN0b20gQWJvcnRTaWduYWwgdHlwZSB0aGF0IGlzXG4gICAgICAvLyBub3QgY29tcGF0aWJsZSB3aXRoIHN0YW5kYXJkIHdlYiB0eXBlc1xuICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCA/PyBudWxsLFxuICAgIH07XG5cbiAgICByZXR1cm4geyByZXEsIHVybCwgdGltZW91dCB9O1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZEhlYWRlcnMoe1xuICAgIG9wdGlvbnMsXG4gICAgaGVhZGVycyxcbiAgICBjb250ZW50TGVuZ3RoLFxuICAgIHJldHJ5Q291bnQsXG4gIH06IHtcbiAgICBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zO1xuICAgIGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ+O1xuICAgIGNvbnRlbnRMZW5ndGg6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgcmV0cnlDb3VudDogbnVtYmVyO1xuICB9KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgcmVxSGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgIGlmIChjb250ZW50TGVuZ3RoKSB7XG4gICAgICByZXFIZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gY29udGVudExlbmd0aDtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0SGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnMob3B0aW9ucyk7XG4gICAgYXBwbHlIZWFkZXJzTXV0KHJlcUhlYWRlcnMsIGRlZmF1bHRIZWFkZXJzKTtcbiAgICBhcHBseUhlYWRlcnNNdXQocmVxSGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBsZXQgYnVpbHRpbiBmZXRjaCBzZXQgdGhlIENvbnRlbnQtVHlwZSBmb3IgbXVsdGlwYXJ0IGJvZGllc1xuICAgIGlmIChpc011bHRpcGFydEJvZHkob3B0aW9ucy5ib2R5KSAmJiBzaGltc0tpbmQgIT09ICdub2RlJykge1xuICAgICAgZGVsZXRlIHJlcUhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xuICAgIH1cblxuICAgIC8vIERvbid0IHNldCB0aGUgcmV0cnkgY291bnQgaGVhZGVyIGlmIGl0IHdhcyBhbHJlYWR5IHNldCBvciByZW1vdmVkIHRocm91Z2ggZGVmYXVsdCBoZWFkZXJzIG9yIGJ5IHRoZVxuICAgIC8vIGNhbGxlci4gV2UgY2hlY2sgYGRlZmF1bHRIZWFkZXJzYCBhbmQgYGhlYWRlcnNgLCB3aGljaCBjYW4gY29udGFpbiBudWxscywgaW5zdGVhZCBvZiBgcmVxSGVhZGVyc2AgdG9cbiAgICAvLyBhY2NvdW50IGZvciB0aGUgcmVtb3ZhbCBjYXNlLlxuICAgIGlmIChcbiAgICAgIGdldEhlYWRlcihkZWZhdWx0SGVhZGVycywgJ3gtc3RhaW5sZXNzLXJldHJ5LWNvdW50JykgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgZ2V0SGVhZGVyKGhlYWRlcnMsICd4LXN0YWlubGVzcy1yZXRyeS1jb3VudCcpID09PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJlcUhlYWRlcnNbJ3gtc3RhaW5sZXNzLXJldHJ5LWNvdW50J10gPSBTdHJpbmcocmV0cnlDb3VudCk7XG4gICAgfVxuXG4gICAgdGhpcy52YWxpZGF0ZUhlYWRlcnMocmVxSGVhZGVycywgaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVxSGVhZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIG11dGF0aW5nIHRoZSBnaXZlbiBgRmluYWxSZXF1ZXN0T3B0aW9uc2Agb2JqZWN0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIHByZXBhcmVPcHRpb25zKG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgLyoqXG4gICAqIFVzZWQgYXMgYSBjYWxsYmFjayBmb3IgbXV0YXRpbmcgdGhlIGdpdmVuIGBSZXF1ZXN0SW5pdGAgb2JqZWN0LlxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2FzZXMgd2hlcmUgeW91IHdhbnQgdG8gYWRkIGNlcnRhaW4gaGVhZGVycyBiYXNlZCBvZmYgb2ZcbiAgICogdGhlIHJlcXVlc3QgcHJvcGVydGllcywgZS5nLiBgbWV0aG9kYCBvciBgdXJsYC5cbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBwcmVwYXJlUmVxdWVzdChcbiAgICByZXF1ZXN0OiBSZXF1ZXN0SW5pdCxcbiAgICB7IHVybCwgb3B0aW9ucyB9OiB7IHVybDogc3RyaW5nOyBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zIH0sXG4gICk6IFByb21pc2U8dm9pZD4ge31cblxuICBwcm90ZWN0ZWQgcGFyc2VIZWFkZXJzKGhlYWRlcnM6IEhlYWRlcnNJbml0IHwgbnVsbCB8IHVuZGVmaW5lZCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgIHJldHVybiAoXG4gICAgICAhaGVhZGVycyA/IHt9XG4gICAgICA6IFN5bWJvbC5pdGVyYXRvciBpbiBoZWFkZXJzID9cbiAgICAgICAgT2JqZWN0LmZyb21FbnRyaWVzKEFycmF5LmZyb20oaGVhZGVycyBhcyBJdGVyYWJsZTxzdHJpbmdbXT4pLm1hcCgoaGVhZGVyKSA9PiBbLi4uaGVhZGVyXSkpXG4gICAgICA6IHsgLi4uaGVhZGVycyB9XG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYWtlU3RhdHVzRXJyb3IoXG4gICAgc3RhdHVzOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgZXJyb3I6IE9iamVjdCB8IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgaGVhZGVyczogSGVhZGVycyB8IHVuZGVmaW5lZCxcbiAgKTogQVBJRXJyb3Ige1xuICAgIHJldHVybiBBUElFcnJvci5nZW5lcmF0ZShzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgfVxuXG4gIHJlcXVlc3Q8UmVxLCBSc3A+KFxuICAgIG9wdGlvbnM6IFByb21pc2VPclZhbHVlPEZpbmFsUmVxdWVzdE9wdGlvbnM8UmVxPj4sXG4gICAgcmVtYWluaW5nUmV0cmllczogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICk6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIG5ldyBBUElQcm9taXNlKHRoaXMubWFrZVJlcXVlc3Qob3B0aW9ucywgcmVtYWluaW5nUmV0cmllcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdDxSZXE+KFxuICAgIG9wdGlvbnNJbnB1dDogUHJvbWlzZU9yVmFsdWU8RmluYWxSZXF1ZXN0T3B0aW9uczxSZXE+PixcbiAgICByZXRyaWVzUmVtYWluaW5nOiBudW1iZXIgfCBudWxsLFxuICApOiBQcm9taXNlPEFQSVJlc3BvbnNlUHJvcHM+IHtcbiAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgb3B0aW9uc0lucHV0O1xuICAgIGNvbnN0IG1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgPz8gdGhpcy5tYXhSZXRyaWVzO1xuICAgIGlmIChyZXRyaWVzUmVtYWluaW5nID09IG51bGwpIHtcbiAgICAgIHJldHJpZXNSZW1haW5pbmcgPSBtYXhSZXRyaWVzO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMucHJlcGFyZU9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBjb25zdCB7IHJlcSwgdXJsLCB0aW1lb3V0IH0gPSB0aGlzLmJ1aWxkUmVxdWVzdChvcHRpb25zLCB7IHJldHJ5Q291bnQ6IG1heFJldHJpZXMgLSByZXRyaWVzUmVtYWluaW5nIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5wcmVwYXJlUmVxdWVzdChyZXEsIHsgdXJsLCBvcHRpb25zIH0pO1xuXG4gICAgZGVidWcoJ3JlcXVlc3QnLCB1cmwsIG9wdGlvbnMsIHJlcS5oZWFkZXJzKTtcblxuICAgIGlmIChvcHRpb25zLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2hXaXRoVGltZW91dCh1cmwsIHJlcSwgdGltZW91dCwgY29udHJvbGxlcikuY2F0Y2goY2FzdFRvRXJyb3IpO1xuXG4gICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmIChvcHRpb25zLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgQVBJVXNlckFib3J0RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXRyaWVzUmVtYWluaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldHJ5UmVxdWVzdChvcHRpb25zLCByZXRyaWVzUmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBBUElDb25uZWN0aW9uRXJyb3IoeyBjYXVzZTogcmVzcG9uc2UgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gY3JlYXRlUmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgaWYgKHJldHJpZXNSZW1haW5pbmcgJiYgdGhpcy5zaG91bGRSZXRyeShyZXNwb25zZSkpIHtcbiAgICAgICAgY29uc3QgcmV0cnlNZXNzYWdlID0gYHJldHJ5aW5nLCAke3JldHJpZXNSZW1haW5pbmd9IGF0dGVtcHRzIHJlbWFpbmluZ2A7XG4gICAgICAgIGRlYnVnKGByZXNwb25zZSAoZXJyb3I7ICR7cmV0cnlNZXNzYWdlfSlgLCByZXNwb25zZS5zdGF0dXMsIHVybCwgcmVzcG9uc2VIZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0cnlSZXF1ZXN0KG9wdGlvbnMsIHJldHJpZXNSZW1haW5pbmcsIHJlc3BvbnNlSGVhZGVycyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVyclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKGUpID0+IGNhc3RUb0Vycm9yKGUpLm1lc3NhZ2UpO1xuICAgICAgY29uc3QgZXJySlNPTiA9IHNhZmVKU09OKGVyclRleHQpO1xuICAgICAgY29uc3QgZXJyTWVzc2FnZSA9IGVyckpTT04gPyB1bmRlZmluZWQgOiBlcnJUZXh0O1xuICAgICAgY29uc3QgcmV0cnlNZXNzYWdlID0gcmV0cmllc1JlbWFpbmluZyA/IGAoZXJyb3I7IG5vIG1vcmUgcmV0cmllcyBsZWZ0KWAgOiBgKGVycm9yOyBub3QgcmV0cnlhYmxlKWA7XG5cbiAgICAgIGRlYnVnKGByZXNwb25zZSAoZXJyb3I7ICR7cmV0cnlNZXNzYWdlfSlgLCByZXNwb25zZS5zdGF0dXMsIHVybCwgcmVzcG9uc2VIZWFkZXJzLCBlcnJNZXNzYWdlKTtcblxuICAgICAgY29uc3QgZXJyID0gdGhpcy5tYWtlU3RhdHVzRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBlcnJKU09OLCBlcnJNZXNzYWdlLCByZXNwb25zZUhlYWRlcnMpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlc3BvbnNlLCBvcHRpb25zLCBjb250cm9sbGVyIH07XG4gIH1cblxuICByZXF1ZXN0QVBJTGlzdDxJdGVtID0gdW5rbm93biwgUGFnZUNsYXNzIGV4dGVuZHMgQWJzdHJhY3RQYWdlPEl0ZW0+ID0gQWJzdHJhY3RQYWdlPEl0ZW0+PihcbiAgICBQYWdlOiBuZXcgKC4uLmFyZ3M6IENvbnN0cnVjdG9yUGFyYW1ldGVyczx0eXBlb2YgQWJzdHJhY3RQYWdlPikgPT4gUGFnZUNsYXNzLFxuICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsXG4gICk6IFBhZ2VQcm9taXNlPFBhZ2VDbGFzcywgSXRlbT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLm1ha2VSZXF1ZXN0KG9wdGlvbnMsIG51bGwpO1xuICAgIHJldHVybiBuZXcgUGFnZVByb21pc2U8UGFnZUNsYXNzLCBJdGVtPih0aGlzLCByZXF1ZXN0LCBQYWdlKTtcbiAgfVxuXG4gIGJ1aWxkVVJMPFJlcT4ocGF0aDogc3RyaW5nLCBxdWVyeTogUmVxIHwgbnVsbCB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gICAgY29uc3QgdXJsID1cbiAgICAgIGlzQWJzb2x1dGVVUkwocGF0aCkgP1xuICAgICAgICBuZXcgVVJMKHBhdGgpXG4gICAgICA6IG5ldyBVUkwodGhpcy5iYXNlVVJMICsgKHRoaXMuYmFzZVVSTC5lbmRzV2l0aCgnLycpICYmIHBhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgxKSA6IHBhdGgpKTtcblxuICAgIGNvbnN0IGRlZmF1bHRRdWVyeSA9IHRoaXMuZGVmYXVsdFF1ZXJ5KCk7XG4gICAgaWYgKCFpc0VtcHR5T2JqKGRlZmF1bHRRdWVyeSkpIHtcbiAgICAgIHF1ZXJ5ID0geyAuLi5kZWZhdWx0UXVlcnksIC4uLnF1ZXJ5IH0gYXMgUmVxO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnICYmIHF1ZXJ5ICYmICFBcnJheS5pc0FycmF5KHF1ZXJ5KSkge1xuICAgICAgdXJsLnNlYXJjaCA9IHRoaXMuc3RyaW5naWZ5UXVlcnkocXVlcnkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pO1xuICAgIH1cblxuICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdHJpbmdpZnlRdWVyeShxdWVyeTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBzdHJpbmcge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhxdWVyeSlcbiAgICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJldHVybiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT1gO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IHN0cmluZ2lmeSB0eXBlICR7dHlwZW9mIHZhbHVlfTsgRXhwZWN0ZWQgc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9yIG51bGwuIElmIHlvdSBuZWVkIHRvIHBhc3MgbmVzdGVkIHF1ZXJ5IHBhcmFtZXRlcnMsIHlvdSBjYW4gbWFudWFsbHkgZW5jb2RlIHRoZW0sIGUuZy4geyBxdWVyeTogeyAnZm9vW2tleTFdJzogdmFsdWUxLCAnZm9vW2tleTJdJzogdmFsdWUyIH0gfSwgYW5kIHBsZWFzZSBvcGVuIGEgR2l0SHViIGlzc3VlIHJlcXVlc3RpbmcgYmV0dGVyIHN1cHBvcnQgZm9yIHlvdXIgdXNlIGNhc2UuYCxcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgICAuam9pbignJicpO1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hXaXRoVGltZW91dChcbiAgICB1cmw6IFJlcXVlc3RJbmZvLFxuICAgIGluaXQ6IFJlcXVlc3RJbml0IHwgdW5kZWZpbmVkLFxuICAgIG1zOiBudW1iZXIsXG4gICAgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyLFxuICApOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgY29uc3QgeyBzaWduYWwsIC4uLm9wdGlvbnMgfSA9IGluaXQgfHwge307XG4gICAgaWYgKHNpZ25hbCkgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gY29udHJvbGxlci5hYm9ydCgpKTtcblxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgbXMpO1xuXG4gICAgY29uc3QgZmV0Y2hPcHRpb25zID0ge1xuICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCBhcyBhbnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgaWYgKGZldGNoT3B0aW9ucy5tZXRob2QpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXRob2RzIGxpa2UgJ3BhdGNoJyBuZWVkIHRvIGJlIHVwcGVyY2FzZWRcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL3VuZGljaS9pc3N1ZXMvMjI5NFxuICAgICAgZmV0Y2hPcHRpb25zLm1ldGhvZCA9IGZldGNoT3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gdXNlIHVuZGVmaW5lZCB0aGlzIGJpbmRpbmc7IGZldGNoIGVycm9ycyBpZiBib3VuZCB0byBzb21ldGhpbmcgZWxzZSBpbiBicm93c2VyL2Nsb3VkZmxhcmVcbiAgICAgIHRoaXMuZmV0Y2guY2FsbCh1bmRlZmluZWQsIHVybCwgZmV0Y2hPcHRpb25zKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRSZXRyeShyZXNwb25zZTogUmVzcG9uc2UpOiBib29sZWFuIHtcbiAgICAvLyBOb3RlIHRoaXMgaXMgbm90IGEgc3RhbmRhcmQgaGVhZGVyLlxuICAgIGNvbnN0IHNob3VsZFJldHJ5SGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtc2hvdWxkLXJldHJ5Jyk7XG5cbiAgICAvLyBJZiB0aGUgc2VydmVyIGV4cGxpY2l0bHkgc2F5cyB3aGV0aGVyIG9yIG5vdCB0byByZXRyeSwgb2JleS5cbiAgICBpZiAoc2hvdWxkUmV0cnlIZWFkZXIgPT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gICAgaWYgKHNob3VsZFJldHJ5SGVhZGVyID09PSAnZmFsc2UnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBSZXRyeSBvbiByZXF1ZXN0IHRpbWVvdXRzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBSZXRyeSBvbiBsb2NrIHRpbWVvdXRzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBSZXRyeSBvbiByYXRlIGxpbWl0cy5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gUmV0cnkgaW50ZXJuYWwgZXJyb3JzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmV0cnlSZXF1ZXN0KFxuICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsXG4gICAgcmV0cmllc1JlbWFpbmluZzogbnVtYmVyLFxuICAgIHJlc3BvbnNlSGVhZGVycz86IEhlYWRlcnMgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8QVBJUmVzcG9uc2VQcm9wcz4ge1xuICAgIGxldCB0aW1lb3V0TWlsbGlzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBOb3RlIHRoZSBgcmV0cnktYWZ0ZXItbXNgIGhlYWRlciBtYXkgbm90IGJlIHN0YW5kYXJkLCBidXQgaXMgYSBnb29kIGlkZWEgYW5kIHdlJ2QgbGlrZSBwcm9hY3RpdmUgc3VwcG9ydCBmb3IgaXQuXG4gICAgY29uc3QgcmV0cnlBZnRlck1pbGxpc0hlYWRlciA9IHJlc3BvbnNlSGVhZGVycz8uWydyZXRyeS1hZnRlci1tcyddO1xuICAgIGlmIChyZXRyeUFmdGVyTWlsbGlzSGVhZGVyKSB7XG4gICAgICBjb25zdCB0aW1lb3V0TXMgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXJNaWxsaXNIZWFkZXIpO1xuICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGltZW91dE1zKSkge1xuICAgICAgICB0aW1lb3V0TWlsbGlzID0gdGltZW91dE1zO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFib3V0IHRoZSBSZXRyeS1BZnRlciBoZWFkZXI6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9SZXRyeS1BZnRlclxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXIgPSByZXNwb25zZUhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXTtcbiAgICBpZiAocmV0cnlBZnRlckhlYWRlciAmJiAhdGltZW91dE1pbGxpcykge1xuICAgICAgY29uc3QgdGltZW91dFNlY29uZHMgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXJIZWFkZXIpO1xuICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGltZW91dFNlY29uZHMpKSB7XG4gICAgICAgIHRpbWVvdXRNaWxsaXMgPSB0aW1lb3V0U2Vjb25kcyAqIDEwMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0TWlsbGlzID0gRGF0ZS5wYXJzZShyZXRyeUFmdGVySGVhZGVyKSAtIERhdGUubm93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIEFQSSBhc2tzIHVzIHRvIHdhaXQgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lIChhbmQgaXQncyBhIHJlYXNvbmFibGUgYW1vdW50KSxcbiAgICAvLyBqdXN0IGRvIHdoYXQgaXQgc2F5cywgYnV0IG90aGVyd2lzZSBjYWxjdWxhdGUgYSBkZWZhdWx0XG4gICAgaWYgKCEodGltZW91dE1pbGxpcyAmJiAwIDw9IHRpbWVvdXRNaWxsaXMgJiYgdGltZW91dE1pbGxpcyA8IDYwICogMTAwMCkpIHtcbiAgICAgIGNvbnN0IG1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgPz8gdGhpcy5tYXhSZXRyaWVzO1xuICAgICAgdGltZW91dE1pbGxpcyA9IHRoaXMuY2FsY3VsYXRlRGVmYXVsdFJldHJ5VGltZW91dE1pbGxpcyhyZXRyaWVzUmVtYWluaW5nLCBtYXhSZXRyaWVzKTtcbiAgICB9XG4gICAgYXdhaXQgc2xlZXAodGltZW91dE1pbGxpcyk7XG5cbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdChvcHRpb25zLCByZXRyaWVzUmVtYWluaW5nIC0gMSk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZURlZmF1bHRSZXRyeVRpbWVvdXRNaWxsaXMocmV0cmllc1JlbWFpbmluZzogbnVtYmVyLCBtYXhSZXRyaWVzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGluaXRpYWxSZXRyeURlbGF5ID0gMC41O1xuICAgIGNvbnN0IG1heFJldHJ5RGVsYXkgPSA4LjA7XG5cbiAgICBjb25zdCBudW1SZXRyaWVzID0gbWF4UmV0cmllcyAtIHJldHJpZXNSZW1haW5pbmc7XG5cbiAgICAvLyBBcHBseSBleHBvbmVudGlhbCBiYWNrb2ZmLCBidXQgbm90IG1vcmUgdGhhbiB0aGUgbWF4LlxuICAgIGNvbnN0IHNsZWVwU2Vjb25kcyA9IE1hdGgubWluKGluaXRpYWxSZXRyeURlbGF5ICogTWF0aC5wb3coMiwgbnVtUmV0cmllcyksIG1heFJldHJ5RGVsYXkpO1xuXG4gICAgLy8gQXBwbHkgc29tZSBqaXR0ZXIsIHRha2UgdXAgdG8gYXQgbW9zdCAyNSBwZXJjZW50IG9mIHRoZSByZXRyeSB0aW1lLlxuICAgIGNvbnN0IGppdHRlciA9IDEgLSBNYXRoLnJhbmRvbSgpICogMC4yNTtcblxuICAgIHJldHVybiBzbGVlcFNlY29uZHMgKiBqaXR0ZXIgKiAxMDAwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVc2VyQWdlbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS9KUyAke1ZFUlNJT059YDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBQYWdlSW5mbyA9IHsgdXJsOiBVUkwgfSB8IHsgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGwgfTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGFnZTxJdGVtPiBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8SXRlbT4ge1xuICAjY2xpZW50OiBBUElDbGllbnQ7XG4gIHByb3RlY3RlZCBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zO1xuXG4gIHByb3RlY3RlZCByZXNwb25zZTogUmVzcG9uc2U7XG4gIHByb3RlY3RlZCBib2R5OiB1bmtub3duO1xuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQVBJQ2xpZW50LCByZXNwb25zZTogUmVzcG9uc2UsIGJvZHk6IHVua25vd24sIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpIHtcbiAgICB0aGlzLiNjbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbmV4dFBhZ2VJbmZvIGluc3RlYWRcbiAgICovXG4gIGFic3RyYWN0IG5leHRQYWdlUGFyYW1zKCk6IFBhcnRpYWw8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+IHwgbnVsbDtcbiAgYWJzdHJhY3QgbmV4dFBhZ2VJbmZvKCk6IFBhZ2VJbmZvIHwgbnVsbDtcblxuICBhYnN0cmFjdCBnZXRQYWdpbmF0ZWRJdGVtcygpOiBJdGVtW107XG5cbiAgaGFzTmV4dFBhZ2UoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldFBhZ2luYXRlZEl0ZW1zKCk7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5uZXh0UGFnZUluZm8oKSAhPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgZ2V0TmV4dFBhZ2UoKTogUHJvbWlzZTx0aGlzPiB7XG4gICAgY29uc3QgbmV4dEluZm8gPSB0aGlzLm5leHRQYWdlSW5mbygpO1xuICAgIGlmICghbmV4dEluZm8pIHtcbiAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihcbiAgICAgICAgJ05vIG5leHQgcGFnZSBleHBlY3RlZDsgcGxlYXNlIGNoZWNrIGAuaGFzTmV4dFBhZ2UoKWAgYmVmb3JlIGNhbGxpbmcgYC5nZXROZXh0UGFnZSgpYC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dE9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucyB9O1xuICAgIGlmICgncGFyYW1zJyBpbiBuZXh0SW5mbyAmJiB0eXBlb2YgbmV4dE9wdGlvbnMucXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBuZXh0T3B0aW9ucy5xdWVyeSA9IHsgLi4ubmV4dE9wdGlvbnMucXVlcnksIC4uLm5leHRJbmZvLnBhcmFtcyB9O1xuICAgIH0gZWxzZSBpZiAoJ3VybCcgaW4gbmV4dEluZm8pIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFsuLi5PYmplY3QuZW50cmllcyhuZXh0T3B0aW9ucy5xdWVyeSB8fCB7fSksIC4uLm5leHRJbmZvLnVybC5zZWFyY2hQYXJhbXMuZW50cmllcygpXTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHBhcmFtcykge1xuICAgICAgICBuZXh0SW5mby51cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlIGFzIGFueSk7XG4gICAgICB9XG4gICAgICBuZXh0T3B0aW9ucy5xdWVyeSA9IHVuZGVmaW5lZDtcbiAgICAgIG5leHRPcHRpb25zLnBhdGggPSBuZXh0SW5mby51cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuI2NsaWVudC5yZXF1ZXN0QVBJTGlzdCh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSwgbmV4dE9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgKml0ZXJQYWdlcygpOiBBc3luY0dlbmVyYXRvcjx0aGlzPiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgbGV0IHBhZ2U6IHRoaXMgPSB0aGlzO1xuICAgIHlpZWxkIHBhZ2U7XG4gICAgd2hpbGUgKHBhZ2UuaGFzTmV4dFBhZ2UoKSkge1xuICAgICAgcGFnZSA9IGF3YWl0IHBhZ2UuZ2V0TmV4dFBhZ2UoKTtcbiAgICAgIHlpZWxkIHBhZ2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNHZW5lcmF0b3I8SXRlbT4ge1xuICAgIGZvciBhd2FpdCAoY29uc3QgcGFnZSBvZiB0aGlzLml0ZXJQYWdlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcGFnZS5nZXRQYWdpbmF0ZWRJdGVtcygpKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBzdWJjbGFzcyBvZiBQcm9taXNlIHdpbGwgcmVzb2x2ZSB0byBhbiBpbnN0YW50aWF0ZWQgUGFnZSBvbmNlIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAqXG4gKiBJdCBhbHNvIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZSB0byBhbGxvdyBhdXRvLXBhZ2luYXRpbmcgaXRlcmF0aW9uIG9uIGFuIHVuYXdhaXRlZCBsaXN0IGNhbGwsIGVnOlxuICpcbiAqICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBjbGllbnQuaXRlbXMubGlzdCgpKSB7XG4gKiAgICAgIGNvbnNvbGUubG9nKGl0ZW0pXG4gKiAgICB9XG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlUHJvbWlzZTxcbiAgICBQYWdlQ2xhc3MgZXh0ZW5kcyBBYnN0cmFjdFBhZ2U8SXRlbT4sXG4gICAgSXRlbSA9IFJldHVyblR5cGU8UGFnZUNsYXNzWydnZXRQYWdpbmF0ZWRJdGVtcyddPltudW1iZXJdLFxuICA+XG4gIGV4dGVuZHMgQVBJUHJvbWlzZTxQYWdlQ2xhc3M+XG4gIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxJdGVtPlxue1xuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IEFQSUNsaWVudCxcbiAgICByZXF1ZXN0OiBQcm9taXNlPEFQSVJlc3BvbnNlUHJvcHM+LFxuICAgIFBhZ2U6IG5ldyAoLi4uYXJnczogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBBYnN0cmFjdFBhZ2U+KSA9PiBQYWdlQ2xhc3MsXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGFzeW5jIChwcm9wcykgPT5cbiAgICAgICAgbmV3IFBhZ2UoXG4gICAgICAgICAgY2xpZW50LFxuICAgICAgICAgIHByb3BzLnJlc3BvbnNlLFxuICAgICAgICAgIGF3YWl0IGRlZmF1bHRQYXJzZVJlc3BvbnNlKHByb3BzKSxcbiAgICAgICAgICBwcm9wcy5vcHRpb25zLFxuICAgICAgICApIGFzIFdpdGhSZXF1ZXN0SUQ8UGFnZUNsYXNzPixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93IGF1dG8tcGFnaW5hdGluZyBpdGVyYXRpb24gb24gYW4gdW5hd2FpdGVkIGxpc3QgY2FsbCwgZWc6XG4gICAqXG4gICAqICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBjbGllbnQuaXRlbXMubGlzdCgpKSB7XG4gICAqICAgICAgY29uc29sZS5sb2coaXRlbSlcbiAgICogICAgfVxuICAgKi9cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNHZW5lcmF0b3I8SXRlbT4ge1xuICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBwYWdlKSB7XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlUmVzcG9uc2VIZWFkZXJzID0gKFxuICBoZWFkZXJzOiBBd2FpdGVkPFJldHVyblR5cGU8RmV0Y2g+PlsnaGVhZGVycyddLFxuKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gIHJldHVybiBuZXcgUHJveHkoXG4gICAgT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaGVhZGVycy5lbnRyaWVzKCksXG4gICAgKSxcbiAgICB7XG4gICAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXkudG9Mb3dlckNhc2UoKV0gfHwgdGFyZ2V0W2tleV07XG4gICAgICB9LFxuICAgIH0sXG4gICk7XG59O1xuXG50eXBlIEhUVFBNZXRob2QgPSAnZ2V0JyB8ICdwb3N0JyB8ICdwdXQnIHwgJ3BhdGNoJyB8ICdkZWxldGUnO1xuXG5leHBvcnQgdHlwZSBSZXF1ZXN0Q2xpZW50ID0geyBmZXRjaDogRmV0Y2ggfTtcbmV4cG9ydCB0eXBlIEhlYWRlcnMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCB0eXBlIERlZmF1bHRRdWVyeSA9IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD47XG5leHBvcnQgdHlwZSBLZXlzRW51bTxUPiA9IHsgW1AgaW4ga2V5b2YgUmVxdWlyZWQ8VD5dOiB0cnVlIH07XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RPcHRpb25zPFxuICBSZXEgPSB1bmtub3duIHwgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBSZWFkYWJsZSB8IEJsb2JMaWtlIHwgQXJyYXlCdWZmZXJWaWV3IHwgQXJyYXlCdWZmZXIsXG4+ID0ge1xuICBtZXRob2Q/OiBIVFRQTWV0aG9kO1xuICBwYXRoPzogc3RyaW5nO1xuICBxdWVyeT86IFJlcSB8IHVuZGVmaW5lZDtcbiAgYm9keT86IFJlcSB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIGhlYWRlcnM/OiBIZWFkZXJzIHwgdW5kZWZpbmVkO1xuXG4gIG1heFJldHJpZXM/OiBudW1iZXI7XG4gIHN0cmVhbT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIHRpbWVvdXQ/OiBudW1iZXI7XG4gIGh0dHBBZ2VudD86IEFnZW50O1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIGlkZW1wb3RlbmN5S2V5Pzogc3RyaW5nO1xuXG4gIF9fYmluYXJ5UmVxdWVzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIF9fYmluYXJ5UmVzcG9uc2U/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICBfX3N0cmVhbUNsYXNzPzogdHlwZW9mIFN0cmVhbTtcbn07XG5cbi8vIFRoaXMgaXMgcmVxdWlyZWQgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gb2JqZWN0IG1hdGNoZXMgdGhlIFJlcXVlc3RPcHRpb25zXG4vLyB0eXBlIGF0IHJ1bnRpbWUuIFdoaWxlIHRoaXMgcmVxdWlyZXMgZHVwbGljYXRpb24sIGl0IGlzIGVuZm9yY2VkIGJ5IHRoZSBUeXBlU2NyaXB0XG4vLyBjb21waWxlciBzdWNoIHRoYXQgYW55IG1pc3NpbmcgLyBleHRyYW5lb3VzIGtleXMgd2lsbCBjYXVzZSBhbiBlcnJvci5cbmNvbnN0IHJlcXVlc3RPcHRpb25zS2V5czogS2V5c0VudW08UmVxdWVzdE9wdGlvbnM+ID0ge1xuICBtZXRob2Q6IHRydWUsXG4gIHBhdGg6IHRydWUsXG4gIHF1ZXJ5OiB0cnVlLFxuICBib2R5OiB0cnVlLFxuICBoZWFkZXJzOiB0cnVlLFxuXG4gIG1heFJldHJpZXM6IHRydWUsXG4gIHN0cmVhbTogdHJ1ZSxcbiAgdGltZW91dDogdHJ1ZSxcbiAgaHR0cEFnZW50OiB0cnVlLFxuICBzaWduYWw6IHRydWUsXG4gIGlkZW1wb3RlbmN5S2V5OiB0cnVlLFxuXG4gIF9fYmluYXJ5UmVxdWVzdDogdHJ1ZSxcbiAgX19iaW5hcnlSZXNwb25zZTogdHJ1ZSxcbiAgX19zdHJlYW1DbGFzczogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBpc1JlcXVlc3RPcHRpb25zID0gKG9iajogdW5rbm93bik6IG9iaiBpcyBSZXF1ZXN0T3B0aW9ucyA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICBvYmogIT09IG51bGwgJiZcbiAgICAhaXNFbXB0eU9iaihvYmopICYmXG4gICAgT2JqZWN0LmtleXMob2JqKS5ldmVyeSgoaykgPT4gaGFzT3duKHJlcXVlc3RPcHRpb25zS2V5cywgaykpXG4gICk7XG59O1xuXG5leHBvcnQgdHlwZSBGaW5hbFJlcXVlc3RPcHRpb25zPFJlcSA9IHVua25vd24gfCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IFJlYWRhYmxlIHwgRGF0YVZpZXc+ID1cbiAgUmVxdWVzdE9wdGlvbnM8UmVxPiAmIHtcbiAgICBtZXRob2Q6IEhUVFBNZXRob2Q7XG4gICAgcGF0aDogc3RyaW5nO1xuICB9O1xuXG5kZWNsYXJlIGNvbnN0IERlbm86IGFueTtcbmRlY2xhcmUgY29uc3QgRWRnZVJ1bnRpbWU6IGFueTtcbnR5cGUgQXJjaCA9ICd4MzInIHwgJ3g2NCcgfCAnYXJtJyB8ICdhcm02NCcgfCBgb3RoZXI6JHtzdHJpbmd9YCB8ICd1bmtub3duJztcbnR5cGUgUGxhdGZvcm1OYW1lID1cbiAgfCAnTWFjT1MnXG4gIHwgJ0xpbnV4J1xuICB8ICdXaW5kb3dzJ1xuICB8ICdGcmVlQlNEJ1xuICB8ICdPcGVuQlNEJ1xuICB8ICdpT1MnXG4gIHwgJ0FuZHJvaWQnXG4gIHwgYE90aGVyOiR7c3RyaW5nfWBcbiAgfCAnVW5rbm93bic7XG50eXBlIEJyb3dzZXIgPSAnaWUnIHwgJ2VkZ2UnIHwgJ2Nocm9tZScgfCAnZmlyZWZveCcgfCAnc2FmYXJpJztcbnR5cGUgUGxhdGZvcm1Qcm9wZXJ0aWVzID0ge1xuICAnWC1TdGFpbmxlc3MtTGFuZyc6ICdqcyc7XG4gICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBzdHJpbmc7XG4gICdYLVN0YWlubGVzcy1PUyc6IFBsYXRmb3JtTmFtZTtcbiAgJ1gtU3RhaW5sZXNzLUFyY2gnOiBBcmNoO1xuICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICdub2RlJyB8ICdkZW5vJyB8ICdlZGdlJyB8IGBicm93c2VyOiR7QnJvd3Nlcn1gIHwgJ3Vua25vd24nO1xuICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogc3RyaW5nO1xufTtcbmNvbnN0IGdldFBsYXRmb3JtUHJvcGVydGllcyA9ICgpOiBQbGF0Zm9ybVByb3BlcnRpZXMgPT4ge1xuICBpZiAodHlwZW9mIERlbm8gIT09ICd1bmRlZmluZWQnICYmIERlbm8uYnVpbGQgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICAnWC1TdGFpbmxlc3MtTGFuZyc6ICdqcycsXG4gICAgICAnWC1TdGFpbmxlc3MtUGFja2FnZS1WZXJzaW9uJzogVkVSU0lPTixcbiAgICAgICdYLVN0YWlubGVzcy1PUyc6IG5vcm1hbGl6ZVBsYXRmb3JtKERlbm8uYnVpbGQub3MpLFxuICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiBub3JtYWxpemVBcmNoKERlbm8uYnVpbGQuYXJjaCksXG4gICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICdkZW5vJyxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lLVZlcnNpb24nOlxuICAgICAgICB0eXBlb2YgRGVuby52ZXJzaW9uID09PSAnc3RyaW5nJyA/IERlbm8udmVyc2lvbiA6IERlbm8udmVyc2lvbj8uZGVubyA/PyAndW5rbm93bicsXG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIEVkZ2VSdW50aW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB7XG4gICAgICAnWC1TdGFpbmxlc3MtTGFuZyc6ICdqcycsXG4gICAgICAnWC1TdGFpbmxlc3MtUGFja2FnZS1WZXJzaW9uJzogVkVSU0lPTixcbiAgICAgICdYLVN0YWlubGVzcy1PUyc6ICdVbmtub3duJyxcbiAgICAgICdYLVN0YWlubGVzcy1BcmNoJzogYG90aGVyOiR7RWRnZVJ1bnRpbWV9YCxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lJzogJ2VkZ2UnLFxuICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6IHByb2Nlc3MudmVyc2lvbixcbiAgICB9O1xuICB9XG4gIC8vIENoZWNrIGlmIE5vZGUuanNcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIHJldHVybiB7XG4gICAgICAnWC1TdGFpbmxlc3MtTGFuZyc6ICdqcycsXG4gICAgICAnWC1TdGFpbmxlc3MtUGFja2FnZS1WZXJzaW9uJzogVkVSU0lPTixcbiAgICAgICdYLVN0YWlubGVzcy1PUyc6IG5vcm1hbGl6ZVBsYXRmb3JtKHByb2Nlc3MucGxhdGZvcm0pLFxuICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiBub3JtYWxpemVBcmNoKHByb2Nlc3MuYXJjaCksXG4gICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICdub2RlJyxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lLVZlcnNpb24nOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IGJyb3dzZXJJbmZvID0gZ2V0QnJvd3NlckluZm8oKTtcbiAgaWYgKGJyb3dzZXJJbmZvKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICAgJ1gtU3RhaW5sZXNzLU9TJzogJ1Vua25vd24nLFxuICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiAndW5rbm93bicsXG4gICAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6IGBicm93c2VyOiR7YnJvd3NlckluZm8uYnJvd3Nlcn1gLFxuICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6IGJyb3dzZXJJbmZvLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIC8vIFRPRE8gYWRkIHN1cHBvcnQgZm9yIENsb3VkZmxhcmUgd29ya2VycywgZXRjLlxuICByZXR1cm4ge1xuICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAnWC1TdGFpbmxlc3MtUGFja2FnZS1WZXJzaW9uJzogVkVSU0lPTixcbiAgICAnWC1TdGFpbmxlc3MtT1MnOiAnVW5rbm93bicsXG4gICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiAndW5rbm93bicsXG4gICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUnOiAndW5rbm93bicsXG4gICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6ICd1bmtub3duJyxcbiAgfTtcbn07XG5cbnR5cGUgQnJvd3NlckluZm8gPSB7XG4gIGJyb3dzZXI6IEJyb3dzZXI7XG4gIHZlcnNpb246IHN0cmluZztcbn07XG5cbmRlY2xhcmUgY29uc3QgbmF2aWdhdG9yOiB7IHVzZXJBZ2VudDogc3RyaW5nIH0gfCB1bmRlZmluZWQ7XG5cbi8vIE5vdGU6IG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL0pTLURldlRvb2xzL2hvc3QtZW52aXJvbm1lbnQvYmxvYi9iMWFiNzllY2RlMzdkYjVkNmUxNjNjMDUwZTU0ZmU3ZDI4N2Q3YzkyL3NyYy9pc29tb3JwaGljLmJyb3dzZXIudHNcbmZ1bmN0aW9uIGdldEJyb3dzZXJJbmZvKCk6IEJyb3dzZXJJbmZvIHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBOT1RFOiBUaGUgb3JkZXIgbWF0dGVycyBoZXJlIVxuICBjb25zdCBicm93c2VyUGF0dGVybnMgPSBbXG4gICAgeyBrZXk6ICdlZGdlJyBhcyBjb25zdCwgcGF0dGVybjogL0VkZ2UoPzpcXFcrKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPy8gfSxcbiAgICB7IGtleTogJ2llJyBhcyBjb25zdCwgcGF0dGVybjogL01TSUUoPzpcXFcrKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPy8gfSxcbiAgICB7IGtleTogJ2llJyBhcyBjb25zdCwgcGF0dGVybjogL1RyaWRlbnQoPzouKnJ2XFw6KFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPy8gfSxcbiAgICB7IGtleTogJ2Nocm9tZScgYXMgY29uc3QsIHBhdHRlcm46IC9DaHJvbWUoPzpcXFcrKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPy8gfSxcbiAgICB7IGtleTogJ2ZpcmVmb3gnIGFzIGNvbnN0LCBwYXR0ZXJuOiAvRmlyZWZveCg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgIHsga2V5OiAnc2FmYXJpJyBhcyBjb25zdCwgcGF0dGVybjogLyg/OlZlcnNpb25cXFcrKFxcZCspXFwuKFxcZCspKD86XFwuKFxcZCspKT8pPyg/OlxcVytNb2JpbGVcXFMqKT9cXFcrU2FmYXJpLyB9LFxuICBdO1xuXG4gIC8vIEZpbmQgdGhlIEZJUlNUIG1hdGNoaW5nIGJyb3dzZXJcbiAgZm9yIChjb25zdCB7IGtleSwgcGF0dGVybiB9IG9mIGJyb3dzZXJQYXR0ZXJucykge1xuICAgIGNvbnN0IG1hdGNoID0gcGF0dGVybi5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc3QgbWFqb3IgPSBtYXRjaFsxXSB8fCAwO1xuICAgICAgY29uc3QgbWlub3IgPSBtYXRjaFsyXSB8fCAwO1xuICAgICAgY29uc3QgcGF0Y2ggPSBtYXRjaFszXSB8fCAwO1xuXG4gICAgICByZXR1cm4geyBicm93c2VyOiBrZXksIHZlcnNpb246IGAke21ham9yfS4ke21pbm9yfS4ke3BhdGNofWAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3Qgbm9ybWFsaXplQXJjaCA9IChhcmNoOiBzdHJpbmcpOiBBcmNoID0+IHtcbiAgLy8gTm9kZSBkb2NzOlxuICAvLyAtIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NhcmNoXG4gIC8vIERlbm8gZG9jczpcbiAgLy8gLSBodHRwczovL2RvYy5kZW5vLmxhbmQvZGVuby9zdGFibGUvfi9EZW5vLmJ1aWxkXG4gIGlmIChhcmNoID09PSAneDMyJykgcmV0dXJuICd4MzInO1xuICBpZiAoYXJjaCA9PT0gJ3g4Nl82NCcgfHwgYXJjaCA9PT0gJ3g2NCcpIHJldHVybiAneDY0JztcbiAgaWYgKGFyY2ggPT09ICdhcm0nKSByZXR1cm4gJ2FybSc7XG4gIGlmIChhcmNoID09PSAnYWFyY2g2NCcgfHwgYXJjaCA9PT0gJ2FybTY0JykgcmV0dXJuICdhcm02NCc7XG4gIGlmIChhcmNoKSByZXR1cm4gYG90aGVyOiR7YXJjaH1gO1xuICByZXR1cm4gJ3Vua25vd24nO1xufTtcblxuY29uc3Qgbm9ybWFsaXplUGxhdGZvcm0gPSAocGxhdGZvcm06IHN0cmluZyk6IFBsYXRmb3JtTmFtZSA9PiB7XG4gIC8vIE5vZGUgcGxhdGZvcm1zOlxuICAvLyAtIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NwbGF0Zm9ybVxuICAvLyBEZW5vIHBsYXRmb3JtczpcbiAgLy8gLSBodHRwczovL2RvYy5kZW5vLmxhbmQvZGVuby9zdGFibGUvfi9EZW5vLmJ1aWxkXG4gIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2Rlbm9sYW5kL2Rlbm8vaXNzdWVzLzE0Nzk5XG5cbiAgcGxhdGZvcm0gPSBwbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIE5PVEU6IHRoaXMgaU9TIGNoZWNrIGlzIHVudGVzdGVkIGFuZCBtYXkgbm90IHdvcmtcbiAgLy8gTm9kZSBkb2VzIG5vdCB3b3JrIG5hdGl2ZWx5IG9uIElPUywgdGhlcmUgaXMgYSBmb3JrIGF0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMtbW9iaWxlL25vZGVqcy1tb2JpbGVcbiAgLy8gaG93ZXZlciBpdCBpcyB1bmtub3duIGF0IHRoZSB0aW1lIG9mIHdyaXRpbmcgaG93IHRvIGRldGVjdCBpZiBpdCBpcyBydW5uaW5nXG4gIGlmIChwbGF0Zm9ybS5pbmNsdWRlcygnaW9zJykpIHJldHVybiAnaU9TJztcbiAgaWYgKHBsYXRmb3JtID09PSAnYW5kcm9pZCcpIHJldHVybiAnQW5kcm9pZCc7XG4gIGlmIChwbGF0Zm9ybSA9PT0gJ2RhcndpbicpIHJldHVybiAnTWFjT1MnO1xuICBpZiAocGxhdGZvcm0gPT09ICd3aW4zMicpIHJldHVybiAnV2luZG93cyc7XG4gIGlmIChwbGF0Zm9ybSA9PT0gJ2ZyZWVic2QnKSByZXR1cm4gJ0ZyZWVCU0QnO1xuICBpZiAocGxhdGZvcm0gPT09ICdvcGVuYnNkJykgcmV0dXJuICdPcGVuQlNEJztcbiAgaWYgKHBsYXRmb3JtID09PSAnbGludXgnKSByZXR1cm4gJ0xpbnV4JztcbiAgaWYgKHBsYXRmb3JtKSByZXR1cm4gYE90aGVyOiR7cGxhdGZvcm19YDtcbiAgcmV0dXJuICdVbmtub3duJztcbn07XG5cbmxldCBfcGxhdGZvcm1IZWFkZXJzOiBQbGF0Zm9ybVByb3BlcnRpZXM7XG5jb25zdCBnZXRQbGF0Zm9ybUhlYWRlcnMgPSAoKSA9PiB7XG4gIHJldHVybiAoX3BsYXRmb3JtSGVhZGVycyA/Pz0gZ2V0UGxhdGZvcm1Qcm9wZXJ0aWVzKCkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVKU09OID0gKHRleHQ6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1zY2hlbWUtc3RyaW5nXG5jb25zdCBzdGFydHNXaXRoU2NoZW1lUmVnZXhwID0gL15bYS16XVthLXowLTkrLi1dKjovaTtcbmNvbnN0IGlzQWJzb2x1dGVVUkwgPSAodXJsOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHN0YXJ0c1dpdGhTY2hlbWVSZWdleHAudGVzdCh1cmwpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNsZWVwID0gKG1zOiBudW1iZXIpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG5cbmNvbnN0IHZhbGlkYXRlUG9zaXRpdmVJbnRlZ2VyID0gKG5hbWU6IHN0cmluZywgbjogdW5rbm93bik6IG51bWJlciA9PiB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIobikpIHtcbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhbiBpbnRlZ2VyYCk7XG4gIH1cbiAgaWYgKG4gPCAwKSB7XG4gICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGAke25hbWV9IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyYCk7XG4gIH1cbiAgcmV0dXJuIG47XG59O1xuXG5leHBvcnQgY29uc3QgY2FzdFRvRXJyb3IgPSAoZXJyOiBhbnkpOiBFcnJvciA9PiB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIGVycjtcbiAgaWYgKHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmIGVyciAhPT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGVycikpO1xuICAgIH0gY2F0Y2gge31cbiAgfVxuICByZXR1cm4gbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnN1cmVQcmVzZW50ID0gPFQ+KHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFQgPT4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGBFeHBlY3RlZCBhIHZhbHVlIHRvIGJlIGdpdmVuIGJ1dCByZWNlaXZlZCAke3ZhbHVlfSBpbnN0ZWFkLmApO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogVHJpbXMgYmVnaW5uaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgZG9lc24ndCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRW52ID0gKGVudjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudj8uW2Vudl0/LnRyaW0oKSA/PyB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBEZW5vLmVudj8uZ2V0Py4oZW52KT8udHJpbSgpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgY29lcmNlSW50ZWdlciA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcblxuICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvZXJjZUZsb2F0ID0gKHZhbHVlOiB1bmtub3duKTogbnVtYmVyID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcblxuICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvZXJjZUJvb2xlYW4gPSAodmFsdWU6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUgPT09ICd0cnVlJztcbiAgcmV0dXJuIEJvb2xlYW4odmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlSW50ZWdlciA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29lcmNlSW50ZWdlcih2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VGbG9hdCA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29lcmNlRmxvYXQodmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlQm9vbGVhbiA9ICh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4gfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGNvZXJjZUJvb2xlYW4odmFsdWUpO1xufTtcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0NDkxMjg3XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iaihvYmo6IE9iamVjdCB8IG51bGwgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgaWYgKCFvYmopIHJldHVybiB0cnVlO1xuICBmb3IgKGNvbnN0IF9rIGluIG9iaikgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gaHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvbGF0ZXN0L3J1bGVzL25vLXByb3RvdHlwZS1idWlsdGluc1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmo6IE9iamVjdCwga2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbi8qKlxuICogQ29waWVzIGhlYWRlcnMgZnJvbSBcIm5ld0hlYWRlcnNcIiBvbnRvIFwidGFyZ2V0SGVhZGVyc1wiLFxuICogdXNpbmcgbG93ZXItY2FzZSBmb3IgYWxsIHByb3BlcnRpZXMsXG4gKiBpZ25vcmluZyBhbnkga2V5cyB3aXRoIHVuZGVmaW5lZCB2YWx1ZXMsXG4gKiBhbmQgZGVsZXRpbmcgYW55IGtleXMgd2l0aCBudWxsIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlIZWFkZXJzTXV0KHRhcmdldEhlYWRlcnM6IEhlYWRlcnMsIG5ld0hlYWRlcnM6IEhlYWRlcnMpOiB2b2lkIHtcbiAgZm9yIChjb25zdCBrIGluIG5ld0hlYWRlcnMpIHtcbiAgICBpZiAoIWhhc093bihuZXdIZWFkZXJzLCBrKSkgY29udGludWU7XG4gICAgY29uc3QgbG93ZXJLZXkgPSBrLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFsb3dlcktleSkgY29udGludWU7XG5cbiAgICBjb25zdCB2YWwgPSBuZXdIZWFkZXJzW2tdO1xuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgZGVsZXRlIHRhcmdldEhlYWRlcnNbbG93ZXJLZXldO1xuICAgIH0gZWxzZSBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldEhlYWRlcnNbbG93ZXJLZXldID0gdmFsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVidWcoYWN0aW9uOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcz8uZW52Py5bJ0RFQlVHJ10gPT09ICd0cnVlJykge1xuICAgIGNvbnNvbGUubG9nKGBBbnRocm9waWM6REVCVUc6JHthY3Rpb259YCwgLi4uYXJncyk7XG4gIH1cbn1cblxuLyoqXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xuICovXG5jb25zdCB1dWlkNCA9ICgpID0+IHtcbiAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgKGMpID0+IHtcbiAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwO1xuICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNSdW5uaW5nSW5Ccm93c2VyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xuICApO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBIZWFkZXJzUHJvdG9jb2wge1xuICBnZXQ6IChoZWFkZXI6IHN0cmluZykgPT4gc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCB0eXBlIEhlYWRlcnNMaWtlID0gUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQ+IHwgSGVhZGVyc1Byb3RvY29sO1xuXG5leHBvcnQgY29uc3QgaXNIZWFkZXJzUHJvdG9jb2wgPSAoaGVhZGVyczogYW55KTogaGVhZGVycyBpcyBIZWFkZXJzUHJvdG9jb2wgPT4ge1xuICByZXR1cm4gdHlwZW9mIGhlYWRlcnM/LmdldCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRSZXF1aXJlZEhlYWRlciA9IChoZWFkZXJzOiBIZWFkZXJzTGlrZSB8IEhlYWRlcnMsIGhlYWRlcjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgZm91bmRIZWFkZXIgPSBnZXRIZWFkZXIoaGVhZGVycywgaGVhZGVyKTtcbiAgaWYgKGZvdW5kSGVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICR7aGVhZGVyfSBoZWFkZXJgKTtcbiAgfVxuICByZXR1cm4gZm91bmRIZWFkZXI7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SGVhZGVyID0gKGhlYWRlcnM6IEhlYWRlcnNMaWtlIHwgSGVhZGVycywgaGVhZGVyOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBsb3dlckNhc2VkSGVhZGVyID0gaGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChpc0hlYWRlcnNQcm90b2NvbChoZWFkZXJzKSkge1xuICAgIC8vIHRvIGRlYWwgd2l0aCB0aGUgY2FzZSB3aGVyZSB0aGUgaGVhZGVyIGxvb2tzIGxpa2UgU3RhaW5sZXNzLUV2ZW50LUlkXG4gICAgY29uc3QgaW50ZXJjYXBzSGVhZGVyID1cbiAgICAgIGhlYWRlclswXT8udG9VcHBlckNhc2UoKSArXG4gICAgICBoZWFkZXIuc3Vic3RyaW5nKDEpLnJlcGxhY2UoLyhbXlxcd10pKFxcdykvZywgKF9tLCBnMSwgZzIpID0+IGcxICsgZzIudG9VcHBlckNhc2UoKSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgW2hlYWRlciwgbG93ZXJDYXNlZEhlYWRlciwgaGVhZGVyLnRvVXBwZXJDYXNlKCksIGludGVyY2Fwc0hlYWRlcl0pIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaGVhZGVycy5nZXQoa2V5KTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoaGVhZGVycykpIHtcbiAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IGxvd2VyQ2FzZWRIZWFkZXIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDw9IDEpIHJldHVybiB2YWx1ZVswXTtcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWNlaXZlZCAke3ZhbHVlLmxlbmd0aH0gZW50cmllcyBmb3IgdGhlICR7aGVhZGVyfSBoZWFkZXIsIHVzaW5nIHRoZSBmaXJzdCBlbnRyeS5gKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlWzBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgdG8gQmFzZTY0IGZvcm1hdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHRvQmFzZTY0ID0gKHN0cjogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCk6IHN0cmluZyA9PiB7XG4gIGlmICghc3RyKSByZXR1cm4gJyc7XG4gIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gYnRvYShzdHIpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKCdDYW5ub3QgZ2VuZXJhdGUgYjY0IHN0cmluZzsgRXhwZWN0ZWQgYEJ1ZmZlcmAgb3IgYGJ0b2FgIHRvIGJlIGRlZmluZWQnKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iaihvYmo6IHVua25vd24pOiBvYmogaXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkob2JqKTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBYnN0cmFjdFBhZ2UsIFJlc3BvbnNlLCBBUElDbGllbnQsIEZpbmFsUmVxdWVzdE9wdGlvbnMsIFBhZ2VJbmZvIH0gZnJvbSBcIi4vY29yZS5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VSZXNwb25zZTxJdGVtPiB7XG4gIGRhdGE6IEFycmF5PEl0ZW0+O1xuXG4gIGhhc19tb3JlOiBib29sZWFuO1xuXG4gIGZpcnN0X2lkOiBzdHJpbmcgfCBudWxsO1xuXG4gIGxhc3RfaWQ6IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgaXRlbXMgcGVyIHBhZ2UuXG4gICAqL1xuICBsaW1pdD86IG51bWJlcjtcblxuICBiZWZvcmVfaWQ/OiBzdHJpbmc7XG5cbiAgYWZ0ZXJfaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlPEl0ZW0+IGV4dGVuZHMgQWJzdHJhY3RQYWdlPEl0ZW0+IGltcGxlbWVudHMgUGFnZVJlc3BvbnNlPEl0ZW0+IHtcbiAgZGF0YTogQXJyYXk8SXRlbT47XG5cbiAgaGFzX21vcmU6IGJvb2xlYW47XG5cbiAgZmlyc3RfaWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgbGFzdF9pZDogc3RyaW5nIHwgbnVsbDtcblxuICBjb25zdHJ1Y3RvcihjbGllbnQ6IEFQSUNsaWVudCwgcmVzcG9uc2U6IFJlc3BvbnNlLCBib2R5OiBQYWdlUmVzcG9uc2U8SXRlbT4sIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpIHtcbiAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcblxuICAgIHRoaXMuZGF0YSA9IGJvZHkuZGF0YSB8fCBbXTtcbiAgICB0aGlzLmhhc19tb3JlID0gYm9keS5oYXNfbW9yZSB8fCBmYWxzZTtcbiAgICB0aGlzLmZpcnN0X2lkID0gYm9keS5maXJzdF9pZCB8fCBudWxsO1xuICAgIHRoaXMubGFzdF9pZCA9IGJvZHkubGFzdF9pZCB8fCBudWxsO1xuICB9XG5cbiAgZ2V0UGFnaW5hdGVkSXRlbXMoKTogSXRlbVtdIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhID8/IFtdO1xuICB9XG5cbiAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgbmV4dFBhZ2VQYXJhbXMoKTogUGFydGlhbDxQYWdlUGFyYW1zPiB8IG51bGwge1xuICAgIGNvbnN0IGluZm8gPSB0aGlzLm5leHRQYWdlSW5mbygpO1xuICAgIGlmICghaW5mbykgcmV0dXJuIG51bGw7XG4gICAgaWYgKCdwYXJhbXMnIGluIGluZm8pIHJldHVybiBpbmZvLnBhcmFtcztcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJvbUVudHJpZXMoaW5mby51cmwuc2VhcmNoUGFyYW1zKTtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgbmV4dFBhZ2VJbmZvKCk6IFBhZ2VJbmZvIHwgbnVsbCB7XG4gICAgaWYgKCh0aGlzLm9wdGlvbnMucXVlcnkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pPy5bJ2JlZm9yZV9pZCddKSB7XG4gICAgICAvLyBpbiByZXZlcnNlXG4gICAgICBjb25zdCBmaXJzdElkID0gdGhpcy5maXJzdF9pZDtcbiAgICAgIGlmICghZmlyc3RJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgYmVmb3JlX2lkOiBmaXJzdElkLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJzb3IgPSB0aGlzLmxhc3RfaWQ7XG4gICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgYWZ0ZXJfaWQ6IGN1cnNvcixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQVBJRXJyb3JPYmplY3Qge1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgdHlwZTogJ2FwaV9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aGVudGljYXRpb25FcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAnYXV0aGVudGljYXRpb25fZXJyb3InO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbGxpbmdFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAnYmlsbGluZ19lcnJvcic7XG59XG5cbmV4cG9ydCB0eXBlIEVycm9yT2JqZWN0ID1cbiAgfCBJbnZhbGlkUmVxdWVzdEVycm9yXG4gIHwgQXV0aGVudGljYXRpb25FcnJvclxuICB8IEJpbGxpbmdFcnJvclxuICB8IFBlcm1pc3Npb25FcnJvclxuICB8IE5vdEZvdW5kRXJyb3JcbiAgfCBSYXRlTGltaXRFcnJvclxuICB8IEdhdGV3YXlUaW1lb3V0RXJyb3JcbiAgfCBBUElFcnJvck9iamVjdFxuICB8IE92ZXJsb2FkZWRFcnJvcjtcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvclJlc3BvbnNlIHtcbiAgZXJyb3I6IEVycm9yT2JqZWN0O1xuXG4gIHR5cGU6ICdlcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2F0ZXdheVRpbWVvdXRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAndGltZW91dF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW52YWxpZFJlcXVlc3RFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAnaW52YWxpZF9yZXF1ZXN0X2Vycm9yJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb3RGb3VuZEVycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIHR5cGU6ICdub3RfZm91bmRfZXJyb3InO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsb2FkZWRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAnb3ZlcmxvYWRlZF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVybWlzc2lvbkVycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIHR5cGU6ICdwZXJtaXNzaW9uX2Vycm9yJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYXRlTGltaXRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAncmF0ZV9saW1pdF9lcnJvcic7XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi9jb3JlLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gIHByb3RlY3RlZCBfY2xpZW50OiBDb3JlLkFQSUNsaWVudDtcblxuICBjb25zdHJ1Y3RvcihjbGllbnQ6IENvcmUuQVBJQ2xpZW50KSB7XG4gICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICB9XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UuanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0IHsgUGFnZSwgdHlwZSBQYWdlUGFyYW1zIH0gZnJvbSBcIi4uLy4uL3BhZ2luYXRpb24uanNcIjtcblxuZXhwb3J0IGNsYXNzIE1vZGVscyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIEdldCBhIHNwZWNpZmljIG1vZGVsLlxuICAgKlxuICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpY1xuICAgKiBtb2RlbCBvciByZXNvbHZlIGEgbW9kZWwgYWxpYXMgdG8gYSBtb2RlbCBJRC5cbiAgICovXG4gIHJldHJpZXZlKG1vZGVsSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8QmV0YU1vZGVsSW5mbz4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdjEvbW9kZWxzLyR7bW9kZWxJZH0/YmV0YT10cnVlYCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBhdmFpbGFibGUgbW9kZWxzLlxuICAgKlxuICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggbW9kZWxzIGFyZSBhdmFpbGFibGUgZm9yXG4gICAqIHVzZSBpbiB0aGUgQVBJLiBNb3JlIHJlY2VudGx5IHJlbGVhc2VkIG1vZGVscyBhcmUgbGlzdGVkIGZpcnN0LlxuICAgKi9cbiAgbGlzdChcbiAgICBxdWVyeT86IE1vZGVsTGlzdFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxCZXRhTW9kZWxJbmZvc1BhZ2UsIEJldGFNb2RlbEluZm8+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxCZXRhTW9kZWxJbmZvc1BhZ2UsIEJldGFNb2RlbEluZm8+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBNb2RlbExpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8QmV0YU1vZGVsSW5mb3NQYWdlLCBCZXRhTW9kZWxJbmZvPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL3YxL21vZGVscz9iZXRhPXRydWUnLCBCZXRhTW9kZWxJbmZvc1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJldGFNb2RlbEluZm9zUGFnZSBleHRlbmRzIFBhZ2U8QmV0YU1vZGVsSW5mbz4ge31cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhTW9kZWxJbmZvIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBtb2RlbCBpZGVudGlmaWVyLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCB0aGUgbW9kZWwgd2FzIHJlbGVhc2VkLlxuICAgKiBNYXkgYmUgc2V0IHRvIGFuIGVwb2NoIHZhbHVlIGlmIHRoZSByZWxlYXNlIGRhdGUgaXMgdW5rbm93bi5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcblxuICAvKipcbiAgICogQSBodW1hbi1yZWFkYWJsZSBuYW1lIGZvciB0aGUgbW9kZWwuXG4gICAqL1xuICBkaXNwbGF5X25hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogT2JqZWN0IHR5cGUuXG4gICAqXG4gICAqIEZvciBNb2RlbHMsIHRoaXMgaXMgYWx3YXlzIGBcIm1vZGVsXCJgLlxuICAgKi9cbiAgdHlwZTogJ21vZGVsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbExpc3RQYXJhbXMgZXh0ZW5kcyBQYWdlUGFyYW1zIHt9XG5cbk1vZGVscy5CZXRhTW9kZWxJbmZvc1BhZ2UgPSBCZXRhTW9kZWxJbmZvc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBNb2RlbHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQmV0YU1vZGVsSW5mbyBhcyBCZXRhTW9kZWxJbmZvLFxuICAgIEJldGFNb2RlbEluZm9zUGFnZSBhcyBCZXRhTW9kZWxJbmZvc1BhZ2UsXG4gICAgdHlwZSBNb2RlbExpc3RQYXJhbXMgYXMgTW9kZWxMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgImltcG9ydCB7IEFudGhyb3BpY0Vycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yLmpzXCI7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuLi9zdHJlYW0tdXRpbHMuanNcIjtcbmltcG9ydCB7IHR5cGUgUmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vX3NoaW1zL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMaW5lRGVjb2RlciwgdHlwZSBCeXRlcyB9IGZyb20gXCIuL2xpbmUuanNcIjtcblxuZXhwb3J0IGNsYXNzIEpTT05MRGVjb2RlcjxUPiB7XG4gIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGl0ZXJhdG9yOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8Qnl0ZXM+LFxuICAgIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcbiAgKSB7XG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgKmRlY29kZXIoKTogQXN5bmNJdGVyYXRvcjxULCBhbnksIHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiB0aGlzLml0ZXJhdG9yKSB7XG4gICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZGVjb2RlKGNodW5rKSkge1xuICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuZGVjb2RlcigpO1xuICB9XG5cbiAgc3RhdGljIGZyb21SZXNwb25zZTxUPihyZXNwb25zZTogUmVzcG9uc2UsIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcik6IEpTT05MRGVjb2RlcjxUPiB7XG4gICAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYEF0dGVtcHRlZCB0byBpdGVyYXRlIG92ZXIgYSByZXNwb25zZSB3aXRoIG5vIGJvZHlgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEpTT05MRGVjb2RlcihSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZTxCeXRlcz4ocmVzcG9uc2UuYm9keSksIGNvbnRyb2xsZXIpO1xuICB9XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UuanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQmV0YUFQSSBmcm9tIFwiLi4vYmV0YS5qc1wiO1xuaW1wb3J0ICogYXMgQmV0YU1lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgeyBQYWdlLCB0eXBlIFBhZ2VQYXJhbXMgfSBmcm9tIFwiLi4vLi4vLi4vcGFnaW5hdGlvbi5qc1wiO1xuaW1wb3J0IHsgSlNPTkxEZWNvZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2RlY29kZXJzL2pzb25sLmpzXCI7XG5pbXBvcnQgeyBBbnRocm9waWNFcnJvciB9IGZyb20gXCIuLi8uLi8uLi9lcnJvci5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQmF0Y2hlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFNlbmQgYSBiYXRjaCBvZiBNZXNzYWdlIGNyZWF0aW9uIHJlcXVlc3RzLlxuICAgKlxuICAgKiBUaGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBjYW4gYmUgdXNlZCB0byBwcm9jZXNzIG11bHRpcGxlIE1lc3NhZ2VzIEFQSSByZXF1ZXN0cyBhdFxuICAgKiBvbmNlLiBPbmNlIGEgTWVzc2FnZSBCYXRjaCBpcyBjcmVhdGVkLCBpdCBiZWdpbnMgcHJvY2Vzc2luZyBpbW1lZGlhdGVseS4gQmF0Y2hlc1xuICAgKiBjYW4gdGFrZSB1cCB0byAyNCBob3VycyB0byBjb21wbGV0ZS5cbiAgICovXG4gIGNyZWF0ZShwYXJhbXM6IEJhdGNoQ3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxCZXRhTWVzc2FnZUJhdGNoPiB7XG4gICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL21lc3NhZ2VzL2JhdGNoZXM/YmV0YT10cnVlJywge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnbWVzc2FnZS1iYXRjaGVzLTIwMjQtMDktMjQnXS50b1N0cmluZygpLFxuICAgICAgICAuLi5vcHRpb25zPy5oZWFkZXJzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGVuZHBvaW50IGlzIGlkZW1wb3RlbnQgYW5kIGNhbiBiZSB1c2VkIHRvIHBvbGwgZm9yIE1lc3NhZ2UgQmF0Y2hcbiAgICogY29tcGxldGlvbi4gVG8gYWNjZXNzIHRoZSByZXN1bHRzIG9mIGEgTWVzc2FnZSBCYXRjaCwgbWFrZSBhIHJlcXVlc3QgdG8gdGhlXG4gICAqIGByZXN1bHRzX3VybGAgZmllbGQgaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgcmV0cmlldmUoXG4gICAgbWVzc2FnZUJhdGNoSWQ6IHN0cmluZyxcbiAgICBwYXJhbXM/OiBCYXRjaFJldHJpZXZlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8QmV0YU1lc3NhZ2VCYXRjaD47XG4gIHJldHJpZXZlKG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEJldGFNZXNzYWdlQmF0Y2g+O1xuICByZXRyaWV2ZShcbiAgICBtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLFxuICAgIHBhcmFtczogQmF0Y2hSZXRyaWV2ZVBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPEJldGFNZXNzYWdlQmF0Y2g+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhwYXJhbXMpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZShtZXNzYWdlQmF0Y2hJZCwge30sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3YxL21lc3NhZ2VzL2JhdGNoZXMvJHttZXNzYWdlQmF0Y2hJZH0/YmV0YT10cnVlYCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdtZXNzYWdlLWJhdGNoZXMtMjAyNC0wOS0yNCddLnRvU3RyaW5nKCksXG4gICAgICAgIC4uLm9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYWxsIE1lc3NhZ2UgQmF0Y2hlcyB3aXRoaW4gYSBXb3Jrc3BhY2UuIE1vc3QgcmVjZW50bHkgY3JlYXRlZCBiYXRjaGVzIGFyZVxuICAgKiByZXR1cm5lZCBmaXJzdC5cbiAgICovXG4gIGxpc3QoXG4gICAgcGFyYW1zPzogQmF0Y2hMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UsIEJldGFNZXNzYWdlQmF0Y2g+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxCZXRhTWVzc2FnZUJhdGNoZXNQYWdlLCBCZXRhTWVzc2FnZUJhdGNoPjtcbiAgbGlzdChcbiAgICBwYXJhbXM6IEJhdGNoTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxCZXRhTWVzc2FnZUJhdGNoZXNQYWdlLCBCZXRhTWVzc2FnZUJhdGNoPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocGFyYW1zKSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY29uc3QgeyBiZXRhcywgLi4ucXVlcnkgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy92MS9tZXNzYWdlcy9iYXRjaGVzP2JldGE9dHJ1ZScsIEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UsIHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdtZXNzYWdlLWJhdGNoZXMtMjAyNC0wOS0yNCddLnRvU3RyaW5nKCksXG4gICAgICAgIC4uLm9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIE1lc3NhZ2UgQmF0Y2guXG4gICAqXG4gICAqIE1lc3NhZ2UgQmF0Y2hlcyBjYW4gb25seSBiZSBkZWxldGVkIG9uY2UgdGhleSd2ZSBmaW5pc2hlZCBwcm9jZXNzaW5nLiBJZiB5b3UnZFxuICAgKiBsaWtlIHRvIGRlbGV0ZSBhbiBpbi1wcm9ncmVzcyBiYXRjaCwgeW91IG11c3QgZmlyc3QgY2FuY2VsIGl0LlxuICAgKi9cbiAgZGVsZXRlKFxuICAgIG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogQmF0Y2hEZWxldGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxCZXRhRGVsZXRlZE1lc3NhZ2VCYXRjaD47XG4gIGRlbGV0ZShtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxCZXRhRGVsZXRlZE1lc3NhZ2VCYXRjaD47XG4gIGRlbGV0ZShcbiAgICBtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLFxuICAgIHBhcmFtczogQmF0Y2hEZWxldGVQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxCZXRhRGVsZXRlZE1lc3NhZ2VCYXRjaD4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHBhcmFtcykpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZShtZXNzYWdlQmF0Y2hJZCwge30sIHBhcmFtcyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3YxL21lc3NhZ2VzL2JhdGNoZXMvJHttZXNzYWdlQmF0Y2hJZH0/YmV0YT10cnVlYCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdtZXNzYWdlLWJhdGNoZXMtMjAyNC0wOS0yNCddLnRvU3RyaW5nKCksXG4gICAgICAgIC4uLm9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhdGNoZXMgbWF5IGJlIGNhbmNlbGVkIGFueSB0aW1lIGJlZm9yZSBwcm9jZXNzaW5nIGVuZHMuIE9uY2UgY2FuY2VsbGF0aW9uIGlzXG4gICAqIGluaXRpYXRlZCwgdGhlIGJhdGNoIGVudGVycyBhIGBjYW5jZWxpbmdgIHN0YXRlLCBhdCB3aGljaCB0aW1lIHRoZSBzeXN0ZW0gbWF5XG4gICAqIGNvbXBsZXRlIGFueSBpbi1wcm9ncmVzcywgbm9uLWludGVycnVwdGlibGUgcmVxdWVzdHMgYmVmb3JlIGZpbmFsaXppbmdcbiAgICogY2FuY2VsbGF0aW9uLlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNhbmNlbGVkIHJlcXVlc3RzIGlzIHNwZWNpZmllZCBpbiBgcmVxdWVzdF9jb3VudHNgLiBUbyBkZXRlcm1pbmVcbiAgICogd2hpY2ggcmVxdWVzdHMgd2VyZSBjYW5jZWxlZCwgY2hlY2sgdGhlIGluZGl2aWR1YWwgcmVzdWx0cyB3aXRoaW4gdGhlIGJhdGNoLlxuICAgKiBOb3RlIHRoYXQgY2FuY2VsbGF0aW9uIG1heSBub3QgcmVzdWx0IGluIGFueSBjYW5jZWxlZCByZXF1ZXN0cyBpZiB0aGV5IHdlcmVcbiAgICogbm9uLWludGVycnVwdGlibGUuXG4gICAqL1xuICBjYW5jZWwoXG4gICAgbWVzc2FnZUJhdGNoSWQ6IHN0cmluZyxcbiAgICBwYXJhbXM/OiBCYXRjaENhbmNlbFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPEJldGFNZXNzYWdlQmF0Y2g+O1xuICBjYW5jZWwobWVzc2FnZUJhdGNoSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8QmV0YU1lc3NhZ2VCYXRjaD47XG4gIGNhbmNlbChcbiAgICBtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLFxuICAgIHBhcmFtczogQmF0Y2hDYW5jZWxQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxCZXRhTWVzc2FnZUJhdGNoPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocGFyYW1zKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKG1lc3NhZ2VCYXRjaElkLCB7fSwgcGFyYW1zKTtcbiAgICB9XG4gICAgY29uc3QgeyBiZXRhcyB9ID0gcGFyYW1zO1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3YxL21lc3NhZ2VzL2JhdGNoZXMvJHttZXNzYWdlQmF0Y2hJZH0vY2FuY2VsP2JldGE9dHJ1ZWAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnbWVzc2FnZS1iYXRjaGVzLTIwMjQtMDktMjQnXS50b1N0cmluZygpLFxuICAgICAgICAuLi5vcHRpb25zPy5oZWFkZXJzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHJlYW1zIHRoZSByZXN1bHRzIG9mIGEgTWVzc2FnZSBCYXRjaCBhcyBhIGAuanNvbmxgIGZpbGUuXG4gICAqXG4gICAqIEVhY2ggbGluZSBpbiB0aGUgZmlsZSBpcyBhIEpTT04gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdCBvZiBhIHNpbmdsZSByZXF1ZXN0XG4gICAqIGluIHRoZSBNZXNzYWdlIEJhdGNoLiBSZXN1bHRzIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSBpbiB0aGUgc2FtZSBvcmRlciBhc1xuICAgKiByZXF1ZXN0cy4gVXNlIHRoZSBgY3VzdG9tX2lkYCBmaWVsZCB0byBtYXRjaCByZXN1bHRzIHRvIHJlcXVlc3RzLlxuICAgKi9cbiAgYXN5bmMgcmVzdWx0cyhcbiAgICBtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IEJhdGNoUmVzdWx0c1BhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxKU09OTERlY29kZXI8QmV0YU1lc3NhZ2VCYXRjaEluZGl2aWR1YWxSZXNwb25zZT4+O1xuICBhc3luYyByZXN1bHRzKFxuICAgIG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8SlNPTkxEZWNvZGVyPEJldGFNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2U+PjtcbiAgYXN5bmMgcmVzdWx0cyhcbiAgICBtZXNzYWdlQmF0Y2hJZDogc3RyaW5nLFxuICAgIHBhcmFtczogQmF0Y2hSZXN1bHRzUGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBQcm9taXNlPEpTT05MRGVjb2RlcjxCZXRhTWVzc2FnZUJhdGNoSW5kaXZpZHVhbFJlc3BvbnNlPj4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHBhcmFtcykpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdHMobWVzc2FnZUJhdGNoSWQsIHt9LCBwYXJhbXMpO1xuICAgIH1cblxuICAgIGNvbnN0IGJhdGNoID0gYXdhaXQgdGhpcy5yZXRyaWV2ZShtZXNzYWdlQmF0Y2hJZCk7XG4gICAgaWYgKCFiYXRjaC5yZXN1bHRzX3VybCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKFxuICAgICAgICBgTm8gYmF0Y2ggXFxgcmVzdWx0c191cmxcXGA7IEhhcyBpdCBmaW5pc2hlZCBwcm9jZXNzaW5nPyAke2JhdGNoLnByb2Nlc3Npbmdfc3RhdHVzfSAtICR7YmF0Y2guaWR9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBiZXRhcyB9ID0gcGFyYW1zO1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRcbiAgICAgIC5nZXQoYmF0Y2gucmVzdWx0c191cmwsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnbWVzc2FnZS1iYXRjaGVzLTIwMjQtMDktMjQnXS50b1N0cmluZygpLFxuICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScsXG4gICAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgX19iaW5hcnlSZXNwb25zZTogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAuX3RoZW5VbndyYXAoKF8sIHByb3BzKSA9PiBKU09OTERlY29kZXIuZnJvbVJlc3BvbnNlKHByb3BzLnJlc3BvbnNlLCBwcm9wcy5jb250cm9sbGVyKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UgZXh0ZW5kcyBQYWdlPEJldGFNZXNzYWdlQmF0Y2g+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YURlbGV0ZWRNZXNzYWdlQmF0Y2gge1xuICAvKipcbiAgICogSUQgb2YgdGhlIE1lc3NhZ2UgQmF0Y2guXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWxldGVkIG9iamVjdCB0eXBlLlxuICAgKlxuICAgKiBGb3IgTWVzc2FnZSBCYXRjaGVzLCB0aGlzIGlzIGFsd2F5cyBgXCJtZXNzYWdlX2JhdGNoX2RlbGV0ZWRcImAuXG4gICAqL1xuICB0eXBlOiAnbWVzc2FnZV9iYXRjaF9kZWxldGVkJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhTWVzc2FnZUJhdGNoIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBvYmplY3QgaWRlbnRpZmllci5cbiAgICpcbiAgICogVGhlIGZvcm1hdCBhbmQgbGVuZ3RoIG9mIElEcyBtYXkgY2hhbmdlIG92ZXIgdGltZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJGQyAzMzM5IGRhdGV0aW1lIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHRpbWUgYXQgd2hpY2ggdGhlIE1lc3NhZ2UgQmF0Y2ggd2FzXG4gICAqIGFyY2hpdmVkIGFuZCBpdHMgcmVzdWx0cyBiZWNhbWUgdW5hdmFpbGFibGUuXG4gICAqL1xuICBhcmNoaXZlZF9hdDogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCBjYW5jZWxsYXRpb24gd2FzXG4gICAqIGluaXRpYXRlZCBmb3IgdGhlIE1lc3NhZ2UgQmF0Y2guIFNwZWNpZmllZCBvbmx5IGlmIGNhbmNlbGxhdGlvbiB3YXMgaW5pdGlhdGVkLlxuICAgKi9cbiAgY2FuY2VsX2luaXRpYXRlZF9hdDogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCB0aGUgTWVzc2FnZSBCYXRjaCB3YXNcbiAgICogY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCBwcm9jZXNzaW5nIGZvciB0aGVcbiAgICogTWVzc2FnZSBCYXRjaCBlbmRlZC4gU3BlY2lmaWVkIG9ubHkgb25jZSBwcm9jZXNzaW5nIGVuZHMuXG4gICAqXG4gICAqIFByb2Nlc3NpbmcgZW5kcyB3aGVuIGV2ZXJ5IHJlcXVlc3QgaW4gYSBNZXNzYWdlIEJhdGNoIGhhcyBlaXRoZXIgc3VjY2VlZGVkLFxuICAgKiBlcnJvcmVkLCBjYW5jZWxlZCwgb3IgZXhwaXJlZC5cbiAgICovXG4gIGVuZGVkX2F0OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSRkMgMzMzOSBkYXRldGltZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBNZXNzYWdlIEJhdGNoIHdpbGxcbiAgICogZXhwaXJlIGFuZCBlbmQgcHJvY2Vzc2luZywgd2hpY2ggaXMgMjQgaG91cnMgYWZ0ZXIgY3JlYXRpb24uXG4gICAqL1xuICBleHBpcmVzX2F0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFByb2Nlc3Npbmcgc3RhdHVzIG9mIHRoZSBNZXNzYWdlIEJhdGNoLlxuICAgKi9cbiAgcHJvY2Vzc2luZ19zdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnY2FuY2VsaW5nJyB8ICdlbmRlZCc7XG5cbiAgLyoqXG4gICAqIFRhbGxpZXMgcmVxdWVzdHMgd2l0aGluIHRoZSBNZXNzYWdlIEJhdGNoLCBjYXRlZ29yaXplZCBieSB0aGVpciBzdGF0dXMuXG4gICAqXG4gICAqIFJlcXVlc3RzIHN0YXJ0IGFzIGBwcm9jZXNzaW5nYCBhbmQgbW92ZSB0byBvbmUgb2YgdGhlIG90aGVyIHN0YXR1c2VzIG9ubHkgb25jZVxuICAgKiBwcm9jZXNzaW5nIG9mIHRoZSBlbnRpcmUgYmF0Y2ggZW5kcy4gVGhlIHN1bSBvZiBhbGwgdmFsdWVzIGFsd2F5cyBtYXRjaGVzIHRoZVxuICAgKiB0b3RhbCBudW1iZXIgb2YgcmVxdWVzdHMgaW4gdGhlIGJhdGNoLlxuICAgKi9cbiAgcmVxdWVzdF9jb3VudHM6IEJldGFNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzO1xuXG4gIC8qKlxuICAgKiBVUkwgdG8gYSBgLmpzb25sYCBmaWxlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIE1lc3NhZ2UgQmF0Y2ggcmVxdWVzdHMuXG4gICAqIFNwZWNpZmllZCBvbmx5IG9uY2UgcHJvY2Vzc2luZyBlbmRzLlxuICAgKlxuICAgKiBSZXN1bHRzIGluIHRoZSBmaWxlIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyByZXF1ZXN0cy4gVXNlXG4gICAqIHRoZSBgY3VzdG9tX2lkYCBmaWVsZCB0byBtYXRjaCByZXN1bHRzIHRvIHJlcXVlc3RzLlxuICAgKi9cbiAgcmVzdWx0c191cmw6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE9iamVjdCB0eXBlLlxuICAgKlxuICAgKiBGb3IgTWVzc2FnZSBCYXRjaGVzLCB0aGlzIGlzIGFsd2F5cyBgXCJtZXNzYWdlX2JhdGNoXCJgLlxuICAgKi9cbiAgdHlwZTogJ21lc3NhZ2VfYmF0Y2gnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFNZXNzYWdlQmF0Y2hDYW5jZWxlZFJlc3VsdCB7XG4gIHR5cGU6ICdjYW5jZWxlZCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YU1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHQge1xuICBlcnJvcjogQmV0YUFQSS5CZXRhRXJyb3JSZXNwb25zZTtcblxuICB0eXBlOiAnZXJyb3JlZCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YU1lc3NhZ2VCYXRjaEV4cGlyZWRSZXN1bHQge1xuICB0eXBlOiAnZXhwaXJlZCc7XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIHNpbmdsZSBsaW5lIGluIHRoZSByZXNwb25zZSBgLmpzb25sYCBmaWxlIGFuZCBkb2VzIG5vdCByZXByZXNlbnQgdGhlXG4gKiByZXNwb25zZSBhcyBhIHdob2xlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJldGFNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2Uge1xuICAvKipcbiAgICogRGV2ZWxvcGVyLXByb3ZpZGVkIElEIGNyZWF0ZWQgZm9yIGVhY2ggcmVxdWVzdCBpbiBhIE1lc3NhZ2UgQmF0Y2guIFVzZWZ1bCBmb3JcbiAgICogbWF0Y2hpbmcgcmVzdWx0cyB0byByZXF1ZXN0cywgYXMgcmVzdWx0cyBtYXkgYmUgZ2l2ZW4gb3V0IG9mIHJlcXVlc3Qgb3JkZXIuXG4gICAqXG4gICAqIE11c3QgYmUgdW5pcXVlIGZvciBlYWNoIHJlcXVlc3Qgd2l0aGluIHRoZSBNZXNzYWdlIEJhdGNoLlxuICAgKi9cbiAgY3VzdG9tX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFByb2Nlc3NpbmcgcmVzdWx0IGZvciB0aGlzIHJlcXVlc3QuXG4gICAqXG4gICAqIENvbnRhaW5zIGEgTWVzc2FnZSBvdXRwdXQgaWYgcHJvY2Vzc2luZyB3YXMgc3VjY2Vzc2Z1bCwgYW4gZXJyb3IgcmVzcG9uc2UgaWZcbiAgICogcHJvY2Vzc2luZyBmYWlsZWQsIG9yIHRoZSByZWFzb24gd2h5IHByb2Nlc3Npbmcgd2FzIG5vdCBhdHRlbXB0ZWQsIHN1Y2ggYXNcbiAgICogY2FuY2VsbGF0aW9uIG9yIGV4cGlyYXRpb24uXG4gICAqL1xuICByZXN1bHQ6IEJldGFNZXNzYWdlQmF0Y2hSZXN1bHQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YU1lc3NhZ2VCYXRjaFJlcXVlc3RDb3VudHMge1xuICAvKipcbiAgICogTnVtYmVyIG9mIHJlcXVlc3RzIGluIHRoZSBNZXNzYWdlIEJhdGNoIHRoYXQgaGF2ZSBiZWVuIGNhbmNlbGVkLlxuICAgKlxuICAgKiBUaGlzIGlzIHplcm8gdW50aWwgcHJvY2Vzc2luZyBvZiB0aGUgZW50aXJlIE1lc3NhZ2UgQmF0Y2ggaGFzIGVuZGVkLlxuICAgKi9cbiAgY2FuY2VsZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJlcXVlc3RzIGluIHRoZSBNZXNzYWdlIEJhdGNoIHRoYXQgZW5jb3VudGVyZWQgYW4gZXJyb3IuXG4gICAqXG4gICAqIFRoaXMgaXMgemVybyB1bnRpbCBwcm9jZXNzaW5nIG9mIHRoZSBlbnRpcmUgTWVzc2FnZSBCYXRjaCBoYXMgZW5kZWQuXG4gICAqL1xuICBlcnJvcmVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgTWVzc2FnZSBCYXRjaCB0aGF0IGhhdmUgZXhwaXJlZC5cbiAgICpcbiAgICogVGhpcyBpcyB6ZXJvIHVudGlsIHByb2Nlc3Npbmcgb2YgdGhlIGVudGlyZSBNZXNzYWdlIEJhdGNoIGhhcyBlbmRlZC5cbiAgICovXG4gIGV4cGlyZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJlcXVlc3RzIGluIHRoZSBNZXNzYWdlIEJhdGNoIHRoYXQgYXJlIHByb2Nlc3NpbmcuXG4gICAqL1xuICBwcm9jZXNzaW5nOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgTWVzc2FnZSBCYXRjaCB0aGF0IGhhdmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseS5cbiAgICpcbiAgICogVGhpcyBpcyB6ZXJvIHVudGlsIHByb2Nlc3Npbmcgb2YgdGhlIGVudGlyZSBNZXNzYWdlIEJhdGNoIGhhcyBlbmRlZC5cbiAgICovXG4gIHN1Y2NlZWRlZDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFByb2Nlc3NpbmcgcmVzdWx0IGZvciB0aGlzIHJlcXVlc3QuXG4gKlxuICogQ29udGFpbnMgYSBNZXNzYWdlIG91dHB1dCBpZiBwcm9jZXNzaW5nIHdhcyBzdWNjZXNzZnVsLCBhbiBlcnJvciByZXNwb25zZSBpZlxuICogcHJvY2Vzc2luZyBmYWlsZWQsIG9yIHRoZSByZWFzb24gd2h5IHByb2Nlc3Npbmcgd2FzIG5vdCBhdHRlbXB0ZWQsIHN1Y2ggYXNcbiAqIGNhbmNlbGxhdGlvbiBvciBleHBpcmF0aW9uLlxuICovXG5leHBvcnQgdHlwZSBCZXRhTWVzc2FnZUJhdGNoUmVzdWx0ID1cbiAgfCBCZXRhTWVzc2FnZUJhdGNoU3VjY2VlZGVkUmVzdWx0XG4gIHwgQmV0YU1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHRcbiAgfCBCZXRhTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHRcbiAgfCBCZXRhTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdDtcblxuZXhwb3J0IGludGVyZmFjZSBCZXRhTWVzc2FnZUJhdGNoU3VjY2VlZGVkUmVzdWx0IHtcbiAgbWVzc2FnZTogQmV0YU1lc3NhZ2VzQVBJLkJldGFNZXNzYWdlO1xuXG4gIHR5cGU6ICdzdWNjZWVkZWQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IExpc3Qgb2YgcmVxdWVzdHMgZm9yIHByb21wdCBjb21wbGV0aW9uLiBFYWNoIGlzIGFuIGluZGl2aWR1YWxcbiAgICogcmVxdWVzdCB0byBjcmVhdGUgYSBNZXNzYWdlLlxuICAgKi9cbiAgcmVxdWVzdHM6IEFycmF5PEJhdGNoQ3JlYXRlUGFyYW1zLlJlcXVlc3Q+O1xuXG4gIC8qKlxuICAgKiBIZWFkZXIgcGFyYW06IE9wdGlvbmFsIGhlYWRlciB0byBzcGVjaWZ5IHRoZSBiZXRhIHZlcnNpb24ocykgeW91IHdhbnQgdG8gdXNlLlxuICAgKi9cbiAgYmV0YXM/OiBBcnJheTxCZXRhQVBJLkFudGhyb3BpY0JldGE+O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEJhdGNoQ3JlYXRlUGFyYW1zIHtcbiAgZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBEZXZlbG9wZXItcHJvdmlkZWQgSUQgY3JlYXRlZCBmb3IgZWFjaCByZXF1ZXN0IGluIGEgTWVzc2FnZSBCYXRjaC4gVXNlZnVsIGZvclxuICAgICAqIG1hdGNoaW5nIHJlc3VsdHMgdG8gcmVxdWVzdHMsIGFzIHJlc3VsdHMgbWF5IGJlIGdpdmVuIG91dCBvZiByZXF1ZXN0IG9yZGVyLlxuICAgICAqXG4gICAgICogTXVzdCBiZSB1bmlxdWUgZm9yIGVhY2ggcmVxdWVzdCB3aXRoaW4gdGhlIE1lc3NhZ2UgQmF0Y2guXG4gICAgICovXG4gICAgY3VzdG9tX2lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBNZXNzYWdlcyBBUEkgY3JlYXRpb24gcGFyYW1ldGVycyBmb3IgdGhlIGluZGl2aWR1YWwgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIFNlZSB0aGUgW01lc3NhZ2VzIEFQSSByZWZlcmVuY2VdKC9lbi9hcGkvbWVzc2FnZXMpIGZvciBmdWxsIGRvY3VtZW50YXRpb24gb25cbiAgICAgKiBhdmFpbGFibGUgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBwYXJhbXM6IE9taXQ8QmV0YU1lc3NhZ2VzQVBJLk1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsICdiZXRhcyc+O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hSZXRyaWV2ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBoZWFkZXIgdG8gc3BlY2lmeSB0aGUgYmV0YSB2ZXJzaW9uKHMpIHlvdSB3YW50IHRvIHVzZS5cbiAgICovXG4gIGJldGFzPzogQXJyYXk8QmV0YUFQSS5BbnRocm9waWNCZXRhPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXRjaExpc3RQYXJhbXMgZXh0ZW5kcyBQYWdlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEhlYWRlciBwYXJhbTogT3B0aW9uYWwgaGVhZGVyIHRvIHNwZWNpZnkgdGhlIGJldGEgdmVyc2lvbihzKSB5b3Ugd2FudCB0byB1c2UuXG4gICAqL1xuICBiZXRhcz86IEFycmF5PEJldGFBUEkuQW50aHJvcGljQmV0YT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hEZWxldGVQYXJhbXMge1xuICAvKipcbiAgICogT3B0aW9uYWwgaGVhZGVyIHRvIHNwZWNpZnkgdGhlIGJldGEgdmVyc2lvbihzKSB5b3Ugd2FudCB0byB1c2UuXG4gICAqL1xuICBiZXRhcz86IEFycmF5PEJldGFBUEkuQW50aHJvcGljQmV0YT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hDYW5jZWxQYXJhbXMge1xuICAvKipcbiAgICogT3B0aW9uYWwgaGVhZGVyIHRvIHNwZWNpZnkgdGhlIGJldGEgdmVyc2lvbihzKSB5b3Ugd2FudCB0byB1c2UuXG4gICAqL1xuICBiZXRhcz86IEFycmF5PEJldGFBUEkuQW50aHJvcGljQmV0YT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hSZXN1bHRzUGFyYW1zIHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGhlYWRlciB0byBzcGVjaWZ5IHRoZSBiZXRhIHZlcnNpb24ocykgeW91IHdhbnQgdG8gdXNlLlxuICAgKi9cbiAgYmV0YXM/OiBBcnJheTxCZXRhQVBJLkFudGhyb3BpY0JldGE+O1xufVxuXG5CYXRjaGVzLkJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UgPSBCZXRhTWVzc2FnZUJhdGNoZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQmF0Y2hlcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBCZXRhRGVsZXRlZE1lc3NhZ2VCYXRjaCBhcyBCZXRhRGVsZXRlZE1lc3NhZ2VCYXRjaCxcbiAgICB0eXBlIEJldGFNZXNzYWdlQmF0Y2ggYXMgQmV0YU1lc3NhZ2VCYXRjaCxcbiAgICB0eXBlIEJldGFNZXNzYWdlQmF0Y2hDYW5jZWxlZFJlc3VsdCBhcyBCZXRhTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHQsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoRXJyb3JlZFJlc3VsdCBhcyBCZXRhTWVzc2FnZUJhdGNoRXJyb3JlZFJlc3VsdCxcbiAgICB0eXBlIEJldGFNZXNzYWdlQmF0Y2hFeHBpcmVkUmVzdWx0IGFzIEJldGFNZXNzYWdlQmF0Y2hFeHBpcmVkUmVzdWx0LFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VCYXRjaEluZGl2aWR1YWxSZXNwb25zZSBhcyBCZXRhTWVzc2FnZUJhdGNoSW5kaXZpZHVhbFJlc3BvbnNlLFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VCYXRjaFJlcXVlc3RDb3VudHMgYXMgQmV0YU1lc3NhZ2VCYXRjaFJlcXVlc3RDb3VudHMsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoUmVzdWx0IGFzIEJldGFNZXNzYWdlQmF0Y2hSZXN1bHQsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoU3VjY2VlZGVkUmVzdWx0IGFzIEJldGFNZXNzYWdlQmF0Y2hTdWNjZWVkZWRSZXN1bHQsXG4gICAgQmV0YU1lc3NhZ2VCYXRjaGVzUGFnZSBhcyBCZXRhTWVzc2FnZUJhdGNoZXNQYWdlLFxuICAgIHR5cGUgQmF0Y2hDcmVhdGVQYXJhbXMgYXMgQmF0Y2hDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBCYXRjaFJldHJpZXZlUGFyYW1zIGFzIEJhdGNoUmV0cmlldmVQYXJhbXMsXG4gICAgdHlwZSBCYXRjaExpc3RQYXJhbXMgYXMgQmF0Y2hMaXN0UGFyYW1zLFxuICAgIHR5cGUgQmF0Y2hEZWxldGVQYXJhbXMgYXMgQmF0Y2hEZWxldGVQYXJhbXMsXG4gICAgdHlwZSBCYXRjaENhbmNlbFBhcmFtcyBhcyBCYXRjaENhbmNlbFBhcmFtcyxcbiAgICB0eXBlIEJhdGNoUmVzdWx0c1BhcmFtcyBhcyBCYXRjaFJlc3VsdHNQYXJhbXMsXG4gIH07XG59XG4iLCAidHlwZSBUb2tlbiA9IHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xufTtcblxuY29uc3QgdG9rZW5pemUgPSAoaW5wdXQ6IHN0cmluZyk6IFRva2VuW10gPT4ge1xuICAgIGxldCBjdXJyZW50ID0gMDtcbiAgICBsZXQgdG9rZW5zOiBUb2tlbltdID0gW107XG5cbiAgICB3aGlsZSAoY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgbGV0IGNoYXIgPSBpbnB1dFtjdXJyZW50XTtcblxuICAgICAgaWYgKGNoYXIgPT09ICdcXFxcJykge1xuICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhciA9PT0gJ3snKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnYnJhY2UnLFxuICAgICAgICAgIHZhbHVlOiAneycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnfScpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdicmFjZScsXG4gICAgICAgICAgdmFsdWU6ICd9JyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY3VycmVudCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXIgPT09ICdbJykge1xuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ3BhcmVuJyxcbiAgICAgICAgICB2YWx1ZTogJ1snLFxuICAgICAgICB9KTtcblxuICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhciA9PT0gJ10nKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAncGFyZW4nLFxuICAgICAgICAgIHZhbHVlOiAnXScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnOicpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdzZXBhcmF0b3InLFxuICAgICAgICAgIHZhbHVlOiAnOicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnLCcpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdkZWxpbWl0ZXInLFxuICAgICAgICAgIHZhbHVlOiAnLCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICBsZXQgZGFuZ2xpbmdRdW90ZSA9IGZhbHNlO1xuXG4gICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuXG4gICAgICAgIHdoaWxlIChjaGFyICE9PSAnXCInKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGFuZ2xpbmdRdW90ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGRhbmdsaW5nUXVvdGUgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlICs9IGNoYXIgKyBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG5cbiAgICAgICAgaWYgKCFkYW5nbGluZ1F1b3RlKSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IFdISVRFU1BBQ0UgPSAvXFxzLztcbiAgICAgIGlmIChjaGFyICYmIFdISVRFU1BBQ0UudGVzdChjaGFyKSkge1xuICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgTlVNQkVSUyA9IC9bMC05XS87XG4gICAgICBpZiAoKGNoYXIgJiYgTlVNQkVSUy50ZXN0KGNoYXIpKSB8fCBjaGFyID09PSAnLScgfHwgY2hhciA9PT0gJy4nKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmIChjaGFyID09PSAnLScpIHtcbiAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKChjaGFyICYmIE5VTUJFUlMudGVzdChjaGFyKSkgfHwgY2hhciA9PT0gJy4nKSB7XG4gICAgICAgICAgdmFsdWUgKz0gY2hhcjtcbiAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgTEVUVEVSUyA9IC9bYS16XS9pO1xuICAgICAgaWYgKGNoYXIgJiYgTEVUVEVSUy50ZXN0KGNoYXIpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuXG4gICAgICAgIHdoaWxlIChjaGFyICYmIExFVFRFUlMudGVzdChjaGFyKSkge1xuICAgICAgICAgIGlmIChjdXJyZW50ID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09ICd0cnVlJyB8fCB2YWx1ZSA9PSAnZmFsc2UnIHx8IHZhbHVlID09PSAnbnVsbCcpIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnbmFtZScsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1bmtub3duIHRva2VuLCBlLmcuIGBudWxgIHdoaWNoIGlzbid0IHF1aXRlIGBudWxsYFxuICAgICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0b2tlbnM7XG4gIH0sXG4gIHN0cmlwID0gKHRva2VuczogVG9rZW5bXSk6IFRva2VuW10gPT4ge1xuICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIGxldCBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdITtcblxuICAgIHN3aXRjaCAobGFzdFRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3NlcGFyYXRvcic6XG4gICAgICAgIHRva2VucyA9IHRva2Vucy5zbGljZSgwLCB0b2tlbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBzdHJpcCh0b2tlbnMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGxldCBsYXN0Q2hhcmFjdGVyT2ZMYXN0VG9rZW4gPSBsYXN0VG9rZW4udmFsdWVbbGFzdFRva2VuLnZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdENoYXJhY3Rlck9mTGFzdFRva2VuID09PSAnLicgfHwgbGFzdENoYXJhY3Rlck9mTGFzdFRva2VuID09PSAnLScpIHtcbiAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgdG9rZW5zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIHJldHVybiBzdHJpcCh0b2tlbnMpO1xuICAgICAgICB9XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBsZXQgdG9rZW5CZWZvcmVUaGVMYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDJdO1xuICAgICAgICBpZiAodG9rZW5CZWZvcmVUaGVMYXN0VG9rZW4/LnR5cGUgPT09ICdkZWxpbWl0ZXInKSB7XG4gICAgICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKDAsIHRva2Vucy5sZW5ndGggLSAxKTtcbiAgICAgICAgICByZXR1cm4gc3RyaXAodG9rZW5zKTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbkJlZm9yZVRoZUxhc3RUb2tlbj8udHlwZSA9PT0gJ2JyYWNlJyAmJiB0b2tlbkJlZm9yZVRoZUxhc3RUb2tlbi52YWx1ZSA9PT0gJ3snKSB7XG4gICAgICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKDAsIHRva2Vucy5sZW5ndGggLSAxKTtcbiAgICAgICAgICByZXR1cm4gc3RyaXAodG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RlbGltaXRlcic6XG4gICAgICAgIHRva2VucyA9IHRva2Vucy5zbGljZSgwLCB0b2tlbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiBzdHJpcCh0b2tlbnMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuICB9LFxuICB1bnN0cmlwID0gKHRva2VuczogVG9rZW5bXSk6IFRva2VuW10gPT4ge1xuICAgIGxldCB0YWlsOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdG9rZW5zLm1hcCgodG9rZW4pID0+IHtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAnYnJhY2UnKSB7XG4gICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ3snKSB7XG4gICAgICAgICAgdGFpbC5wdXNoKCd9Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFpbC5zcGxpY2UodGFpbC5sYXN0SW5kZXhPZignfScpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdwYXJlbicpIHtcbiAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAnWycpIHtcbiAgICAgICAgICB0YWlsLnB1c2goJ10nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWlsLnNwbGljZSh0YWlsLmxhc3RJbmRleE9mKCddJyksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGFpbC5sZW5ndGggPiAwKSB7XG4gICAgICB0YWlsLnJldmVyc2UoKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gPT09ICd9Jykge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdicmFjZScsXG4gICAgICAgICAgICB2YWx1ZTogJ30nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gPT09ICddJykge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdwYXJlbicsXG4gICAgICAgICAgICB2YWx1ZTogJ10nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuICB9LFxuICBnZW5lcmF0ZSA9ICh0b2tlbnM6IFRva2VuW10pOiBzdHJpbmcgPT4ge1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIHRva2Vucy5tYXAoKHRva2VuKSA9PiB7XG4gICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBvdXRwdXQgKz0gJ1wiJyArIHRva2VuLnZhbHVlICsgJ1wiJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBvdXRwdXQgKz0gdG9rZW4udmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LFxuICBwYXJ0aWFsUGFyc2UgPSAoaW5wdXQ6IHN0cmluZyk6IHVua25vd24gPT4gSlNPTi5wYXJzZShnZW5lcmF0ZSh1bnN0cmlwKHN0cmlwKHRva2VuaXplKGlucHV0KSkpKSk7XG5cbmV4cG9ydCB7IHBhcnRpYWxQYXJzZSB9O1xuIiwgImltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uL2NvcmUuanNcIjtcbmltcG9ydCB7IEFudGhyb3BpY0Vycm9yLCBBUElVc2VyQWJvcnRFcnJvciB9IGZyb20gXCIuLi9lcnJvci5qc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBCZXRhQ29udGVudEJsb2NrLFxuICBNZXNzYWdlcyBhcyBCZXRhTWVzc2FnZXMsXG4gIHR5cGUgQmV0YU1lc3NhZ2UsXG4gIHR5cGUgQmV0YVJhd01lc3NhZ2VTdHJlYW1FdmVudCBhcyBCZXRhTWVzc2FnZVN0cmVhbUV2ZW50LFxuICB0eXBlIEJldGFNZXNzYWdlUGFyYW0sXG4gIHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtcyBhcyBCZXRhTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zQmFzZSBhcyBCZXRhTWVzc2FnZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gIHR5cGUgQmV0YVRleHRCbG9jayxcbiAgdHlwZSBCZXRhVGV4dENpdGF0aW9uLFxufSBmcm9tIFwiLi4vcmVzb3VyY2VzL2JldGEvbWVzc2FnZXMvbWVzc2FnZXMuanNcIjtcbmltcG9ydCB7IHR5cGUgUmVhZGFibGVTdHJlYW0sIHR5cGUgUmVzcG9uc2UgfSBmcm9tIFwiLi4vX3NoaW1zL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vc3RyZWFtaW5nLmpzXCI7XG5pbXBvcnQgeyBwYXJ0aWFsUGFyc2UgfSBmcm9tIFwiLi4vX3ZlbmRvci9wYXJ0aWFsLWpzb24tcGFyc2VyL3BhcnNlci5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VTdHJlYW1FdmVudHMge1xuICBjb25uZWN0OiAoKSA9PiB2b2lkO1xuICBzdHJlYW1FdmVudDogKGV2ZW50OiBCZXRhTWVzc2FnZVN0cmVhbUV2ZW50LCBzbmFwc2hvdDogQmV0YU1lc3NhZ2UpID0+IHZvaWQ7XG4gIHRleHQ6ICh0ZXh0RGVsdGE6IHN0cmluZywgdGV4dFNuYXBzaG90OiBzdHJpbmcpID0+IHZvaWQ7XG4gIGNpdGF0aW9uOiAoY2l0YXRpb246IEJldGFUZXh0Q2l0YXRpb24sIGNpdGF0aW9uc1NuYXBzaG90OiBCZXRhVGV4dENpdGF0aW9uW10pID0+IHZvaWQ7XG4gIGlucHV0SnNvbjogKHBhcnRpYWxKc29uOiBzdHJpbmcsIGpzb25TbmFwc2hvdDogdW5rbm93bikgPT4gdm9pZDtcbiAgbWVzc2FnZTogKG1lc3NhZ2U6IEJldGFNZXNzYWdlKSA9PiB2b2lkO1xuICBjb250ZW50QmxvY2s6IChjb250ZW50OiBCZXRhQ29udGVudEJsb2NrKSA9PiB2b2lkO1xuICBmaW5hbE1lc3NhZ2U6IChtZXNzYWdlOiBCZXRhTWVzc2FnZSkgPT4gdm9pZDtcbiAgZXJyb3I6IChlcnJvcjogQW50aHJvcGljRXJyb3IpID0+IHZvaWQ7XG4gIGFib3J0OiAoZXJyb3I6IEFQSVVzZXJBYm9ydEVycm9yKSA9PiB2b2lkO1xuICBlbmQ6ICgpID0+IHZvaWQ7XG59XG5cbnR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50TGlzdGVuZXJzPEV2ZW50IGV4dGVuZHMga2V5b2YgTWVzc2FnZVN0cmVhbUV2ZW50cz4gPSB7XG4gIGxpc3RlbmVyOiBNZXNzYWdlU3RyZWFtRXZlbnRzW0V2ZW50XTtcbiAgb25jZT86IGJvb2xlYW47XG59W107XG5cbmNvbnN0IEpTT05fQlVGX1BST1BFUlRZID0gJ19fanNvbl9idWYnO1xuXG5leHBvcnQgY2xhc3MgQmV0YU1lc3NhZ2VTdHJlYW0gaW1wbGVtZW50cyBBc3luY0l0ZXJhYmxlPEJldGFNZXNzYWdlU3RyZWFtRXZlbnQ+IHtcbiAgbWVzc2FnZXM6IEJldGFNZXNzYWdlUGFyYW1bXSA9IFtdO1xuICByZWNlaXZlZE1lc3NhZ2VzOiBCZXRhTWVzc2FnZVtdID0gW107XG4gICNjdXJyZW50TWVzc2FnZVNuYXBzaG90OiBCZXRhTWVzc2FnZSB8IHVuZGVmaW5lZDtcblxuICBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgI2Nvbm5lY3RlZFByb21pc2U6IFByb21pc2U8UmVzcG9uc2UgfCBudWxsPjtcbiAgI3Jlc29sdmVDb25uZWN0ZWRQcm9taXNlOiAocmVzcG9uc2U6IFJlc3BvbnNlIHwgbnVsbCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuICAjcmVqZWN0Q29ubmVjdGVkUHJvbWlzZTogKGVycm9yOiBBbnRocm9waWNFcnJvcikgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gICNlbmRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAjcmVzb2x2ZUVuZFByb21pc2U6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgI3JlamVjdEVuZFByb21pc2U6IChlcnJvcjogQW50aHJvcGljRXJyb3IpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAjbGlzdGVuZXJzOiB7IFtFdmVudCBpbiBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzXT86IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gfSA9IHt9O1xuXG4gICNlbmRlZCA9IGZhbHNlO1xuICAjZXJyb3JlZCA9IGZhbHNlO1xuICAjYWJvcnRlZCA9IGZhbHNlO1xuICAjY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IGZhbHNlO1xuICAjcmVzcG9uc2U6IFJlc3BvbnNlIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgI3JlcXVlc3RfaWQ6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jY29ubmVjdGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlPFJlc3BvbnNlIHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy4jcmVzb2x2ZUNvbm5lY3RlZFByb21pc2UgPSByZXNvbHZlO1xuICAgICAgdGhpcy4jcmVqZWN0Q29ubmVjdGVkUHJvbWlzZSA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHRoaXMuI2VuZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlRW5kUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICB0aGlzLiNyZWplY3RFbmRQcm9taXNlID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZXNlIHByb21pc2VzIGNhdXNlIHVuaGFuZGxlZCByZWplY3Rpb24gZXJyb3JzLlxuICAgIC8vIHdlIHdpbGwgbWFudWFsbHkgY2F1c2UgYW4gdW5oYW5kbGVkIHJlamVjdGlvbiBlcnJvciBsYXRlclxuICAgIC8vIGlmIHRoZSB1c2VyIGhhc24ndCByZWdpc3RlcmVkIGFueSBlcnJvciBsaXN0ZW5lciBvciBjYWxsZWRcbiAgICAvLyBhbnkgcHJvbWlzZS1yZXR1cm5pbmcgbWV0aG9kLlxuICAgIHRoaXMuI2Nvbm5lY3RlZFByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICAgIHRoaXMuI2VuZFByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICB9XG5cbiAgZ2V0IHJlc3BvbnNlKCk6IFJlc3BvbnNlIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI3Jlc3BvbnNlO1xuICB9XG5cbiAgZ2V0IHJlcXVlc3RfaWQoKTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI3JlcXVlc3RfaWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYE1lc3NhZ2VTdHJlYW1gIGRhdGEsIHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSBhbmQgdGhlIElEIG9mIHRoZSByZXF1ZXN0LFxuICAgKiByZXR1cm5lZCB2aWUgdGhlIGByZXF1ZXN0LWlkYCBoZWFkZXIgd2hpY2ggaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcgcmVxdWVzdHMgYW5kIHJlc3BvcnRpbmdcbiAgICogaXNzdWVzIHRvIEFudGhyb3BpYy5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYEFQSVByb21pc2Uud2l0aFJlc3BvbnNlKClgIG1ldGhvZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCByYWlzZSBhbiBlcnJvciBpZiB5b3UgY3JlYXRlZCB0aGUgc3RyZWFtIHVzaW5nIGBNZXNzYWdlU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbWBcbiAgICogYXMgbm8gYFJlc3BvbnNlYCBpcyBhdmFpbGFibGUuXG4gICAqL1xuICBhc3luYyB3aXRoUmVzcG9uc2UoKTogUHJvbWlzZTx7XG4gICAgZGF0YTogQmV0YU1lc3NhZ2VTdHJlYW07XG4gICAgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICAgIHJlcXVlc3RfaWQ6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIH0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuI2Nvbm5lY3RlZFByb21pc2U7XG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmVzb2x2ZSBhIGBSZXNwb25zZWAgb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHRoaXMsXG4gICAgICByZXNwb25zZSxcbiAgICAgIHJlcXVlc3RfaWQ6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdyZXF1ZXN0LWlkJyksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlbmRlZCBmb3IgdXNlIG9uIHRoZSBmcm9udGVuZCwgY29uc3VtaW5nIGEgc3RyZWFtIHByb2R1Y2VkIHdpdGhcbiAgICogYC50b1JlYWRhYmxlU3RyZWFtKClgIG9uIHRoZSBiYWNrZW5kLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgbWVzc2FnZXMgc2VudCB0byB0aGUgbW9kZWwgZG8gbm90IGFwcGVhciBpbiBgLm9uKCdtZXNzYWdlJylgXG4gICAqIGluIHRoaXMgY29udGV4dC5cbiAgICovXG4gIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtOiBSZWFkYWJsZVN0cmVhbSk6IEJldGFNZXNzYWdlU3RyZWFtIHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQmV0YU1lc3NhZ2VTdHJlYW0oKTtcbiAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX2Zyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU1lc3NhZ2UoXG4gICAgbWVzc2FnZXM6IEJldGFNZXNzYWdlcyxcbiAgICBwYXJhbXM6IEJldGFNZXNzYWdlQ3JlYXRlUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQmV0YU1lc3NhZ2VTdHJlYW0ge1xuICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBCZXRhTWVzc2FnZVN0cmVhbSgpO1xuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwYXJhbXMubWVzc2FnZXMpIHtcbiAgICAgIHJ1bm5lci5fYWRkTWVzc2FnZVBhcmFtKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBydW5uZXIuX3J1bigoKSA9PlxuICAgICAgcnVubmVyLl9jcmVhdGVNZXNzYWdlKFxuICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgeyAuLi5wYXJhbXMsIHN0cmVhbTogdHJ1ZSB9LFxuICAgICAgICB7IC4uLm9wdGlvbnMsIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAnc3RyZWFtJyB9IH0sXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gIHByb3RlY3RlZCBfcnVuKGV4ZWN1dG9yOiAoKSA9PiBQcm9taXNlPGFueT4pIHtcbiAgICBleGVjdXRvcigpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5fZW1pdEZpbmFsKCk7XG4gICAgICB0aGlzLl9lbWl0KCdlbmQnKTtcbiAgICB9LCB0aGlzLiNoYW5kbGVFcnJvcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2FkZE1lc3NhZ2VQYXJhbShtZXNzYWdlOiBCZXRhTWVzc2FnZVBhcmFtKSB7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9hZGRNZXNzYWdlKG1lc3NhZ2U6IEJldGFNZXNzYWdlLCBlbWl0ID0gdHJ1ZSkge1xuICAgIHRoaXMucmVjZWl2ZWRNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgIGlmIChlbWl0KSB7XG4gICAgICB0aGlzLl9lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9jcmVhdGVNZXNzYWdlKFxuICAgIG1lc3NhZ2VzOiBCZXRhTWVzc2FnZXMsXG4gICAgcGFyYW1zOiBCZXRhTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKSk7XG4gICAgfVxuICAgIHRoaXMuI2JlZ2luUmVxdWVzdCgpO1xuICAgIGNvbnN0IHsgcmVzcG9uc2UsIGRhdGE6IHN0cmVhbSB9ID0gYXdhaXQgbWVzc2FnZXNcbiAgICAgIC5jcmVhdGUoeyAuLi5wYXJhbXMsIHN0cmVhbTogdHJ1ZSB9LCB7IC4uLm9wdGlvbnMsIHNpZ25hbDogdGhpcy5jb250cm9sbGVyLnNpZ25hbCB9KVxuICAgICAgLndpdGhSZXNwb25zZSgpO1xuICAgIHRoaXMuX2Nvbm5lY3RlZChyZXNwb25zZSk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZFN0cmVhbUV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuICAgIHRoaXMuI2VuZFJlcXVlc3QoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY29ubmVjdGVkKHJlc3BvbnNlOiBSZXNwb25zZSB8IG51bGwpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuICAgIHRoaXMuI3Jlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy4jcmVxdWVzdF9pZCA9IHJlc3BvbnNlPy5oZWFkZXJzLmdldCgncmVxdWVzdC1pZCcpO1xuICAgIHRoaXMuI3Jlc29sdmVDb25uZWN0ZWRQcm9taXNlKHJlc3BvbnNlKTtcbiAgICB0aGlzLl9lbWl0KCdjb25uZWN0Jyk7XG4gIH1cblxuICBnZXQgZW5kZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2VuZGVkO1xuICB9XG5cbiAgZ2V0IGVycm9yZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2Vycm9yZWQ7XG4gIH1cblxuICBnZXQgYWJvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jYWJvcnRlZDtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RlbmVycyBhcnJheSBmb3IgdGhlIGV2ZW50LlxuICAgKiBObyBjaGVja3MgYXJlIG1hZGUgdG8gc2VlIGlmIHRoZSBsaXN0ZW5lciBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkLiBNdWx0aXBsZSBjYWxscyBwYXNzaW5nXG4gICAqIHRoZSBzYW1lIGNvbWJpbmF0aW9uIG9mIGV2ZW50IGFuZCBsaXN0ZW5lciB3aWxsIHJlc3VsdCBpbiB0aGUgbGlzdGVuZXIgYmVpbmcgYWRkZWQsIGFuZFxuICAgKiBjYWxsZWQsIG11bHRpcGxlIHRpbWVzLlxuICAgKiBAcmV0dXJucyB0aGlzIE1lc3NhZ2VTdHJlYW0sIHNvIHRoYXQgY2FsbHMgY2FuIGJlIGNoYWluZWRcbiAgICovXG4gIG9uPEV2ZW50IGV4dGVuZHMga2V5b2YgTWVzc2FnZVN0cmVhbUV2ZW50cz4oZXZlbnQ6IEV2ZW50LCBsaXN0ZW5lcjogTWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0pOiB0aGlzIHtcbiAgICBjb25zdCBsaXN0ZW5lcnM6IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gPVxuICAgICAgdGhpcy4jbGlzdGVuZXJzW2V2ZW50XSB8fCAodGhpcy4jbGlzdGVuZXJzW2V2ZW50XSA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7IGxpc3RlbmVyIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciBmcm9tIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIGV2ZW50LlxuICAgKiBvZmYoKSB3aWxsIHJlbW92ZSwgYXQgbW9zdCwgb25lIGluc3RhbmNlIG9mIGEgbGlzdGVuZXIgZnJvbSB0aGUgbGlzdGVuZXIgYXJyYXkuIElmIGFueSBzaW5nbGVcbiAgICogbGlzdGVuZXIgaGFzIGJlZW4gYWRkZWQgbXVsdGlwbGUgdGltZXMgdG8gdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LCB0aGVuXG4gICAqIG9mZigpIG11c3QgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHRvIHJlbW92ZSBlYWNoIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB0aGlzIE1lc3NhZ2VTdHJlYW0sIHNvIHRoYXQgY2FsbHMgY2FuIGJlIGNoYWluZWRcbiAgICovXG4gIG9mZjxFdmVudCBleHRlbmRzIGtleW9mIE1lc3NhZ2VTdHJlYW1FdmVudHM+KGV2ZW50OiBFdmVudCwgbGlzdGVuZXI6IE1lc3NhZ2VTdHJlYW1FdmVudHNbRXZlbnRdKTogdGhpcyB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy4jbGlzdGVuZXJzW2V2ZW50XTtcbiAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuZmluZEluZGV4KChsKSA9PiBsLmxpc3RlbmVyID09PSBsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ID49IDApIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBvbmUtdGltZSBsaXN0ZW5lciBmdW5jdGlvbiBmb3IgdGhlIGV2ZW50LiBUaGUgbmV4dCB0aW1lIHRoZSBldmVudCBpcyB0cmlnZ2VyZWQsXG4gICAqIHRoaXMgbGlzdGVuZXIgaXMgcmVtb3ZlZCBhbmQgdGhlbiBpbnZva2VkLlxuICAgKiBAcmV0dXJucyB0aGlzIE1lc3NhZ2VTdHJlYW0sIHNvIHRoYXQgY2FsbHMgY2FuIGJlIGNoYWluZWRcbiAgICovXG4gIG9uY2U8RXZlbnQgZXh0ZW5kcyBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzPihldmVudDogRXZlbnQsIGxpc3RlbmVyOiBNZXNzYWdlU3RyZWFtRXZlbnRzW0V2ZW50XSk6IHRoaXMge1xuICAgIGNvbnN0IGxpc3RlbmVyczogTWVzc2FnZVN0cmVhbUV2ZW50TGlzdGVuZXJzPEV2ZW50PiA9XG4gICAgICB0aGlzLiNsaXN0ZW5lcnNbZXZlbnRdIHx8ICh0aGlzLiNsaXN0ZW5lcnNbZXZlbnRdID0gW10pO1xuICAgIGxpc3RlbmVycy5wdXNoKHsgbGlzdGVuZXIsIG9uY2U6IHRydWUgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBzaW1pbGFyIHRvIGAub25jZSgpYCwgYnV0IHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIG5leHQgdGltZVxuICAgKiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLCBpbnN0ZWFkIG9mIGNhbGxpbmcgYSBsaXN0ZW5lciBjYWxsYmFjay5cbiAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIG5leHQgdGltZSBnaXZlbiBldmVudCBpcyB0cmlnZ2VyZWQsXG4gICAqIG9yIHJlamVjdHMgaWYgYW4gZXJyb3IgaXMgZW1pdHRlZC4gIChJZiB5b3UgcmVxdWVzdCB0aGUgJ2Vycm9yJyBldmVudCxcbiAgICogcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBlcnJvcikuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IHN0cmVhbS5lbWl0dGVkKCdtZXNzYWdlJykgLy8gcmVqZWN0cyBpZiB0aGUgc3RyZWFtIGVycm9yc1xuICAgKi9cbiAgZW1pdHRlZDxFdmVudCBleHRlbmRzIGtleW9mIE1lc3NhZ2VTdHJlYW1FdmVudHM+KFxuICAgIGV2ZW50OiBFdmVudCxcbiAgKTogUHJvbWlzZTxcbiAgICBQYXJhbWV0ZXJzPE1lc3NhZ2VTdHJlYW1FdmVudHNbRXZlbnRdPiBleHRlbmRzIFtpbmZlciBQYXJhbV0gPyBQYXJhbVxuICAgIDogUGFyYW1ldGVyczxNZXNzYWdlU3RyZWFtRXZlbnRzW0V2ZW50XT4gZXh0ZW5kcyBbXSA/IHZvaWRcbiAgICA6IFBhcmFtZXRlcnM8TWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0+XG4gID4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLiNjYXRjaGluZ1Byb21pc2VDcmVhdGVkID0gdHJ1ZTtcbiAgICAgIGlmIChldmVudCAhPT0gJ2Vycm9yJykgdGhpcy5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICB0aGlzLm9uY2UoZXZlbnQsIHJlc29sdmUgYXMgYW55KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRvbmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy4jY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IHRydWU7XG4gICAgYXdhaXQgdGhpcy4jZW5kUHJvbWlzZTtcbiAgfVxuXG4gIGdldCBjdXJyZW50TWVzc2FnZSgpOiBCZXRhTWVzc2FnZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3Q7XG4gIH1cblxuICAjZ2V0RmluYWxNZXNzYWdlKCk6IEJldGFNZXNzYWdlIHtcbiAgICBpZiAodGhpcy5yZWNlaXZlZE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKCdzdHJlYW0gZW5kZWQgd2l0aG91dCBwcm9kdWNpbmcgYSBNZXNzYWdlIHdpdGggcm9sZT1hc3Npc3RhbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVjZWl2ZWRNZXNzYWdlcy5hdCgtMSkhO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRoZSBmaW5hbCBhc3Npc3RhbnQgTWVzc2FnZSByZXNwb25zZSxcbiAgICogb3IgcmVqZWN0cyBpZiBhbiBlcnJvciBvY2N1cnJlZCBvciB0aGUgc3RyZWFtIGVuZGVkIHByZW1hdHVyZWx5IHdpdGhvdXQgcHJvZHVjaW5nIGEgTWVzc2FnZS5cbiAgICovXG4gIGFzeW5jIGZpbmFsTWVzc2FnZSgpOiBQcm9taXNlPEJldGFNZXNzYWdlPiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgcmV0dXJuIHRoaXMuI2dldEZpbmFsTWVzc2FnZSgpO1xuICB9XG5cbiAgI2dldEZpbmFsVGV4dCgpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLnJlY2VpdmVkTWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoJ3N0cmVhbSBlbmRlZCB3aXRob3V0IHByb2R1Y2luZyBhIE1lc3NhZ2Ugd2l0aCByb2xlPWFzc2lzdGFudCcpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0QmxvY2tzID0gdGhpcy5yZWNlaXZlZE1lc3NhZ2VzXG4gICAgICAuYXQoLTEpIVxuICAgICAgLmNvbnRlbnQuZmlsdGVyKChibG9jayk6IGJsb2NrIGlzIEJldGFUZXh0QmxvY2sgPT4gYmxvY2sudHlwZSA9PT0gJ3RleHQnKVxuICAgICAgLm1hcCgoYmxvY2spID0+IGJsb2NrLnRleHQpO1xuICAgIGlmICh0ZXh0QmxvY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKCdzdHJlYW0gZW5kZWQgd2l0aG91dCBwcm9kdWNpbmcgYSBjb250ZW50IGJsb2NrIHdpdGggdHlwZT10ZXh0Jyk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0QmxvY2tzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0aGUgZmluYWwgYXNzaXN0YW50IE1lc3NhZ2UncyB0ZXh0IHJlc3BvbnNlLCBjb25jYXRlbmF0ZWRcbiAgICogdG9nZXRoZXIgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgdGV4dCBibG9ja3MuXG4gICAqIFJlamVjdHMgaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIE1lc3NhZ2UuXG4gICAqL1xuICBhc3luYyBmaW5hbFRleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBhd2FpdCB0aGlzLmRvbmUoKTtcbiAgICByZXR1cm4gdGhpcy4jZ2V0RmluYWxUZXh0KCk7XG4gIH1cblxuICAjaGFuZGxlRXJyb3IgPSAoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICB0aGlzLiNlcnJvcmVkID0gdHJ1ZTtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgIGVycm9yID0gbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFQSVVzZXJBYm9ydEVycm9yKSB7XG4gICAgICB0aGlzLiNhYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0KCdhYm9ydCcsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQW50aHJvcGljRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGNvbnN0IGFudGhyb3BpY0Vycm9yOiBBbnRocm9waWNFcnJvciA9IG5ldyBBbnRocm9waWNFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGFudGhyb3BpY0Vycm9yLmNhdXNlID0gZXJyb3I7XG4gICAgICByZXR1cm4gdGhpcy5fZW1pdCgnZXJyb3InLCBhbnRocm9waWNFcnJvcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9lbWl0KCdlcnJvcicsIG5ldyBBbnRocm9waWNFcnJvcihTdHJpbmcoZXJyb3IpKSk7XG4gIH07XG5cbiAgcHJvdGVjdGVkIF9lbWl0PEV2ZW50IGV4dGVuZHMga2V5b2YgTWVzc2FnZVN0cmVhbUV2ZW50cz4oXG4gICAgZXZlbnQ6IEV2ZW50LFxuICAgIC4uLmFyZ3M6IFBhcmFtZXRlcnM8TWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0+XG4gICkge1xuICAgIC8vIG1ha2Ugc3VyZSB3ZSBkb24ndCBlbWl0IGFueSBNZXNzYWdlU3RyZWFtRXZlbnRzIGFmdGVyIGVuZFxuICAgIGlmICh0aGlzLiNlbmRlZCkgcmV0dXJuO1xuXG4gICAgaWYgKGV2ZW50ID09PSAnZW5kJykge1xuICAgICAgdGhpcy4jZW5kZWQgPSB0cnVlO1xuICAgICAgdGhpcy4jcmVzb2x2ZUVuZFByb21pc2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnM6IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gfCB1bmRlZmluZWQgPSB0aGlzLiNsaXN0ZW5lcnNbZXZlbnRdO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuI2xpc3RlbmVyc1tldmVudF0gPSBsaXN0ZW5lcnMuZmlsdGVyKChsKSA9PiAhbC5vbmNlKSBhcyBhbnk7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgoeyBsaXN0ZW5lciB9OiBhbnkpID0+IGxpc3RlbmVyKC4uLmFyZ3MpKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgPT09ICdhYm9ydCcpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gYXJnc1swXSBhcyBBUElVc2VyQWJvcnRFcnJvcjtcbiAgICAgIGlmICghdGhpcy4jY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCAmJiAhbGlzdGVuZXJzPy5sZW5ndGgpIHtcbiAgICAgICAgUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgdGhpcy4jcmVqZWN0Q29ubmVjdGVkUHJvbWlzZShlcnJvcik7XG4gICAgICB0aGlzLiNyZWplY3RFbmRQcm9taXNlKGVycm9yKTtcbiAgICAgIHRoaXMuX2VtaXQoJ2VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudCA9PT0gJ2Vycm9yJykge1xuICAgICAgLy8gTk9URTogX2VtaXQoJ2Vycm9yJywgZXJyb3IpIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tICNoYW5kbGVFcnJvcigpLlxuXG4gICAgICBjb25zdCBlcnJvciA9IGFyZ3NbMF0gYXMgQW50aHJvcGljRXJyb3I7XG4gICAgICBpZiAoIXRoaXMuI2NhdGNoaW5nUHJvbWlzZUNyZWF0ZWQgJiYgIWxpc3RlbmVycz8ubGVuZ3RoKSB7XG4gICAgICAgIC8vIFRyaWdnZXIgYW4gdW5oYW5kbGVkIHJlamVjdGlvbiBpZiB0aGUgdXNlciBoYXNuJ3QgcmVnaXN0ZXJlZCBhbnkgZXJyb3IgaGFuZGxlcnMuXG4gICAgICAgIC8vIElmIHlvdSBhcmUgc2VlaW5nIHN0YWNrIHRyYWNlcyBoZXJlLCBtYWtlIHN1cmUgdG8gaGFuZGxlIGVycm9ycyB2aWEgZWl0aGVyOlxuICAgICAgICAvLyAtIHJ1bm5lci5vbignZXJyb3InLCAoKSA9PiAuLi4pXG4gICAgICAgIC8vIC0gYXdhaXQgcnVubmVyLmRvbmUoKVxuICAgICAgICAvLyAtIGF3YWl0IHJ1bm5lci5maW5hbC4uLigpXG4gICAgICAgIC8vIC0gZXRjLlxuICAgICAgICBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgICB0aGlzLiNyZWplY3RDb25uZWN0ZWRQcm9taXNlKGVycm9yKTtcbiAgICAgIHRoaXMuI3JlamVjdEVuZFByb21pc2UoZXJyb3IpO1xuICAgICAgdGhpcy5fZW1pdCgnZW5kJyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9lbWl0RmluYWwoKSB7XG4gICAgY29uc3QgZmluYWxNZXNzYWdlID0gdGhpcy5yZWNlaXZlZE1lc3NhZ2VzLmF0KC0xKTtcbiAgICBpZiAoZmluYWxNZXNzYWdlKSB7XG4gICAgICB0aGlzLl9lbWl0KCdmaW5hbE1lc3NhZ2UnLCB0aGlzLiNnZXRGaW5hbE1lc3NhZ2UoKSk7XG4gICAgfVxuICB9XG5cbiAgI2JlZ2luUmVxdWVzdCgpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuICAgIHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3QgPSB1bmRlZmluZWQ7XG4gIH1cbiAgI2FkZFN0cmVhbUV2ZW50KGV2ZW50OiBCZXRhTWVzc2FnZVN0cmVhbUV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHJldHVybjtcbiAgICBjb25zdCBtZXNzYWdlU25hcHNob3QgPSB0aGlzLiNhY2N1bXVsYXRlTWVzc2FnZShldmVudCk7XG4gICAgdGhpcy5fZW1pdCgnc3RyZWFtRXZlbnQnLCBldmVudCwgbWVzc2FnZVNuYXBzaG90KTtcblxuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnY29udGVudF9ibG9ja19kZWx0YSc6IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IG1lc3NhZ2VTbmFwc2hvdC5jb250ZW50LmF0KC0xKSE7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGVsdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3RleHRfZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZW1pdCgndGV4dCcsIGV2ZW50LmRlbHRhLnRleHQsIGNvbnRlbnQudGV4dCB8fCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnY2l0YXRpb25zX2RlbHRhJzoge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2NpdGF0aW9uJywgZXZlbnQuZGVsdGEuY2l0YXRpb24sIGNvbnRlbnQuY2l0YXRpb25zID8/IFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdpbnB1dF9qc29uX2RlbHRhJzoge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ3Rvb2xfdXNlJyAmJiBjb250ZW50LmlucHV0KSB7XG4gICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2lucHV0SnNvbicsIGV2ZW50LmRlbHRhLnBhcnRpYWxfanNvbiwgY29udGVudC5pbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNoZWNrTmV2ZXIoZXZlbnQuZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnbWVzc2FnZV9zdG9wJzoge1xuICAgICAgICB0aGlzLl9hZGRNZXNzYWdlUGFyYW0obWVzc2FnZVNuYXBzaG90KTtcbiAgICAgICAgdGhpcy5fYWRkTWVzc2FnZShtZXNzYWdlU25hcHNob3QsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbnRlbnRfYmxvY2tfc3RvcCc6IHtcbiAgICAgICAgdGhpcy5fZW1pdCgnY29udGVudEJsb2NrJywgbWVzc2FnZVNuYXBzaG90LmNvbnRlbnQuYXQoLTEpISk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnbWVzc2FnZV9zdGFydCc6IHtcbiAgICAgICAgdGhpcy4jY3VycmVudE1lc3NhZ2VTbmFwc2hvdCA9IG1lc3NhZ2VTbmFwc2hvdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdjb250ZW50X2Jsb2NrX3N0YXJ0JzpcbiAgICAgIGNhc2UgJ21lc3NhZ2VfZGVsdGEnOlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgI2VuZFJlcXVlc3QoKTogQmV0YU1lc3NhZ2Uge1xuICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYHN0cmVhbSBoYXMgZW5kZWQsIHRoaXMgc2hvdWxkbid0IGhhcHBlbmApO1xuICAgIH1cbiAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3Q7XG4gICAgaWYgKCFzbmFwc2hvdCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGByZXF1ZXN0IGVuZGVkIHdpdGhvdXQgc2VuZGluZyBhbnkgY2h1bmtzYCk7XG4gICAgfVxuICAgIHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHNuYXBzaG90O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9mcm9tUmVhZGFibGVTdHJlYW0oXG4gICAgcmVhZGFibGVTdHJlYW06IFJlYWRhYmxlU3RyZWFtLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzaWduYWwgPSBvcHRpb25zPy5zaWduYWw7XG4gICAgaWYgKHNpZ25hbCkge1xuICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHRoaXMuY29udHJvbGxlci5hYm9ydCgpKTtcbiAgICB9XG4gICAgdGhpcy4jYmVnaW5SZXF1ZXN0KCk7XG4gICAgdGhpcy5fY29ubmVjdGVkKG51bGwpO1xuICAgIGNvbnN0IHN0cmVhbSA9IFN0cmVhbS5mcm9tUmVhZGFibGVTdHJlYW08QmV0YU1lc3NhZ2VTdHJlYW1FdmVudD4ocmVhZGFibGVTdHJlYW0sIHRoaXMuY29udHJvbGxlcik7XG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZFN0cmVhbUV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuICAgIHRoaXMuI2VuZFJlcXVlc3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdXRhdGVzIHRoaXMuI2N1cnJlbnRNZXNzYWdlIHdpdGggdGhlIGN1cnJlbnQgZXZlbnQuIEhhbmRsaW5nIHRoZSBhY2N1bXVsYXRpb24gb2YgbXVsdGlwbGUgbWVzc2FnZXNcbiAgICogd2lsbCBiZSBuZWVkZWQgdG8gYmUgaGFuZGxlZCBieSB0aGUgY2FsbGVyLCB0aGlzIG1ldGhvZCB3aWxsIHRocm93IGlmIHlvdSB0cnkgdG8gYWNjdW11bGF0ZSBmb3IgbXVsdGlwbGVcbiAgICogbWVzc2FnZXMuXG4gICAqL1xuICAjYWNjdW11bGF0ZU1lc3NhZ2UoZXZlbnQ6IEJldGFNZXNzYWdlU3RyZWFtRXZlbnQpOiBCZXRhTWVzc2FnZSB7XG4gICAgbGV0IHNuYXBzaG90ID0gdGhpcy4jY3VycmVudE1lc3NhZ2VTbmFwc2hvdDtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbWVzc2FnZV9zdGFydCcpIHtcbiAgICAgIGlmIChzbmFwc2hvdCkge1xuICAgICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYFVuZXhwZWN0ZWQgZXZlbnQgb3JkZXIsIGdvdCAke2V2ZW50LnR5cGV9IGJlZm9yZSByZWNlaXZpbmcgXCJtZXNzYWdlX3N0b3BcImApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV2ZW50Lm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgaWYgKCFzbmFwc2hvdCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGBVbmV4cGVjdGVkIGV2ZW50IG9yZGVyLCBnb3QgJHtldmVudC50eXBlfSBiZWZvcmUgXCJtZXNzYWdlX3N0YXJ0XCJgKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgJ21lc3NhZ2Vfc3RvcCc6XG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgIGNhc2UgJ21lc3NhZ2VfZGVsdGEnOlxuICAgICAgICBzbmFwc2hvdC5zdG9wX3JlYXNvbiA9IGV2ZW50LmRlbHRhLnN0b3BfcmVhc29uO1xuICAgICAgICBzbmFwc2hvdC5zdG9wX3NlcXVlbmNlID0gZXZlbnQuZGVsdGEuc3RvcF9zZXF1ZW5jZTtcbiAgICAgICAgc25hcHNob3QudXNhZ2Uub3V0cHV0X3Rva2VucyA9IGV2ZW50LnVzYWdlLm91dHB1dF90b2tlbnM7XG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgIGNhc2UgJ2NvbnRlbnRfYmxvY2tfc3RhcnQnOlxuICAgICAgICBzbmFwc2hvdC5jb250ZW50LnB1c2goZXZlbnQuY29udGVudF9ibG9jayk7XG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgIGNhc2UgJ2NvbnRlbnRfYmxvY2tfZGVsdGEnOiB7XG4gICAgICAgIGNvbnN0IHNuYXBzaG90Q29udGVudCA9IHNuYXBzaG90LmNvbnRlbnQuYXQoZXZlbnQuaW5kZXgpO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGVsdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3RleHRfZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoc25hcHNob3RDb250ZW50Py50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgc25hcHNob3RDb250ZW50LnRleHQgKz0gZXZlbnQuZGVsdGEudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdjaXRhdGlvbnNfZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoc25hcHNob3RDb250ZW50Py50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgc25hcHNob3RDb250ZW50LmNpdGF0aW9ucyA/Pz0gW107XG4gICAgICAgICAgICAgIHNuYXBzaG90Q29udGVudC5jaXRhdGlvbnMucHVzaChldmVudC5kZWx0YS5jaXRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnaW5wdXRfanNvbl9kZWx0YSc6IHtcbiAgICAgICAgICAgIGlmIChzbmFwc2hvdENvbnRlbnQ/LnR5cGUgPT09ICd0b29sX3VzZScpIHtcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHRoZSByYXcgSlNPTiBzdHJpbmcgYXMgd2VsbCBzbyB0aGF0IHdlIGNhblxuICAgICAgICAgICAgICAvLyByZS1wYXJzZSBpdCBmb3IgZWFjaCBkZWx0YSwgZm9yIG5vdyB3ZSBqdXN0IHN0b3JlIGl0IGFzIGFuIHVudHlwZWRcbiAgICAgICAgICAgICAgLy8gbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIHNuYXBzaG90XG4gICAgICAgICAgICAgIGxldCBqc29uQnVmID0gKHNuYXBzaG90Q29udGVudCBhcyBhbnkpW0pTT05fQlVGX1BST1BFUlRZXSB8fCAnJztcbiAgICAgICAgICAgICAganNvbkJ1ZiArPSBldmVudC5kZWx0YS5wYXJ0aWFsX2pzb247XG5cbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNuYXBzaG90Q29udGVudCwgSlNPTl9CVUZfUFJPUEVSVFksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZToganNvbkJ1ZixcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKGpzb25CdWYpIHtcbiAgICAgICAgICAgICAgICBzbmFwc2hvdENvbnRlbnQuaW5wdXQgPSBwYXJ0aWFsUGFyc2UoanNvbkJ1Zik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2hlY2tOZXZlcihldmVudC5kZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgfVxuICAgICAgY2FzZSAnY29udGVudF9ibG9ja19zdG9wJzpcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxCZXRhTWVzc2FnZVN0cmVhbUV2ZW50PiB7XG4gICAgY29uc3QgcHVzaFF1ZXVlOiBCZXRhTWVzc2FnZVN0cmVhbUV2ZW50W10gPSBbXTtcbiAgICBjb25zdCByZWFkUXVldWU6IHtcbiAgICAgIHJlc29sdmU6IChjaHVuazogQmV0YU1lc3NhZ2VTdHJlYW1FdmVudCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICAgIHJlamVjdDogKGVycm9yOiB1bmtub3duKSA9PiB2b2lkO1xuICAgIH1bXSA9IFtdO1xuICAgIGxldCBkb25lID0gZmFsc2U7XG5cbiAgICB0aGlzLm9uKCdzdHJlYW1FdmVudCcsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgcmVhZGVyID0gcmVhZFF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAocmVhZGVyKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hRdWV1ZS5wdXNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgICByZWFkUXVldWUubGVuZ3RoID0gMDtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Fib3J0JywgKGVycikgPT4ge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlYWRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGFzeW5jICgpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PEJldGFNZXNzYWdlU3RyZWFtRXZlbnQ+PiA9PiB7XG4gICAgICAgIGlmICghcHVzaFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxCZXRhTWVzc2FnZVN0cmVhbUV2ZW50IHwgdW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgICAgICAgcmVhZFF1ZXVlLnB1c2goeyByZXNvbHZlLCByZWplY3QgfSksXG4gICAgICAgICAgKS50aGVuKChjaHVuaykgPT4gKGNodW5rID8geyB2YWx1ZTogY2h1bmssIGRvbmU6IGZhbHNlIH0gOiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNodW5rID0gcHVzaFF1ZXVlLnNoaWZ0KCkhO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogY2h1bmssIGRvbmU6IGZhbHNlIH07XG4gICAgICB9LFxuICAgICAgcmV0dXJuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgdG9SZWFkYWJsZVN0cmVhbSgpOiBSZWFkYWJsZVN0cmVhbSB7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmVhbSh0aGlzW1N5bWJvbC5hc3luY0l0ZXJhdG9yXS5iaW5kKHRoaXMpLCB0aGlzLmNvbnRyb2xsZXIpO1xuICAgIHJldHVybiBzdHJlYW0udG9SZWFkYWJsZVN0cmVhbSgpO1xuICB9XG59XG5cbi8vIHVzZWQgdG8gZW5zdXJlIGV4aGF1c3RpdmUgY2FzZSBtYXRjaGluZyB3aXRob3V0IHRocm93aW5nIGEgcnVudGltZSBlcnJvclxuZnVuY3Rpb24gY2hlY2tOZXZlcih4OiBuZXZlcikge31cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5qc1wiO1xuaW1wb3J0IHsgQVBJUHJvbWlzZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLmpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi8uLi8uLi9jb3JlLmpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc01lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgKiBhcyBCZXRhQVBJIGZyb20gXCIuLi9iZXRhLmpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi4vLi4vbWVzc2FnZXMvbWVzc2FnZXMuanNcIjtcbmltcG9ydCAqIGFzIEJhdGNoZXNBUEkgZnJvbSBcIi4vYmF0Y2hlcy5qc1wiO1xuaW1wb3J0IHtcbiAgQmF0Y2hDYW5jZWxQYXJhbXMsXG4gIEJhdGNoQ3JlYXRlUGFyYW1zLFxuICBCYXRjaERlbGV0ZVBhcmFtcyxcbiAgQmF0Y2hMaXN0UGFyYW1zLFxuICBCYXRjaFJlc3VsdHNQYXJhbXMsXG4gIEJhdGNoUmV0cmlldmVQYXJhbXMsXG4gIEJhdGNoZXMsXG4gIEJldGFEZWxldGVkTWVzc2FnZUJhdGNoLFxuICBCZXRhTWVzc2FnZUJhdGNoLFxuICBCZXRhTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHQsXG4gIEJldGFNZXNzYWdlQmF0Y2hFcnJvcmVkUmVzdWx0LFxuICBCZXRhTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdCxcbiAgQmV0YU1lc3NhZ2VCYXRjaEluZGl2aWR1YWxSZXNwb25zZSxcbiAgQmV0YU1lc3NhZ2VCYXRjaFJlcXVlc3RDb3VudHMsXG4gIEJldGFNZXNzYWdlQmF0Y2hSZXN1bHQsXG4gIEJldGFNZXNzYWdlQmF0Y2hTdWNjZWVkZWRSZXN1bHQsXG4gIEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UsXG59IGZyb20gXCIuL2JhdGNoZXMuanNcIjtcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9zdHJlYW1pbmcuanNcIjtcbmltcG9ydCB7IEJldGFNZXNzYWdlU3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9CZXRhTWVzc2FnZVN0cmVhbS5qc1wiO1xuaW1wb3J0IHR5cGUgeyBNb2RlbCB9IGZyb20gXCIuLi8uLi9tZXNzYWdlcy9tZXNzYWdlcy5qc1wiO1xuXG5jb25zdCBERVBSRUNBVEVEX01PREVMUzoge1xuICBbSyBpbiBNb2RlbF0/OiBzdHJpbmc7XG59ID0ge1xuICAnY2xhdWRlLTEuMyc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAnY2xhdWRlLTEuMy0xMDBrJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICdjbGF1ZGUtaW5zdGFudC0xLjEnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgJ2NsYXVkZS1pbnN0YW50LTEuMS0xMDBrJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICdjbGF1ZGUtaW5zdGFudC0xLjInOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgJ2NsYXVkZS0zLXNvbm5ldC0yMDI0MDIyOSc6ICdKdWx5IDIxc3QsIDIwMjUnLFxuICAnY2xhdWRlLTIuMSc6ICdKdWx5IDIxc3QsIDIwMjUnLFxuICAnY2xhdWRlLTIuMCc6ICdKdWx5IDIxc3QsIDIwMjUnLFxufTtcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBiYXRjaGVzOiBCYXRjaGVzQVBJLkJhdGNoZXMgPSBuZXcgQmF0Y2hlc0FQSS5CYXRjaGVzKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBzdHJ1Y3R1cmVkIGxpc3Qgb2YgaW5wdXQgbWVzc2FnZXMgd2l0aCB0ZXh0IGFuZC9vciBpbWFnZSBjb250ZW50LCBhbmQgdGhlXG4gICAqIG1vZGVsIHdpbGwgZ2VuZXJhdGUgdGhlIG5leHQgbWVzc2FnZSBpbiB0aGUgY29udmVyc2F0aW9uLlxuICAgKlxuICAgKiBUaGUgTWVzc2FnZXMgQVBJIGNhbiBiZSB1c2VkIGZvciBlaXRoZXIgc2luZ2xlIHF1ZXJpZXMgb3Igc3RhdGVsZXNzIG11bHRpLXR1cm5cbiAgICogY29udmVyc2F0aW9ucy5cbiAgICovXG4gIGNyZWF0ZShwYXJhbXM6IE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQVBJUHJvbWlzZTxCZXRhTWVzc2FnZT47XG4gIGNyZWF0ZShcbiAgICBwYXJhbXM6IE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8U3RyZWFtPEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQ+PjtcbiAgY3JlYXRlKFxuICAgIHBhcmFtczogTWVzc2FnZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8U3RyZWFtPEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQ+IHwgQmV0YU1lc3NhZ2U+O1xuICBjcmVhdGUoXG4gICAgcGFyYW1zOiBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPEJldGFNZXNzYWdlPiB8IEFQSVByb21pc2U8U3RyZWFtPEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQ+PiB7XG4gICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuXG4gICAgaWYgKGJvZHkubW9kZWwgaW4gREVQUkVDQVRFRF9NT0RFTFMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFRoZSBtb2RlbCAnJHtib2R5Lm1vZGVsfScgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCByZWFjaCBlbmQtb2YtbGlmZSBvbiAke1xuICAgICAgICAgIERFUFJFQ0FURURfTU9ERUxTW2JvZHkubW9kZWxdXG4gICAgICAgIH1cXG5QbGVhc2UgbWlncmF0ZSB0byBhIG5ld2VyIG1vZGVsLiBWaXNpdCBodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3Jlc291cmNlcy9tb2RlbC1kZXByZWNhdGlvbnMgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdjEvbWVzc2FnZXM/YmV0YT10cnVlJywge1xuICAgICAgYm9keSxcbiAgICAgIHRpbWVvdXQ6ICh0aGlzLl9jbGllbnQgYXMgYW55KS5fb3B0aW9ucy50aW1lb3V0ID8/IDYwMDAwMCxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcbiAgICAgIH0sXG4gICAgICBzdHJlYW06IHBhcmFtcy5zdHJlYW0gPz8gZmFsc2UsXG4gICAgfSkgYXMgQVBJUHJvbWlzZTxCZXRhTWVzc2FnZT4gfCBBUElQcm9taXNlPFN0cmVhbTxCZXRhUmF3TWVzc2FnZVN0cmVhbUV2ZW50Pj47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgTWVzc2FnZSBzdHJlYW1cbiAgICovXG4gIHN0cmVhbShib2R5OiBCZXRhTWVzc2FnZVN0cmVhbVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBCZXRhTWVzc2FnZVN0cmVhbSB7XG4gICAgcmV0dXJuIEJldGFNZXNzYWdlU3RyZWFtLmNyZWF0ZU1lc3NhZ2UodGhpcywgYm9keSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgdGhlIG51bWJlciBvZiB0b2tlbnMgaW4gYSBNZXNzYWdlLlxuICAgKlxuICAgKiBUaGUgVG9rZW4gQ291bnQgQVBJIGNhbiBiZSB1c2VkIHRvIGNvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZSxcbiAgICogaW5jbHVkaW5nIHRvb2xzLCBpbWFnZXMsIGFuZCBkb2N1bWVudHMsIHdpdGhvdXQgY3JlYXRpbmcgaXQuXG4gICAqL1xuICBjb3VudFRva2VucyhcbiAgICBwYXJhbXM6IE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPEJldGFNZXNzYWdlVG9rZW5zQ291bnQ+IHtcbiAgICBjb25zdCB7IGJldGFzLCAuLi5ib2R5IH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdjEvbWVzc2FnZXMvY291bnRfdG9rZW5zP2JldGE9dHJ1ZScsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnYW50aHJvcGljLWJldGEnOiBbLi4uKGJldGFzID8/IFtdKSwgJ3Rva2VuLWNvdW50aW5nLTIwMjQtMTEtMDEnXS50b1N0cmluZygpLFxuICAgICAgICAuLi5vcHRpb25zPy5oZWFkZXJzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBCZXRhTWVzc2FnZVN0cmVhbVBhcmFtcyA9IE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFCYXNlNjRQREZCbG9jayB7XG4gIHNvdXJjZTogQmV0YUJhc2U2NFBERlNvdXJjZSB8IEJldGFQbGFpblRleHRTb3VyY2UgfCBCZXRhQ29udGVudEJsb2NrU291cmNlO1xuXG4gIHR5cGU6ICdkb2N1bWVudCc7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIGNpdGF0aW9ucz86IEJldGFDaXRhdGlvbnNDb25maWdQYXJhbTtcblxuICBjb250ZXh0Pzogc3RyaW5nIHwgbnVsbDtcblxuICB0aXRsZT86IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUJhc2U2NFBERlNvdXJjZSB7XG4gIGRhdGE6IHN0cmluZztcblxuICBtZWRpYV90eXBlOiAnYXBwbGljYXRpb24vcGRmJztcblxuICB0eXBlOiAnYmFzZTY0Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsIHtcbiAgdHlwZTogJ2VwaGVtZXJhbCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUNpdGF0aW9uQ2hhckxvY2F0aW9uIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX2NoYXJfaW5kZXg6IG51bWJlcjtcblxuICBzdGFydF9jaGFyX2luZGV4OiBudW1iZXI7XG5cbiAgdHlwZTogJ2NoYXJfbG9jYXRpb24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX2NoYXJfaW5kZXg6IG51bWJlcjtcblxuICBzdGFydF9jaGFyX2luZGV4OiBudW1iZXI7XG5cbiAgdHlwZTogJ2NoYXJfbG9jYXRpb24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX2Jsb2NrX2luZGV4OiBudW1iZXI7XG5cbiAgc3RhcnRfYmxvY2tfaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY29udGVudF9ibG9ja19sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb25QYXJhbSB7XG4gIGNpdGVkX3RleHQ6IHN0cmluZztcblxuICBkb2N1bWVudF9pbmRleDogbnVtYmVyO1xuXG4gIGRvY3VtZW50X3RpdGxlOiBzdHJpbmcgfCBudWxsO1xuXG4gIGVuZF9ibG9ja19pbmRleDogbnVtYmVyO1xuXG4gIHN0YXJ0X2Jsb2NrX2luZGV4OiBudW1iZXI7XG5cbiAgdHlwZTogJ2NvbnRlbnRfYmxvY2tfbG9jYXRpb24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFDaXRhdGlvblBhZ2VMb2NhdGlvbiB7XG4gIGNpdGVkX3RleHQ6IHN0cmluZztcblxuICBkb2N1bWVudF9pbmRleDogbnVtYmVyO1xuXG4gIGRvY3VtZW50X3RpdGxlOiBzdHJpbmcgfCBudWxsO1xuXG4gIGVuZF9wYWdlX251bWJlcjogbnVtYmVyO1xuXG4gIHN0YXJ0X3BhZ2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgdHlwZTogJ3BhZ2VfbG9jYXRpb24nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX3BhZ2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgc3RhcnRfcGFnZV9udW1iZXI6IG51bWJlcjtcblxuICB0eXBlOiAncGFnZV9sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUNpdGF0aW9uc0NvbmZpZ1BhcmFtIHtcbiAgZW5hYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUNpdGF0aW9uc0RlbHRhIHtcbiAgY2l0YXRpb246IEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvbiB8IEJldGFDaXRhdGlvblBhZ2VMb2NhdGlvbiB8IEJldGFDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uO1xuXG4gIHR5cGU6ICdjaXRhdGlvbnNfZGVsdGEnO1xufVxuXG5leHBvcnQgdHlwZSBCZXRhQ29udGVudEJsb2NrID0gQmV0YVRleHRCbG9jayB8IEJldGFUb29sVXNlQmxvY2s7XG5cbmV4cG9ydCB0eXBlIEJldGFDb250ZW50QmxvY2tQYXJhbSA9XG4gIHwgQmV0YVRleHRCbG9ja1BhcmFtXG4gIHwgQmV0YUltYWdlQmxvY2tQYXJhbVxuICB8IEJldGFUb29sVXNlQmxvY2tQYXJhbVxuICB8IEJldGFUb29sUmVzdWx0QmxvY2tQYXJhbVxuICB8IEJldGFCYXNlNjRQREZCbG9jaztcblxuZXhwb3J0IGludGVyZmFjZSBCZXRhQ29udGVudEJsb2NrU291cmNlIHtcbiAgY29udGVudDogc3RyaW5nIHwgQXJyYXk8QmV0YUNvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQ+O1xuXG4gIHR5cGU6ICdjb250ZW50Jztcbn1cblxuZXhwb3J0IHR5cGUgQmV0YUNvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQgPSBCZXRhVGV4dEJsb2NrUGFyYW0gfCBCZXRhSW1hZ2VCbG9ja1BhcmFtO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFJbWFnZUJsb2NrUGFyYW0ge1xuICBzb3VyY2U6IEJldGFJbWFnZUJsb2NrUGFyYW0uU291cmNlO1xuXG4gIHR5cGU6ICdpbWFnZSc7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEJldGFJbWFnZUJsb2NrUGFyYW0ge1xuICBleHBvcnQgaW50ZXJmYWNlIFNvdXJjZSB7XG4gICAgZGF0YTogc3RyaW5nO1xuXG4gICAgbWVkaWFfdHlwZTogJ2ltYWdlL2pwZWcnIHwgJ2ltYWdlL3BuZycgfCAnaW1hZ2UvZ2lmJyB8ICdpbWFnZS93ZWJwJztcblxuICAgIHR5cGU6ICdiYXNlNjQnO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUlucHV0SlNPTkRlbHRhIHtcbiAgcGFydGlhbF9qc29uOiBzdHJpbmc7XG5cbiAgdHlwZTogJ2lucHV0X2pzb25fZGVsdGEnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFNZXNzYWdlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBvYmplY3QgaWRlbnRpZmllci5cbiAgICpcbiAgICogVGhlIGZvcm1hdCBhbmQgbGVuZ3RoIG9mIElEcyBtYXkgY2hhbmdlIG92ZXIgdGltZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbnRlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICpcbiAgICogVGhpcyBpcyBhbiBhcnJheSBvZiBjb250ZW50IGJsb2NrcywgZWFjaCBvZiB3aGljaCBoYXMgYSBgdHlwZWAgdGhhdCBkZXRlcm1pbmVzXG4gICAqIGl0cyBzaGFwZS5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbeyBcInR5cGVcIjogXCJ0ZXh0XCIsIFwidGV4dFwiOiBcIkhpLCBJJ20gQ2xhdWRlLlwiIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiBJZiB0aGUgcmVxdWVzdCBpbnB1dCBgbWVzc2FnZXNgIGVuZGVkIHdpdGggYW4gYGFzc2lzdGFudGAgdHVybiwgdGhlbiB0aGVcbiAgICogcmVzcG9uc2UgYGNvbnRlbnRgIHdpbGwgY29udGludWUgZGlyZWN0bHkgZnJvbSB0aGF0IGxhc3QgdHVybi4gWW91IGNhbiB1c2UgdGhpc1xuICAgKiB0byBjb25zdHJhaW4gdGhlIG1vZGVsJ3Mgb3V0cHV0LlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGlucHV0IGBtZXNzYWdlc2Agd2VyZTpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbXG4gICAqICAge1xuICAgKiAgICAgXCJyb2xlXCI6IFwidXNlclwiLFxuICAgKiAgICAgXCJjb250ZW50XCI6IFwiV2hhdCdzIHRoZSBHcmVlayBuYW1lIGZvciBTdW4/IChBKSBTb2wgKEIpIEhlbGlvcyAoQykgU3VuXCJcbiAgICogICB9LFxuICAgKiAgIHsgXCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBcIlRoZSBiZXN0IGFuc3dlciBpcyAoXCIgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKlxuICAgKiBUaGVuIHRoZSByZXNwb25zZSBgY29udGVudGAgbWlnaHQgYmU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW3sgXCJ0eXBlXCI6IFwidGV4dFwiLCBcInRleHRcIjogXCJCKVwiIH1dXG4gICAqIGBgYFxuICAgKi9cbiAgY29udGVudDogQXJyYXk8QmV0YUNvbnRlbnRCbG9jaz47XG5cbiAgLyoqXG4gICAqIFRoZSBtb2RlbCB0aGF0IHdpbGwgY29tcGxldGUgeW91ciBwcm9tcHQuXFxuXFxuU2VlXG4gICAqIFttb2RlbHNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvbW9kZWxzLW92ZXJ2aWV3KSBmb3IgYWRkaXRpb25hbFxuICAgKiBkZXRhaWxzIGFuZCBvcHRpb25zLlxuICAgKi9cbiAgbW9kZWw6IE1lc3NhZ2VzQVBJLk1vZGVsO1xuXG4gIC8qKlxuICAgKiBDb252ZXJzYXRpb25hbCByb2xlIG9mIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZS5cbiAgICpcbiAgICogVGhpcyB3aWxsIGFsd2F5cyBiZSBgXCJhc3Npc3RhbnRcImAuXG4gICAqL1xuICByb2xlOiAnYXNzaXN0YW50JztcblxuICAvKipcbiAgICogVGhlIHJlYXNvbiB0aGF0IHdlIHN0b3BwZWQuXG4gICAqXG4gICAqIFRoaXMgbWF5IGJlIG9uZSB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgICpcbiAgICogLSBgXCJlbmRfdHVyblwiYDogdGhlIG1vZGVsIHJlYWNoZWQgYSBuYXR1cmFsIHN0b3BwaW5nIHBvaW50XG4gICAqIC0gYFwibWF4X3Rva2Vuc1wiYDogd2UgZXhjZWVkZWQgdGhlIHJlcXVlc3RlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIG1vZGVsJ3MgbWF4aW11bVxuICAgKiAtIGBcInN0b3Bfc2VxdWVuY2VcImA6IG9uZSBvZiB5b3VyIHByb3ZpZGVkIGN1c3RvbSBgc3RvcF9zZXF1ZW5jZXNgIHdhcyBnZW5lcmF0ZWRcbiAgICogLSBgXCJ0b29sX3VzZVwiYDogdGhlIG1vZGVsIGludm9rZWQgb25lIG9yIG1vcmUgdG9vbHNcbiAgICpcbiAgICogSW4gbm9uLXN0cmVhbWluZyBtb2RlIHRoaXMgdmFsdWUgaXMgYWx3YXlzIG5vbi1udWxsLiBJbiBzdHJlYW1pbmcgbW9kZSwgaXQgaXNcbiAgICogbnVsbCBpbiB0aGUgYG1lc3NhZ2Vfc3RhcnRgIGV2ZW50IGFuZCBub24tbnVsbCBvdGhlcndpc2UuXG4gICAqL1xuICBzdG9wX3JlYXNvbjogJ2VuZF90dXJuJyB8ICdtYXhfdG9rZW5zJyB8ICdzdG9wX3NlcXVlbmNlJyB8ICd0b29sX3VzZScgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGljaCBjdXN0b20gc3RvcCBzZXF1ZW5jZSB3YXMgZ2VuZXJhdGVkLCBpZiBhbnkuXG4gICAqXG4gICAqIFRoaXMgdmFsdWUgd2lsbCBiZSBhIG5vbi1udWxsIHN0cmluZyBpZiBvbmUgb2YgeW91ciBjdXN0b20gc3RvcCBzZXF1ZW5jZXMgd2FzXG4gICAqIGdlbmVyYXRlZC5cbiAgICovXG4gIHN0b3Bfc2VxdWVuY2U6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE9iamVjdCB0eXBlLlxuICAgKlxuICAgKiBGb3IgTWVzc2FnZXMsIHRoaXMgaXMgYWx3YXlzIGBcIm1lc3NhZ2VcImAuXG4gICAqL1xuICB0eXBlOiAnbWVzc2FnZSc7XG5cbiAgLyoqXG4gICAqIEJpbGxpbmcgYW5kIHJhdGUtbGltaXQgdXNhZ2UuXG4gICAqXG4gICAqIEFudGhyb3BpYydzIEFQSSBiaWxscyBhbmQgcmF0ZS1saW1pdHMgYnkgdG9rZW4gY291bnRzLCBhcyB0b2tlbnMgcmVwcmVzZW50IHRoZVxuICAgKiB1bmRlcmx5aW5nIGNvc3QgdG8gb3VyIHN5c3RlbXMuXG4gICAqXG4gICAqIFVuZGVyIHRoZSBob29kLCB0aGUgQVBJIHRyYW5zZm9ybXMgcmVxdWVzdHMgaW50byBhIGZvcm1hdCBzdWl0YWJsZSBmb3IgdGhlXG4gICAqIG1vZGVsLiBUaGUgbW9kZWwncyBvdXRwdXQgdGhlbiBnb2VzIHRocm91Z2ggYSBwYXJzaW5nIHN0YWdlIGJlZm9yZSBiZWNvbWluZyBhblxuICAgKiBBUEkgcmVzcG9uc2UuIEFzIGEgcmVzdWx0LCB0aGUgdG9rZW4gY291bnRzIGluIGB1c2FnZWAgd2lsbCBub3QgbWF0Y2ggb25lLXRvLW9uZVxuICAgKiB3aXRoIHRoZSBleGFjdCB2aXNpYmxlIGNvbnRlbnQgb2YgYW4gQVBJIHJlcXVlc3Qgb3IgcmVzcG9uc2UuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBgb3V0cHV0X3Rva2Vuc2Agd2lsbCBiZSBub24temVybywgZXZlbiBmb3IgYW4gZW1wdHkgc3RyaW5nIHJlc3BvbnNlXG4gICAqIGZyb20gQ2xhdWRlLlxuICAgKi9cbiAgdXNhZ2U6IEJldGFVc2FnZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhTWVzc2FnZURlbHRhVXNhZ2Uge1xuICAvKipcbiAgICogVGhlIGN1bXVsYXRpdmUgbnVtYmVyIG9mIG91dHB1dCB0b2tlbnMgd2hpY2ggd2VyZSB1c2VkLlxuICAgKi9cbiAgb3V0cHV0X3Rva2VuczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFNZXNzYWdlUGFyYW0ge1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxCZXRhQ29udGVudEJsb2NrUGFyYW0+O1xuXG4gIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFNZXNzYWdlVG9rZW5zQ291bnQge1xuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgYWNyb3NzIHRoZSBwcm92aWRlZCBsaXN0IG9mIG1lc3NhZ2VzLCBzeXN0ZW0gcHJvbXB0LFxuICAgKiBhbmQgdG9vbHMuXG4gICAqL1xuICBpbnB1dF90b2tlbnM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhTWV0YWRhdGEge1xuICAvKipcbiAgICogQW4gZXh0ZXJuYWwgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIgd2hvIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICpcbiAgICogVGhpcyBzaG91bGQgYmUgYSB1dWlkLCBoYXNoIHZhbHVlLCBvciBvdGhlciBvcGFxdWUgaWRlbnRpZmllci4gQW50aHJvcGljIG1heSB1c2VcbiAgICogdGhpcyBpZCB0byBoZWxwIGRldGVjdCBhYnVzZS4gRG8gbm90IGluY2x1ZGUgYW55IGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uIHN1Y2ggYXNcbiAgICogbmFtZSwgZW1haWwgYWRkcmVzcywgb3IgcGhvbmUgbnVtYmVyLlxuICAgKi9cbiAgdXNlcl9pZD86IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVBsYWluVGV4dFNvdXJjZSB7XG4gIGRhdGE6IHN0cmluZztcblxuICBtZWRpYV90eXBlOiAndGV4dC9wbGFpbic7XG5cbiAgdHlwZTogJ3RleHQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFSYXdDb250ZW50QmxvY2tEZWx0YUV2ZW50IHtcbiAgZGVsdGE6IEJldGFUZXh0RGVsdGEgfCBCZXRhSW5wdXRKU09ORGVsdGEgfCBCZXRhQ2l0YXRpb25zRGVsdGE7XG5cbiAgaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY29udGVudF9ibG9ja19kZWx0YSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnQge1xuICBjb250ZW50X2Jsb2NrOiBCZXRhVGV4dEJsb2NrIHwgQmV0YVRvb2xVc2VCbG9jaztcblxuICBpbmRleDogbnVtYmVyO1xuXG4gIHR5cGU6ICdjb250ZW50X2Jsb2NrX3N0YXJ0Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhUmF3Q29udGVudEJsb2NrU3RvcEV2ZW50IHtcbiAgaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY29udGVudF9ibG9ja19zdG9wJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhUmF3TWVzc2FnZURlbHRhRXZlbnQge1xuICBkZWx0YTogQmV0YVJhd01lc3NhZ2VEZWx0YUV2ZW50LkRlbHRhO1xuXG4gIHR5cGU6ICdtZXNzYWdlX2RlbHRhJztcblxuICAvKipcbiAgICogQmlsbGluZyBhbmQgcmF0ZS1saW1pdCB1c2FnZS5cbiAgICpcbiAgICogQW50aHJvcGljJ3MgQVBJIGJpbGxzIGFuZCByYXRlLWxpbWl0cyBieSB0b2tlbiBjb3VudHMsIGFzIHRva2VucyByZXByZXNlbnQgdGhlXG4gICAqIHVuZGVybHlpbmcgY29zdCB0byBvdXIgc3lzdGVtcy5cbiAgICpcbiAgICogVW5kZXIgdGhlIGhvb2QsIHRoZSBBUEkgdHJhbnNmb3JtcyByZXF1ZXN0cyBpbnRvIGEgZm9ybWF0IHN1aXRhYmxlIGZvciB0aGVcbiAgICogbW9kZWwuIFRoZSBtb2RlbCdzIG91dHB1dCB0aGVuIGdvZXMgdGhyb3VnaCBhIHBhcnNpbmcgc3RhZ2UgYmVmb3JlIGJlY29taW5nIGFuXG4gICAqIEFQSSByZXNwb25zZS4gQXMgYSByZXN1bHQsIHRoZSB0b2tlbiBjb3VudHMgaW4gYHVzYWdlYCB3aWxsIG5vdCBtYXRjaCBvbmUtdG8tb25lXG4gICAqIHdpdGggdGhlIGV4YWN0IHZpc2libGUgY29udGVudCBvZiBhbiBBUEkgcmVxdWVzdCBvciByZXNwb25zZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGBvdXRwdXRfdG9rZW5zYCB3aWxsIGJlIG5vbi16ZXJvLCBldmVuIGZvciBhbiBlbXB0eSBzdHJpbmcgcmVzcG9uc2VcbiAgICogZnJvbSBDbGF1ZGUuXG4gICAqL1xuICB1c2FnZTogQmV0YU1lc3NhZ2VEZWx0YVVzYWdlO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEJldGFSYXdNZXNzYWdlRGVsdGFFdmVudCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRGVsdGEge1xuICAgIHN0b3BfcmVhc29uOiAnZW5kX3R1cm4nIHwgJ21heF90b2tlbnMnIHwgJ3N0b3Bfc2VxdWVuY2UnIHwgJ3Rvb2xfdXNlJyB8IG51bGw7XG5cbiAgICBzdG9wX3NlcXVlbmNlOiBzdHJpbmcgfCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVJhd01lc3NhZ2VTdGFydEV2ZW50IHtcbiAgbWVzc2FnZTogQmV0YU1lc3NhZ2U7XG5cbiAgdHlwZTogJ21lc3NhZ2Vfc3RhcnQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFSYXdNZXNzYWdlU3RvcEV2ZW50IHtcbiAgdHlwZTogJ21lc3NhZ2Vfc3RvcCc7XG59XG5cbmV4cG9ydCB0eXBlIEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQgPVxuICB8IEJldGFSYXdNZXNzYWdlU3RhcnRFdmVudFxuICB8IEJldGFSYXdNZXNzYWdlRGVsdGFFdmVudFxuICB8IEJldGFSYXdNZXNzYWdlU3RvcEV2ZW50XG4gIHwgQmV0YVJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnRcbiAgfCBCZXRhUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudFxuICB8IEJldGFSYXdDb250ZW50QmxvY2tTdG9wRXZlbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVRleHRCbG9jayB7XG4gIC8qKlxuICAgKiBDaXRhdGlvbnMgc3VwcG9ydGluZyB0aGUgdGV4dCBibG9jay5cbiAgICpcbiAgICogVGhlIHR5cGUgb2YgY2l0YXRpb24gcmV0dXJuZWQgd2lsbCBkZXBlbmQgb24gdGhlIHR5cGUgb2YgZG9jdW1lbnQgYmVpbmcgY2l0ZWQuXG4gICAqIENpdGluZyBhIFBERiByZXN1bHRzIGluIGBwYWdlX2xvY2F0aW9uYCwgcGxhaW4gdGV4dCByZXN1bHRzIGluIGBjaGFyX2xvY2F0aW9uYCxcbiAgICogYW5kIGNvbnRlbnQgZG9jdW1lbnQgcmVzdWx0cyBpbiBgY29udGVudF9ibG9ja19sb2NhdGlvbmAuXG4gICAqL1xuICBjaXRhdGlvbnM6IEFycmF5PEJldGFUZXh0Q2l0YXRpb24+IHwgbnVsbDtcblxuICB0ZXh0OiBzdHJpbmc7XG5cbiAgdHlwZTogJ3RleHQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFUZXh0QmxvY2tQYXJhbSB7XG4gIHRleHQ6IHN0cmluZztcblxuICB0eXBlOiAndGV4dCc7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIGNpdGF0aW9ucz86IEFycmF5PEJldGFUZXh0Q2l0YXRpb25QYXJhbT4gfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBCZXRhVGV4dENpdGF0aW9uID1cbiAgfCBCZXRhQ2l0YXRpb25DaGFyTG9jYXRpb25cbiAgfCBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb25cbiAgfCBCZXRhQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbjtcblxuZXhwb3J0IHR5cGUgQmV0YVRleHRDaXRhdGlvblBhcmFtID1cbiAgfCBCZXRhQ2l0YXRpb25DaGFyTG9jYXRpb25QYXJhbVxuICB8IEJldGFDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtXG4gIHwgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb25QYXJhbTtcblxuZXhwb3J0IGludGVyZmFjZSBCZXRhVGV4dERlbHRhIHtcbiAgdGV4dDogc3RyaW5nO1xuXG4gIHR5cGU6ICd0ZXh0X2RlbHRhJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhVG9vbCB7XG4gIC8qKlxuICAgKiBbSlNPTiBzY2hlbWFdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykgZm9yIHRoaXMgdG9vbCdzIGlucHV0LlxuICAgKlxuICAgKiBUaGlzIGRlZmluZXMgdGhlIHNoYXBlIG9mIHRoZSBgaW5wdXRgIHRoYXQgeW91ciB0b29sIGFjY2VwdHMgYW5kIHRoYXQgdGhlIG1vZGVsXG4gICAqIHdpbGwgcHJvZHVjZS5cbiAgICovXG4gIGlucHV0X3NjaGVtYTogQmV0YVRvb2wuSW5wdXRTY2hlbWE7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIHRvb2wuXG4gICAqXG4gICAqIFRoaXMgaXMgaG93IHRoZSB0b29sIHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBtb2RlbCBhbmQgaW4gdG9vbF91c2UgYmxvY2tzLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIGNhY2hlX2NvbnRyb2w/OiBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsIHwgbnVsbDtcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24gb2Ygd2hhdCB0aGlzIHRvb2wgZG9lcy5cbiAgICpcbiAgICogVG9vbCBkZXNjcmlwdGlvbnMgc2hvdWxkIGJlIGFzIGRldGFpbGVkIGFzIHBvc3NpYmxlLiBUaGUgbW9yZSBpbmZvcm1hdGlvbiB0aGF0XG4gICAqIHRoZSBtb2RlbCBoYXMgYWJvdXQgd2hhdCB0aGUgdG9vbCBpcyBhbmQgaG93IHRvIHVzZSBpdCwgdGhlIGJldHRlciBpdCB3aWxsXG4gICAqIHBlcmZvcm0uIFlvdSBjYW4gdXNlIG5hdHVyYWwgbGFuZ3VhZ2UgZGVzY3JpcHRpb25zIHRvIHJlaW5mb3JjZSBpbXBvcnRhbnRcbiAgICogYXNwZWN0cyBvZiB0aGUgdG9vbCBpbnB1dCBKU09OIHNjaGVtYS5cbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gIHR5cGU/OiAnY3VzdG9tJyB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQmV0YVRvb2wge1xuICAvKipcbiAgICogW0pTT04gc2NoZW1hXShodHRwczovL2pzb24tc2NoZW1hLm9yZy8pIGZvciB0aGlzIHRvb2wncyBpbnB1dC5cbiAgICpcbiAgICogVGhpcyBkZWZpbmVzIHRoZSBzaGFwZSBvZiB0aGUgYGlucHV0YCB0aGF0IHlvdXIgdG9vbCBhY2NlcHRzIGFuZCB0aGF0IHRoZSBtb2RlbFxuICAgKiB3aWxsIHByb2R1Y2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElucHV0U2NoZW1hIHtcbiAgICB0eXBlOiAnb2JqZWN0JztcblxuICAgIHByb3BlcnRpZXM/OiB1bmtub3duIHwgbnVsbDtcbiAgICBbazogc3RyaW5nXTogdW5rbm93bjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFUb29sQmFzaDIwMjQxMDIyIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIHRvb2wuXG4gICAqXG4gICAqIFRoaXMgaXMgaG93IHRoZSB0b29sIHdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBtb2RlbCBhbmQgaW4gdG9vbF91c2UgYmxvY2tzLlxuICAgKi9cbiAgbmFtZTogJ2Jhc2gnO1xuXG4gIHR5cGU6ICdiYXNoXzIwMjQxMDIyJztcblxuICBjYWNoZV9jb250cm9sPzogQmV0YUNhY2hlQ29udHJvbEVwaGVtZXJhbCB8IG51bGw7XG59XG5cbi8qKlxuICogSG93IHRoZSBtb2RlbCBzaG91bGQgdXNlIHRoZSBwcm92aWRlZCB0b29scy4gVGhlIG1vZGVsIGNhbiB1c2UgYSBzcGVjaWZpYyB0b29sLFxuICogYW55IGF2YWlsYWJsZSB0b29sLCBvciBkZWNpZGUgYnkgaXRzZWxmLlxuICovXG5leHBvcnQgdHlwZSBCZXRhVG9vbENob2ljZSA9IEJldGFUb29sQ2hvaWNlQXV0byB8IEJldGFUb29sQ2hvaWNlQW55IHwgQmV0YVRvb2xDaG9pY2VUb29sO1xuXG4vKipcbiAqIFRoZSBtb2RlbCB3aWxsIHVzZSBhbnkgYXZhaWxhYmxlIHRvb2xzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJldGFUb29sQ2hvaWNlQW55IHtcbiAgdHlwZTogJ2FueSc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXJhbGxlbCB0b29sIHVzZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC4gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIG1vZGVsIHdpbGwgb3V0cHV0IGV4YWN0bHkgb25lIHRvb2xcbiAgICogdXNlLlxuICAgKi9cbiAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIG1vZGVsIHdpbGwgYXV0b21hdGljYWxseSBkZWNpZGUgd2hldGhlciB0byB1c2UgdG9vbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVRvb2xDaG9pY2VBdXRvIHtcbiAgdHlwZTogJ2F1dG8nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRpc2FibGUgcGFyYWxsZWwgdG9vbCB1c2UuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBtb2RlbCB3aWxsIG91dHB1dCBhdCBtb3N0IG9uZSB0b29sXG4gICAqIHVzZS5cbiAgICovXG4gIGRpc2FibGVfcGFyYWxsZWxfdG9vbF91c2U/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRoZSBtb2RlbCB3aWxsIHVzZSB0aGUgc3BlY2lmaWVkIHRvb2wgd2l0aCBgdG9vbF9jaG9pY2UubmFtZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVRvb2xDaG9pY2VUb29sIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRvIHVzZS5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICB0eXBlOiAndG9vbCc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXJhbGxlbCB0b29sIHVzZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC4gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIG1vZGVsIHdpbGwgb3V0cHV0IGV4YWN0bHkgb25lIHRvb2xcbiAgICogdXNlLlxuICAgKi9cbiAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVRvb2xDb21wdXRlclVzZTIwMjQxMDIyIHtcbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGRpc3BsYXkgaW4gcGl4ZWxzLlxuICAgKi9cbiAgZGlzcGxheV9oZWlnaHRfcHg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBkaXNwbGF5IGluIHBpeGVscy5cbiAgICovXG4gIGRpc3BsYXlfd2lkdGhfcHg6IG51bWJlcjtcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgdG9vbC5cbiAgICpcbiAgICogVGhpcyBpcyBob3cgdGhlIHRvb2wgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIG1vZGVsIGFuZCBpbiB0b29sX3VzZSBibG9ja3MuXG4gICAqL1xuICBuYW1lOiAnY29tcHV0ZXInO1xuXG4gIHR5cGU6ICdjb21wdXRlcl8yMDI0MTAyMic7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgWDExIGRpc3BsYXkgbnVtYmVyIChlLmcuIDAsIDEpIGZvciB0aGUgZGlzcGxheS5cbiAgICovXG4gIGRpc3BsYXlfbnVtYmVyPzogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhVG9vbFJlc3VsdEJsb2NrUGFyYW0ge1xuICB0b29sX3VzZV9pZDogc3RyaW5nO1xuXG4gIHR5cGU6ICd0b29sX3Jlc3VsdCc7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIGNvbnRlbnQ/OiBzdHJpbmcgfCBBcnJheTxCZXRhVGV4dEJsb2NrUGFyYW0gfCBCZXRhSW1hZ2VCbG9ja1BhcmFtPjtcblxuICBpc19lcnJvcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVRvb2xUZXh0RWRpdG9yMjAyNDEwMjIge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgdG9vbC5cbiAgICpcbiAgICogVGhpcyBpcyBob3cgdGhlIHRvb2wgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIG1vZGVsIGFuZCBpbiB0b29sX3VzZSBibG9ja3MuXG4gICAqL1xuICBuYW1lOiAnc3RyX3JlcGxhY2VfZWRpdG9yJztcblxuICB0eXBlOiAndGV4dF9lZGl0b3JfMjAyNDEwMjInO1xuXG4gIGNhY2hlX2NvbnRyb2w/OiBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsIHwgbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgQmV0YVRvb2xVbmlvbiA9XG4gIHwgQmV0YVRvb2xcbiAgfCBCZXRhVG9vbENvbXB1dGVyVXNlMjAyNDEwMjJcbiAgfCBCZXRhVG9vbEJhc2gyMDI0MTAyMlxuICB8IEJldGFUb29sVGV4dEVkaXRvcjIwMjQxMDIyO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFUb29sVXNlQmxvY2sge1xuICBpZDogc3RyaW5nO1xuXG4gIGlucHV0OiB1bmtub3duO1xuXG4gIG5hbWU6IHN0cmluZztcblxuICB0eXBlOiAndG9vbF91c2UnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFUb29sVXNlQmxvY2tQYXJhbSB7XG4gIGlkOiBzdHJpbmc7XG5cbiAgaW5wdXQ6IHVua25vd247XG5cbiAgbmFtZTogc3RyaW5nO1xuXG4gIHR5cGU6ICd0b29sX3VzZSc7XG5cbiAgY2FjaGVfY29udHJvbD86IEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJldGFVc2FnZSB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGlucHV0IHRva2VucyB1c2VkIHRvIGNyZWF0ZSB0aGUgY2FjaGUgZW50cnkuXG4gICAqL1xuICBjYWNoZV9jcmVhdGlvbl9pbnB1dF90b2tlbnM6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5wdXQgdG9rZW5zIHJlYWQgZnJvbSB0aGUgY2FjaGUuXG4gICAqL1xuICBjYWNoZV9yZWFkX2lucHV0X3Rva2VuczogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBpbnB1dCB0b2tlbnMgd2hpY2ggd2VyZSB1c2VkLlxuICAgKi9cbiAgaW5wdXRfdG9rZW5zOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyB3aGljaCB3ZXJlIHVzZWQuXG4gICAqL1xuICBvdXRwdXRfdG9rZW5zOiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXMgPSBNZXNzYWdlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIHwgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZztcblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlIGJlZm9yZSBzdG9wcGluZy5cbiAgICpcbiAgICogTm90ZSB0aGF0IG91ciBtb2RlbHMgbWF5IHN0b3AgX2JlZm9yZV8gcmVhY2hpbmcgdGhpcyBtYXhpbXVtLiBUaGlzIHBhcmFtZXRlclxuICAgKiBvbmx5IHNwZWNpZmllcyB0aGUgYWJzb2x1dGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlLlxuICAgKlxuICAgKiBEaWZmZXJlbnQgbW9kZWxzIGhhdmUgZGlmZmVyZW50IG1heGltdW0gdmFsdWVzIGZvciB0aGlzIHBhcmFtZXRlci4gU2VlXG4gICAqIFttb2RlbHNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvbW9kZWxzLW92ZXJ2aWV3KSBmb3IgZGV0YWlscy5cbiAgICovXG4gIG1heF90b2tlbnM6IG51bWJlcjtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogSW5wdXQgbWVzc2FnZXMuXG4gICAqXG4gICAqIE91ciBtb2RlbHMgYXJlIHRyYWluZWQgdG8gb3BlcmF0ZSBvbiBhbHRlcm5hdGluZyBgdXNlcmAgYW5kIGBhc3Npc3RhbnRgXG4gICAqIGNvbnZlcnNhdGlvbmFsIHR1cm5zLiBXaGVuIGNyZWF0aW5nIGEgbmV3IGBNZXNzYWdlYCwgeW91IHNwZWNpZnkgdGhlIHByaW9yXG4gICAqIGNvbnZlcnNhdGlvbmFsIHR1cm5zIHdpdGggdGhlIGBtZXNzYWdlc2AgcGFyYW1ldGVyLCBhbmQgdGhlIG1vZGVsIHRoZW4gZ2VuZXJhdGVzXG4gICAqIHRoZSBuZXh0IGBNZXNzYWdlYCBpbiB0aGUgY29udmVyc2F0aW9uLiBDb25zZWN1dGl2ZSBgdXNlcmAgb3IgYGFzc2lzdGFudGAgdHVybnNcbiAgICogaW4geW91ciByZXF1ZXN0IHdpbGwgYmUgY29tYmluZWQgaW50byBhIHNpbmdsZSB0dXJuLlxuICAgKlxuICAgKiBFYWNoIGlucHV0IG1lc3NhZ2UgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhIGByb2xlYCBhbmQgYGNvbnRlbnRgLiBZb3UgY2FuXG4gICAqIHNwZWNpZnkgYSBzaW5nbGUgYHVzZXJgLXJvbGUgbWVzc2FnZSwgb3IgeW91IGNhbiBpbmNsdWRlIG11bHRpcGxlIGB1c2VyYCBhbmRcbiAgICogYGFzc2lzdGFudGAgbWVzc2FnZXMuXG4gICAqXG4gICAqIElmIHRoZSBmaW5hbCBtZXNzYWdlIHVzZXMgdGhlIGBhc3Npc3RhbnRgIHJvbGUsIHRoZSByZXNwb25zZSBjb250ZW50IHdpbGxcbiAgICogY29udGludWUgaW1tZWRpYXRlbHkgZnJvbSB0aGUgY29udGVudCBpbiB0aGF0IG1lc3NhZ2UuIFRoaXMgY2FuIGJlIHVzZWQgdG9cbiAgICogY29uc3RyYWluIHBhcnQgb2YgdGhlIG1vZGVsJ3MgcmVzcG9uc2UuXG4gICAqXG4gICAqIEV4YW1wbGUgd2l0aCBhIHNpbmdsZSBgdXNlcmAgbWVzc2FnZTpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbeyBcInJvbGVcIjogXCJ1c2VyXCIsIFwiY29udGVudFwiOiBcIkhlbGxvLCBDbGF1ZGVcIiB9XVxuICAgKiBgYGBcbiAgICpcbiAgICogRXhhbXBsZSB3aXRoIG11bHRpcGxlIGNvbnZlcnNhdGlvbmFsIHR1cm5zOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiSGVsbG8gdGhlcmUuXCIgfSxcbiAgICogICB7IFwicm9sZVwiOiBcImFzc2lzdGFudFwiLCBcImNvbnRlbnRcIjogXCJIaSwgSSdtIENsYXVkZS4gSG93IGNhbiBJIGhlbHAgeW91P1wiIH0sXG4gICAqICAgeyBcInJvbGVcIjogXCJ1c2VyXCIsIFwiY29udGVudFwiOiBcIkNhbiB5b3UgZXhwbGFpbiBMTE1zIGluIHBsYWluIEVuZ2xpc2g/XCIgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGFtcGxlIHdpdGggYSBwYXJ0aWFsbHktZmlsbGVkIHJlc3BvbnNlIGZyb20gQ2xhdWRlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBcInJvbGVcIjogXCJ1c2VyXCIsXG4gICAqICAgICBcImNvbnRlbnRcIjogXCJXaGF0J3MgdGhlIEdyZWVrIG5hbWUgZm9yIFN1bj8gKEEpIFNvbCAoQikgSGVsaW9zIChDKSBTdW5cIlxuICAgKiAgIH0sXG4gICAqICAgeyBcInJvbGVcIjogXCJhc3Npc3RhbnRcIiwgXCJjb250ZW50XCI6IFwiVGhlIGJlc3QgYW5zd2VyIGlzIChcIiB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIEVhY2ggaW5wdXQgbWVzc2FnZSBgY29udGVudGAgbWF5IGJlIGVpdGhlciBhIHNpbmdsZSBgc3RyaW5nYCBvciBhbiBhcnJheSBvZlxuICAgKiBjb250ZW50IGJsb2Nrcywgd2hlcmUgZWFjaCBibG9jayBoYXMgYSBzcGVjaWZpYyBgdHlwZWAuIFVzaW5nIGEgYHN0cmluZ2AgZm9yXG4gICAqIGBjb250ZW50YCBpcyBzaG9ydGhhbmQgZm9yIGFuIGFycmF5IG9mIG9uZSBjb250ZW50IGJsb2NrIG9mIHR5cGUgYFwidGV4dFwiYC4gVGhlXG4gICAqIGZvbGxvd2luZyBpbnB1dCBtZXNzYWdlcyBhcmUgZXF1aXZhbGVudDpcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogeyBcInJvbGVcIjogXCJ1c2VyXCIsIFwiY29udGVudFwiOiBbeyBcInR5cGVcIjogXCJ0ZXh0XCIsIFwidGV4dFwiOiBcIkhlbGxvLCBDbGF1ZGVcIiB9XSB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBTdGFydGluZyB3aXRoIENsYXVkZSAzIG1vZGVscywgeW91IGNhbiBhbHNvIHNlbmQgaW1hZ2UgY29udGVudCBibG9ja3M6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICoge1xuICAgKiAgIFwicm9sZVwiOiBcInVzZXJcIixcbiAgICogICBcImNvbnRlbnRcIjogW1xuICAgKiAgICAge1xuICAgKiAgICAgICBcInR5cGVcIjogXCJpbWFnZVwiLFxuICAgKiAgICAgICBcInNvdXJjZVwiOiB7XG4gICAqICAgICAgICAgXCJ0eXBlXCI6IFwiYmFzZTY0XCIsXG4gICAqICAgICAgICAgXCJtZWRpYV90eXBlXCI6IFwiaW1hZ2UvanBlZ1wiLFxuICAgKiAgICAgICAgIFwiZGF0YVwiOiBcIi85ai80QUFRU2taSlJnLi4uXCJcbiAgICogICAgICAgfVxuICAgKiAgICAgfSxcbiAgICogICAgIHsgXCJ0eXBlXCI6IFwidGV4dFwiLCBcInRleHRcIjogXCJXaGF0IGlzIGluIHRoaXMgaW1hZ2U/XCIgfVxuICAgKiAgIF1cbiAgICogfVxuICAgKiBgYGBcbiAgICpcbiAgICogV2UgY3VycmVudGx5IHN1cHBvcnQgdGhlIGBiYXNlNjRgIHNvdXJjZSB0eXBlIGZvciBpbWFnZXMsIGFuZCB0aGUgYGltYWdlL2pwZWdgLFxuICAgKiBgaW1hZ2UvcG5nYCwgYGltYWdlL2dpZmAsIGFuZCBgaW1hZ2Uvd2VicGAgbWVkaWEgdHlwZXMuXG4gICAqXG4gICAqIFNlZSBbZXhhbXBsZXNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9tZXNzYWdlcy1leGFtcGxlcyN2aXNpb24pIGZvclxuICAgKiBtb3JlIGlucHV0IGV4YW1wbGVzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IHdhbnQgdG8gaW5jbHVkZSBhXG4gICAqIFtzeXN0ZW0gcHJvbXB0XShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3N5c3RlbS1wcm9tcHRzKSwgeW91IGNhbiB1c2VcbiAgICogdGhlIHRvcC1sZXZlbCBgc3lzdGVtYCBwYXJhbWV0ZXIgXHUyMDE0IHRoZXJlIGlzIG5vIGBcInN5c3RlbVwiYCByb2xlIGZvciBpbnB1dFxuICAgKiBtZXNzYWdlcyBpbiB0aGUgTWVzc2FnZXMgQVBJLlxuICAgKi9cbiAgbWVzc2FnZXM6IEFycmF5PEJldGFNZXNzYWdlUGFyYW0+O1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBUaGUgbW9kZWwgdGhhdCB3aWxsIGNvbXBsZXRlIHlvdXIgcHJvbXB0LlxcblxcblNlZVxuICAgKiBbbW9kZWxzXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL21vZGVscy1vdmVydmlldykgZm9yIGFkZGl0aW9uYWxcbiAgICogZGV0YWlscyBhbmQgb3B0aW9ucy5cbiAgICovXG4gIG1vZGVsOiBNZXNzYWdlc0FQSS5Nb2RlbDtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogQW4gb2JqZWN0IGRlc2NyaWJpbmcgbWV0YWRhdGEgYWJvdXQgdGhlIHJlcXVlc3QuXG4gICAqL1xuICBtZXRhZGF0YT86IEJldGFNZXRhZGF0YTtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogQ3VzdG9tIHRleHQgc2VxdWVuY2VzIHRoYXQgd2lsbCBjYXVzZSB0aGUgbW9kZWwgdG8gc3RvcCBnZW5lcmF0aW5nLlxuICAgKlxuICAgKiBPdXIgbW9kZWxzIHdpbGwgbm9ybWFsbHkgc3RvcCB3aGVuIHRoZXkgaGF2ZSBuYXR1cmFsbHkgY29tcGxldGVkIHRoZWlyIHR1cm4sXG4gICAqIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgcmVzcG9uc2UgYHN0b3BfcmVhc29uYCBvZiBgXCJlbmRfdHVyblwiYC5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdGhlIG1vZGVsIHRvIHN0b3AgZ2VuZXJhdGluZyB3aGVuIGl0IGVuY291bnRlcnMgY3VzdG9tIHN0cmluZ3Mgb2ZcbiAgICogdGV4dCwgeW91IGNhbiB1c2UgdGhlIGBzdG9wX3NlcXVlbmNlc2AgcGFyYW1ldGVyLiBJZiB0aGUgbW9kZWwgZW5jb3VudGVycyBvbmUgb2ZcbiAgICogdGhlIGN1c3RvbSBzZXF1ZW5jZXMsIHRoZSByZXNwb25zZSBgc3RvcF9yZWFzb25gIHZhbHVlIHdpbGwgYmUgYFwic3RvcF9zZXF1ZW5jZVwiYFxuICAgKiBhbmQgdGhlIHJlc3BvbnNlIGBzdG9wX3NlcXVlbmNlYCB2YWx1ZSB3aWxsIGNvbnRhaW4gdGhlIG1hdGNoZWQgc3RvcCBzZXF1ZW5jZS5cbiAgICovXG4gIHN0b3Bfc2VxdWVuY2VzPzogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogV2hldGhlciB0byBpbmNyZW1lbnRhbGx5IHN0cmVhbSB0aGUgcmVzcG9uc2UgdXNpbmcgc2VydmVyLXNlbnRcbiAgICogZXZlbnRzLlxuICAgKlxuICAgKiBTZWUgW3N0cmVhbWluZ10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL21lc3NhZ2VzLXN0cmVhbWluZykgZm9yXG4gICAqIGRldGFpbHMuXG4gICAqL1xuICBzdHJlYW0/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBTeXN0ZW0gcHJvbXB0LlxuICAgKlxuICAgKiBBIHN5c3RlbSBwcm9tcHQgaXMgYSB3YXkgb2YgcHJvdmlkaW5nIGNvbnRleHQgYW5kIGluc3RydWN0aW9ucyB0byBDbGF1ZGUsIHN1Y2hcbiAgICogYXMgc3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgZ29hbCBvciByb2xlLiBTZWUgb3VyXG4gICAqIFtndWlkZSB0byBzeXN0ZW0gcHJvbXB0c10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9zeXN0ZW0tcHJvbXB0cykuXG4gICAqL1xuICBzeXN0ZW0/OiBzdHJpbmcgfCBBcnJheTxCZXRhVGV4dEJsb2NrUGFyYW0+O1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBBbW91bnQgb2YgcmFuZG9tbmVzcyBpbmplY3RlZCBpbnRvIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYDEuMGAuIFJhbmdlcyBmcm9tIGAwLjBgIHRvIGAxLjBgLiBVc2UgYHRlbXBlcmF0dXJlYCBjbG9zZXIgdG8gYDAuMGBcbiAgICogZm9yIGFuYWx5dGljYWwgLyBtdWx0aXBsZSBjaG9pY2UsIGFuZCBjbG9zZXIgdG8gYDEuMGAgZm9yIGNyZWF0aXZlIGFuZFxuICAgKiBnZW5lcmF0aXZlIHRhc2tzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgZXZlbiB3aXRoIGB0ZW1wZXJhdHVyZWAgb2YgYDAuMGAsIHRoZSByZXN1bHRzIHdpbGwgbm90IGJlIGZ1bGx5XG4gICAqIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogSG93IHRoZSBtb2RlbCBzaG91bGQgdXNlIHRoZSBwcm92aWRlZCB0b29scy4gVGhlIG1vZGVsIGNhbiB1c2UgYVxuICAgKiBzcGVjaWZpYyB0b29sLCBhbnkgYXZhaWxhYmxlIHRvb2wsIG9yIGRlY2lkZSBieSBpdHNlbGYuXG4gICAqL1xuICB0b29sX2Nob2ljZT86IEJldGFUb29sQ2hvaWNlO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBEZWZpbml0aW9ucyBvZiB0b29scyB0aGF0IHRoZSBtb2RlbCBtYXkgdXNlLlxuICAgKlxuICAgKiBJZiB5b3UgaW5jbHVkZSBgdG9vbHNgIGluIHlvdXIgQVBJIHJlcXVlc3QsIHRoZSBtb2RlbCBtYXkgcmV0dXJuIGB0b29sX3VzZWBcbiAgICogY29udGVudCBibG9ja3MgdGhhdCByZXByZXNlbnQgdGhlIG1vZGVsJ3MgdXNlIG9mIHRob3NlIHRvb2xzLiBZb3UgY2FuIHRoZW4gcnVuXG4gICAqIHRob3NlIHRvb2xzIHVzaW5nIHRoZSB0b29sIGlucHV0IGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgYW5kIHRoZW4gb3B0aW9uYWxseVxuICAgKiByZXR1cm4gcmVzdWx0cyBiYWNrIHRvIHRoZSBtb2RlbCB1c2luZyBgdG9vbF9yZXN1bHRgIGNvbnRlbnQgYmxvY2tzLlxuICAgKlxuICAgKiBFYWNoIHRvb2wgZGVmaW5pdGlvbiBpbmNsdWRlczpcbiAgICpcbiAgICogLSBgbmFtZWA6IE5hbWUgb2YgdGhlIHRvb2wuXG4gICAqIC0gYGRlc2NyaXB0aW9uYDogT3B0aW9uYWwsIGJ1dCBzdHJvbmdseS1yZWNvbW1lbmRlZCBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbC5cbiAgICogLSBgaW5wdXRfc2NoZW1hYDogW0pTT04gc2NoZW1hXShodHRwczovL2pzb24tc2NoZW1hLm9yZy8pIGZvciB0aGUgdG9vbCBgaW5wdXRgXG4gICAqICAgc2hhcGUgdGhhdCB0aGUgbW9kZWwgd2lsbCBwcm9kdWNlIGluIGB0b29sX3VzZWAgb3V0cHV0IGNvbnRlbnQgYmxvY2tzLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgeW91IGRlZmluZWQgYHRvb2xzYCBhczpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbXG4gICAqICAge1xuICAgKiAgICAgXCJuYW1lXCI6IFwiZ2V0X3N0b2NrX3ByaWNlXCIsXG4gICAqICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2V0IHRoZSBjdXJyZW50IHN0b2NrIHByaWNlIGZvciBhIGdpdmVuIHRpY2tlciBzeW1ib2wuXCIsXG4gICAqICAgICBcImlucHV0X3NjaGVtYVwiOiB7XG4gICAqICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgKiAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgKiAgICAgICAgIFwidGlja2VyXCI6IHtcbiAgICogICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgKiAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBzdG9jayB0aWNrZXIgc3ltYm9sLCBlLmcuIEFBUEwgZm9yIEFwcGxlIEluYy5cIlxuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfSxcbiAgICogICAgICAgXCJyZXF1aXJlZFwiOiBbXCJ0aWNrZXJcIl1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIEFuZCB0aGVuIGFza2VkIHRoZSBtb2RlbCBcIldoYXQncyB0aGUgUyZQIDUwMCBhdCB0b2RheT9cIiwgdGhlIG1vZGVsIG1pZ2h0IHByb2R1Y2VcbiAgICogYHRvb2xfdXNlYCBjb250ZW50IGJsb2NrcyBpbiB0aGUgcmVzcG9uc2UgbGlrZSB0aGlzOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBcInR5cGVcIjogXCJ0b29sX3VzZVwiLFxuICAgKiAgICAgXCJpZFwiOiBcInRvb2x1XzAxRDdGTHJmaDRHWXE3eVQxVUxGZXlNVlwiLFxuICAgKiAgICAgXCJuYW1lXCI6IFwiZ2V0X3N0b2NrX3ByaWNlXCIsXG4gICAqICAgICBcImlucHV0XCI6IHsgXCJ0aWNrZXJcIjogXCJeR1NQQ1wiIH1cbiAgICogICB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIFlvdSBtaWdodCB0aGVuIHJ1biB5b3VyIGBnZXRfc3RvY2tfcHJpY2VgIHRvb2wgd2l0aCBge1widGlja2VyXCI6IFwiXkdTUENcIn1gIGFzIGFuXG4gICAqIGlucHV0LCBhbmQgcmV0dXJuIHRoZSBmb2xsb3dpbmcgYmFjayB0byB0aGUgbW9kZWwgaW4gYSBzdWJzZXF1ZW50IGB1c2VyYFxuICAgKiBtZXNzYWdlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBcInR5cGVcIjogXCJ0b29sX3Jlc3VsdFwiLFxuICAgKiAgICAgXCJ0b29sX3VzZV9pZFwiOiBcInRvb2x1XzAxRDdGTHJmaDRHWXE3eVQxVUxGZXlNVlwiLFxuICAgKiAgICAgXCJjb250ZW50XCI6IFwiMjU5Ljc1IFVTRFwiXG4gICAqICAgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKlxuICAgKiBUb29scyBjYW4gYmUgdXNlZCBmb3Igd29ya2Zsb3dzIHRoYXQgaW5jbHVkZSBydW5uaW5nIGNsaWVudC1zaWRlIHRvb2xzIGFuZFxuICAgKiBmdW5jdGlvbnMsIG9yIG1vcmUgZ2VuZXJhbGx5IHdoZW5ldmVyIHlvdSB3YW50IHRoZSBtb2RlbCB0byBwcm9kdWNlIGEgcGFydGljdWxhclxuICAgKiBKU09OIHN0cnVjdHVyZSBvZiBvdXRwdXQuXG4gICAqXG4gICAqIFNlZSBvdXIgW2d1aWRlXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3Rvb2wtdXNlKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxCZXRhVG9vbFVuaW9uPjtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogT25seSBzYW1wbGUgZnJvbSB0aGUgdG9wIEsgb3B0aW9ucyBmb3IgZWFjaCBzdWJzZXF1ZW50IHRva2VuLlxuICAgKlxuICAgKiBVc2VkIHRvIHJlbW92ZSBcImxvbmcgdGFpbFwiIGxvdyBwcm9iYWJpbGl0eSByZXNwb25zZXMuXG4gICAqIFtMZWFybiBtb3JlIHRlY2huaWNhbCBkZXRhaWxzIGhlcmVdKGh0dHBzOi8vdG93YXJkc2RhdGFzY2llbmNlLmNvbS9ob3ctdG8tc2FtcGxlLWZyb20tbGFuZ3VhZ2UtbW9kZWxzLTY4MmJjZWI5NzI3NykuXG4gICAqXG4gICAqIFJlY29tbWVuZGVkIGZvciBhZHZhbmNlZCB1c2UgY2FzZXMgb25seS4gWW91IHVzdWFsbHkgb25seSBuZWVkIHRvIHVzZVxuICAgKiBgdGVtcGVyYXR1cmVgLlxuICAgKi9cbiAgdG9wX2s/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFVzZSBudWNsZXVzIHNhbXBsaW5nLlxuICAgKlxuICAgKiBJbiBudWNsZXVzIHNhbXBsaW5nLCB3ZSBjb21wdXRlIHRoZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiBvdmVyIGFsbCB0aGUgb3B0aW9uc1xuICAgKiBmb3IgZWFjaCBzdWJzZXF1ZW50IHRva2VuIGluIGRlY3JlYXNpbmcgcHJvYmFiaWxpdHkgb3JkZXIgYW5kIGN1dCBpdCBvZmYgb25jZSBpdFxuICAgKiByZWFjaGVzIGEgcGFydGljdWxhciBwcm9iYWJpbGl0eSBzcGVjaWZpZWQgYnkgYHRvcF9wYC4gWW91IHNob3VsZCBlaXRoZXIgYWx0ZXJcbiAgICogYHRlbXBlcmF0dXJlYCBvciBgdG9wX3BgLCBidXQgbm90IGJvdGguXG4gICAqXG4gICAqIFJlY29tbWVuZGVkIGZvciBhZHZhbmNlZCB1c2UgY2FzZXMgb25seS4gWW91IHVzdWFsbHkgb25seSBuZWVkIHRvIHVzZVxuICAgKiBgdGVtcGVyYXR1cmVgLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEhlYWRlciBwYXJhbTogT3B0aW9uYWwgaGVhZGVyIHRvIHNwZWNpZnkgdGhlIGJldGEgdmVyc2lvbihzKSB5b3Ugd2FudCB0byB1c2UuXG4gICAqL1xuICBiZXRhcz86IEFycmF5PEJldGFBUEkuQW50aHJvcGljQmV0YT47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVzc2FnZUNyZWF0ZVBhcmFtcyB7XG4gIGV4cG9ydCB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgPSBNZXNzYWdlc01lc3NhZ2VzQVBJLk1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG4gIGV4cG9ydCB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgPSBNZXNzYWdlc01lc3NhZ2VzQVBJLk1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBleHRlbmRzIE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFdoZXRoZXIgdG8gaW5jcmVtZW50YWxseSBzdHJlYW0gdGhlIHJlc3BvbnNlIHVzaW5nIHNlcnZlci1zZW50XG4gICAqIGV2ZW50cy5cbiAgICpcbiAgICogU2VlIFtzdHJlYW1pbmddKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9tZXNzYWdlcy1zdHJlYW1pbmcpIGZvclxuICAgKiBkZXRhaWxzLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyBleHRlbmRzIE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFdoZXRoZXIgdG8gaW5jcmVtZW50YWxseSBzdHJlYW0gdGhlIHJlc3BvbnNlIHVzaW5nIHNlcnZlci1zZW50XG4gICAqIGV2ZW50cy5cbiAgICpcbiAgICogU2VlIFtzdHJlYW1pbmddKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9tZXNzYWdlcy1zdHJlYW1pbmcpIGZvclxuICAgKiBkZXRhaWxzLlxuICAgKi9cbiAgc3RyZWFtOiB0cnVlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyB7XG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBJbnB1dCBtZXNzYWdlcy5cbiAgICpcbiAgICogT3VyIG1vZGVscyBhcmUgdHJhaW5lZCB0byBvcGVyYXRlIG9uIGFsdGVybmF0aW5nIGB1c2VyYCBhbmQgYGFzc2lzdGFudGBcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMuIFdoZW4gY3JlYXRpbmcgYSBuZXcgYE1lc3NhZ2VgLCB5b3Ugc3BlY2lmeSB0aGUgcHJpb3JcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMgd2l0aCB0aGUgYG1lc3NhZ2VzYCBwYXJhbWV0ZXIsIGFuZCB0aGUgbW9kZWwgdGhlbiBnZW5lcmF0ZXNcbiAgICogdGhlIG5leHQgYE1lc3NhZ2VgIGluIHRoZSBjb252ZXJzYXRpb24uIENvbnNlY3V0aXZlIGB1c2VyYCBvciBgYXNzaXN0YW50YCB0dXJuc1xuICAgKiBpbiB5b3VyIHJlcXVlc3Qgd2lsbCBiZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIHR1cm4uXG4gICAqXG4gICAqIEVhY2ggaW5wdXQgbWVzc2FnZSBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgYHJvbGVgIGFuZCBgY29udGVudGAuIFlvdSBjYW5cbiAgICogc3BlY2lmeSBhIHNpbmdsZSBgdXNlcmAtcm9sZSBtZXNzYWdlLCBvciB5b3UgY2FuIGluY2x1ZGUgbXVsdGlwbGUgYHVzZXJgIGFuZFxuICAgKiBgYXNzaXN0YW50YCBtZXNzYWdlcy5cbiAgICpcbiAgICogSWYgdGhlIGZpbmFsIG1lc3NhZ2UgdXNlcyB0aGUgYGFzc2lzdGFudGAgcm9sZSwgdGhlIHJlc3BvbnNlIGNvbnRlbnQgd2lsbFxuICAgKiBjb250aW51ZSBpbW1lZGlhdGVseSBmcm9tIHRoZSBjb250ZW50IGluIHRoYXQgbWVzc2FnZS4gVGhpcyBjYW4gYmUgdXNlZCB0b1xuICAgKiBjb25zdHJhaW4gcGFydCBvZiB0aGUgbW9kZWwncyByZXNwb25zZS5cbiAgICpcbiAgICogRXhhbXBsZSB3aXRoIGEgc2luZ2xlIGB1c2VyYCBtZXNzYWdlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFt7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGFtcGxlIHdpdGggbXVsdGlwbGUgY29udmVyc2F0aW9uYWwgdHVybnM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbyB0aGVyZS5cIiB9LFxuICAgKiAgIHsgXCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBcIkhpLCBJJ20gQ2xhdWRlLiBIb3cgY2FuIEkgaGVscCB5b3U/XCIgfSxcbiAgICogICB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiQ2FuIHlvdSBleHBsYWluIExMTXMgaW4gcGxhaW4gRW5nbGlzaD9cIiB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIEV4YW1wbGUgd2l0aCBhIHBhcnRpYWxseS1maWxsZWQgcmVzcG9uc2UgZnJvbSBDbGF1ZGU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwicm9sZVwiOiBcInVzZXJcIixcbiAgICogICAgIFwiY29udGVudFwiOiBcIldoYXQncyB0aGUgR3JlZWsgbmFtZSBmb3IgU3VuPyAoQSkgU29sIChCKSBIZWxpb3MgKEMpIFN1blwiXG4gICAqICAgfSxcbiAgICogICB7IFwicm9sZVwiOiBcImFzc2lzdGFudFwiLCBcImNvbnRlbnRcIjogXCJUaGUgYmVzdCBhbnN3ZXIgaXMgKFwiIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogRWFjaCBpbnB1dCBtZXNzYWdlIGBjb250ZW50YCBtYXkgYmUgZWl0aGVyIGEgc2luZ2xlIGBzdHJpbmdgIG9yIGFuIGFycmF5IG9mXG4gICAqIGNvbnRlbnQgYmxvY2tzLCB3aGVyZSBlYWNoIGJsb2NrIGhhcyBhIHNwZWNpZmljIGB0eXBlYC4gVXNpbmcgYSBgc3RyaW5nYCBmb3JcbiAgICogYGNvbnRlbnRgIGlzIHNob3J0aGFuZCBmb3IgYW4gYXJyYXkgb2Ygb25lIGNvbnRlbnQgYmxvY2sgb2YgdHlwZSBgXCJ0ZXh0XCJgLiBUaGVcbiAgICogZm9sbG93aW5nIGlucHV0IG1lc3NhZ2VzIGFyZSBlcXVpdmFsZW50OlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbywgQ2xhdWRlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFt7IFwidHlwZVwiOiBcInRleHRcIiwgXCJ0ZXh0XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFN0YXJ0aW5nIHdpdGggQ2xhdWRlIDMgbW9kZWxzLCB5b3UgY2FuIGFsc28gc2VuZCBpbWFnZSBjb250ZW50IGJsb2NrczpcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7XG4gICAqICAgXCJyb2xlXCI6IFwidXNlclwiLFxuICAgKiAgIFwiY29udGVudFwiOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAqICAgICAgIFwic291cmNlXCI6IHtcbiAgICogICAgICAgICBcInR5cGVcIjogXCJiYXNlNjRcIixcbiAgICogICAgICAgICBcIm1lZGlhX3R5cGVcIjogXCJpbWFnZS9qcGVnXCIsXG4gICAqICAgICAgICAgXCJkYXRhXCI6IFwiLzlqLzRBQVFTa1pKUmcuLi5cIlxuICAgKiAgICAgICB9XG4gICAqICAgICB9LFxuICAgKiAgICAgeyBcInR5cGVcIjogXCJ0ZXh0XCIsIFwidGV4dFwiOiBcIldoYXQgaXMgaW4gdGhpcyBpbWFnZT9cIiB9XG4gICAqICAgXVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBXZSBjdXJyZW50bHkgc3VwcG9ydCB0aGUgYGJhc2U2NGAgc291cmNlIHR5cGUgZm9yIGltYWdlcywgYW5kIHRoZSBgaW1hZ2UvanBlZ2AsXG4gICAqIGBpbWFnZS9wbmdgLCBgaW1hZ2UvZ2lmYCwgYW5kIGBpbWFnZS93ZWJwYCBtZWRpYSB0eXBlcy5cbiAgICpcbiAgICogU2VlIFtleGFtcGxlc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL21lc3NhZ2VzLWV4YW1wbGVzI3Zpc2lvbikgZm9yXG4gICAqIG1vcmUgaW5wdXQgZXhhbXBsZXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3Ugd2FudCB0byBpbmNsdWRlIGFcbiAgICogW3N5c3RlbSBwcm9tcHRdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3Mvc3lzdGVtLXByb21wdHMpLCB5b3UgY2FuIHVzZVxuICAgKiB0aGUgdG9wLWxldmVsIGBzeXN0ZW1gIHBhcmFtZXRlciBcdTIwMTQgdGhlcmUgaXMgbm8gYFwic3lzdGVtXCJgIHJvbGUgZm9yIGlucHV0XG4gICAqIG1lc3NhZ2VzIGluIHRoZSBNZXNzYWdlcyBBUEkuXG4gICAqL1xuICBtZXNzYWdlczogQXJyYXk8QmV0YU1lc3NhZ2VQYXJhbT47XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFRoZSBtb2RlbCB0aGF0IHdpbGwgY29tcGxldGUgeW91ciBwcm9tcHQuXFxuXFxuU2VlXG4gICAqIFttb2RlbHNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvbW9kZWxzLW92ZXJ2aWV3KSBmb3IgYWRkaXRpb25hbFxuICAgKiBkZXRhaWxzIGFuZCBvcHRpb25zLlxuICAgKi9cbiAgbW9kZWw6IE1lc3NhZ2VzQVBJLk1vZGVsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBTeXN0ZW0gcHJvbXB0LlxuICAgKlxuICAgKiBBIHN5c3RlbSBwcm9tcHQgaXMgYSB3YXkgb2YgcHJvdmlkaW5nIGNvbnRleHQgYW5kIGluc3RydWN0aW9ucyB0byBDbGF1ZGUsIHN1Y2hcbiAgICogYXMgc3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgZ29hbCBvciByb2xlLiBTZWUgb3VyXG4gICAqIFtndWlkZSB0byBzeXN0ZW0gcHJvbXB0c10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9zeXN0ZW0tcHJvbXB0cykuXG4gICAqL1xuICBzeXN0ZW0/OiBzdHJpbmcgfCBBcnJheTxCZXRhVGV4dEJsb2NrUGFyYW0+O1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBIb3cgdGhlIG1vZGVsIHNob3VsZCB1c2UgdGhlIHByb3ZpZGVkIHRvb2xzLiBUaGUgbW9kZWwgY2FuIHVzZSBhXG4gICAqIHNwZWNpZmljIHRvb2wsIGFueSBhdmFpbGFibGUgdG9vbCwgb3IgZGVjaWRlIGJ5IGl0c2VsZi5cbiAgICovXG4gIHRvb2xfY2hvaWNlPzogQmV0YVRvb2xDaG9pY2U7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IERlZmluaXRpb25zIG9mIHRvb2xzIHRoYXQgdGhlIG1vZGVsIG1heSB1c2UuXG4gICAqXG4gICAqIElmIHlvdSBpbmNsdWRlIGB0b29sc2AgaW4geW91ciBBUEkgcmVxdWVzdCwgdGhlIG1vZGVsIG1heSByZXR1cm4gYHRvb2xfdXNlYFxuICAgKiBjb250ZW50IGJsb2NrcyB0aGF0IHJlcHJlc2VudCB0aGUgbW9kZWwncyB1c2Ugb2YgdGhvc2UgdG9vbHMuIFlvdSBjYW4gdGhlbiBydW5cbiAgICogdGhvc2UgdG9vbHMgdXNpbmcgdGhlIHRvb2wgaW5wdXQgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBhbmQgdGhlbiBvcHRpb25hbGx5XG4gICAqIHJldHVybiByZXN1bHRzIGJhY2sgdG8gdGhlIG1vZGVsIHVzaW5nIGB0b29sX3Jlc3VsdGAgY29udGVudCBibG9ja3MuXG4gICAqXG4gICAqIEVhY2ggdG9vbCBkZWZpbml0aW9uIGluY2x1ZGVzOlxuICAgKlxuICAgKiAtIGBuYW1lYDogTmFtZSBvZiB0aGUgdG9vbC5cbiAgICogLSBgZGVzY3JpcHRpb25gOiBPcHRpb25hbCwgYnV0IHN0cm9uZ2x5LXJlY29tbWVuZGVkIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sLlxuICAgKiAtIGBpbnB1dF9zY2hlbWFgOiBbSlNPTiBzY2hlbWFdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykgZm9yIHRoZSB0b29sIGBpbnB1dGBcbiAgICogICBzaGFwZSB0aGF0IHRoZSBtb2RlbCB3aWxsIHByb2R1Y2UgaW4gYHRvb2xfdXNlYCBvdXRwdXQgY29udGVudCBibG9ja3MuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiB5b3UgZGVmaW5lZCBgdG9vbHNgIGFzOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBcIm5hbWVcIjogXCJnZXRfc3RvY2tfcHJpY2VcIixcbiAgICogICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZXQgdGhlIGN1cnJlbnQgc3RvY2sgcHJpY2UgZm9yIGEgZ2l2ZW4gdGlja2VyIHN5bWJvbC5cIixcbiAgICogICAgIFwiaW5wdXRfc2NoZW1hXCI6IHtcbiAgICogICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAqICAgICAgICAgXCJ0aWNrZXJcIjoge1xuICAgKiAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAqICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHN0b2NrIHRpY2tlciBzeW1ib2wsIGUuZy4gQUFQTCBmb3IgQXBwbGUgSW5jLlwiXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9LFxuICAgKiAgICAgICBcInJlcXVpcmVkXCI6IFtcInRpY2tlclwiXVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogQW5kIHRoZW4gYXNrZWQgdGhlIG1vZGVsIFwiV2hhdCdzIHRoZSBTJlAgNTAwIGF0IHRvZGF5P1wiLCB0aGUgbW9kZWwgbWlnaHQgcHJvZHVjZVxuICAgKiBgdG9vbF91c2VgIGNvbnRlbnQgYmxvY2tzIGluIHRoZSByZXNwb25zZSBsaWtlIHRoaXM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwidHlwZVwiOiBcInRvb2xfdXNlXCIsXG4gICAqICAgICBcImlkXCI6IFwidG9vbHVfMDFEN0ZMcmZoNEdZcTd5VDFVTEZleU1WXCIsXG4gICAqICAgICBcIm5hbWVcIjogXCJnZXRfc3RvY2tfcHJpY2VcIixcbiAgICogICAgIFwiaW5wdXRcIjogeyBcInRpY2tlclwiOiBcIl5HU1BDXCIgfVxuICAgKiAgIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogWW91IG1pZ2h0IHRoZW4gcnVuIHlvdXIgYGdldF9zdG9ja19wcmljZWAgdG9vbCB3aXRoIGB7XCJ0aWNrZXJcIjogXCJeR1NQQ1wifWAgYXMgYW5cbiAgICogaW5wdXQsIGFuZCByZXR1cm4gdGhlIGZvbGxvd2luZyBiYWNrIHRvIHRoZSBtb2RlbCBpbiBhIHN1YnNlcXVlbnQgYHVzZXJgXG4gICAqIG1lc3NhZ2U6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwidHlwZVwiOiBcInRvb2xfcmVzdWx0XCIsXG4gICAqICAgICBcInRvb2xfdXNlX2lkXCI6IFwidG9vbHVfMDFEN0ZMcmZoNEdZcTd5VDFVTEZleU1WXCIsXG4gICAqICAgICBcImNvbnRlbnRcIjogXCIyNTkuNzUgVVNEXCJcbiAgICogICB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIFRvb2xzIGNhbiBiZSB1c2VkIGZvciB3b3JrZmxvd3MgdGhhdCBpbmNsdWRlIHJ1bm5pbmcgY2xpZW50LXNpZGUgdG9vbHMgYW5kXG4gICAqIGZ1bmN0aW9ucywgb3IgbW9yZSBnZW5lcmFsbHkgd2hlbmV2ZXIgeW91IHdhbnQgdGhlIG1vZGVsIHRvIHByb2R1Y2UgYSBwYXJ0aWN1bGFyXG4gICAqIEpTT04gc3RydWN0dXJlIG9mIG91dHB1dC5cbiAgICpcbiAgICogU2VlIG91ciBbZ3VpZGVdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvdG9vbC11c2UpIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICB0b29scz86IEFycmF5PEJldGFUb29sIHwgQmV0YVRvb2xDb21wdXRlclVzZTIwMjQxMDIyIHwgQmV0YVRvb2xCYXNoMjAyNDEwMjIgfCBCZXRhVG9vbFRleHRFZGl0b3IyMDI0MTAyMj47XG5cbiAgLyoqXG4gICAqIEhlYWRlciBwYXJhbTogT3B0aW9uYWwgaGVhZGVyIHRvIHNwZWNpZnkgdGhlIGJldGEgdmVyc2lvbihzKSB5b3Ugd2FudCB0byB1c2UuXG4gICAqL1xuICBiZXRhcz86IEFycmF5PEJldGFBUEkuQW50aHJvcGljQmV0YT47XG59XG5cbk1lc3NhZ2VzLkJhdGNoZXMgPSBCYXRjaGVzO1xuTWVzc2FnZXMuQmV0YU1lc3NhZ2VCYXRjaGVzUGFnZSA9IEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBNZXNzYWdlcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBCZXRhQmFzZTY0UERGQmxvY2sgYXMgQmV0YUJhc2U2NFBERkJsb2NrLFxuICAgIHR5cGUgQmV0YUJhc2U2NFBERlNvdXJjZSBhcyBCZXRhQmFzZTY0UERGU291cmNlLFxuICAgIHR5cGUgQmV0YUNhY2hlQ29udHJvbEVwaGVtZXJhbCBhcyBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsLFxuICAgIHR5cGUgQmV0YUNpdGF0aW9uQ2hhckxvY2F0aW9uIGFzIEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvbixcbiAgICB0eXBlIEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtIGFzIEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtLFxuICAgIHR5cGUgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb24gYXMgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb24sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtIGFzIEJldGFDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uUGFyYW0sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb24gYXMgQmV0YUNpdGF0aW9uUGFnZUxvY2F0aW9uLFxuICAgIHR5cGUgQmV0YUNpdGF0aW9uUGFnZUxvY2F0aW9uUGFyYW0gYXMgQmV0YUNpdGF0aW9uUGFnZUxvY2F0aW9uUGFyYW0sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25zQ29uZmlnUGFyYW0gYXMgQmV0YUNpdGF0aW9uc0NvbmZpZ1BhcmFtLFxuICAgIHR5cGUgQmV0YUNpdGF0aW9uc0RlbHRhIGFzIEJldGFDaXRhdGlvbnNEZWx0YSxcbiAgICB0eXBlIEJldGFDb250ZW50QmxvY2sgYXMgQmV0YUNvbnRlbnRCbG9jayxcbiAgICB0eXBlIEJldGFDb250ZW50QmxvY2tQYXJhbSBhcyBCZXRhQ29udGVudEJsb2NrUGFyYW0sXG4gICAgdHlwZSBCZXRhQ29udGVudEJsb2NrU291cmNlIGFzIEJldGFDb250ZW50QmxvY2tTb3VyY2UsXG4gICAgdHlwZSBCZXRhQ29udGVudEJsb2NrU291cmNlQ29udGVudCBhcyBCZXRhQ29udGVudEJsb2NrU291cmNlQ29udGVudCxcbiAgICB0eXBlIEJldGFJbWFnZUJsb2NrUGFyYW0gYXMgQmV0YUltYWdlQmxvY2tQYXJhbSxcbiAgICB0eXBlIEJldGFJbnB1dEpTT05EZWx0YSBhcyBCZXRhSW5wdXRKU09ORGVsdGEsXG4gICAgdHlwZSBCZXRhTWVzc2FnZSBhcyBCZXRhTWVzc2FnZSxcbiAgICB0eXBlIEJldGFNZXNzYWdlRGVsdGFVc2FnZSBhcyBCZXRhTWVzc2FnZURlbHRhVXNhZ2UsXG4gICAgdHlwZSBCZXRhTWVzc2FnZVBhcmFtIGFzIEJldGFNZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBCZXRhTWVzc2FnZVRva2Vuc0NvdW50IGFzIEJldGFNZXNzYWdlVG9rZW5zQ291bnQsXG4gICAgdHlwZSBCZXRhTWV0YWRhdGEgYXMgQmV0YU1ldGFkYXRhLFxuICAgIHR5cGUgQmV0YVBsYWluVGV4dFNvdXJjZSBhcyBCZXRhUGxhaW5UZXh0U291cmNlLFxuICAgIHR5cGUgQmV0YVJhd0NvbnRlbnRCbG9ja0RlbHRhRXZlbnQgYXMgQmV0YVJhd0NvbnRlbnRCbG9ja0RlbHRhRXZlbnQsXG4gICAgdHlwZSBCZXRhUmF3Q29udGVudEJsb2NrU3RhcnRFdmVudCBhcyBCZXRhUmF3Q29udGVudEJsb2NrU3RhcnRFdmVudCxcbiAgICB0eXBlIEJldGFSYXdDb250ZW50QmxvY2tTdG9wRXZlbnQgYXMgQmV0YVJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudCxcbiAgICB0eXBlIEJldGFSYXdNZXNzYWdlRGVsdGFFdmVudCBhcyBCZXRhUmF3TWVzc2FnZURlbHRhRXZlbnQsXG4gICAgdHlwZSBCZXRhUmF3TWVzc2FnZVN0YXJ0RXZlbnQgYXMgQmV0YVJhd01lc3NhZ2VTdGFydEV2ZW50LFxuICAgIHR5cGUgQmV0YVJhd01lc3NhZ2VTdG9wRXZlbnQgYXMgQmV0YVJhd01lc3NhZ2VTdG9wRXZlbnQsXG4gICAgdHlwZSBCZXRhUmF3TWVzc2FnZVN0cmVhbUV2ZW50IGFzIEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQsXG4gICAgdHlwZSBCZXRhVGV4dEJsb2NrIGFzIEJldGFUZXh0QmxvY2ssXG4gICAgdHlwZSBCZXRhVGV4dEJsb2NrUGFyYW0gYXMgQmV0YVRleHRCbG9ja1BhcmFtLFxuICAgIHR5cGUgQmV0YVRleHRDaXRhdGlvbiBhcyBCZXRhVGV4dENpdGF0aW9uLFxuICAgIHR5cGUgQmV0YVRleHRDaXRhdGlvblBhcmFtIGFzIEJldGFUZXh0Q2l0YXRpb25QYXJhbSxcbiAgICB0eXBlIEJldGFUZXh0RGVsdGEgYXMgQmV0YVRleHREZWx0YSxcbiAgICB0eXBlIEJldGFUb29sIGFzIEJldGFUb29sLFxuICAgIHR5cGUgQmV0YVRvb2xCYXNoMjAyNDEwMjIgYXMgQmV0YVRvb2xCYXNoMjAyNDEwMjIsXG4gICAgdHlwZSBCZXRhVG9vbENob2ljZSBhcyBCZXRhVG9vbENob2ljZSxcbiAgICB0eXBlIEJldGFUb29sQ2hvaWNlQW55IGFzIEJldGFUb29sQ2hvaWNlQW55LFxuICAgIHR5cGUgQmV0YVRvb2xDaG9pY2VBdXRvIGFzIEJldGFUb29sQ2hvaWNlQXV0byxcbiAgICB0eXBlIEJldGFUb29sQ2hvaWNlVG9vbCBhcyBCZXRhVG9vbENob2ljZVRvb2wsXG4gICAgdHlwZSBCZXRhVG9vbENvbXB1dGVyVXNlMjAyNDEwMjIgYXMgQmV0YVRvb2xDb21wdXRlclVzZTIwMjQxMDIyLFxuICAgIHR5cGUgQmV0YVRvb2xSZXN1bHRCbG9ja1BhcmFtIGFzIEJldGFUb29sUmVzdWx0QmxvY2tQYXJhbSxcbiAgICB0eXBlIEJldGFUb29sVGV4dEVkaXRvcjIwMjQxMDIyIGFzIEJldGFUb29sVGV4dEVkaXRvcjIwMjQxMDIyLFxuICAgIHR5cGUgQmV0YVRvb2xVbmlvbiBhcyBCZXRhVG9vbFVuaW9uLFxuICAgIHR5cGUgQmV0YVRvb2xVc2VCbG9jayBhcyBCZXRhVG9vbFVzZUJsb2NrLFxuICAgIHR5cGUgQmV0YVRvb2xVc2VCbG9ja1BhcmFtIGFzIEJldGFUb29sVXNlQmxvY2tQYXJhbSxcbiAgICB0eXBlIEJldGFVc2FnZSBhcyBCZXRhVXNhZ2UsXG4gICAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zIGFzIE1lc3NhZ2VDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGFzIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgdHlwZSBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMgYXMgTWVzc2FnZUNvdW50VG9rZW5zUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQmF0Y2hlcyBhcyBCYXRjaGVzLFxuICAgIHR5cGUgQmV0YURlbGV0ZWRNZXNzYWdlQmF0Y2ggYXMgQmV0YURlbGV0ZWRNZXNzYWdlQmF0Y2gsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoIGFzIEJldGFNZXNzYWdlQmF0Y2gsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHQgYXMgQmV0YU1lc3NhZ2VCYXRjaENhbmNlbGVkUmVzdWx0LFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHQgYXMgQmV0YU1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHQsXG4gICAgdHlwZSBCZXRhTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdCBhcyBCZXRhTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdCxcbiAgICB0eXBlIEJldGFNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2UgYXMgQmV0YU1lc3NhZ2VCYXRjaEluZGl2aWR1YWxSZXNwb25zZSxcbiAgICB0eXBlIEJldGFNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzIGFzIEJldGFNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzLFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VCYXRjaFJlc3VsdCBhcyBCZXRhTWVzc2FnZUJhdGNoUmVzdWx0LFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VCYXRjaFN1Y2NlZWRlZFJlc3VsdCBhcyBCZXRhTWVzc2FnZUJhdGNoU3VjY2VlZGVkUmVzdWx0LFxuICAgIEJldGFNZXNzYWdlQmF0Y2hlc1BhZ2UgYXMgQmV0YU1lc3NhZ2VCYXRjaGVzUGFnZSxcbiAgICB0eXBlIEJhdGNoQ3JlYXRlUGFyYW1zIGFzIEJhdGNoQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQmF0Y2hSZXRyaWV2ZVBhcmFtcyBhcyBCYXRjaFJldHJpZXZlUGFyYW1zLFxuICAgIHR5cGUgQmF0Y2hMaXN0UGFyYW1zIGFzIEJhdGNoTGlzdFBhcmFtcyxcbiAgICB0eXBlIEJhdGNoRGVsZXRlUGFyYW1zIGFzIEJhdGNoRGVsZXRlUGFyYW1zLFxuICAgIHR5cGUgQmF0Y2hDYW5jZWxQYXJhbXMgYXMgQmF0Y2hDYW5jZWxQYXJhbXMsXG4gICAgdHlwZSBCYXRjaFJlc3VsdHNQYXJhbXMgYXMgQmF0Y2hSZXN1bHRzUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLmpzXCI7XG5pbXBvcnQgKiBhcyBNb2RlbHNBUEkgZnJvbSBcIi4vbW9kZWxzLmpzXCI7XG5pbXBvcnQgeyBCZXRhTW9kZWxJbmZvLCBCZXRhTW9kZWxJbmZvc1BhZ2UsIE1vZGVsTGlzdFBhcmFtcywgTW9kZWxzIH0gZnJvbSBcIi4vbW9kZWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy9tZXNzYWdlcy5qc1wiO1xuaW1wb3J0IHtcbiAgQmV0YUJhc2U2NFBERkJsb2NrLFxuICBCZXRhQmFzZTY0UERGU291cmNlLFxuICBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsLFxuICBCZXRhQ2l0YXRpb25DaGFyTG9jYXRpb24sXG4gIEJldGFDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtLFxuICBCZXRhQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbixcbiAgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb25QYXJhbSxcbiAgQmV0YUNpdGF0aW9uUGFnZUxvY2F0aW9uLFxuICBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSxcbiAgQmV0YUNpdGF0aW9uc0NvbmZpZ1BhcmFtLFxuICBCZXRhQ2l0YXRpb25zRGVsdGEsXG4gIEJldGFDb250ZW50QmxvY2ssXG4gIEJldGFDb250ZW50QmxvY2tQYXJhbSxcbiAgQmV0YUNvbnRlbnRCbG9ja1NvdXJjZSxcbiAgQmV0YUNvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQsXG4gIEJldGFJbWFnZUJsb2NrUGFyYW0sXG4gIEJldGFJbnB1dEpTT05EZWx0YSxcbiAgQmV0YU1lc3NhZ2UsXG4gIEJldGFNZXNzYWdlRGVsdGFVc2FnZSxcbiAgQmV0YU1lc3NhZ2VQYXJhbSxcbiAgQmV0YU1lc3NhZ2VUb2tlbnNDb3VudCxcbiAgQmV0YU1ldGFkYXRhLFxuICBCZXRhUGxhaW5UZXh0U291cmNlLFxuICBCZXRhUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgQmV0YVJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnQsXG4gIEJldGFSYXdDb250ZW50QmxvY2tTdG9wRXZlbnQsXG4gIEJldGFSYXdNZXNzYWdlRGVsdGFFdmVudCxcbiAgQmV0YVJhd01lc3NhZ2VTdGFydEV2ZW50LFxuICBCZXRhUmF3TWVzc2FnZVN0b3BFdmVudCxcbiAgQmV0YVJhd01lc3NhZ2VTdHJlYW1FdmVudCxcbiAgQmV0YVRleHRCbG9jayxcbiAgQmV0YVRleHRCbG9ja1BhcmFtLFxuICBCZXRhVGV4dENpdGF0aW9uLFxuICBCZXRhVGV4dENpdGF0aW9uUGFyYW0sXG4gIEJldGFUZXh0RGVsdGEsXG4gIEJldGFUb29sLFxuICBCZXRhVG9vbEJhc2gyMDI0MTAyMixcbiAgQmV0YVRvb2xDaG9pY2UsXG4gIEJldGFUb29sQ2hvaWNlQW55LFxuICBCZXRhVG9vbENob2ljZUF1dG8sXG4gIEJldGFUb29sQ2hvaWNlVG9vbCxcbiAgQmV0YVRvb2xDb21wdXRlclVzZTIwMjQxMDIyLFxuICBCZXRhVG9vbFJlc3VsdEJsb2NrUGFyYW0sXG4gIEJldGFUb29sVGV4dEVkaXRvcjIwMjQxMDIyLFxuICBCZXRhVG9vbFVuaW9uLFxuICBCZXRhVG9vbFVzZUJsb2NrLFxuICBCZXRhVG9vbFVzZUJsb2NrUGFyYW0sXG4gIEJldGFVc2FnZSxcbiAgTWVzc2FnZUNvdW50VG9rZW5zUGFyYW1zLFxuICBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICBNZXNzYWdlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICBNZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICBNZXNzYWdlcyxcbn0gZnJvbSBcIi4vbWVzc2FnZXMvbWVzc2FnZXMuanNcIjtcblxuZXhwb3J0IGNsYXNzIEJldGEgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIG1vZGVsczogTW9kZWxzQVBJLk1vZGVscyA9IG5ldyBNb2RlbHNBUEkuTW9kZWxzKHRoaXMuX2NsaWVudCk7XG4gIG1lc3NhZ2VzOiBNZXNzYWdlc0FQSS5NZXNzYWdlcyA9IG5ldyBNZXNzYWdlc0FQSS5NZXNzYWdlcyh0aGlzLl9jbGllbnQpO1xufVxuXG5leHBvcnQgdHlwZSBBbnRocm9waWNCZXRhID1cbiAgfCAoc3RyaW5nICYge30pXG4gIHwgJ21lc3NhZ2UtYmF0Y2hlcy0yMDI0LTA5LTI0J1xuICB8ICdwcm9tcHQtY2FjaGluZy0yMDI0LTA3LTMxJ1xuICB8ICdjb21wdXRlci11c2UtMjAyNC0xMC0yMidcbiAgfCAncGRmcy0yMDI0LTA5LTI1J1xuICB8ICd0b2tlbi1jb3VudGluZy0yMDI0LTExLTAxJztcblxuZXhwb3J0IGludGVyZmFjZSBCZXRhQVBJRXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgdHlwZTogJ2FwaV9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUF1dGhlbnRpY2F0aW9uRXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgdHlwZTogJ2F1dGhlbnRpY2F0aW9uX2Vycm9yJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhQmlsbGluZ0Vycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIHR5cGU6ICdiaWxsaW5nX2Vycm9yJztcbn1cblxuZXhwb3J0IHR5cGUgQmV0YUVycm9yID1cbiAgfCBCZXRhSW52YWxpZFJlcXVlc3RFcnJvclxuICB8IEJldGFBdXRoZW50aWNhdGlvbkVycm9yXG4gIHwgQmV0YUJpbGxpbmdFcnJvclxuICB8IEJldGFQZXJtaXNzaW9uRXJyb3JcbiAgfCBCZXRhTm90Rm91bmRFcnJvclxuICB8IEJldGFSYXRlTGltaXRFcnJvclxuICB8IEJldGFHYXRld2F5VGltZW91dEVycm9yXG4gIHwgQmV0YUFQSUVycm9yXG4gIHwgQmV0YU92ZXJsb2FkZWRFcnJvcjtcblxuZXhwb3J0IGludGVyZmFjZSBCZXRhRXJyb3JSZXNwb25zZSB7XG4gIGVycm9yOiBCZXRhRXJyb3I7XG5cbiAgdHlwZTogJ2Vycm9yJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCZXRhR2F0ZXdheVRpbWVvdXRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAndGltZW91dF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YUludmFsaWRSZXF1ZXN0RXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgdHlwZTogJ2ludmFsaWRfcmVxdWVzdF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YU5vdEZvdW5kRXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgdHlwZTogJ25vdF9mb3VuZF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YU92ZXJsb2FkZWRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAnb3ZlcmxvYWRlZF9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVBlcm1pc3Npb25FcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICB0eXBlOiAncGVybWlzc2lvbl9lcnJvcic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmV0YVJhdGVMaW1pdEVycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIHR5cGU6ICdyYXRlX2xpbWl0X2Vycm9yJztcbn1cblxuQmV0YS5Nb2RlbHMgPSBNb2RlbHM7XG5CZXRhLkJldGFNb2RlbEluZm9zUGFnZSA9IEJldGFNb2RlbEluZm9zUGFnZTtcbkJldGEuTWVzc2FnZXMgPSBNZXNzYWdlcztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEJldGEge1xuICBleHBvcnQge1xuICAgIHR5cGUgQW50aHJvcGljQmV0YSBhcyBBbnRocm9waWNCZXRhLFxuICAgIHR5cGUgQmV0YUFQSUVycm9yIGFzIEJldGFBUElFcnJvcixcbiAgICB0eXBlIEJldGFBdXRoZW50aWNhdGlvbkVycm9yIGFzIEJldGFBdXRoZW50aWNhdGlvbkVycm9yLFxuICAgIHR5cGUgQmV0YUJpbGxpbmdFcnJvciBhcyBCZXRhQmlsbGluZ0Vycm9yLFxuICAgIHR5cGUgQmV0YUVycm9yIGFzIEJldGFFcnJvcixcbiAgICB0eXBlIEJldGFFcnJvclJlc3BvbnNlIGFzIEJldGFFcnJvclJlc3BvbnNlLFxuICAgIHR5cGUgQmV0YUdhdGV3YXlUaW1lb3V0RXJyb3IgYXMgQmV0YUdhdGV3YXlUaW1lb3V0RXJyb3IsXG4gICAgdHlwZSBCZXRhSW52YWxpZFJlcXVlc3RFcnJvciBhcyBCZXRhSW52YWxpZFJlcXVlc3RFcnJvcixcbiAgICB0eXBlIEJldGFOb3RGb3VuZEVycm9yIGFzIEJldGFOb3RGb3VuZEVycm9yLFxuICAgIHR5cGUgQmV0YU92ZXJsb2FkZWRFcnJvciBhcyBCZXRhT3ZlcmxvYWRlZEVycm9yLFxuICAgIHR5cGUgQmV0YVBlcm1pc3Npb25FcnJvciBhcyBCZXRhUGVybWlzc2lvbkVycm9yLFxuICAgIHR5cGUgQmV0YVJhdGVMaW1pdEVycm9yIGFzIEJldGFSYXRlTGltaXRFcnJvcixcbiAgfTtcblxuICBleHBvcnQge1xuICAgIE1vZGVscyBhcyBNb2RlbHMsXG4gICAgdHlwZSBCZXRhTW9kZWxJbmZvIGFzIEJldGFNb2RlbEluZm8sXG4gICAgQmV0YU1vZGVsSW5mb3NQYWdlIGFzIEJldGFNb2RlbEluZm9zUGFnZSxcbiAgICB0eXBlIE1vZGVsTGlzdFBhcmFtcyBhcyBNb2RlbExpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBNZXNzYWdlcyBhcyBNZXNzYWdlcyxcbiAgICB0eXBlIEJldGFCYXNlNjRQREZCbG9jayBhcyBCZXRhQmFzZTY0UERGQmxvY2ssXG4gICAgdHlwZSBCZXRhQmFzZTY0UERGU291cmNlIGFzIEJldGFCYXNlNjRQREZTb3VyY2UsXG4gICAgdHlwZSBCZXRhQ2FjaGVDb250cm9sRXBoZW1lcmFsIGFzIEJldGFDYWNoZUNvbnRyb2xFcGhlbWVyYWwsXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25DaGFyTG9jYXRpb24gYXMgQmV0YUNpdGF0aW9uQ2hhckxvY2F0aW9uLFxuICAgIHR5cGUgQmV0YUNpdGF0aW9uQ2hhckxvY2F0aW9uUGFyYW0gYXMgQmV0YUNpdGF0aW9uQ2hhckxvY2F0aW9uUGFyYW0sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbiBhcyBCZXRhQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbixcbiAgICB0eXBlIEJldGFDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uUGFyYW0gYXMgQmV0YUNpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb25QYXJhbSxcbiAgICB0eXBlIEJldGFDaXRhdGlvblBhZ2VMb2NhdGlvbiBhcyBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb24sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSBhcyBCZXRhQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSxcbiAgICB0eXBlIEJldGFDaXRhdGlvbnNDb25maWdQYXJhbSBhcyBCZXRhQ2l0YXRpb25zQ29uZmlnUGFyYW0sXG4gICAgdHlwZSBCZXRhQ2l0YXRpb25zRGVsdGEgYXMgQmV0YUNpdGF0aW9uc0RlbHRhLFxuICAgIHR5cGUgQmV0YUNvbnRlbnRCbG9jayBhcyBCZXRhQ29udGVudEJsb2NrLFxuICAgIHR5cGUgQmV0YUNvbnRlbnRCbG9ja1BhcmFtIGFzIEJldGFDb250ZW50QmxvY2tQYXJhbSxcbiAgICB0eXBlIEJldGFDb250ZW50QmxvY2tTb3VyY2UgYXMgQmV0YUNvbnRlbnRCbG9ja1NvdXJjZSxcbiAgICB0eXBlIEJldGFDb250ZW50QmxvY2tTb3VyY2VDb250ZW50IGFzIEJldGFDb250ZW50QmxvY2tTb3VyY2VDb250ZW50LFxuICAgIHR5cGUgQmV0YUltYWdlQmxvY2tQYXJhbSBhcyBCZXRhSW1hZ2VCbG9ja1BhcmFtLFxuICAgIHR5cGUgQmV0YUlucHV0SlNPTkRlbHRhIGFzIEJldGFJbnB1dEpTT05EZWx0YSxcbiAgICB0eXBlIEJldGFNZXNzYWdlIGFzIEJldGFNZXNzYWdlLFxuICAgIHR5cGUgQmV0YU1lc3NhZ2VEZWx0YVVzYWdlIGFzIEJldGFNZXNzYWdlRGVsdGFVc2FnZSxcbiAgICB0eXBlIEJldGFNZXNzYWdlUGFyYW0gYXMgQmV0YU1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIEJldGFNZXNzYWdlVG9rZW5zQ291bnQgYXMgQmV0YU1lc3NhZ2VUb2tlbnNDb3VudCxcbiAgICB0eXBlIEJldGFNZXRhZGF0YSBhcyBCZXRhTWV0YWRhdGEsXG4gICAgdHlwZSBCZXRhUGxhaW5UZXh0U291cmNlIGFzIEJldGFQbGFpblRleHRTb3VyY2UsXG4gICAgdHlwZSBCZXRhUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCBhcyBCZXRhUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgICB0eXBlIEJldGFSYXdDb250ZW50QmxvY2tTdGFydEV2ZW50IGFzIEJldGFSYXdDb250ZW50QmxvY2tTdGFydEV2ZW50LFxuICAgIHR5cGUgQmV0YVJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudCBhcyBCZXRhUmF3Q29udGVudEJsb2NrU3RvcEV2ZW50LFxuICAgIHR5cGUgQmV0YVJhd01lc3NhZ2VEZWx0YUV2ZW50IGFzIEJldGFSYXdNZXNzYWdlRGVsdGFFdmVudCxcbiAgICB0eXBlIEJldGFSYXdNZXNzYWdlU3RhcnRFdmVudCBhcyBCZXRhUmF3TWVzc2FnZVN0YXJ0RXZlbnQsXG4gICAgdHlwZSBCZXRhUmF3TWVzc2FnZVN0b3BFdmVudCBhcyBCZXRhUmF3TWVzc2FnZVN0b3BFdmVudCxcbiAgICB0eXBlIEJldGFSYXdNZXNzYWdlU3RyZWFtRXZlbnQgYXMgQmV0YVJhd01lc3NhZ2VTdHJlYW1FdmVudCxcbiAgICB0eXBlIEJldGFUZXh0QmxvY2sgYXMgQmV0YVRleHRCbG9jayxcbiAgICB0eXBlIEJldGFUZXh0QmxvY2tQYXJhbSBhcyBCZXRhVGV4dEJsb2NrUGFyYW0sXG4gICAgdHlwZSBCZXRhVGV4dENpdGF0aW9uIGFzIEJldGFUZXh0Q2l0YXRpb24sXG4gICAgdHlwZSBCZXRhVGV4dENpdGF0aW9uUGFyYW0gYXMgQmV0YVRleHRDaXRhdGlvblBhcmFtLFxuICAgIHR5cGUgQmV0YVRleHREZWx0YSBhcyBCZXRhVGV4dERlbHRhLFxuICAgIHR5cGUgQmV0YVRvb2wgYXMgQmV0YVRvb2wsXG4gICAgdHlwZSBCZXRhVG9vbEJhc2gyMDI0MTAyMiBhcyBCZXRhVG9vbEJhc2gyMDI0MTAyMixcbiAgICB0eXBlIEJldGFUb29sQ2hvaWNlIGFzIEJldGFUb29sQ2hvaWNlLFxuICAgIHR5cGUgQmV0YVRvb2xDaG9pY2VBbnkgYXMgQmV0YVRvb2xDaG9pY2VBbnksXG4gICAgdHlwZSBCZXRhVG9vbENob2ljZUF1dG8gYXMgQmV0YVRvb2xDaG9pY2VBdXRvLFxuICAgIHR5cGUgQmV0YVRvb2xDaG9pY2VUb29sIGFzIEJldGFUb29sQ2hvaWNlVG9vbCxcbiAgICB0eXBlIEJldGFUb29sQ29tcHV0ZXJVc2UyMDI0MTAyMiBhcyBCZXRhVG9vbENvbXB1dGVyVXNlMjAyNDEwMjIsXG4gICAgdHlwZSBCZXRhVG9vbFJlc3VsdEJsb2NrUGFyYW0gYXMgQmV0YVRvb2xSZXN1bHRCbG9ja1BhcmFtLFxuICAgIHR5cGUgQmV0YVRvb2xUZXh0RWRpdG9yMjAyNDEwMjIgYXMgQmV0YVRvb2xUZXh0RWRpdG9yMjAyNDEwMjIsXG4gICAgdHlwZSBCZXRhVG9vbFVuaW9uIGFzIEJldGFUb29sVW5pb24sXG4gICAgdHlwZSBCZXRhVG9vbFVzZUJsb2NrIGFzIEJldGFUb29sVXNlQmxvY2ssXG4gICAgdHlwZSBCZXRhVG9vbFVzZUJsb2NrUGFyYW0gYXMgQmV0YVRvb2xVc2VCbG9ja1BhcmFtLFxuICAgIHR5cGUgQmV0YVVzYWdlIGFzIEJldGFVc2FnZSxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXMgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgICB0eXBlIE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyBhcyBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UuanNcIjtcbmltcG9ydCB7IEFQSVByb21pc2UgfSBmcm9tIFwiLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSBcIi4vY29tcGxldGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzL21lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vc3RyZWFtaW5nLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFtMZWdhY3ldIENyZWF0ZSBhIFRleHQgQ29tcGxldGlvbi5cbiAgICpcbiAgICogVGhlIFRleHQgQ29tcGxldGlvbnMgQVBJIGlzIGEgbGVnYWN5IEFQSS4gV2UgcmVjb21tZW5kIHVzaW5nIHRoZVxuICAgKiBbTWVzc2FnZXMgQVBJXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9hcGkvbWVzc2FnZXMpIGdvaW5nIGZvcndhcmQuXG4gICAqXG4gICAqIEZ1dHVyZSBtb2RlbHMgYW5kIGZlYXR1cmVzIHdpbGwgbm90IGJlIGNvbXBhdGlibGUgd2l0aCBUZXh0IENvbXBsZXRpb25zLiBTZWUgb3VyXG4gICAqIFttaWdyYXRpb24gZ3VpZGVdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9taWdyYXRpbmctZnJvbS10ZXh0LWNvbXBsZXRpb25zLXRvLW1lc3NhZ2VzKVxuICAgKiBmb3IgZ3VpZGFuY2UgaW4gbWlncmF0aW5nIGZyb20gVGV4dCBDb21wbGV0aW9ucyB0byBNZXNzYWdlcy5cbiAgICovXG4gIGNyZWF0ZShib2R5OiBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IEFQSVByb21pc2U8Q29tcGxldGlvbj47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxDb21wbGV0aW9uPj47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08Q29tcGxldGlvbj4gfCBDb21wbGV0aW9uPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8Q29tcGxldGlvbj4gfCBBUElQcm9taXNlPFN0cmVhbTxDb21wbGV0aW9uPj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL2NvbXBsZXRlJywge1xuICAgICAgYm9keSxcbiAgICAgIHRpbWVvdXQ6ICh0aGlzLl9jbGllbnQgYXMgYW55KS5fb3B0aW9ucy50aW1lb3V0ID8/IDYwMDAwMCxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlLFxuICAgIH0pIGFzIEFQSVByb21pc2U8Q29tcGxldGlvbj4gfCBBUElQcm9taXNlPFN0cmVhbTxDb21wbGV0aW9uPj47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBvYmplY3QgaWRlbnRpZmllci5cbiAgICpcbiAgICogVGhlIGZvcm1hdCBhbmQgbGVuZ3RoIG9mIElEcyBtYXkgY2hhbmdlIG92ZXIgdGltZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByZXN1bHRpbmcgY29tcGxldGlvbiB1cCB0byBhbmQgZXhjbHVkaW5nIHRoZSBzdG9wIHNlcXVlbmNlcy5cbiAgICovXG4gIGNvbXBsZXRpb246IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgd2lsbCBjb21wbGV0ZSB5b3VyIHByb21wdC5cXG5cXG5TZWVcbiAgICogW21vZGVsc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9tb2RlbHMtb3ZlcnZpZXcpIGZvciBhZGRpdGlvbmFsXG4gICAqIGRldGFpbHMgYW5kIG9wdGlvbnMuXG4gICAqL1xuICBtb2RlbDogTWVzc2FnZXNBUEkuTW9kZWw7XG5cbiAgLyoqXG4gICAqIFRoZSByZWFzb24gdGhhdCB3ZSBzdG9wcGVkLlxuICAgKlxuICAgKiBUaGlzIG1heSBiZSBvbmUgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4gICAqXG4gICAqIC0gYFwic3RvcF9zZXF1ZW5jZVwiYDogd2UgcmVhY2hlZCBhIHN0b3Agc2VxdWVuY2UgXHUyMDE0IGVpdGhlciBwcm92aWRlZCBieSB5b3UgdmlhIHRoZVxuICAgKiAgIGBzdG9wX3NlcXVlbmNlc2AgcGFyYW1ldGVyLCBvciBhIHN0b3Agc2VxdWVuY2UgYnVpbHQgaW50byB0aGUgbW9kZWxcbiAgICogLSBgXCJtYXhfdG9rZW5zXCJgOiB3ZSBleGNlZWRlZCBgbWF4X3Rva2Vuc190b19zYW1wbGVgIG9yIHRoZSBtb2RlbCdzIG1heGltdW1cbiAgICovXG4gIHN0b3BfcmVhc29uOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPYmplY3QgdHlwZS5cbiAgICpcbiAgICogRm9yIFRleHQgQ29tcGxldGlvbnMsIHRoaXMgaXMgYWx3YXlzIGBcImNvbXBsZXRpb25cImAuXG4gICAqL1xuICB0eXBlOiAnY29tcGxldGlvbic7XG59XG5cbmV4cG9ydCB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXMgPSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIHwgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZztcblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlIGJlZm9yZSBzdG9wcGluZy5cbiAgICpcbiAgICogTm90ZSB0aGF0IG91ciBtb2RlbHMgbWF5IHN0b3AgX2JlZm9yZV8gcmVhY2hpbmcgdGhpcyBtYXhpbXVtLiBUaGlzIHBhcmFtZXRlclxuICAgKiBvbmx5IHNwZWNpZmllcyB0aGUgYWJzb2x1dGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIHRvIGdlbmVyYXRlLlxuICAgKi9cbiAgbWF4X3Rva2Vuc190b19zYW1wbGU6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgd2lsbCBjb21wbGV0ZSB5b3VyIHByb21wdC5cXG5cXG5TZWVcbiAgICogW21vZGVsc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9tb2RlbHMtb3ZlcnZpZXcpIGZvciBhZGRpdGlvbmFsXG4gICAqIGRldGFpbHMgYW5kIG9wdGlvbnMuXG4gICAqL1xuICBtb2RlbDogTWVzc2FnZXNBUEkuTW9kZWw7XG5cbiAgLyoqXG4gICAqIFRoZSBwcm9tcHQgdGhhdCB5b3Ugd2FudCBDbGF1ZGUgdG8gY29tcGxldGUuXG4gICAqXG4gICAqIEZvciBwcm9wZXIgcmVzcG9uc2UgZ2VuZXJhdGlvbiB5b3Ugd2lsbCBuZWVkIHRvIGZvcm1hdCB5b3VyIHByb21wdCB1c2luZ1xuICAgKiBhbHRlcm5hdGluZyBgXFxuXFxuSHVtYW46YCBhbmQgYFxcblxcbkFzc2lzdGFudDpgIGNvbnZlcnNhdGlvbmFsIHR1cm5zLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYGBgXG4gICAqIFwiXFxuXFxuSHVtYW46IHt1c2VyUXVlc3Rpb259XFxuXFxuQXNzaXN0YW50OlwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBTZWUgW3Byb21wdCB2YWxpZGF0aW9uXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9hcGkvcHJvbXB0LXZhbGlkYXRpb24pIGFuZFxuICAgKiBvdXIgZ3VpZGUgdG9cbiAgICogW3Byb21wdCBkZXNpZ25dKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvaW50cm8tdG8tcHJvbXB0aW5nKSBmb3IgbW9yZVxuICAgKiBkZXRhaWxzLlxuICAgKi9cbiAgcHJvbXB0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZXNjcmliaW5nIG1ldGFkYXRhIGFib3V0IHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgbWV0YWRhdGE/OiBNZXNzYWdlc0FQSS5NZXRhZGF0YTtcblxuICAvKipcbiAgICogU2VxdWVuY2VzIHRoYXQgd2lsbCBjYXVzZSB0aGUgbW9kZWwgdG8gc3RvcCBnZW5lcmF0aW5nLlxuICAgKlxuICAgKiBPdXIgbW9kZWxzIHN0b3Agb24gYFwiXFxuXFxuSHVtYW46XCJgLCBhbmQgbWF5IGluY2x1ZGUgYWRkaXRpb25hbCBidWlsdC1pbiBzdG9wXG4gICAqIHNlcXVlbmNlcyBpbiB0aGUgZnV0dXJlLiBCeSBwcm92aWRpbmcgdGhlIHN0b3Bfc2VxdWVuY2VzIHBhcmFtZXRlciwgeW91IG1heVxuICAgKiBpbmNsdWRlIGFkZGl0aW9uYWwgc3RyaW5ncyB0aGF0IHdpbGwgY2F1c2UgdGhlIG1vZGVsIHRvIHN0b3AgZ2VuZXJhdGluZy5cbiAgICovXG4gIHN0b3Bfc2VxdWVuY2VzPzogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBpbmNyZW1lbnRhbGx5IHN0cmVhbSB0aGUgcmVzcG9uc2UgdXNpbmcgc2VydmVyLXNlbnQgZXZlbnRzLlxuICAgKlxuICAgKiBTZWUgW3N0cmVhbWluZ10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL3N0cmVhbWluZykgZm9yIGRldGFpbHMuXG4gICAqL1xuICBzdHJlYW0/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgcmFuZG9tbmVzcyBpbmplY3RlZCBpbnRvIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYDEuMGAuIFJhbmdlcyBmcm9tIGAwLjBgIHRvIGAxLjBgLiBVc2UgYHRlbXBlcmF0dXJlYCBjbG9zZXIgdG8gYDAuMGBcbiAgICogZm9yIGFuYWx5dGljYWwgLyBtdWx0aXBsZSBjaG9pY2UsIGFuZCBjbG9zZXIgdG8gYDEuMGAgZm9yIGNyZWF0aXZlIGFuZFxuICAgKiBnZW5lcmF0aXZlIHRhc2tzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgZXZlbiB3aXRoIGB0ZW1wZXJhdHVyZWAgb2YgYDAuMGAsIHRoZSByZXN1bHRzIHdpbGwgbm90IGJlIGZ1bGx5XG4gICAqIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcblxuICAvKipcbiAgICogT25seSBzYW1wbGUgZnJvbSB0aGUgdG9wIEsgb3B0aW9ucyBmb3IgZWFjaCBzdWJzZXF1ZW50IHRva2VuLlxuICAgKlxuICAgKiBVc2VkIHRvIHJlbW92ZSBcImxvbmcgdGFpbFwiIGxvdyBwcm9iYWJpbGl0eSByZXNwb25zZXMuXG4gICAqIFtMZWFybiBtb3JlIHRlY2huaWNhbCBkZXRhaWxzIGhlcmVdKGh0dHBzOi8vdG93YXJkc2RhdGFzY2llbmNlLmNvbS9ob3ctdG8tc2FtcGxlLWZyb20tbGFuZ3VhZ2UtbW9kZWxzLTY4MmJjZWI5NzI3NykuXG4gICAqXG4gICAqIFJlY29tbWVuZGVkIGZvciBhZHZhbmNlZCB1c2UgY2FzZXMgb25seS4gWW91IHVzdWFsbHkgb25seSBuZWVkIHRvIHVzZVxuICAgKiBgdGVtcGVyYXR1cmVgLlxuICAgKi9cbiAgdG9wX2s/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFVzZSBudWNsZXVzIHNhbXBsaW5nLlxuICAgKlxuICAgKiBJbiBudWNsZXVzIHNhbXBsaW5nLCB3ZSBjb21wdXRlIHRoZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiBvdmVyIGFsbCB0aGUgb3B0aW9uc1xuICAgKiBmb3IgZWFjaCBzdWJzZXF1ZW50IHRva2VuIGluIGRlY3JlYXNpbmcgcHJvYmFiaWxpdHkgb3JkZXIgYW5kIGN1dCBpdCBvZmYgb25jZSBpdFxuICAgKiByZWFjaGVzIGEgcGFydGljdWxhciBwcm9iYWJpbGl0eSBzcGVjaWZpZWQgYnkgYHRvcF9wYC4gWW91IHNob3VsZCBlaXRoZXIgYWx0ZXJcbiAgICogYHRlbXBlcmF0dXJlYCBvciBgdG9wX3BgLCBidXQgbm90IGJvdGguXG4gICAqXG4gICAqIFJlY29tbWVuZGVkIGZvciBhZHZhbmNlZCB1c2UgY2FzZXMgb25seS4gWW91IHVzdWFsbHkgb25seSBuZWVkIHRvIHVzZVxuICAgKiBgdGVtcGVyYXR1cmVgLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYEFudGhyb3BpYy5NZXNzYWdlcy5NZXRhZGF0YWAgaW5zdGVhZFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgTWV0YWRhdGEgPSBNZXNzYWdlc0FQSS5NZXRhZGF0YTtcblxuICBleHBvcnQgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nID0gQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZztcbiAgZXhwb3J0IHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyA9IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBleHRlbmRzIENvbXBsZXRpb25DcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gaW5jcmVtZW50YWxseSBzdHJlYW0gdGhlIHJlc3BvbnNlIHVzaW5nIHNlcnZlci1zZW50IGV2ZW50cy5cbiAgICpcbiAgICogU2VlIFtzdHJlYW1pbmddKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9zdHJlYW1pbmcpIGZvciBkZXRhaWxzLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBleHRlbmRzIENvbXBsZXRpb25DcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gaW5jcmVtZW50YWxseSBzdHJlYW0gdGhlIHJlc3BvbnNlIHVzaW5nIHNlcnZlci1zZW50IGV2ZW50cy5cbiAgICpcbiAgICogU2VlIFtzdHJlYW1pbmddKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2FwaS9zdHJlYW1pbmcpIGZvciBkZXRhaWxzLlxuICAgKi9cbiAgc3RyZWFtOiB0cnVlO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ29tcGxldGlvbnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQ29tcGxldGlvbiBhcyBDb21wbGV0aW9uLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLmpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2NvcmUuanNcIjtcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUuanNcIjtcbmltcG9ydCAqIGFzIFNoYXJlZCBmcm9tIFwiLi4vc2hhcmVkLmpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy5qc1wiO1xuaW1wb3J0IHsgUGFnZSwgdHlwZSBQYWdlUGFyYW1zIH0gZnJvbSBcIi4uLy4uL3BhZ2luYXRpb24uanNcIjtcbmltcG9ydCB7IEpTT05MRGVjb2RlciB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC9kZWNvZGVycy9qc29ubC5qc1wiO1xuaW1wb3J0IHsgQW50aHJvcGljRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IuanNcIjtcblxuZXhwb3J0IGNsYXNzIEJhdGNoZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBTZW5kIGEgYmF0Y2ggb2YgTWVzc2FnZSBjcmVhdGlvbiByZXF1ZXN0cy5cbiAgICpcbiAgICogVGhlIE1lc3NhZ2UgQmF0Y2hlcyBBUEkgY2FuIGJlIHVzZWQgdG8gcHJvY2VzcyBtdWx0aXBsZSBNZXNzYWdlcyBBUEkgcmVxdWVzdHMgYXRcbiAgICogb25jZS4gT25jZSBhIE1lc3NhZ2UgQmF0Y2ggaXMgY3JlYXRlZCwgaXQgYmVnaW5zIHByb2Nlc3NpbmcgaW1tZWRpYXRlbHkuIEJhdGNoZXNcbiAgICogY2FuIHRha2UgdXAgdG8gMjQgaG91cnMgdG8gY29tcGxldGUuXG4gICAqL1xuICBjcmVhdGUoYm9keTogQmF0Y2hDcmVhdGVQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPE1lc3NhZ2VCYXRjaD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL21lc3NhZ2VzL2JhdGNoZXMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBlbmRwb2ludCBpcyBpZGVtcG90ZW50IGFuZCBjYW4gYmUgdXNlZCB0byBwb2xsIGZvciBNZXNzYWdlIEJhdGNoXG4gICAqIGNvbXBsZXRpb24uIFRvIGFjY2VzcyB0aGUgcmVzdWx0cyBvZiBhIE1lc3NhZ2UgQmF0Y2gsIG1ha2UgYSByZXF1ZXN0IHRvIHRoZVxuICAgKiBgcmVzdWx0c191cmxgIGZpZWxkIGluIHRoZSByZXNwb25zZS5cbiAgICovXG4gIHJldHJpZXZlKG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPE1lc3NhZ2VCYXRjaD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdjEvbWVzc2FnZXMvYmF0Y2hlcy8ke21lc3NhZ2VCYXRjaElkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYWxsIE1lc3NhZ2UgQmF0Y2hlcyB3aXRoaW4gYSBXb3Jrc3BhY2UuIE1vc3QgcmVjZW50bHkgY3JlYXRlZCBiYXRjaGVzIGFyZVxuICAgKiByZXR1cm5lZCBmaXJzdC5cbiAgICovXG4gIGxpc3QoXG4gICAgcXVlcnk/OiBCYXRjaExpc3RQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8TWVzc2FnZUJhdGNoZXNQYWdlLCBNZXNzYWdlQmF0Y2g+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxNZXNzYWdlQmF0Y2hlc1BhZ2UsIE1lc3NhZ2VCYXRjaD47XG4gIGxpc3QoXG4gICAgcXVlcnk6IEJhdGNoTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxNZXNzYWdlQmF0Y2hlc1BhZ2UsIE1lc3NhZ2VCYXRjaD4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy92MS9tZXNzYWdlcy9iYXRjaGVzJywgTWVzc2FnZUJhdGNoZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIE1lc3NhZ2UgQmF0Y2guXG4gICAqXG4gICAqIE1lc3NhZ2UgQmF0Y2hlcyBjYW4gb25seSBiZSBkZWxldGVkIG9uY2UgdGhleSd2ZSBmaW5pc2hlZCBwcm9jZXNzaW5nLiBJZiB5b3UnZFxuICAgKiBsaWtlIHRvIGRlbGV0ZSBhbiBpbi1wcm9ncmVzcyBiYXRjaCwgeW91IG11c3QgZmlyc3QgY2FuY2VsIGl0LlxuICAgKi9cbiAgZGVsZXRlKG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPERlbGV0ZWRNZXNzYWdlQmF0Y2g+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3YxL21lc3NhZ2VzL2JhdGNoZXMvJHttZXNzYWdlQmF0Y2hJZH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYXRjaGVzIG1heSBiZSBjYW5jZWxlZCBhbnkgdGltZSBiZWZvcmUgcHJvY2Vzc2luZyBlbmRzLiBPbmNlIGNhbmNlbGxhdGlvbiBpc1xuICAgKiBpbml0aWF0ZWQsIHRoZSBiYXRjaCBlbnRlcnMgYSBgY2FuY2VsaW5nYCBzdGF0ZSwgYXQgd2hpY2ggdGltZSB0aGUgc3lzdGVtIG1heVxuICAgKiBjb21wbGV0ZSBhbnkgaW4tcHJvZ3Jlc3MsIG5vbi1pbnRlcnJ1cHRpYmxlIHJlcXVlc3RzIGJlZm9yZSBmaW5hbGl6aW5nXG4gICAqIGNhbmNlbGxhdGlvbi5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBjYW5jZWxlZCByZXF1ZXN0cyBpcyBzcGVjaWZpZWQgaW4gYHJlcXVlc3RfY291bnRzYC4gVG8gZGV0ZXJtaW5lXG4gICAqIHdoaWNoIHJlcXVlc3RzIHdlcmUgY2FuY2VsZWQsIGNoZWNrIHRoZSBpbmRpdmlkdWFsIHJlc3VsdHMgd2l0aGluIHRoZSBiYXRjaC5cbiAgICogTm90ZSB0aGF0IGNhbmNlbGxhdGlvbiBtYXkgbm90IHJlc3VsdCBpbiBhbnkgY2FuY2VsZWQgcmVxdWVzdHMgaWYgdGhleSB3ZXJlXG4gICAqIG5vbi1pbnRlcnJ1cHRpYmxlLlxuICAgKi9cbiAgY2FuY2VsKG1lc3NhZ2VCYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPE1lc3NhZ2VCYXRjaD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3YxL21lc3NhZ2VzL2JhdGNoZXMvJHttZXNzYWdlQmF0Y2hJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU3RyZWFtcyB0aGUgcmVzdWx0cyBvZiBhIE1lc3NhZ2UgQmF0Y2ggYXMgYSBgLmpzb25sYCBmaWxlLlxuICAgKlxuICAgKiBFYWNoIGxpbmUgaW4gdGhlIGZpbGUgaXMgYSBKU09OIG9iamVjdCBjb250YWluaW5nIHRoZSByZXN1bHQgb2YgYSBzaW5nbGUgcmVxdWVzdFxuICAgKiBpbiB0aGUgTWVzc2FnZSBCYXRjaC4gUmVzdWx0cyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXNcbiAgICogcmVxdWVzdHMuIFVzZSB0aGUgYGN1c3RvbV9pZGAgZmllbGQgdG8gbWF0Y2ggcmVzdWx0cyB0byByZXF1ZXN0cy5cbiAgICovXG4gIGFzeW5jIHJlc3VsdHMoXG4gICAgbWVzc2FnZUJhdGNoSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxKU09OTERlY29kZXI8TWVzc2FnZUJhdGNoSW5kaXZpZHVhbFJlc3BvbnNlPj4ge1xuICAgIGNvbnN0IGJhdGNoID0gYXdhaXQgdGhpcy5yZXRyaWV2ZShtZXNzYWdlQmF0Y2hJZCk7XG4gICAgaWYgKCFiYXRjaC5yZXN1bHRzX3VybCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKFxuICAgICAgICBgTm8gYmF0Y2ggXFxgcmVzdWx0c191cmxcXGA7IEhhcyBpdCBmaW5pc2hlZCBwcm9jZXNzaW5nPyAke2JhdGNoLnByb2Nlc3Npbmdfc3RhdHVzfSAtICR7YmF0Y2guaWR9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudFxuICAgICAgLmdldChiYXRjaC5yZXN1bHRzX3VybCwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vYmluYXJ5JyxcbiAgICAgICAgICAuLi5vcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5fdGhlblVud3JhcCgoXywgcHJvcHMpID0+IEpTT05MRGVjb2Rlci5mcm9tUmVzcG9uc2UocHJvcHMucmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZUJhdGNoZXNQYWdlIGV4dGVuZHMgUGFnZTxNZXNzYWdlQmF0Y2g+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlZE1lc3NhZ2VCYXRjaCB7XG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgTWVzc2FnZSBCYXRjaC5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlbGV0ZWQgb2JqZWN0IHR5cGUuXG4gICAqXG4gICAqIEZvciBNZXNzYWdlIEJhdGNoZXMsIHRoaXMgaXMgYWx3YXlzIGBcIm1lc3NhZ2VfYmF0Y2hfZGVsZXRlZFwiYC5cbiAgICovXG4gIHR5cGU6ICdtZXNzYWdlX2JhdGNoX2RlbGV0ZWQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VCYXRjaCB7XG4gIC8qKlxuICAgKiBVbmlxdWUgb2JqZWN0IGlkZW50aWZpZXIuXG4gICAqXG4gICAqIFRoZSBmb3JtYXQgYW5kIGxlbmd0aCBvZiBJRHMgbWF5IGNoYW5nZSBvdmVyIHRpbWUuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSRkMgMzMzOSBkYXRldGltZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBNZXNzYWdlIEJhdGNoIHdhc1xuICAgKiBhcmNoaXZlZCBhbmQgaXRzIHJlc3VsdHMgYmVjYW1lIHVuYXZhaWxhYmxlLlxuICAgKi9cbiAgYXJjaGl2ZWRfYXQ6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJGQyAzMzM5IGRhdGV0aW1lIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHRpbWUgYXQgd2hpY2ggY2FuY2VsbGF0aW9uIHdhc1xuICAgKiBpbml0aWF0ZWQgZm9yIHRoZSBNZXNzYWdlIEJhdGNoLiBTcGVjaWZpZWQgb25seSBpZiBjYW5jZWxsYXRpb24gd2FzIGluaXRpYXRlZC5cbiAgICovXG4gIGNhbmNlbF9pbml0aWF0ZWRfYXQ6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJGQyAzMzM5IGRhdGV0aW1lIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHRpbWUgYXQgd2hpY2ggdGhlIE1lc3NhZ2UgQmF0Y2ggd2FzXG4gICAqIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJGQyAzMzM5IGRhdGV0aW1lIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHRpbWUgYXQgd2hpY2ggcHJvY2Vzc2luZyBmb3IgdGhlXG4gICAqIE1lc3NhZ2UgQmF0Y2ggZW5kZWQuIFNwZWNpZmllZCBvbmx5IG9uY2UgcHJvY2Vzc2luZyBlbmRzLlxuICAgKlxuICAgKiBQcm9jZXNzaW5nIGVuZHMgd2hlbiBldmVyeSByZXF1ZXN0IGluIGEgTWVzc2FnZSBCYXRjaCBoYXMgZWl0aGVyIHN1Y2NlZWRlZCxcbiAgICogZXJyb3JlZCwgY2FuY2VsZWQsIG9yIGV4cGlyZWQuXG4gICAqL1xuICBlbmRlZF9hdDogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCB0aGUgTWVzc2FnZSBCYXRjaCB3aWxsXG4gICAqIGV4cGlyZSBhbmQgZW5kIHByb2Nlc3NpbmcsIHdoaWNoIGlzIDI0IGhvdXJzIGFmdGVyIGNyZWF0aW9uLlxuICAgKi9cbiAgZXhwaXJlc19hdDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBQcm9jZXNzaW5nIHN0YXR1cyBvZiB0aGUgTWVzc2FnZSBCYXRjaC5cbiAgICovXG4gIHByb2Nlc3Npbmdfc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NhbmNlbGluZycgfCAnZW5kZWQnO1xuXG4gIC8qKlxuICAgKiBUYWxsaWVzIHJlcXVlc3RzIHdpdGhpbiB0aGUgTWVzc2FnZSBCYXRjaCwgY2F0ZWdvcml6ZWQgYnkgdGhlaXIgc3RhdHVzLlxuICAgKlxuICAgKiBSZXF1ZXN0cyBzdGFydCBhcyBgcHJvY2Vzc2luZ2AgYW5kIG1vdmUgdG8gb25lIG9mIHRoZSBvdGhlciBzdGF0dXNlcyBvbmx5IG9uY2VcbiAgICogcHJvY2Vzc2luZyBvZiB0aGUgZW50aXJlIGJhdGNoIGVuZHMuIFRoZSBzdW0gb2YgYWxsIHZhbHVlcyBhbHdheXMgbWF0Y2hlcyB0aGVcbiAgICogdG90YWwgbnVtYmVyIG9mIHJlcXVlc3RzIGluIHRoZSBiYXRjaC5cbiAgICovXG4gIHJlcXVlc3RfY291bnRzOiBNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzO1xuXG4gIC8qKlxuICAgKiBVUkwgdG8gYSBgLmpzb25sYCBmaWxlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIE1lc3NhZ2UgQmF0Y2ggcmVxdWVzdHMuXG4gICAqIFNwZWNpZmllZCBvbmx5IG9uY2UgcHJvY2Vzc2luZyBlbmRzLlxuICAgKlxuICAgKiBSZXN1bHRzIGluIHRoZSBmaWxlIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyByZXF1ZXN0cy4gVXNlXG4gICAqIHRoZSBgY3VzdG9tX2lkYCBmaWVsZCB0byBtYXRjaCByZXN1bHRzIHRvIHJlcXVlc3RzLlxuICAgKi9cbiAgcmVzdWx0c191cmw6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE9iamVjdCB0eXBlLlxuICAgKlxuICAgKiBGb3IgTWVzc2FnZSBCYXRjaGVzLCB0aGlzIGlzIGFsd2F5cyBgXCJtZXNzYWdlX2JhdGNoXCJgLlxuICAgKi9cbiAgdHlwZTogJ21lc3NhZ2VfYmF0Y2gnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VCYXRjaENhbmNlbGVkUmVzdWx0IHtcbiAgdHlwZTogJ2NhbmNlbGVkJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQmF0Y2hFcnJvcmVkUmVzdWx0IHtcbiAgZXJyb3I6IFNoYXJlZC5FcnJvclJlc3BvbnNlO1xuXG4gIHR5cGU6ICdlcnJvcmVkJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQmF0Y2hFeHBpcmVkUmVzdWx0IHtcbiAgdHlwZTogJ2V4cGlyZWQnO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBzaW5nbGUgbGluZSBpbiB0aGUgcmVzcG9uc2UgYC5qc29ubGAgZmlsZSBhbmQgZG9lcyBub3QgcmVwcmVzZW50IHRoZVxuICogcmVzcG9uc2UgYXMgYSB3aG9sZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2Uge1xuICAvKipcbiAgICogRGV2ZWxvcGVyLXByb3ZpZGVkIElEIGNyZWF0ZWQgZm9yIGVhY2ggcmVxdWVzdCBpbiBhIE1lc3NhZ2UgQmF0Y2guIFVzZWZ1bCBmb3JcbiAgICogbWF0Y2hpbmcgcmVzdWx0cyB0byByZXF1ZXN0cywgYXMgcmVzdWx0cyBtYXkgYmUgZ2l2ZW4gb3V0IG9mIHJlcXVlc3Qgb3JkZXIuXG4gICAqXG4gICAqIE11c3QgYmUgdW5pcXVlIGZvciBlYWNoIHJlcXVlc3Qgd2l0aGluIHRoZSBNZXNzYWdlIEJhdGNoLlxuICAgKi9cbiAgY3VzdG9tX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFByb2Nlc3NpbmcgcmVzdWx0IGZvciB0aGlzIHJlcXVlc3QuXG4gICAqXG4gICAqIENvbnRhaW5zIGEgTWVzc2FnZSBvdXRwdXQgaWYgcHJvY2Vzc2luZyB3YXMgc3VjY2Vzc2Z1bCwgYW4gZXJyb3IgcmVzcG9uc2UgaWZcbiAgICogcHJvY2Vzc2luZyBmYWlsZWQsIG9yIHRoZSByZWFzb24gd2h5IHByb2Nlc3Npbmcgd2FzIG5vdCBhdHRlbXB0ZWQsIHN1Y2ggYXNcbiAgICogY2FuY2VsbGF0aW9uIG9yIGV4cGlyYXRpb24uXG4gICAqL1xuICByZXN1bHQ6IE1lc3NhZ2VCYXRjaFJlc3VsdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgTWVzc2FnZSBCYXRjaCB0aGF0IGhhdmUgYmVlbiBjYW5jZWxlZC5cbiAgICpcbiAgICogVGhpcyBpcyB6ZXJvIHVudGlsIHByb2Nlc3Npbmcgb2YgdGhlIGVudGlyZSBNZXNzYWdlIEJhdGNoIGhhcyBlbmRlZC5cbiAgICovXG4gIGNhbmNlbGVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgTWVzc2FnZSBCYXRjaCB0aGF0IGVuY291bnRlcmVkIGFuIGVycm9yLlxuICAgKlxuICAgKiBUaGlzIGlzIHplcm8gdW50aWwgcHJvY2Vzc2luZyBvZiB0aGUgZW50aXJlIE1lc3NhZ2UgQmF0Y2ggaGFzIGVuZGVkLlxuICAgKi9cbiAgZXJyb3JlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcmVxdWVzdHMgaW4gdGhlIE1lc3NhZ2UgQmF0Y2ggdGhhdCBoYXZlIGV4cGlyZWQuXG4gICAqXG4gICAqIFRoaXMgaXMgemVybyB1bnRpbCBwcm9jZXNzaW5nIG9mIHRoZSBlbnRpcmUgTWVzc2FnZSBCYXRjaCBoYXMgZW5kZWQuXG4gICAqL1xuICBleHBpcmVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgTWVzc2FnZSBCYXRjaCB0aGF0IGFyZSBwcm9jZXNzaW5nLlxuICAgKi9cbiAgcHJvY2Vzc2luZzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcmVxdWVzdHMgaW4gdGhlIE1lc3NhZ2UgQmF0Y2ggdGhhdCBoYXZlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuXG4gICAqXG4gICAqIFRoaXMgaXMgemVybyB1bnRpbCBwcm9jZXNzaW5nIG9mIHRoZSBlbnRpcmUgTWVzc2FnZSBCYXRjaCBoYXMgZW5kZWQuXG4gICAqL1xuICBzdWNjZWVkZWQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBQcm9jZXNzaW5nIHJlc3VsdCBmb3IgdGhpcyByZXF1ZXN0LlxuICpcbiAqIENvbnRhaW5zIGEgTWVzc2FnZSBvdXRwdXQgaWYgcHJvY2Vzc2luZyB3YXMgc3VjY2Vzc2Z1bCwgYW4gZXJyb3IgcmVzcG9uc2UgaWZcbiAqIHByb2Nlc3NpbmcgZmFpbGVkLCBvciB0aGUgcmVhc29uIHdoeSBwcm9jZXNzaW5nIHdhcyBub3QgYXR0ZW1wdGVkLCBzdWNoIGFzXG4gKiBjYW5jZWxsYXRpb24gb3IgZXhwaXJhdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgTWVzc2FnZUJhdGNoUmVzdWx0ID1cbiAgfCBNZXNzYWdlQmF0Y2hTdWNjZWVkZWRSZXN1bHRcbiAgfCBNZXNzYWdlQmF0Y2hFcnJvcmVkUmVzdWx0XG4gIHwgTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHRcbiAgfCBNZXNzYWdlQmF0Y2hFeHBpcmVkUmVzdWx0O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VCYXRjaFN1Y2NlZWRlZFJlc3VsdCB7XG4gIG1lc3NhZ2U6IE1lc3NhZ2VzQVBJLk1lc3NhZ2U7XG5cbiAgdHlwZTogJ3N1Y2NlZWRlZCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogTGlzdCBvZiByZXF1ZXN0cyBmb3IgcHJvbXB0IGNvbXBsZXRpb24uIEVhY2ggaXMgYW4gaW5kaXZpZHVhbCByZXF1ZXN0IHRvIGNyZWF0ZVxuICAgKiBhIE1lc3NhZ2UuXG4gICAqL1xuICByZXF1ZXN0czogQXJyYXk8QmF0Y2hDcmVhdGVQYXJhbXMuUmVxdWVzdD47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQmF0Y2hDcmVhdGVQYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIFJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIERldmVsb3Blci1wcm92aWRlZCBJRCBjcmVhdGVkIGZvciBlYWNoIHJlcXVlc3QgaW4gYSBNZXNzYWdlIEJhdGNoLiBVc2VmdWwgZm9yXG4gICAgICogbWF0Y2hpbmcgcmVzdWx0cyB0byByZXF1ZXN0cywgYXMgcmVzdWx0cyBtYXkgYmUgZ2l2ZW4gb3V0IG9mIHJlcXVlc3Qgb3JkZXIuXG4gICAgICpcbiAgICAgKiBNdXN0IGJlIHVuaXF1ZSBmb3IgZWFjaCByZXF1ZXN0IHdpdGhpbiB0aGUgTWVzc2FnZSBCYXRjaC5cbiAgICAgKi9cbiAgICBjdXN0b21faWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIE1lc3NhZ2VzIEFQSSBjcmVhdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgaW5kaXZpZHVhbCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogU2VlIHRoZSBbTWVzc2FnZXMgQVBJIHJlZmVyZW5jZV0oL2VuL2FwaS9tZXNzYWdlcykgZm9yIGZ1bGwgZG9jdW1lbnRhdGlvbiBvblxuICAgICAqIGF2YWlsYWJsZSBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHBhcmFtczogTWVzc2FnZXNBUEkuTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoTGlzdFBhcmFtcyBleHRlbmRzIFBhZ2VQYXJhbXMge31cblxuQmF0Y2hlcy5NZXNzYWdlQmF0Y2hlc1BhZ2UgPSBNZXNzYWdlQmF0Y2hlc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBCYXRjaGVzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIERlbGV0ZWRNZXNzYWdlQmF0Y2ggYXMgRGVsZXRlZE1lc3NhZ2VCYXRjaCxcbiAgICB0eXBlIE1lc3NhZ2VCYXRjaCBhcyBNZXNzYWdlQmF0Y2gsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hDYW5jZWxlZFJlc3VsdCBhcyBNZXNzYWdlQmF0Y2hDYW5jZWxlZFJlc3VsdCxcbiAgICB0eXBlIE1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHQgYXMgTWVzc2FnZUJhdGNoRXJyb3JlZFJlc3VsdCxcbiAgICB0eXBlIE1lc3NhZ2VCYXRjaEV4cGlyZWRSZXN1bHQgYXMgTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdCxcbiAgICB0eXBlIE1lc3NhZ2VCYXRjaEluZGl2aWR1YWxSZXNwb25zZSBhcyBNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2UsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzIGFzIE1lc3NhZ2VCYXRjaFJlcXVlc3RDb3VudHMsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hSZXN1bHQgYXMgTWVzc2FnZUJhdGNoUmVzdWx0LFxuICAgIHR5cGUgTWVzc2FnZUJhdGNoU3VjY2VlZGVkUmVzdWx0IGFzIE1lc3NhZ2VCYXRjaFN1Y2NlZWRlZFJlc3VsdCxcbiAgICBNZXNzYWdlQmF0Y2hlc1BhZ2UgYXMgTWVzc2FnZUJhdGNoZXNQYWdlLFxuICAgIHR5cGUgQmF0Y2hDcmVhdGVQYXJhbXMgYXMgQmF0Y2hDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBCYXRjaExpc3RQYXJhbXMgYXMgQmF0Y2hMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgImltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uL2NvcmUuanNcIjtcbmltcG9ydCB7IEFudGhyb3BpY0Vycm9yLCBBUElVc2VyQWJvcnRFcnJvciB9IGZyb20gXCIuLi9lcnJvci5qc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBDb250ZW50QmxvY2ssXG4gIE1lc3NhZ2VzLFxuICB0eXBlIE1lc3NhZ2UsXG4gIHR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50LFxuICB0eXBlIE1lc3NhZ2VQYXJhbSxcbiAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlLFxuICB0eXBlIFRleHRCbG9jayxcbiAgdHlwZSBUZXh0Q2l0YXRpb24sXG59IGZyb20gXCIuLi9yZXNvdXJjZXMvbWVzc2FnZXMuanNcIjtcbmltcG9ydCB7IHR5cGUgUmVhZGFibGVTdHJlYW0sIHR5cGUgUmVzcG9uc2UgfSBmcm9tIFwiLi4vX3NoaW1zL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vc3RyZWFtaW5nLmpzXCI7XG5pbXBvcnQgeyBwYXJ0aWFsUGFyc2UgfSBmcm9tIFwiLi4vX3ZlbmRvci9wYXJ0aWFsLWpzb24tcGFyc2VyL3BhcnNlci5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VTdHJlYW1FdmVudHMge1xuICBjb25uZWN0OiAoKSA9PiB2b2lkO1xuICBzdHJlYW1FdmVudDogKGV2ZW50OiBNZXNzYWdlU3RyZWFtRXZlbnQsIHNuYXBzaG90OiBNZXNzYWdlKSA9PiB2b2lkO1xuICB0ZXh0OiAodGV4dERlbHRhOiBzdHJpbmcsIHRleHRTbmFwc2hvdDogc3RyaW5nKSA9PiB2b2lkO1xuICBjaXRhdGlvbjogKGNpdGF0aW9uOiBUZXh0Q2l0YXRpb24sIGNpdGF0aW9uc1NuYXBzaG90OiBUZXh0Q2l0YXRpb25bXSkgPT4gdm9pZDtcbiAgaW5wdXRKc29uOiAocGFydGlhbEpzb246IHN0cmluZywganNvblNuYXBzaG90OiB1bmtub3duKSA9PiB2b2lkO1xuICBtZXNzYWdlOiAobWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZDtcbiAgY29udGVudEJsb2NrOiAoY29udGVudDogQ29udGVudEJsb2NrKSA9PiB2b2lkO1xuICBmaW5hbE1lc3NhZ2U6IChtZXNzYWdlOiBNZXNzYWdlKSA9PiB2b2lkO1xuICBlcnJvcjogKGVycm9yOiBBbnRocm9waWNFcnJvcikgPT4gdm9pZDtcbiAgYWJvcnQ6IChlcnJvcjogQVBJVXNlckFib3J0RXJyb3IpID0+IHZvaWQ7XG4gIGVuZDogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBNZXNzYWdlU3RyZWFtRXZlbnRMaXN0ZW5lcnM8RXZlbnQgZXh0ZW5kcyBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzPiA9IHtcbiAgbGlzdGVuZXI6IE1lc3NhZ2VTdHJlYW1FdmVudHNbRXZlbnRdO1xuICBvbmNlPzogYm9vbGVhbjtcbn1bXTtcblxuY29uc3QgSlNPTl9CVUZfUFJPUEVSVFkgPSAnX19qc29uX2J1Zic7XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlU3RyZWFtIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxNZXNzYWdlU3RyZWFtRXZlbnQ+IHtcbiAgbWVzc2FnZXM6IE1lc3NhZ2VQYXJhbVtdID0gW107XG4gIHJlY2VpdmVkTWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFtdO1xuICAjY3VycmVudE1lc3NhZ2VTbmFwc2hvdDogTWVzc2FnZSB8IHVuZGVmaW5lZDtcblxuICBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgI2Nvbm5lY3RlZFByb21pc2U6IFByb21pc2U8UmVzcG9uc2UgfCBudWxsPjtcbiAgI3Jlc29sdmVDb25uZWN0ZWRQcm9taXNlOiAocmVzcG9uc2U6IFJlc3BvbnNlIHwgbnVsbCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuICAjcmVqZWN0Q29ubmVjdGVkUHJvbWlzZTogKGVycm9yOiBBbnRocm9waWNFcnJvcikgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gICNlbmRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAjcmVzb2x2ZUVuZFByb21pc2U6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgI3JlamVjdEVuZFByb21pc2U6IChlcnJvcjogQW50aHJvcGljRXJyb3IpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAjbGlzdGVuZXJzOiB7IFtFdmVudCBpbiBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzXT86IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gfSA9IHt9O1xuXG4gICNlbmRlZCA9IGZhbHNlO1xuICAjZXJyb3JlZCA9IGZhbHNlO1xuICAjYWJvcnRlZCA9IGZhbHNlO1xuICAjY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IGZhbHNlO1xuICAjcmVzcG9uc2U6IFJlc3BvbnNlIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgI3JlcXVlc3RfaWQ6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jY29ubmVjdGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlPFJlc3BvbnNlIHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy4jcmVzb2x2ZUNvbm5lY3RlZFByb21pc2UgPSByZXNvbHZlO1xuICAgICAgdGhpcy4jcmVqZWN0Q29ubmVjdGVkUHJvbWlzZSA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHRoaXMuI2VuZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlRW5kUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICB0aGlzLiNyZWplY3RFbmRQcm9taXNlID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZXNlIHByb21pc2VzIGNhdXNlIHVuaGFuZGxlZCByZWplY3Rpb24gZXJyb3JzLlxuICAgIC8vIHdlIHdpbGwgbWFudWFsbHkgY2F1c2UgYW4gdW5oYW5kbGVkIHJlamVjdGlvbiBlcnJvciBsYXRlclxuICAgIC8vIGlmIHRoZSB1c2VyIGhhc24ndCByZWdpc3RlcmVkIGFueSBlcnJvciBsaXN0ZW5lciBvciBjYWxsZWRcbiAgICAvLyBhbnkgcHJvbWlzZS1yZXR1cm5pbmcgbWV0aG9kLlxuICAgIHRoaXMuI2Nvbm5lY3RlZFByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICAgIHRoaXMuI2VuZFByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICB9XG5cbiAgZ2V0IHJlc3BvbnNlKCk6IFJlc3BvbnNlIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI3Jlc3BvbnNlO1xuICB9XG5cbiAgZ2V0IHJlcXVlc3RfaWQoKTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI3JlcXVlc3RfaWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYE1lc3NhZ2VTdHJlYW1gIGRhdGEsIHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSBhbmQgdGhlIElEIG9mIHRoZSByZXF1ZXN0LFxuICAgKiByZXR1cm5lZCB2aWUgdGhlIGByZXF1ZXN0LWlkYCBoZWFkZXIgd2hpY2ggaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcgcmVxdWVzdHMgYW5kIHJlc3BvcnRpbmdcbiAgICogaXNzdWVzIHRvIEFudGhyb3BpYy5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYEFQSVByb21pc2Uud2l0aFJlc3BvbnNlKClgIG1ldGhvZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCByYWlzZSBhbiBlcnJvciBpZiB5b3UgY3JlYXRlZCB0aGUgc3RyZWFtIHVzaW5nIGBNZXNzYWdlU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbWBcbiAgICogYXMgbm8gYFJlc3BvbnNlYCBpcyBhdmFpbGFibGUuXG4gICAqL1xuICBhc3luYyB3aXRoUmVzcG9uc2UoKTogUHJvbWlzZTx7XG4gICAgZGF0YTogTWVzc2FnZVN0cmVhbTtcbiAgICByZXNwb25zZTogUmVzcG9uc2U7XG4gICAgcmVxdWVzdF9pZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgfT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy4jY29ubmVjdGVkUHJvbWlzZTtcbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXNvbHZlIGEgYFJlc3BvbnNlYCBvYmplY3QnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogdGhpcyxcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgcmVxdWVzdF9pZDogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3JlcXVlc3QtaWQnKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVuZGVkIGZvciB1c2Ugb24gdGhlIGZyb250ZW5kLCBjb25zdW1pbmcgYSBzdHJlYW0gcHJvZHVjZWQgd2l0aFxuICAgKiBgLnRvUmVhZGFibGVTdHJlYW0oKWAgb24gdGhlIGJhY2tlbmQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBtZXNzYWdlcyBzZW50IHRvIHRoZSBtb2RlbCBkbyBub3QgYXBwZWFyIGluIGAub24oJ21lc3NhZ2UnKWBcbiAgICogaW4gdGhpcyBjb250ZXh0LlxuICAgKi9cbiAgc3RhdGljIGZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW06IFJlYWRhYmxlU3RyZWFtKTogTWVzc2FnZVN0cmVhbSB7XG4gICAgY29uc3QgcnVubmVyID0gbmV3IE1lc3NhZ2VTdHJlYW0oKTtcbiAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX2Zyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU1lc3NhZ2UoXG4gICAgbWVzc2FnZXM6IE1lc3NhZ2VzLFxuICAgIHBhcmFtczogTWVzc2FnZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IE1lc3NhZ2VTdHJlYW0ge1xuICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBNZXNzYWdlU3RyZWFtKCk7XG4gICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHBhcmFtcy5tZXNzYWdlcykge1xuICAgICAgcnVubmVyLl9hZGRNZXNzYWdlUGFyYW0obWVzc2FnZSk7XG4gICAgfVxuICAgIHJ1bm5lci5fcnVuKCgpID0+XG4gICAgICBydW5uZXIuX2NyZWF0ZU1lc3NhZ2UoXG4gICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICB7IC4uLnBhcmFtcywgc3RyZWFtOiB0cnVlIH0sXG4gICAgICAgIHsgLi4ub3B0aW9ucywgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdzdHJlYW0nIH0gfSxcbiAgICAgICksXG4gICAgKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9ydW4oZXhlY3V0b3I6ICgpID0+IFByb21pc2U8YW55Pikge1xuICAgIGV4ZWN1dG9yKCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLl9lbWl0RmluYWwoKTtcbiAgICAgIHRoaXMuX2VtaXQoJ2VuZCcpO1xuICAgIH0sIHRoaXMuI2hhbmRsZUVycm9yKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfYWRkTWVzc2FnZVBhcmFtKG1lc3NhZ2U6IE1lc3NhZ2VQYXJhbSkge1xuICAgIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfYWRkTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlLCBlbWl0ID0gdHJ1ZSkge1xuICAgIHRoaXMucmVjZWl2ZWRNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgIGlmIChlbWl0KSB7XG4gICAgICB0aGlzLl9lbWl0KCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9jcmVhdGVNZXNzYWdlKFxuICAgIG1lc3NhZ2VzOiBNZXNzYWdlcyxcbiAgICBwYXJhbXM6IE1lc3NhZ2VDcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cbiAgICB0aGlzLiNiZWdpblJlcXVlc3QoKTtcbiAgICBjb25zdCB7IHJlc3BvbnNlLCBkYXRhOiBzdHJlYW0gfSA9IGF3YWl0IG1lc3NhZ2VzXG4gICAgICAuY3JlYXRlKHsgLi4ucGFyYW1zLCBzdHJlYW06IHRydWUgfSwgeyAuLi5vcHRpb25zLCBzaWduYWw6IHRoaXMuY29udHJvbGxlci5zaWduYWwgfSlcbiAgICAgIC53aXRoUmVzcG9uc2UoKTtcbiAgICB0aGlzLl9jb25uZWN0ZWQocmVzcG9uc2UpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgZXZlbnQgb2Ygc3RyZWFtKSB7XG4gICAgICB0aGlzLiNhZGRTdHJlYW1FdmVudChldmVudCk7XG4gICAgfVxuICAgIGlmIChzdHJlYW0uY29udHJvbGxlci5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBBUElVc2VyQWJvcnRFcnJvcigpO1xuICAgIH1cbiAgICB0aGlzLiNlbmRSZXF1ZXN0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2Nvbm5lY3RlZChyZXNwb25zZTogUmVzcG9uc2UgfCBudWxsKSB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHJldHVybjtcbiAgICB0aGlzLiNyZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuI3JlcXVlc3RfaWQgPSByZXNwb25zZT8uaGVhZGVycy5nZXQoJ3JlcXVlc3QtaWQnKTtcbiAgICB0aGlzLiNyZXNvbHZlQ29ubmVjdGVkUHJvbWlzZShyZXNwb25zZSk7XG4gICAgdGhpcy5fZW1pdCgnY29ubmVjdCcpO1xuICB9XG5cbiAgZ2V0IGVuZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiNlbmRlZDtcbiAgfVxuXG4gIGdldCBlcnJvcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiNlcnJvcmVkO1xuICB9XG5cbiAgZ2V0IGFib3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2Fib3J0ZWQ7XG4gIH1cblxuICBhYm9ydCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkgZm9yIHRoZSBldmVudC5cbiAgICogTm8gY2hlY2tzIGFyZSBtYWRlIHRvIHNlZSBpZiB0aGUgbGlzdGVuZXIgaGFzIGFscmVhZHkgYmVlbiBhZGRlZC4gTXVsdGlwbGUgY2FsbHMgcGFzc2luZ1xuICAgKiB0aGUgc2FtZSBjb21iaW5hdGlvbiBvZiBldmVudCBhbmQgbGlzdGVuZXIgd2lsbCByZXN1bHQgaW4gdGhlIGxpc3RlbmVyIGJlaW5nIGFkZGVkLCBhbmRcbiAgICogY2FsbGVkLCBtdWx0aXBsZSB0aW1lcy5cbiAgICogQHJldHVybnMgdGhpcyBNZXNzYWdlU3RyZWFtLCBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkXG4gICAqL1xuICBvbjxFdmVudCBleHRlbmRzIGtleW9mIE1lc3NhZ2VTdHJlYW1FdmVudHM+KGV2ZW50OiBFdmVudCwgbGlzdGVuZXI6IE1lc3NhZ2VTdHJlYW1FdmVudHNbRXZlbnRdKTogdGhpcyB7XG4gICAgY29uc3QgbGlzdGVuZXJzOiBNZXNzYWdlU3RyZWFtRXZlbnRMaXN0ZW5lcnM8RXZlbnQ+ID1cbiAgICAgIHRoaXMuI2xpc3RlbmVyc1tldmVudF0gfHwgKHRoaXMuI2xpc3RlbmVyc1tldmVudF0gPSBbXSk7XG4gICAgbGlzdGVuZXJzLnB1c2goeyBsaXN0ZW5lciB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIgZnJvbSB0aGUgbGlzdGVuZXIgYXJyYXkgZm9yIHRoZSBldmVudC5cbiAgICogb2ZmKCkgd2lsbCByZW1vdmUsIGF0IG1vc3QsIG9uZSBpbnN0YW5jZSBvZiBhIGxpc3RlbmVyIGZyb20gdGhlIGxpc3RlbmVyIGFycmF5LiBJZiBhbnkgc2luZ2xlXG4gICAqIGxpc3RlbmVyIGhhcyBiZWVuIGFkZGVkIG11bHRpcGxlIHRpbWVzIHRvIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIHNwZWNpZmllZCBldmVudCwgdGhlblxuICAgKiBvZmYoKSBtdXN0IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB0byByZW1vdmUgZWFjaCBpbnN0YW5jZS5cbiAgICogQHJldHVybnMgdGhpcyBNZXNzYWdlU3RyZWFtLCBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkXG4gICAqL1xuICBvZmY8RXZlbnQgZXh0ZW5kcyBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzPihldmVudDogRXZlbnQsIGxpc3RlbmVyOiBNZXNzYWdlU3RyZWFtRXZlbnRzW0V2ZW50XSk6IHRoaXMge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuI2xpc3RlbmVyc1tldmVudF07XG4gICAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmZpbmRJbmRleCgobCkgPT4gbC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgb25lLXRpbWUgbGlzdGVuZXIgZnVuY3Rpb24gZm9yIHRoZSBldmVudC4gVGhlIG5leHQgdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLFxuICAgKiB0aGlzIGxpc3RlbmVyIGlzIHJlbW92ZWQgYW5kIHRoZW4gaW52b2tlZC5cbiAgICogQHJldHVybnMgdGhpcyBNZXNzYWdlU3RyZWFtLCBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkXG4gICAqL1xuICBvbmNlPEV2ZW50IGV4dGVuZHMga2V5b2YgTWVzc2FnZVN0cmVhbUV2ZW50cz4oZXZlbnQ6IEV2ZW50LCBsaXN0ZW5lcjogTWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0pOiB0aGlzIHtcbiAgICBjb25zdCBsaXN0ZW5lcnM6IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gPVxuICAgICAgdGhpcy4jbGlzdGVuZXJzW2V2ZW50XSB8fCAodGhpcy4jbGlzdGVuZXJzW2V2ZW50XSA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7IGxpc3RlbmVyLCBvbmNlOiB0cnVlIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgc2ltaWxhciB0byBgLm9uY2UoKWAsIGJ1dCByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBuZXh0IHRpbWVcbiAgICogdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCwgaW5zdGVhZCBvZiBjYWxsaW5nIGEgbGlzdGVuZXIgY2FsbGJhY2suXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBuZXh0IHRpbWUgZ2l2ZW4gZXZlbnQgaXMgdHJpZ2dlcmVkLFxuICAgKiBvciByZWplY3RzIGlmIGFuIGVycm9yIGlzIGVtaXR0ZWQuICAoSWYgeW91IHJlcXVlc3QgdGhlICdlcnJvcicgZXZlbnQsXG4gICAqIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZXJyb3IpLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBzdHJlYW0uZW1pdHRlZCgnbWVzc2FnZScpIC8vIHJlamVjdHMgaWYgdGhlIHN0cmVhbSBlcnJvcnNcbiAgICovXG4gIGVtaXR0ZWQ8RXZlbnQgZXh0ZW5kcyBrZXlvZiBNZXNzYWdlU3RyZWFtRXZlbnRzPihcbiAgICBldmVudDogRXZlbnQsXG4gICk6IFByb21pc2U8XG4gICAgUGFyYW1ldGVyczxNZXNzYWdlU3RyZWFtRXZlbnRzW0V2ZW50XT4gZXh0ZW5kcyBbaW5mZXIgUGFyYW1dID8gUGFyYW1cbiAgICA6IFBhcmFtZXRlcnM8TWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0+IGV4dGVuZHMgW10gPyB2b2lkXG4gICAgOiBQYXJhbWV0ZXJzPE1lc3NhZ2VTdHJlYW1FdmVudHNbRXZlbnRdPlxuICA+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy4jY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IHRydWU7XG4gICAgICBpZiAoZXZlbnQgIT09ICdlcnJvcicpIHRoaXMub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgdGhpcy5vbmNlKGV2ZW50LCByZXNvbHZlIGFzIGFueSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBkb25lKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuI2NhdGNoaW5nUHJvbWlzZUNyZWF0ZWQgPSB0cnVlO1xuICAgIGF3YWl0IHRoaXMuI2VuZFByb21pc2U7XG4gIH1cblxuICBnZXQgY3VycmVudE1lc3NhZ2UoKTogTWVzc2FnZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3Q7XG4gIH1cblxuICAjZ2V0RmluYWxNZXNzYWdlKCk6IE1lc3NhZ2Uge1xuICAgIGlmICh0aGlzLnJlY2VpdmVkTWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoJ3N0cmVhbSBlbmRlZCB3aXRob3V0IHByb2R1Y2luZyBhIE1lc3NhZ2Ugd2l0aCByb2xlPWFzc2lzdGFudCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZE1lc3NhZ2VzLmF0KC0xKSE7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdGhlIGZpbmFsIGFzc2lzdGFudCBNZXNzYWdlIHJlc3BvbnNlLFxuICAgKiBvciByZWplY3RzIGlmIGFuIGVycm9yIG9jY3VycmVkIG9yIHRoZSBzdHJlYW0gZW5kZWQgcHJlbWF0dXJlbHkgd2l0aG91dCBwcm9kdWNpbmcgYSBNZXNzYWdlLlxuICAgKi9cbiAgYXN5bmMgZmluYWxNZXNzYWdlKCk6IFByb21pc2U8TWVzc2FnZT4ge1xuICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuICAgIHJldHVybiB0aGlzLiNnZXRGaW5hbE1lc3NhZ2UoKTtcbiAgfVxuXG4gICNnZXRGaW5hbFRleHQoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5yZWNlaXZlZE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKCdzdHJlYW0gZW5kZWQgd2l0aG91dCBwcm9kdWNpbmcgYSBNZXNzYWdlIHdpdGggcm9sZT1hc3Npc3RhbnQnKTtcbiAgICB9XG4gICAgY29uc3QgdGV4dEJsb2NrcyA9IHRoaXMucmVjZWl2ZWRNZXNzYWdlc1xuICAgICAgLmF0KC0xKSFcbiAgICAgIC5jb250ZW50LmZpbHRlcigoYmxvY2spOiBibG9jayBpcyBUZXh0QmxvY2sgPT4gYmxvY2sudHlwZSA9PT0gJ3RleHQnKVxuICAgICAgLm1hcCgoYmxvY2spID0+IGJsb2NrLnRleHQpO1xuICAgIGlmICh0ZXh0QmxvY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKCdzdHJlYW0gZW5kZWQgd2l0aG91dCBwcm9kdWNpbmcgYSBjb250ZW50IGJsb2NrIHdpdGggdHlwZT10ZXh0Jyk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0QmxvY2tzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0aGUgZmluYWwgYXNzaXN0YW50IE1lc3NhZ2UncyB0ZXh0IHJlc3BvbnNlLCBjb25jYXRlbmF0ZWRcbiAgICogdG9nZXRoZXIgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgdGV4dCBibG9ja3MuXG4gICAqIFJlamVjdHMgaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIE1lc3NhZ2UuXG4gICAqL1xuICBhc3luYyBmaW5hbFRleHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBhd2FpdCB0aGlzLmRvbmUoKTtcbiAgICByZXR1cm4gdGhpcy4jZ2V0RmluYWxUZXh0KCk7XG4gIH1cblxuICAjaGFuZGxlRXJyb3IgPSAoZXJyb3I6IHVua25vd24pID0+IHtcbiAgICB0aGlzLiNlcnJvcmVkID0gdHJ1ZTtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgIGVycm9yID0gbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFQSVVzZXJBYm9ydEVycm9yKSB7XG4gICAgICB0aGlzLiNhYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0KCdhYm9ydCcsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQW50aHJvcGljRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGNvbnN0IGFudGhyb3BpY0Vycm9yOiBBbnRocm9waWNFcnJvciA9IG5ldyBBbnRocm9waWNFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGFudGhyb3BpY0Vycm9yLmNhdXNlID0gZXJyb3I7XG4gICAgICByZXR1cm4gdGhpcy5fZW1pdCgnZXJyb3InLCBhbnRocm9waWNFcnJvcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9lbWl0KCdlcnJvcicsIG5ldyBBbnRocm9waWNFcnJvcihTdHJpbmcoZXJyb3IpKSk7XG4gIH07XG5cbiAgcHJvdGVjdGVkIF9lbWl0PEV2ZW50IGV4dGVuZHMga2V5b2YgTWVzc2FnZVN0cmVhbUV2ZW50cz4oXG4gICAgZXZlbnQ6IEV2ZW50LFxuICAgIC4uLmFyZ3M6IFBhcmFtZXRlcnM8TWVzc2FnZVN0cmVhbUV2ZW50c1tFdmVudF0+XG4gICkge1xuICAgIC8vIG1ha2Ugc3VyZSB3ZSBkb24ndCBlbWl0IGFueSBNZXNzYWdlU3RyZWFtRXZlbnRzIGFmdGVyIGVuZFxuICAgIGlmICh0aGlzLiNlbmRlZCkgcmV0dXJuO1xuXG4gICAgaWYgKGV2ZW50ID09PSAnZW5kJykge1xuICAgICAgdGhpcy4jZW5kZWQgPSB0cnVlO1xuICAgICAgdGhpcy4jcmVzb2x2ZUVuZFByb21pc2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnM6IE1lc3NhZ2VTdHJlYW1FdmVudExpc3RlbmVyczxFdmVudD4gfCB1bmRlZmluZWQgPSB0aGlzLiNsaXN0ZW5lcnNbZXZlbnRdO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuI2xpc3RlbmVyc1tldmVudF0gPSBsaXN0ZW5lcnMuZmlsdGVyKChsKSA9PiAhbC5vbmNlKSBhcyBhbnk7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgoeyBsaXN0ZW5lciB9OiBhbnkpID0+IGxpc3RlbmVyKC4uLmFyZ3MpKTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgPT09ICdhYm9ydCcpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gYXJnc1swXSBhcyBBUElVc2VyQWJvcnRFcnJvcjtcbiAgICAgIGlmICghdGhpcy4jY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCAmJiAhbGlzdGVuZXJzPy5sZW5ndGgpIHtcbiAgICAgICAgUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgICAgdGhpcy4jcmVqZWN0Q29ubmVjdGVkUHJvbWlzZShlcnJvcik7XG4gICAgICB0aGlzLiNyZWplY3RFbmRQcm9taXNlKGVycm9yKTtcbiAgICAgIHRoaXMuX2VtaXQoJ2VuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudCA9PT0gJ2Vycm9yJykge1xuICAgICAgLy8gTk9URTogX2VtaXQoJ2Vycm9yJywgZXJyb3IpIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tICNoYW5kbGVFcnJvcigpLlxuXG4gICAgICBjb25zdCBlcnJvciA9IGFyZ3NbMF0gYXMgQW50aHJvcGljRXJyb3I7XG4gICAgICBpZiAoIXRoaXMuI2NhdGNoaW5nUHJvbWlzZUNyZWF0ZWQgJiYgIWxpc3RlbmVycz8ubGVuZ3RoKSB7XG4gICAgICAgIC8vIFRyaWdnZXIgYW4gdW5oYW5kbGVkIHJlamVjdGlvbiBpZiB0aGUgdXNlciBoYXNuJ3QgcmVnaXN0ZXJlZCBhbnkgZXJyb3IgaGFuZGxlcnMuXG4gICAgICAgIC8vIElmIHlvdSBhcmUgc2VlaW5nIHN0YWNrIHRyYWNlcyBoZXJlLCBtYWtlIHN1cmUgdG8gaGFuZGxlIGVycm9ycyB2aWEgZWl0aGVyOlxuICAgICAgICAvLyAtIHJ1bm5lci5vbignZXJyb3InLCAoKSA9PiAuLi4pXG4gICAgICAgIC8vIC0gYXdhaXQgcnVubmVyLmRvbmUoKVxuICAgICAgICAvLyAtIGF3YWl0IHJ1bm5lci5maW5hbC4uLigpXG4gICAgICAgIC8vIC0gZXRjLlxuICAgICAgICBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgICB0aGlzLiNyZWplY3RDb25uZWN0ZWRQcm9taXNlKGVycm9yKTtcbiAgICAgIHRoaXMuI3JlamVjdEVuZFByb21pc2UoZXJyb3IpO1xuICAgICAgdGhpcy5fZW1pdCgnZW5kJyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9lbWl0RmluYWwoKSB7XG4gICAgY29uc3QgZmluYWxNZXNzYWdlID0gdGhpcy5yZWNlaXZlZE1lc3NhZ2VzLmF0KC0xKTtcbiAgICBpZiAoZmluYWxNZXNzYWdlKSB7XG4gICAgICB0aGlzLl9lbWl0KCdmaW5hbE1lc3NhZ2UnLCB0aGlzLiNnZXRGaW5hbE1lc3NhZ2UoKSk7XG4gICAgfVxuICB9XG5cbiAgI2JlZ2luUmVxdWVzdCgpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuICAgIHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3QgPSB1bmRlZmluZWQ7XG4gIH1cbiAgI2FkZFN0cmVhbUV2ZW50KGV2ZW50OiBNZXNzYWdlU3RyZWFtRXZlbnQpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuICAgIGNvbnN0IG1lc3NhZ2VTbmFwc2hvdCA9IHRoaXMuI2FjY3VtdWxhdGVNZXNzYWdlKGV2ZW50KTtcbiAgICB0aGlzLl9lbWl0KCdzdHJlYW1FdmVudCcsIGV2ZW50LCBtZXNzYWdlU25hcHNob3QpO1xuXG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdjb250ZW50X2Jsb2NrX2RlbHRhJzoge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gbWVzc2FnZVNuYXBzaG90LmNvbnRlbnQuYXQoLTEpITtcbiAgICAgICAgc3dpdGNoIChldmVudC5kZWx0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAndGV4dF9kZWx0YSc6IHtcbiAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICB0aGlzLl9lbWl0KCd0ZXh0JywgZXZlbnQuZGVsdGEudGV4dCwgY29udGVudC50ZXh0IHx8ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdjaXRhdGlvbnNfZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZW1pdCgnY2l0YXRpb24nLCBldmVudC5kZWx0YS5jaXRhdGlvbiwgY29udGVudC5jaXRhdGlvbnMgPz8gW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ2lucHV0X2pzb25fZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAndG9vbF91c2UnICYmIGNvbnRlbnQuaW5wdXQpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZW1pdCgnaW5wdXRKc29uJywgZXZlbnQuZGVsdGEucGFydGlhbF9qc29uLCBjb250ZW50LmlucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2hlY2tOZXZlcihldmVudC5kZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdtZXNzYWdlX3N0b3AnOiB7XG4gICAgICAgIHRoaXMuX2FkZE1lc3NhZ2VQYXJhbShtZXNzYWdlU25hcHNob3QpO1xuICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKG1lc3NhZ2VTbmFwc2hvdCwgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29udGVudF9ibG9ja19zdG9wJzoge1xuICAgICAgICB0aGlzLl9lbWl0KCdjb250ZW50QmxvY2snLCBtZXNzYWdlU25hcHNob3QuY29udGVudC5hdCgtMSkhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdtZXNzYWdlX3N0YXJ0Jzoge1xuICAgICAgICB0aGlzLiNjdXJyZW50TWVzc2FnZVNuYXBzaG90ID0gbWVzc2FnZVNuYXBzaG90O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbnRlbnRfYmxvY2tfc3RhcnQnOlxuICAgICAgY2FzZSAnbWVzc2FnZV9kZWx0YSc6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAjZW5kUmVxdWVzdCgpOiBNZXNzYWdlIHtcbiAgICBpZiAodGhpcy5lbmRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGBzdHJlYW0gaGFzIGVuZGVkLCB0aGlzIHNob3VsZG4ndCBoYXBwZW5gKTtcbiAgICB9XG4gICAgY29uc3Qgc25hcHNob3QgPSB0aGlzLiNjdXJyZW50TWVzc2FnZVNuYXBzaG90O1xuICAgIGlmICghc25hcHNob3QpIHtcbiAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgcmVxdWVzdCBlbmRlZCB3aXRob3V0IHNlbmRpbmcgYW55IGNodW5rc2ApO1xuICAgIH1cbiAgICB0aGlzLiNjdXJyZW50TWVzc2FnZVNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzbmFwc2hvdDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfZnJvbVJlYWRhYmxlU3RyZWFtKFxuICAgIHJlYWRhYmxlU3RyZWFtOiBSZWFkYWJsZVN0cmVhbSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKSk7XG4gICAgfVxuICAgIHRoaXMuI2JlZ2luUmVxdWVzdCgpO1xuICAgIHRoaXMuX2Nvbm5lY3RlZChudWxsKTtcbiAgICBjb25zdCBzdHJlYW0gPSBTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtPE1lc3NhZ2VTdHJlYW1FdmVudD4ocmVhZGFibGVTdHJlYW0sIHRoaXMuY29udHJvbGxlcik7XG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZFN0cmVhbUV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuICAgIHRoaXMuI2VuZFJlcXVlc3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNdXRhdGVzIHRoaXMuI2N1cnJlbnRNZXNzYWdlIHdpdGggdGhlIGN1cnJlbnQgZXZlbnQuIEhhbmRsaW5nIHRoZSBhY2N1bXVsYXRpb24gb2YgbXVsdGlwbGUgbWVzc2FnZXNcbiAgICogd2lsbCBiZSBuZWVkZWQgdG8gYmUgaGFuZGxlZCBieSB0aGUgY2FsbGVyLCB0aGlzIG1ldGhvZCB3aWxsIHRocm93IGlmIHlvdSB0cnkgdG8gYWNjdW11bGF0ZSBmb3IgbXVsdGlwbGVcbiAgICogbWVzc2FnZXMuXG4gICAqL1xuICAjYWNjdW11bGF0ZU1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VTdHJlYW1FdmVudCk6IE1lc3NhZ2Uge1xuICAgIGxldCBzbmFwc2hvdCA9IHRoaXMuI2N1cnJlbnRNZXNzYWdlU25hcHNob3Q7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21lc3NhZ2Vfc3RhcnQnKSB7XG4gICAgICBpZiAoc25hcHNob3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGBVbmV4cGVjdGVkIGV2ZW50IG9yZGVyLCBnb3QgJHtldmVudC50eXBlfSBiZWZvcmUgcmVjZWl2aW5nIFwibWVzc2FnZV9zdG9wXCJgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmVudC5tZXNzYWdlO1xuICAgIH1cblxuICAgIGlmICghc25hcHNob3QpIHtcbiAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgVW5leHBlY3RlZCBldmVudCBvcmRlciwgZ290ICR7ZXZlbnQudHlwZX0gYmVmb3JlIFwibWVzc2FnZV9zdGFydFwiYCk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdtZXNzYWdlX3N0b3AnOlxuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICBjYXNlICdtZXNzYWdlX2RlbHRhJzpcbiAgICAgICAgc25hcHNob3Quc3RvcF9yZWFzb24gPSBldmVudC5kZWx0YS5zdG9wX3JlYXNvbjtcbiAgICAgICAgc25hcHNob3Quc3RvcF9zZXF1ZW5jZSA9IGV2ZW50LmRlbHRhLnN0b3Bfc2VxdWVuY2U7XG4gICAgICAgIHNuYXBzaG90LnVzYWdlLm91dHB1dF90b2tlbnMgPSBldmVudC51c2FnZS5vdXRwdXRfdG9rZW5zO1xuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICBjYXNlICdjb250ZW50X2Jsb2NrX3N0YXJ0JzpcbiAgICAgICAgc25hcHNob3QuY29udGVudC5wdXNoKGV2ZW50LmNvbnRlbnRfYmxvY2spO1xuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICBjYXNlICdjb250ZW50X2Jsb2NrX2RlbHRhJzoge1xuICAgICAgICBjb25zdCBzbmFwc2hvdENvbnRlbnQgPSBzbmFwc2hvdC5jb250ZW50LmF0KGV2ZW50LmluZGV4KTtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRlbHRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICd0ZXh0X2RlbHRhJzoge1xuICAgICAgICAgICAgaWYgKHNuYXBzaG90Q29udGVudD8udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgIHNuYXBzaG90Q29udGVudC50ZXh0ICs9IGV2ZW50LmRlbHRhLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnY2l0YXRpb25zX2RlbHRhJzoge1xuICAgICAgICAgICAgaWYgKHNuYXBzaG90Q29udGVudD8udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgIHNuYXBzaG90Q29udGVudC5jaXRhdGlvbnMgPz89IFtdO1xuICAgICAgICAgICAgICBzbmFwc2hvdENvbnRlbnQuY2l0YXRpb25zLnB1c2goZXZlbnQuZGVsdGEuY2l0YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ2lucHV0X2pzb25fZGVsdGEnOiB7XG4gICAgICAgICAgICBpZiAoc25hcHNob3RDb250ZW50Py50eXBlID09PSAndG9vbF91c2UnKSB7XG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgcmF3IEpTT04gc3RyaW5nIGFzIHdlbGwgc28gdGhhdCB3ZSBjYW5cbiAgICAgICAgICAgICAgLy8gcmUtcGFyc2UgaXQgZm9yIGVhY2ggZGVsdGEsIGZvciBub3cgd2UganVzdCBzdG9yZSBpdCBhcyBhbiB1bnR5cGVkXG4gICAgICAgICAgICAgIC8vIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIHRoZSBzbmFwc2hvdFxuICAgICAgICAgICAgICBsZXQganNvbkJ1ZiA9IChzbmFwc2hvdENvbnRlbnQgYXMgYW55KVtKU09OX0JVRl9QUk9QRVJUWV0gfHwgJyc7XG4gICAgICAgICAgICAgIGpzb25CdWYgKz0gZXZlbnQuZGVsdGEucGFydGlhbF9qc29uO1xuXG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzbmFwc2hvdENvbnRlbnQsIEpTT05fQlVGX1BST1BFUlRZLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGpzb25CdWYsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmIChqc29uQnVmKSB7XG4gICAgICAgICAgICAgICAgc25hcHNob3RDb250ZW50LmlucHV0ID0gcGFydGlhbFBhcnNlKGpzb25CdWYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNoZWNrTmV2ZXIoZXZlbnQuZGVsdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgfVxuICAgICAgY2FzZSAnY29udGVudF9ibG9ja19zdG9wJzpcbiAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxNZXNzYWdlU3RyZWFtRXZlbnQ+IHtcbiAgICBjb25zdCBwdXNoUXVldWU6IE1lc3NhZ2VTdHJlYW1FdmVudFtdID0gW107XG4gICAgY29uc3QgcmVhZFF1ZXVlOiB7XG4gICAgICByZXNvbHZlOiAoY2h1bms6IE1lc3NhZ2VTdHJlYW1FdmVudCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICAgIHJlamVjdDogKGVycm9yOiB1bmtub3duKSA9PiB2b2lkO1xuICAgIH1bXSA9IFtdO1xuICAgIGxldCBkb25lID0gZmFsc2U7XG5cbiAgICB0aGlzLm9uKCdzdHJlYW1FdmVudCcsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgcmVhZGVyID0gcmVhZFF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAocmVhZGVyKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hRdWV1ZS5wdXNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgICByZWFkUXVldWUubGVuZ3RoID0gMDtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Fib3J0JywgKGVycikgPT4ge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlYWRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGFzeW5jICgpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PE1lc3NhZ2VTdHJlYW1FdmVudD4+ID0+IHtcbiAgICAgICAgaWYgKCFwdXNoUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPE1lc3NhZ2VTdHJlYW1FdmVudCB8IHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgICAgIHJlYWRRdWV1ZS5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pLFxuICAgICAgICAgICkudGhlbigoY2h1bmspID0+IChjaHVuayA/IHsgdmFsdWU6IGNodW5rLCBkb25lOiBmYWxzZSB9IDogeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaHVuayA9IHB1c2hRdWV1ZS5zaGlmdCgpITtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGNodW5rLCBkb25lOiBmYWxzZSB9O1xuICAgICAgfSxcbiAgICAgIHJldHVybjogYXN5bmMgKCkgPT4ge1xuICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHRvUmVhZGFibGVTdHJlYW0oKTogUmVhZGFibGVTdHJlYW0ge1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0odGhpc1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0uYmluZCh0aGlzKSwgdGhpcy5jb250cm9sbGVyKTtcbiAgICByZXR1cm4gc3RyZWFtLnRvUmVhZGFibGVTdHJlYW0oKTtcbiAgfVxufVxuXG4vLyB1c2VkIHRvIGVuc3VyZSBleGhhdXN0aXZlIGNhc2UgbWF0Y2hpbmcgd2l0aG91dCB0aHJvd2luZyBhIHJ1bnRpbWUgZXJyb3JcbmZ1bmN0aW9uIGNoZWNrTmV2ZXIoeDogbmV2ZXIpIHt9XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UuanNcIjtcbmltcG9ydCB7IEFQSVByb21pc2UgfSBmcm9tIFwiLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vLi4vY29yZS5qc1wiO1xuaW1wb3J0ICogYXMgTWVzc2FnZXNBUEkgZnJvbSBcIi4vbWVzc2FnZXMuanNcIjtcbmltcG9ydCAqIGFzIEJhdGNoZXNBUEkgZnJvbSBcIi4vYmF0Y2hlcy5qc1wiO1xuaW1wb3J0IHtcbiAgQmF0Y2hDcmVhdGVQYXJhbXMsXG4gIEJhdGNoTGlzdFBhcmFtcyxcbiAgQmF0Y2hlcyxcbiAgRGVsZXRlZE1lc3NhZ2VCYXRjaCxcbiAgTWVzc2FnZUJhdGNoLFxuICBNZXNzYWdlQmF0Y2hDYW5jZWxlZFJlc3VsdCxcbiAgTWVzc2FnZUJhdGNoRXJyb3JlZFJlc3VsdCxcbiAgTWVzc2FnZUJhdGNoRXhwaXJlZFJlc3VsdCxcbiAgTWVzc2FnZUJhdGNoSW5kaXZpZHVhbFJlc3BvbnNlLFxuICBNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzLFxuICBNZXNzYWdlQmF0Y2hSZXN1bHQsXG4gIE1lc3NhZ2VCYXRjaFN1Y2NlZWRlZFJlc3VsdCxcbiAgTWVzc2FnZUJhdGNoZXNQYWdlLFxufSBmcm9tIFwiLi9iYXRjaGVzLmpzXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vLi4vc3RyZWFtaW5nLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlU3RyZWFtIH0gZnJvbSBcIi4uLy4uL2xpYi9NZXNzYWdlU3RyZWFtLmpzXCI7XG5cbmV4cG9ydCB7IE1lc3NhZ2VTdHJlYW0gfSBmcm9tIFwiLi4vLi4vbGliL01lc3NhZ2VTdHJlYW0uanNcIjtcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBiYXRjaGVzOiBCYXRjaGVzQVBJLkJhdGNoZXMgPSBuZXcgQmF0Y2hlc0FQSS5CYXRjaGVzKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBzdHJ1Y3R1cmVkIGxpc3Qgb2YgaW5wdXQgbWVzc2FnZXMgd2l0aCB0ZXh0IGFuZC9vciBpbWFnZSBjb250ZW50LCBhbmQgdGhlXG4gICAqIG1vZGVsIHdpbGwgZ2VuZXJhdGUgdGhlIG5leHQgbWVzc2FnZSBpbiB0aGUgY29udmVyc2F0aW9uLlxuICAgKlxuICAgKiBUaGUgTWVzc2FnZXMgQVBJIGNhbiBiZSB1c2VkIGZvciBlaXRoZXIgc2luZ2xlIHF1ZXJpZXMgb3Igc3RhdGVsZXNzIG11bHRpLXR1cm5cbiAgICogY29udmVyc2F0aW9ucy5cbiAgICovXG4gIGNyZWF0ZShib2R5OiBNZXNzYWdlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IEFQSVByb21pc2U8TWVzc2FnZT47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBNZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxSYXdNZXNzYWdlU3RyZWFtRXZlbnQ+PjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxSYXdNZXNzYWdlU3RyZWFtRXZlbnQ+IHwgTWVzc2FnZT47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPE1lc3NhZ2U+IHwgQVBJUHJvbWlzZTxTdHJlYW08UmF3TWVzc2FnZVN0cmVhbUV2ZW50Pj4ge1xuICAgIGlmIChib2R5Lm1vZGVsIGluIERFUFJFQ0FURURfTU9ERUxTKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBUaGUgbW9kZWwgJyR7Ym9keS5tb2RlbH0nIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgcmVhY2ggZW5kLW9mLWxpZmUgb24gJHtcbiAgICAgICAgICBERVBSRUNBVEVEX01PREVMU1tib2R5Lm1vZGVsXVxuICAgICAgICB9XFxuUGxlYXNlIG1pZ3JhdGUgdG8gYSBuZXdlciBtb2RlbC4gVmlzaXQgaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9yZXNvdXJjZXMvbW9kZWwtZGVwcmVjYXRpb25zIGZvciBtb3JlIGluZm9ybWF0aW9uLmAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcycsIHtcbiAgICAgIGJvZHksXG4gICAgICB0aW1lb3V0OiAodGhpcy5fY2xpZW50IGFzIGFueSkuX29wdGlvbnMudGltZW91dCA/PyA2MDAwMDAsXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcbiAgICB9KSBhcyBBUElQcm9taXNlPE1lc3NhZ2U+IHwgQVBJUHJvbWlzZTxTdHJlYW08UmF3TWVzc2FnZVN0cmVhbUV2ZW50Pj47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgTWVzc2FnZSBzdHJlYW1cbiAgICovXG4gIHN0cmVhbShib2R5OiBNZXNzYWdlU3RyZWFtUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IE1lc3NhZ2VTdHJlYW0ge1xuICAgIHJldHVybiBNZXNzYWdlU3RyZWFtLmNyZWF0ZU1lc3NhZ2UodGhpcywgYm9keSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgdGhlIG51bWJlciBvZiB0b2tlbnMgaW4gYSBNZXNzYWdlLlxuICAgKlxuICAgKiBUaGUgVG9rZW4gQ291bnQgQVBJIGNhbiBiZSB1c2VkIHRvIGNvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZSxcbiAgICogaW5jbHVkaW5nIHRvb2xzLCBpbWFnZXMsIGFuZCBkb2N1bWVudHMsIHdpdGhvdXQgY3JlYXRpbmcgaXQuXG4gICAqL1xuICBjb3VudFRva2VucyhcbiAgICBib2R5OiBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxNZXNzYWdlVG9rZW5zQ291bnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcy9jb3VudF90b2tlbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlNjRQREZTb3VyY2Uge1xuICBkYXRhOiBzdHJpbmc7XG5cbiAgbWVkaWFfdHlwZTogJ2FwcGxpY2F0aW9uL3BkZic7XG5cbiAgdHlwZTogJ2Jhc2U2NCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVDb250cm9sRXBoZW1lcmFsIHtcbiAgdHlwZTogJ2VwaGVtZXJhbCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l0YXRpb25DaGFyTG9jYXRpb24ge1xuICBjaXRlZF90ZXh0OiBzdHJpbmc7XG5cbiAgZG9jdW1lbnRfaW5kZXg6IG51bWJlcjtcblxuICBkb2N1bWVudF90aXRsZTogc3RyaW5nIHwgbnVsbDtcblxuICBlbmRfY2hhcl9pbmRleDogbnVtYmVyO1xuXG4gIHN0YXJ0X2NoYXJfaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY2hhcl9sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l0YXRpb25DaGFyTG9jYXRpb25QYXJhbSB7XG4gIGNpdGVkX3RleHQ6IHN0cmluZztcblxuICBkb2N1bWVudF9pbmRleDogbnVtYmVyO1xuXG4gIGRvY3VtZW50X3RpdGxlOiBzdHJpbmcgfCBudWxsO1xuXG4gIGVuZF9jaGFyX2luZGV4OiBudW1iZXI7XG5cbiAgc3RhcnRfY2hhcl9pbmRleDogbnVtYmVyO1xuXG4gIHR5cGU6ICdjaGFyX2xvY2F0aW9uJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX2Jsb2NrX2luZGV4OiBudW1iZXI7XG5cbiAgc3RhcnRfYmxvY2tfaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY29udGVudF9ibG9ja19sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX2Jsb2NrX2luZGV4OiBudW1iZXI7XG5cbiAgc3RhcnRfYmxvY2tfaW5kZXg6IG51bWJlcjtcblxuICB0eXBlOiAnY29udGVudF9ibG9ja19sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l0YXRpb25QYWdlTG9jYXRpb24ge1xuICBjaXRlZF90ZXh0OiBzdHJpbmc7XG5cbiAgZG9jdW1lbnRfaW5kZXg6IG51bWJlcjtcblxuICBkb2N1bWVudF90aXRsZTogc3RyaW5nIHwgbnVsbDtcblxuICBlbmRfcGFnZV9udW1iZXI6IG51bWJlcjtcblxuICBzdGFydF9wYWdlX251bWJlcjogbnVtYmVyO1xuXG4gIHR5cGU6ICdwYWdlX2xvY2F0aW9uJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtIHtcbiAgY2l0ZWRfdGV4dDogc3RyaW5nO1xuXG4gIGRvY3VtZW50X2luZGV4OiBudW1iZXI7XG5cbiAgZG9jdW1lbnRfdGl0bGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZW5kX3BhZ2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgc3RhcnRfcGFnZV9udW1iZXI6IG51bWJlcjtcblxuICB0eXBlOiAncGFnZV9sb2NhdGlvbic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2l0YXRpb25zQ29uZmlnUGFyYW0ge1xuICBlbmFibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaXRhdGlvbnNEZWx0YSB7XG4gIGNpdGF0aW9uOiBDaXRhdGlvbkNoYXJMb2NhdGlvbiB8IENpdGF0aW9uUGFnZUxvY2F0aW9uIHwgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbjtcblxuICB0eXBlOiAnY2l0YXRpb25zX2RlbHRhJztcbn1cblxuZXhwb3J0IHR5cGUgQ29udGVudEJsb2NrID0gVGV4dEJsb2NrIHwgVG9vbFVzZUJsb2NrO1xuXG5leHBvcnQgdHlwZSBDb250ZW50QmxvY2tEZWx0YUV2ZW50ID0gUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudDtcblxuZXhwb3J0IHR5cGUgQ29udGVudEJsb2NrUGFyYW0gPVxuICB8IFRleHRCbG9ja1BhcmFtXG4gIHwgSW1hZ2VCbG9ja1BhcmFtXG4gIHwgVG9vbFVzZUJsb2NrUGFyYW1cbiAgfCBUb29sUmVzdWx0QmxvY2tQYXJhbVxuICB8IERvY3VtZW50QmxvY2tQYXJhbTtcblxuZXhwb3J0IGludGVyZmFjZSBDb250ZW50QmxvY2tTb3VyY2Uge1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxDb250ZW50QmxvY2tTb3VyY2VDb250ZW50PjtcblxuICB0eXBlOiAnY29udGVudCc7XG59XG5cbmV4cG9ydCB0eXBlIENvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQgPSBUZXh0QmxvY2tQYXJhbSB8IEltYWdlQmxvY2tQYXJhbTtcblxuZXhwb3J0IHR5cGUgQ29udGVudEJsb2NrU3RhcnRFdmVudCA9IFJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnQ7XG5cbmV4cG9ydCB0eXBlIENvbnRlbnRCbG9ja1N0b3BFdmVudCA9IFJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudDtcblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudEJsb2NrUGFyYW0ge1xuICBzb3VyY2U6IEJhc2U2NFBERlNvdXJjZSB8IFBsYWluVGV4dFNvdXJjZSB8IENvbnRlbnRCbG9ja1NvdXJjZTtcblxuICB0eXBlOiAnZG9jdW1lbnQnO1xuXG4gIGNhY2hlX2NvbnRyb2w/OiBDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIGNpdGF0aW9ucz86IENpdGF0aW9uc0NvbmZpZ1BhcmFtO1xuXG4gIGNvbnRleHQ/OiBzdHJpbmcgfCBudWxsO1xuXG4gIHRpdGxlPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUJsb2NrUGFyYW0ge1xuICBzb3VyY2U6IEltYWdlQmxvY2tQYXJhbS5Tb3VyY2U7XG5cbiAgdHlwZTogJ2ltYWdlJztcblxuICBjYWNoZV9jb250cm9sPzogQ2FjaGVDb250cm9sRXBoZW1lcmFsIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBJbWFnZUJsb2NrUGFyYW0ge1xuICBleHBvcnQgaW50ZXJmYWNlIFNvdXJjZSB7XG4gICAgZGF0YTogc3RyaW5nO1xuXG4gICAgbWVkaWFfdHlwZTogJ2ltYWdlL2pwZWcnIHwgJ2ltYWdlL3BuZycgfCAnaW1hZ2UvZ2lmJyB8ICdpbWFnZS93ZWJwJztcblxuICAgIHR5cGU6ICdiYXNlNjQnO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIElucHV0SnNvbkRlbHRhID0gSW5wdXRKU09ORGVsdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRKU09ORGVsdGEge1xuICBwYXJ0aWFsX2pzb246IHN0cmluZztcblxuICB0eXBlOiAnaW5wdXRfanNvbl9kZWx0YSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgb2JqZWN0IGlkZW50aWZpZXIuXG4gICAqXG4gICAqIFRoZSBmb3JtYXQgYW5kIGxlbmd0aCBvZiBJRHMgbWF5IGNoYW5nZSBvdmVyIHRpbWUuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb250ZW50IGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqXG4gICAqIFRoaXMgaXMgYW4gYXJyYXkgb2YgY29udGVudCBibG9ja3MsIGVhY2ggb2Ygd2hpY2ggaGFzIGEgYHR5cGVgIHRoYXQgZGV0ZXJtaW5lc1xuICAgKiBpdHMgc2hhcGUuXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW3sgXCJ0eXBlXCI6IFwidGV4dFwiLCBcInRleHRcIjogXCJIaSwgSSdtIENsYXVkZS5cIiB9XVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgdGhlIHJlcXVlc3QgaW5wdXQgYG1lc3NhZ2VzYCBlbmRlZCB3aXRoIGFuIGBhc3Npc3RhbnRgIHR1cm4sIHRoZW4gdGhlXG4gICAqIHJlc3BvbnNlIGBjb250ZW50YCB3aWxsIGNvbnRpbnVlIGRpcmVjdGx5IGZyb20gdGhhdCBsYXN0IHR1cm4uIFlvdSBjYW4gdXNlIHRoaXNcbiAgICogdG8gY29uc3RyYWluIHRoZSBtb2RlbCdzIG91dHB1dC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBpbnB1dCBgbWVzc2FnZXNgIHdlcmU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwicm9sZVwiOiBcInVzZXJcIixcbiAgICogICAgIFwiY29udGVudFwiOiBcIldoYXQncyB0aGUgR3JlZWsgbmFtZSBmb3IgU3VuPyAoQSkgU29sIChCKSBIZWxpb3MgKEMpIFN1blwiXG4gICAqICAgfSxcbiAgICogICB7IFwicm9sZVwiOiBcImFzc2lzdGFudFwiLCBcImNvbnRlbnRcIjogXCJUaGUgYmVzdCBhbnN3ZXIgaXMgKFwiIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogVGhlbiB0aGUgcmVzcG9uc2UgYGNvbnRlbnRgIG1pZ2h0IGJlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFt7IFwidHlwZVwiOiBcInRleHRcIiwgXCJ0ZXh0XCI6IFwiQilcIiB9XVxuICAgKiBgYGBcbiAgICovXG4gIGNvbnRlbnQ6IEFycmF5PENvbnRlbnRCbG9jaz47XG5cbiAgLyoqXG4gICAqIFRoZSBtb2RlbCB0aGF0IHdpbGwgY29tcGxldGUgeW91ciBwcm9tcHQuXFxuXFxuU2VlXG4gICAqIFttb2RlbHNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvbW9kZWxzLW92ZXJ2aWV3KSBmb3IgYWRkaXRpb25hbFxuICAgKiBkZXRhaWxzIGFuZCBvcHRpb25zLlxuICAgKi9cbiAgbW9kZWw6IE1vZGVsO1xuXG4gIC8qKlxuICAgKiBDb252ZXJzYXRpb25hbCByb2xlIG9mIHRoZSBnZW5lcmF0ZWQgbWVzc2FnZS5cbiAgICpcbiAgICogVGhpcyB3aWxsIGFsd2F5cyBiZSBgXCJhc3Npc3RhbnRcImAuXG4gICAqL1xuICByb2xlOiAnYXNzaXN0YW50JztcblxuICAvKipcbiAgICogVGhlIHJlYXNvbiB0aGF0IHdlIHN0b3BwZWQuXG4gICAqXG4gICAqIFRoaXMgbWF5IGJlIG9uZSB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgICpcbiAgICogLSBgXCJlbmRfdHVyblwiYDogdGhlIG1vZGVsIHJlYWNoZWQgYSBuYXR1cmFsIHN0b3BwaW5nIHBvaW50XG4gICAqIC0gYFwibWF4X3Rva2Vuc1wiYDogd2UgZXhjZWVkZWQgdGhlIHJlcXVlc3RlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIG1vZGVsJ3MgbWF4aW11bVxuICAgKiAtIGBcInN0b3Bfc2VxdWVuY2VcImA6IG9uZSBvZiB5b3VyIHByb3ZpZGVkIGN1c3RvbSBgc3RvcF9zZXF1ZW5jZXNgIHdhcyBnZW5lcmF0ZWRcbiAgICogLSBgXCJ0b29sX3VzZVwiYDogdGhlIG1vZGVsIGludm9rZWQgb25lIG9yIG1vcmUgdG9vbHNcbiAgICpcbiAgICogSW4gbm9uLXN0cmVhbWluZyBtb2RlIHRoaXMgdmFsdWUgaXMgYWx3YXlzIG5vbi1udWxsLiBJbiBzdHJlYW1pbmcgbW9kZSwgaXQgaXNcbiAgICogbnVsbCBpbiB0aGUgYG1lc3NhZ2Vfc3RhcnRgIGV2ZW50IGFuZCBub24tbnVsbCBvdGhlcndpc2UuXG4gICAqL1xuICBzdG9wX3JlYXNvbjogJ2VuZF90dXJuJyB8ICdtYXhfdG9rZW5zJyB8ICdzdG9wX3NlcXVlbmNlJyB8ICd0b29sX3VzZScgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGljaCBjdXN0b20gc3RvcCBzZXF1ZW5jZSB3YXMgZ2VuZXJhdGVkLCBpZiBhbnkuXG4gICAqXG4gICAqIFRoaXMgdmFsdWUgd2lsbCBiZSBhIG5vbi1udWxsIHN0cmluZyBpZiBvbmUgb2YgeW91ciBjdXN0b20gc3RvcCBzZXF1ZW5jZXMgd2FzXG4gICAqIGdlbmVyYXRlZC5cbiAgICovXG4gIHN0b3Bfc2VxdWVuY2U6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE9iamVjdCB0eXBlLlxuICAgKlxuICAgKiBGb3IgTWVzc2FnZXMsIHRoaXMgaXMgYWx3YXlzIGBcIm1lc3NhZ2VcImAuXG4gICAqL1xuICB0eXBlOiAnbWVzc2FnZSc7XG5cbiAgLyoqXG4gICAqIEJpbGxpbmcgYW5kIHJhdGUtbGltaXQgdXNhZ2UuXG4gICAqXG4gICAqIEFudGhyb3BpYydzIEFQSSBiaWxscyBhbmQgcmF0ZS1saW1pdHMgYnkgdG9rZW4gY291bnRzLCBhcyB0b2tlbnMgcmVwcmVzZW50IHRoZVxuICAgKiB1bmRlcmx5aW5nIGNvc3QgdG8gb3VyIHN5c3RlbXMuXG4gICAqXG4gICAqIFVuZGVyIHRoZSBob29kLCB0aGUgQVBJIHRyYW5zZm9ybXMgcmVxdWVzdHMgaW50byBhIGZvcm1hdCBzdWl0YWJsZSBmb3IgdGhlXG4gICAqIG1vZGVsLiBUaGUgbW9kZWwncyBvdXRwdXQgdGhlbiBnb2VzIHRocm91Z2ggYSBwYXJzaW5nIHN0YWdlIGJlZm9yZSBiZWNvbWluZyBhblxuICAgKiBBUEkgcmVzcG9uc2UuIEFzIGEgcmVzdWx0LCB0aGUgdG9rZW4gY291bnRzIGluIGB1c2FnZWAgd2lsbCBub3QgbWF0Y2ggb25lLXRvLW9uZVxuICAgKiB3aXRoIHRoZSBleGFjdCB2aXNpYmxlIGNvbnRlbnQgb2YgYW4gQVBJIHJlcXVlc3Qgb3IgcmVzcG9uc2UuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBgb3V0cHV0X3Rva2Vuc2Agd2lsbCBiZSBub24temVybywgZXZlbiBmb3IgYW4gZW1wdHkgc3RyaW5nIHJlc3BvbnNlXG4gICAqIGZyb20gQ2xhdWRlLlxuICAgKi9cbiAgdXNhZ2U6IFVzYWdlO1xufVxuXG5leHBvcnQgdHlwZSBNZXNzYWdlRGVsdGFFdmVudCA9IFJhd01lc3NhZ2VEZWx0YUV2ZW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VEZWx0YVVzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBjdW11bGF0aXZlIG51bWJlciBvZiBvdXRwdXQgdG9rZW5zIHdoaWNoIHdlcmUgdXNlZC5cbiAgICovXG4gIG91dHB1dF90b2tlbnM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlUGFyYW0ge1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxDb250ZW50QmxvY2tQYXJhbT47XG5cbiAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG59XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VTdGFydEV2ZW50ID0gUmF3TWVzc2FnZVN0YXJ0RXZlbnQ7XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VTdG9wRXZlbnQgPSBSYXdNZXNzYWdlU3RvcEV2ZW50O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlU3RyZWFtRXZlbnQgPSBSYXdNZXNzYWdlU3RyZWFtRXZlbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZVRva2Vuc0NvdW50IHtcbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIGFjcm9zcyB0aGUgcHJvdmlkZWQgbGlzdCBvZiBtZXNzYWdlcywgc3lzdGVtIHByb21wdCxcbiAgICogYW5kIHRvb2xzLlxuICAgKi9cbiAgaW5wdXRfdG9rZW5zOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGEge1xuICAvKipcbiAgICogQW4gZXh0ZXJuYWwgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIgd2hvIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVxdWVzdC5cbiAgICpcbiAgICogVGhpcyBzaG91bGQgYmUgYSB1dWlkLCBoYXNoIHZhbHVlLCBvciBvdGhlciBvcGFxdWUgaWRlbnRpZmllci4gQW50aHJvcGljIG1heSB1c2VcbiAgICogdGhpcyBpZCB0byBoZWxwIGRldGVjdCBhYnVzZS4gRG8gbm90IGluY2x1ZGUgYW55IGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uIHN1Y2ggYXNcbiAgICogbmFtZSwgZW1haWwgYWRkcmVzcywgb3IgcGhvbmUgbnVtYmVyLlxuICAgKi9cbiAgdXNlcl9pZD86IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogVGhlIG1vZGVsIHRoYXQgd2lsbCBjb21wbGV0ZSB5b3VyIHByb21wdC5cXG5cXG5TZWVcbiAqIFttb2RlbHNdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvbW9kZWxzLW92ZXJ2aWV3KSBmb3IgYWRkaXRpb25hbFxuICogZGV0YWlscyBhbmQgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IHR5cGUgTW9kZWwgPVxuICB8IChzdHJpbmcgJiB7fSlcbiAgfCAnY2xhdWRlLTMtNS1oYWlrdS1sYXRlc3QnXG4gIHwgJ2NsYXVkZS0zLTUtaGFpa3UtMjAyNDEwMjInXG4gIHwgJ2NsYXVkZS0zLTUtc29ubmV0LWxhdGVzdCdcbiAgfCAnY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjInXG4gIHwgJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQwNjIwJ1xuICB8ICdjbGF1ZGUtMy1vcHVzLWxhdGVzdCdcbiAgfCAnY2xhdWRlLTMtb3B1cy0yMDI0MDIyOSdcbiAgfCAnY2xhdWRlLTMtc29ubmV0LTIwMjQwMjI5J1xuICB8ICdjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwNydcbiAgfCAnY2xhdWRlLTIuMSdcbiAgfCAnY2xhdWRlLTIuMCc7XG5cbmNvbnN0IERFUFJFQ0FURURfTU9ERUxTOiB7XG4gIFtLIGluIE1vZGVsXT86IHN0cmluZztcbn0gPSB7XG4gICdjbGF1ZGUtMS4zJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICdjbGF1ZGUtMS4zLTEwMGsnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgJ2NsYXVkZS1pbnN0YW50LTEuMSc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAnY2xhdWRlLWluc3RhbnQtMS4xLTEwMGsnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgJ2NsYXVkZS1pbnN0YW50LTEuMic6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAnY2xhdWRlLTMtc29ubmV0LTIwMjQwMjI5JzogJ0p1bHkgMjFzdCwgMjAyNScsXG4gICdjbGF1ZGUtMi4xJzogJ0p1bHkgMjFzdCwgMjAyNScsXG4gICdjbGF1ZGUtMi4wJzogJ0p1bHkgMjFzdCwgMjAyNScsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYWluVGV4dFNvdXJjZSB7XG4gIGRhdGE6IHN0cmluZztcblxuICBtZWRpYV90eXBlOiAndGV4dC9wbGFpbic7XG5cbiAgdHlwZTogJ3RleHQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhd0NvbnRlbnRCbG9ja0RlbHRhRXZlbnQge1xuICBkZWx0YTogVGV4dERlbHRhIHwgSW5wdXRKU09ORGVsdGEgfCBDaXRhdGlvbnNEZWx0YTtcblxuICBpbmRleDogbnVtYmVyO1xuXG4gIHR5cGU6ICdjb250ZW50X2Jsb2NrX2RlbHRhJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYXdDb250ZW50QmxvY2tTdGFydEV2ZW50IHtcbiAgY29udGVudF9ibG9jazogVGV4dEJsb2NrIHwgVG9vbFVzZUJsb2NrO1xuXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgdHlwZTogJ2NvbnRlbnRfYmxvY2tfc3RhcnQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudCB7XG4gIGluZGV4OiBudW1iZXI7XG5cbiAgdHlwZTogJ2NvbnRlbnRfYmxvY2tfc3RvcCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF3TWVzc2FnZURlbHRhRXZlbnQge1xuICBkZWx0YTogUmF3TWVzc2FnZURlbHRhRXZlbnQuRGVsdGE7XG5cbiAgdHlwZTogJ21lc3NhZ2VfZGVsdGEnO1xuXG4gIC8qKlxuICAgKiBCaWxsaW5nIGFuZCByYXRlLWxpbWl0IHVzYWdlLlxuICAgKlxuICAgKiBBbnRocm9waWMncyBBUEkgYmlsbHMgYW5kIHJhdGUtbGltaXRzIGJ5IHRva2VuIGNvdW50cywgYXMgdG9rZW5zIHJlcHJlc2VudCB0aGVcbiAgICogdW5kZXJseWluZyBjb3N0IHRvIG91ciBzeXN0ZW1zLlxuICAgKlxuICAgKiBVbmRlciB0aGUgaG9vZCwgdGhlIEFQSSB0cmFuc2Zvcm1zIHJlcXVlc3RzIGludG8gYSBmb3JtYXQgc3VpdGFibGUgZm9yIHRoZVxuICAgKiBtb2RlbC4gVGhlIG1vZGVsJ3Mgb3V0cHV0IHRoZW4gZ29lcyB0aHJvdWdoIGEgcGFyc2luZyBzdGFnZSBiZWZvcmUgYmVjb21pbmcgYW5cbiAgICogQVBJIHJlc3BvbnNlLiBBcyBhIHJlc3VsdCwgdGhlIHRva2VuIGNvdW50cyBpbiBgdXNhZ2VgIHdpbGwgbm90IG1hdGNoIG9uZS10by1vbmVcbiAgICogd2l0aCB0aGUgZXhhY3QgdmlzaWJsZSBjb250ZW50IG9mIGFuIEFQSSByZXF1ZXN0IG9yIHJlc3BvbnNlLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgYG91dHB1dF90b2tlbnNgIHdpbGwgYmUgbm9uLXplcm8sIGV2ZW4gZm9yIGFuIGVtcHR5IHN0cmluZyByZXNwb25zZVxuICAgKiBmcm9tIENsYXVkZS5cbiAgICovXG4gIHVzYWdlOiBNZXNzYWdlRGVsdGFVc2FnZTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSYXdNZXNzYWdlRGVsdGFFdmVudCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRGVsdGEge1xuICAgIHN0b3BfcmVhc29uOiAnZW5kX3R1cm4nIHwgJ21heF90b2tlbnMnIHwgJ3N0b3Bfc2VxdWVuY2UnIHwgJ3Rvb2xfdXNlJyB8IG51bGw7XG5cbiAgICBzdG9wX3NlcXVlbmNlOiBzdHJpbmcgfCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF3TWVzc2FnZVN0YXJ0RXZlbnQge1xuICBtZXNzYWdlOiBNZXNzYWdlO1xuXG4gIHR5cGU6ICdtZXNzYWdlX3N0YXJ0Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYXdNZXNzYWdlU3RvcEV2ZW50IHtcbiAgdHlwZTogJ21lc3NhZ2Vfc3RvcCc7XG59XG5cbmV4cG9ydCB0eXBlIFJhd01lc3NhZ2VTdHJlYW1FdmVudCA9XG4gIHwgUmF3TWVzc2FnZVN0YXJ0RXZlbnRcbiAgfCBSYXdNZXNzYWdlRGVsdGFFdmVudFxuICB8IFJhd01lc3NhZ2VTdG9wRXZlbnRcbiAgfCBSYXdDb250ZW50QmxvY2tTdGFydEV2ZW50XG4gIHwgUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudFxuICB8IFJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudDtcblxuZXhwb3J0IGludGVyZmFjZSBUZXh0QmxvY2sge1xuICAvKipcbiAgICogQ2l0YXRpb25zIHN1cHBvcnRpbmcgdGhlIHRleHQgYmxvY2suXG4gICAqXG4gICAqIFRoZSB0eXBlIG9mIGNpdGF0aW9uIHJldHVybmVkIHdpbGwgZGVwZW5kIG9uIHRoZSB0eXBlIG9mIGRvY3VtZW50IGJlaW5nIGNpdGVkLlxuICAgKiBDaXRpbmcgYSBQREYgcmVzdWx0cyBpbiBgcGFnZV9sb2NhdGlvbmAsIHBsYWluIHRleHQgcmVzdWx0cyBpbiBgY2hhcl9sb2NhdGlvbmAsXG4gICAqIGFuZCBjb250ZW50IGRvY3VtZW50IHJlc3VsdHMgaW4gYGNvbnRlbnRfYmxvY2tfbG9jYXRpb25gLlxuICAgKi9cbiAgY2l0YXRpb25zOiBBcnJheTxUZXh0Q2l0YXRpb24+IHwgbnVsbDtcblxuICB0ZXh0OiBzdHJpbmc7XG5cbiAgdHlwZTogJ3RleHQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRCbG9ja1BhcmFtIHtcbiAgdGV4dDogc3RyaW5nO1xuXG4gIHR5cGU6ICd0ZXh0JztcblxuICBjYWNoZV9jb250cm9sPzogQ2FjaGVDb250cm9sRXBoZW1lcmFsIHwgbnVsbDtcblxuICBjaXRhdGlvbnM/OiBBcnJheTxUZXh0Q2l0YXRpb25QYXJhbT4gfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBUZXh0Q2l0YXRpb24gPSBDaXRhdGlvbkNoYXJMb2NhdGlvbiB8IENpdGF0aW9uUGFnZUxvY2F0aW9uIHwgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbjtcblxuZXhwb3J0IHR5cGUgVGV4dENpdGF0aW9uUGFyYW0gPVxuICB8IENpdGF0aW9uQ2hhckxvY2F0aW9uUGFyYW1cbiAgfCBDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtXG4gIHwgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRleHREZWx0YSB7XG4gIHRleHQ6IHN0cmluZztcblxuICB0eXBlOiAndGV4dF9kZWx0YSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbCB7XG4gIC8qKlxuICAgKiBbSlNPTiBzY2hlbWFdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykgZm9yIHRoaXMgdG9vbCdzIGlucHV0LlxuICAgKlxuICAgKiBUaGlzIGRlZmluZXMgdGhlIHNoYXBlIG9mIHRoZSBgaW5wdXRgIHRoYXQgeW91ciB0b29sIGFjY2VwdHMgYW5kIHRoYXQgdGhlIG1vZGVsXG4gICAqIHdpbGwgcHJvZHVjZS5cbiAgICovXG4gIGlucHV0X3NjaGVtYTogVG9vbC5JbnB1dFNjaGVtYTtcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgdG9vbC5cbiAgICpcbiAgICogVGhpcyBpcyBob3cgdGhlIHRvb2wgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIG1vZGVsIGFuZCBpbiB0b29sX3VzZSBibG9ja3MuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgY2FjaGVfY29udHJvbD86IENhY2hlQ29udHJvbEVwaGVtZXJhbCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIG9mIHdoYXQgdGhpcyB0b29sIGRvZXMuXG4gICAqXG4gICAqIFRvb2wgZGVzY3JpcHRpb25zIHNob3VsZCBiZSBhcyBkZXRhaWxlZCBhcyBwb3NzaWJsZS4gVGhlIG1vcmUgaW5mb3JtYXRpb24gdGhhdFxuICAgKiB0aGUgbW9kZWwgaGFzIGFib3V0IHdoYXQgdGhlIHRvb2wgaXMgYW5kIGhvdyB0byB1c2UgaXQsIHRoZSBiZXR0ZXIgaXQgd2lsbFxuICAgKiBwZXJmb3JtLiBZb3UgY2FuIHVzZSBuYXR1cmFsIGxhbmd1YWdlIGRlc2NyaXB0aW9ucyB0byByZWluZm9yY2UgaW1wb3J0YW50XG4gICAqIGFzcGVjdHMgb2YgdGhlIHRvb2wgaW5wdXQgSlNPTiBzY2hlbWEuXG4gICAqL1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUb29sIHtcbiAgLyoqXG4gICAqIFtKU09OIHNjaGVtYV0oaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvKSBmb3IgdGhpcyB0b29sJ3MgaW5wdXQuXG4gICAqXG4gICAqIFRoaXMgZGVmaW5lcyB0aGUgc2hhcGUgb2YgdGhlIGBpbnB1dGAgdGhhdCB5b3VyIHRvb2wgYWNjZXB0cyBhbmQgdGhhdCB0aGUgbW9kZWxcbiAgICogd2lsbCBwcm9kdWNlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dFNjaGVtYSB7XG4gICAgdHlwZTogJ29iamVjdCc7XG5cbiAgICBwcm9wZXJ0aWVzPzogdW5rbm93biB8IG51bGw7XG4gICAgW2s6IHN0cmluZ106IHVua25vd247XG4gIH1cbn1cblxuLyoqXG4gKiBIb3cgdGhlIG1vZGVsIHNob3VsZCB1c2UgdGhlIHByb3ZpZGVkIHRvb2xzLiBUaGUgbW9kZWwgY2FuIHVzZSBhIHNwZWNpZmljIHRvb2wsXG4gKiBhbnkgYXZhaWxhYmxlIHRvb2wsIG9yIGRlY2lkZSBieSBpdHNlbGYuXG4gKi9cbmV4cG9ydCB0eXBlIFRvb2xDaG9pY2UgPSBUb29sQ2hvaWNlQXV0byB8IFRvb2xDaG9pY2VBbnkgfCBUb29sQ2hvaWNlVG9vbDtcblxuLyoqXG4gKiBUaGUgbW9kZWwgd2lsbCB1c2UgYW55IGF2YWlsYWJsZSB0b29scy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb29sQ2hvaWNlQW55IHtcbiAgdHlwZTogJ2FueSc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXJhbGxlbCB0b29sIHVzZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC4gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIG1vZGVsIHdpbGwgb3V0cHV0IGV4YWN0bHkgb25lIHRvb2xcbiAgICogdXNlLlxuICAgKi9cbiAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIG1vZGVsIHdpbGwgYXV0b21hdGljYWxseSBkZWNpZGUgd2hldGhlciB0byB1c2UgdG9vbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbENob2ljZUF1dG8ge1xuICB0eXBlOiAnYXV0byc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXJhbGxlbCB0b29sIHVzZS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC4gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIG1vZGVsIHdpbGwgb3V0cHV0IGF0IG1vc3Qgb25lIHRvb2xcbiAgICogdXNlLlxuICAgKi9cbiAgZGlzYWJsZV9wYXJhbGxlbF90b29sX3VzZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIG1vZGVsIHdpbGwgdXNlIHRoZSBzcGVjaWZpZWQgdG9vbCB3aXRoIGB0b29sX2Nob2ljZS5uYW1lYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb29sQ2hvaWNlVG9vbCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0byB1c2UuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgdHlwZTogJ3Rvb2wnO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRpc2FibGUgcGFyYWxsZWwgdG9vbCB1c2UuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBtb2RlbCB3aWxsIG91dHB1dCBleGFjdGx5IG9uZSB0b29sXG4gICAqIHVzZS5cbiAgICovXG4gIGRpc2FibGVfcGFyYWxsZWxfdG9vbF91c2U/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xSZXN1bHRCbG9ja1BhcmFtIHtcbiAgdG9vbF91c2VfaWQ6IHN0cmluZztcblxuICB0eXBlOiAndG9vbF9yZXN1bHQnO1xuXG4gIGNhY2hlX2NvbnRyb2w/OiBDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xuXG4gIGNvbnRlbnQ/OiBzdHJpbmcgfCBBcnJheTxUZXh0QmxvY2tQYXJhbSB8IEltYWdlQmxvY2tQYXJhbT47XG5cbiAgaXNfZXJyb3I/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xVc2VCbG9jayB7XG4gIGlkOiBzdHJpbmc7XG5cbiAgaW5wdXQ6IHVua25vd247XG5cbiAgbmFtZTogc3RyaW5nO1xuXG4gIHR5cGU6ICd0b29sX3VzZSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbFVzZUJsb2NrUGFyYW0ge1xuICBpZDogc3RyaW5nO1xuXG4gIGlucHV0OiB1bmtub3duO1xuXG4gIG5hbWU6IHN0cmluZztcblxuICB0eXBlOiAndG9vbF91c2UnO1xuXG4gIGNhY2hlX2NvbnRyb2w/OiBDYWNoZUNvbnRyb2xFcGhlbWVyYWwgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5wdXQgdG9rZW5zIHVzZWQgdG8gY3JlYXRlIHRoZSBjYWNoZSBlbnRyeS5cbiAgICovXG4gIGNhY2hlX2NyZWF0aW9uX2lucHV0X3Rva2VuczogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBpbnB1dCB0b2tlbnMgcmVhZCBmcm9tIHRoZSBjYWNoZS5cbiAgICovXG4gIGNhY2hlX3JlYWRfaW5wdXRfdG9rZW5zOiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGlucHV0IHRva2VucyB3aGljaCB3ZXJlIHVzZWQuXG4gICAqL1xuICBpbnB1dF90b2tlbnM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBvdXRwdXQgdG9rZW5zIHdoaWNoIHdlcmUgdXNlZC5cbiAgICovXG4gIG91dHB1dF90b2tlbnM6IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtcyA9IE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgfCBNZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUgYmVmb3JlIHN0b3BwaW5nLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgb3VyIG1vZGVscyBtYXkgc3RvcCBfYmVmb3JlXyByZWFjaGluZyB0aGlzIG1heGltdW0uIFRoaXMgcGFyYW1ldGVyXG4gICAqIG9ubHkgc3BlY2lmaWVzIHRoZSBhYnNvbHV0ZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUuXG4gICAqXG4gICAqIERpZmZlcmVudCBtb2RlbHMgaGF2ZSBkaWZmZXJlbnQgbWF4aW11bSB2YWx1ZXMgZm9yIHRoaXMgcGFyYW1ldGVyLiBTZWVcbiAgICogW21vZGVsc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9tb2RlbHMtb3ZlcnZpZXcpIGZvciBkZXRhaWxzLlxuICAgKi9cbiAgbWF4X3Rva2VuczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbnB1dCBtZXNzYWdlcy5cbiAgICpcbiAgICogT3VyIG1vZGVscyBhcmUgdHJhaW5lZCB0byBvcGVyYXRlIG9uIGFsdGVybmF0aW5nIGB1c2VyYCBhbmQgYGFzc2lzdGFudGBcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMuIFdoZW4gY3JlYXRpbmcgYSBuZXcgYE1lc3NhZ2VgLCB5b3Ugc3BlY2lmeSB0aGUgcHJpb3JcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMgd2l0aCB0aGUgYG1lc3NhZ2VzYCBwYXJhbWV0ZXIsIGFuZCB0aGUgbW9kZWwgdGhlbiBnZW5lcmF0ZXNcbiAgICogdGhlIG5leHQgYE1lc3NhZ2VgIGluIHRoZSBjb252ZXJzYXRpb24uIENvbnNlY3V0aXZlIGB1c2VyYCBvciBgYXNzaXN0YW50YCB0dXJuc1xuICAgKiBpbiB5b3VyIHJlcXVlc3Qgd2lsbCBiZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIHR1cm4uXG4gICAqXG4gICAqIEVhY2ggaW5wdXQgbWVzc2FnZSBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgYHJvbGVgIGFuZCBgY29udGVudGAuIFlvdSBjYW5cbiAgICogc3BlY2lmeSBhIHNpbmdsZSBgdXNlcmAtcm9sZSBtZXNzYWdlLCBvciB5b3UgY2FuIGluY2x1ZGUgbXVsdGlwbGUgYHVzZXJgIGFuZFxuICAgKiBgYXNzaXN0YW50YCBtZXNzYWdlcy5cbiAgICpcbiAgICogSWYgdGhlIGZpbmFsIG1lc3NhZ2UgdXNlcyB0aGUgYGFzc2lzdGFudGAgcm9sZSwgdGhlIHJlc3BvbnNlIGNvbnRlbnQgd2lsbFxuICAgKiBjb250aW51ZSBpbW1lZGlhdGVseSBmcm9tIHRoZSBjb250ZW50IGluIHRoYXQgbWVzc2FnZS4gVGhpcyBjYW4gYmUgdXNlZCB0b1xuICAgKiBjb25zdHJhaW4gcGFydCBvZiB0aGUgbW9kZWwncyByZXNwb25zZS5cbiAgICpcbiAgICogRXhhbXBsZSB3aXRoIGEgc2luZ2xlIGB1c2VyYCBtZXNzYWdlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFt7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGFtcGxlIHdpdGggbXVsdGlwbGUgY29udmVyc2F0aW9uYWwgdHVybnM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbyB0aGVyZS5cIiB9LFxuICAgKiAgIHsgXCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBcIkhpLCBJJ20gQ2xhdWRlLiBIb3cgY2FuIEkgaGVscCB5b3U/XCIgfSxcbiAgICogICB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiQ2FuIHlvdSBleHBsYWluIExMTXMgaW4gcGxhaW4gRW5nbGlzaD9cIiB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIEV4YW1wbGUgd2l0aCBhIHBhcnRpYWxseS1maWxsZWQgcmVzcG9uc2UgZnJvbSBDbGF1ZGU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwicm9sZVwiOiBcInVzZXJcIixcbiAgICogICAgIFwiY29udGVudFwiOiBcIldoYXQncyB0aGUgR3JlZWsgbmFtZSBmb3IgU3VuPyAoQSkgU29sIChCKSBIZWxpb3MgKEMpIFN1blwiXG4gICAqICAgfSxcbiAgICogICB7IFwicm9sZVwiOiBcImFzc2lzdGFudFwiLCBcImNvbnRlbnRcIjogXCJUaGUgYmVzdCBhbnN3ZXIgaXMgKFwiIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogRWFjaCBpbnB1dCBtZXNzYWdlIGBjb250ZW50YCBtYXkgYmUgZWl0aGVyIGEgc2luZ2xlIGBzdHJpbmdgIG9yIGFuIGFycmF5IG9mXG4gICAqIGNvbnRlbnQgYmxvY2tzLCB3aGVyZSBlYWNoIGJsb2NrIGhhcyBhIHNwZWNpZmljIGB0eXBlYC4gVXNpbmcgYSBgc3RyaW5nYCBmb3JcbiAgICogYGNvbnRlbnRgIGlzIHNob3J0aGFuZCBmb3IgYW4gYXJyYXkgb2Ygb25lIGNvbnRlbnQgYmxvY2sgb2YgdHlwZSBgXCJ0ZXh0XCJgLiBUaGVcbiAgICogZm9sbG93aW5nIGlucHV0IG1lc3NhZ2VzIGFyZSBlcXVpdmFsZW50OlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbywgQ2xhdWRlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFt7IFwidHlwZVwiOiBcInRleHRcIiwgXCJ0ZXh0XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFN0YXJ0aW5nIHdpdGggQ2xhdWRlIDMgbW9kZWxzLCB5b3UgY2FuIGFsc28gc2VuZCBpbWFnZSBjb250ZW50IGJsb2NrczpcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7XG4gICAqICAgXCJyb2xlXCI6IFwidXNlclwiLFxuICAgKiAgIFwiY29udGVudFwiOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAqICAgICAgIFwic291cmNlXCI6IHtcbiAgICogICAgICAgICBcInR5cGVcIjogXCJiYXNlNjRcIixcbiAgICogICAgICAgICBcIm1lZGlhX3R5cGVcIjogXCJpbWFnZS9qcGVnXCIsXG4gICAqICAgICAgICAgXCJkYXRhXCI6IFwiLzlqLzRBQVFTa1pKUmcuLi5cIlxuICAgKiAgICAgICB9XG4gICAqICAgICB9LFxuICAgKiAgICAgeyBcInR5cGVcIjogXCJ0ZXh0XCIsIFwidGV4dFwiOiBcIldoYXQgaXMgaW4gdGhpcyBpbWFnZT9cIiB9XG4gICAqICAgXVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBXZSBjdXJyZW50bHkgc3VwcG9ydCB0aGUgYGJhc2U2NGAgc291cmNlIHR5cGUgZm9yIGltYWdlcywgYW5kIHRoZSBgaW1hZ2UvanBlZ2AsXG4gICAqIGBpbWFnZS9wbmdgLCBgaW1hZ2UvZ2lmYCwgYW5kIGBpbWFnZS93ZWJwYCBtZWRpYSB0eXBlcy5cbiAgICpcbiAgICogU2VlIFtleGFtcGxlc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL21lc3NhZ2VzLWV4YW1wbGVzI3Zpc2lvbikgZm9yXG4gICAqIG1vcmUgaW5wdXQgZXhhbXBsZXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3Ugd2FudCB0byBpbmNsdWRlIGFcbiAgICogW3N5c3RlbSBwcm9tcHRdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3Mvc3lzdGVtLXByb21wdHMpLCB5b3UgY2FuIHVzZVxuICAgKiB0aGUgdG9wLWxldmVsIGBzeXN0ZW1gIHBhcmFtZXRlciBcdTIwMTQgdGhlcmUgaXMgbm8gYFwic3lzdGVtXCJgIHJvbGUgZm9yIGlucHV0XG4gICAqIG1lc3NhZ2VzIGluIHRoZSBNZXNzYWdlcyBBUEkuXG4gICAqL1xuICBtZXNzYWdlczogQXJyYXk8TWVzc2FnZVBhcmFtPjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgd2lsbCBjb21wbGV0ZSB5b3VyIHByb21wdC5cXG5cXG5TZWVcbiAgICogW21vZGVsc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9tb2RlbHMtb3ZlcnZpZXcpIGZvciBhZGRpdGlvbmFsXG4gICAqIGRldGFpbHMgYW5kIG9wdGlvbnMuXG4gICAqL1xuICBtb2RlbDogTW9kZWw7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBkZXNjcmliaW5nIG1ldGFkYXRhIGFib3V0IHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgbWV0YWRhdGE/OiBNZXRhZGF0YTtcblxuICAvKipcbiAgICogQ3VzdG9tIHRleHQgc2VxdWVuY2VzIHRoYXQgd2lsbCBjYXVzZSB0aGUgbW9kZWwgdG8gc3RvcCBnZW5lcmF0aW5nLlxuICAgKlxuICAgKiBPdXIgbW9kZWxzIHdpbGwgbm9ybWFsbHkgc3RvcCB3aGVuIHRoZXkgaGF2ZSBuYXR1cmFsbHkgY29tcGxldGVkIHRoZWlyIHR1cm4sXG4gICAqIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgcmVzcG9uc2UgYHN0b3BfcmVhc29uYCBvZiBgXCJlbmRfdHVyblwiYC5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdGhlIG1vZGVsIHRvIHN0b3AgZ2VuZXJhdGluZyB3aGVuIGl0IGVuY291bnRlcnMgY3VzdG9tIHN0cmluZ3Mgb2ZcbiAgICogdGV4dCwgeW91IGNhbiB1c2UgdGhlIGBzdG9wX3NlcXVlbmNlc2AgcGFyYW1ldGVyLiBJZiB0aGUgbW9kZWwgZW5jb3VudGVycyBvbmUgb2ZcbiAgICogdGhlIGN1c3RvbSBzZXF1ZW5jZXMsIHRoZSByZXNwb25zZSBgc3RvcF9yZWFzb25gIHZhbHVlIHdpbGwgYmUgYFwic3RvcF9zZXF1ZW5jZVwiYFxuICAgKiBhbmQgdGhlIHJlc3BvbnNlIGBzdG9wX3NlcXVlbmNlYCB2YWx1ZSB3aWxsIGNvbnRhaW4gdGhlIG1hdGNoZWQgc3RvcCBzZXF1ZW5jZS5cbiAgICovXG4gIHN0b3Bfc2VxdWVuY2VzPzogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBpbmNyZW1lbnRhbGx5IHN0cmVhbSB0aGUgcmVzcG9uc2UgdXNpbmcgc2VydmVyLXNlbnQgZXZlbnRzLlxuICAgKlxuICAgKiBTZWUgW3N0cmVhbWluZ10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL21lc3NhZ2VzLXN0cmVhbWluZykgZm9yXG4gICAqIGRldGFpbHMuXG4gICAqL1xuICBzdHJlYW0/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTeXN0ZW0gcHJvbXB0LlxuICAgKlxuICAgKiBBIHN5c3RlbSBwcm9tcHQgaXMgYSB3YXkgb2YgcHJvdmlkaW5nIGNvbnRleHQgYW5kIGluc3RydWN0aW9ucyB0byBDbGF1ZGUsIHN1Y2hcbiAgICogYXMgc3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgZ29hbCBvciByb2xlLiBTZWUgb3VyXG4gICAqIFtndWlkZSB0byBzeXN0ZW0gcHJvbXB0c10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9zeXN0ZW0tcHJvbXB0cykuXG4gICAqL1xuICBzeXN0ZW0/OiBzdHJpbmcgfCBBcnJheTxUZXh0QmxvY2tQYXJhbT47XG5cbiAgLyoqXG4gICAqIEFtb3VudCBvZiByYW5kb21uZXNzIGluamVjdGVkIGludG8gdGhlIHJlc3BvbnNlLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBgMS4wYC4gUmFuZ2VzIGZyb20gYDAuMGAgdG8gYDEuMGAuIFVzZSBgdGVtcGVyYXR1cmVgIGNsb3NlciB0byBgMC4wYFxuICAgKiBmb3IgYW5hbHl0aWNhbCAvIG11bHRpcGxlIGNob2ljZSwgYW5kIGNsb3NlciB0byBgMS4wYCBmb3IgY3JlYXRpdmUgYW5kXG4gICAqIGdlbmVyYXRpdmUgdGFza3MuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBldmVuIHdpdGggYHRlbXBlcmF0dXJlYCBvZiBgMC4wYCwgdGhlIHJlc3VsdHMgd2lsbCBub3QgYmUgZnVsbHlcbiAgICogZGV0ZXJtaW5pc3RpYy5cbiAgICovXG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIb3cgdGhlIG1vZGVsIHNob3VsZCB1c2UgdGhlIHByb3ZpZGVkIHRvb2xzLiBUaGUgbW9kZWwgY2FuIHVzZSBhIHNwZWNpZmljIHRvb2wsXG4gICAqIGFueSBhdmFpbGFibGUgdG9vbCwgb3IgZGVjaWRlIGJ5IGl0c2VsZi5cbiAgICovXG4gIHRvb2xfY2hvaWNlPzogVG9vbENob2ljZTtcblxuICAvKipcbiAgICogRGVmaW5pdGlvbnMgb2YgdG9vbHMgdGhhdCB0aGUgbW9kZWwgbWF5IHVzZS5cbiAgICpcbiAgICogSWYgeW91IGluY2x1ZGUgYHRvb2xzYCBpbiB5b3VyIEFQSSByZXF1ZXN0LCB0aGUgbW9kZWwgbWF5IHJldHVybiBgdG9vbF91c2VgXG4gICAqIGNvbnRlbnQgYmxvY2tzIHRoYXQgcmVwcmVzZW50IHRoZSBtb2RlbCdzIHVzZSBvZiB0aG9zZSB0b29scy4gWW91IGNhbiB0aGVuIHJ1blxuICAgKiB0aG9zZSB0b29scyB1c2luZyB0aGUgdG9vbCBpbnB1dCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIGFuZCB0aGVuIG9wdGlvbmFsbHlcbiAgICogcmV0dXJuIHJlc3VsdHMgYmFjayB0byB0aGUgbW9kZWwgdXNpbmcgYHRvb2xfcmVzdWx0YCBjb250ZW50IGJsb2Nrcy5cbiAgICpcbiAgICogRWFjaCB0b29sIGRlZmluaXRpb24gaW5jbHVkZXM6XG4gICAqXG4gICAqIC0gYG5hbWVgOiBOYW1lIG9mIHRoZSB0b29sLlxuICAgKiAtIGBkZXNjcmlwdGlvbmA6IE9wdGlvbmFsLCBidXQgc3Ryb25nbHktcmVjb21tZW5kZWQgZGVzY3JpcHRpb24gb2YgdGhlIHRvb2wuXG4gICAqIC0gYGlucHV0X3NjaGVtYWA6IFtKU09OIHNjaGVtYV0oaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvKSBmb3IgdGhlIHRvb2wgYGlucHV0YFxuICAgKiAgIHNoYXBlIHRoYXQgdGhlIG1vZGVsIHdpbGwgcHJvZHVjZSBpbiBgdG9vbF91c2VgIG91dHB1dCBjb250ZW50IGJsb2Nrcy5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIHlvdSBkZWZpbmVkIGB0b29sc2AgYXM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwibmFtZVwiOiBcImdldF9zdG9ja19wcmljZVwiLFxuICAgKiAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdldCB0aGUgY3VycmVudCBzdG9jayBwcmljZSBmb3IgYSBnaXZlbiB0aWNrZXIgc3ltYm9sLlwiLFxuICAgKiAgICAgXCJpbnB1dF9zY2hlbWFcIjoge1xuICAgKiAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICogICAgICAgICBcInRpY2tlclwiOiB7XG4gICAqICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICogICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgc3RvY2sgdGlja2VyIHN5bWJvbCwgZS5nLiBBQVBMIGZvciBBcHBsZSBJbmMuXCJcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH0sXG4gICAqICAgICAgIFwicmVxdWlyZWRcIjogW1widGlja2VyXCJdXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKlxuICAgKiBBbmQgdGhlbiBhc2tlZCB0aGUgbW9kZWwgXCJXaGF0J3MgdGhlIFMmUCA1MDAgYXQgdG9kYXk/XCIsIHRoZSBtb2RlbCBtaWdodCBwcm9kdWNlXG4gICAqIGB0b29sX3VzZWAgY29udGVudCBibG9ja3MgaW4gdGhlIHJlc3BvbnNlIGxpa2UgdGhpczpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbXG4gICAqICAge1xuICAgKiAgICAgXCJ0eXBlXCI6IFwidG9vbF91c2VcIixcbiAgICogICAgIFwiaWRcIjogXCJ0b29sdV8wMUQ3RkxyZmg0R1lxN3lUMVVMRmV5TVZcIixcbiAgICogICAgIFwibmFtZVwiOiBcImdldF9zdG9ja19wcmljZVwiLFxuICAgKiAgICAgXCJpbnB1dFwiOiB7IFwidGlja2VyXCI6IFwiXkdTUENcIiB9XG4gICAqICAgfVxuICAgKiBdXG4gICAqIGBgYFxuICAgKlxuICAgKiBZb3UgbWlnaHQgdGhlbiBydW4geW91ciBgZ2V0X3N0b2NrX3ByaWNlYCB0b29sIHdpdGggYHtcInRpY2tlclwiOiBcIl5HU1BDXCJ9YCBhcyBhblxuICAgKiBpbnB1dCwgYW5kIHJldHVybiB0aGUgZm9sbG93aW5nIGJhY2sgdG8gdGhlIG1vZGVsIGluIGEgc3Vic2VxdWVudCBgdXNlcmBcbiAgICogbWVzc2FnZTpcbiAgICpcbiAgICogYGBganNvblxuICAgKiBbXG4gICAqICAge1xuICAgKiAgICAgXCJ0eXBlXCI6IFwidG9vbF9yZXN1bHRcIixcbiAgICogICAgIFwidG9vbF91c2VfaWRcIjogXCJ0b29sdV8wMUQ3RkxyZmg0R1lxN3lUMVVMRmV5TVZcIixcbiAgICogICAgIFwiY29udGVudFwiOiBcIjI1OS43NSBVU0RcIlxuICAgKiAgIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogVG9vbHMgY2FuIGJlIHVzZWQgZm9yIHdvcmtmbG93cyB0aGF0IGluY2x1ZGUgcnVubmluZyBjbGllbnQtc2lkZSB0b29scyBhbmRcbiAgICogZnVuY3Rpb25zLCBvciBtb3JlIGdlbmVyYWxseSB3aGVuZXZlciB5b3Ugd2FudCB0aGUgbW9kZWwgdG8gcHJvZHVjZSBhIHBhcnRpY3VsYXJcbiAgICogSlNPTiBzdHJ1Y3R1cmUgb2Ygb3V0cHV0LlxuICAgKlxuICAgKiBTZWUgb3VyIFtndWlkZV0oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy90b29sLXVzZSkgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8VG9vbD47XG5cbiAgLyoqXG4gICAqIE9ubHkgc2FtcGxlIGZyb20gdGhlIHRvcCBLIG9wdGlvbnMgZm9yIGVhY2ggc3Vic2VxdWVudCB0b2tlbi5cbiAgICpcbiAgICogVXNlZCB0byByZW1vdmUgXCJsb25nIHRhaWxcIiBsb3cgcHJvYmFiaWxpdHkgcmVzcG9uc2VzLlxuICAgKiBbTGVhcm4gbW9yZSB0ZWNobmljYWwgZGV0YWlscyBoZXJlXShodHRwczovL3Rvd2FyZHNkYXRhc2NpZW5jZS5jb20vaG93LXRvLXNhbXBsZS1mcm9tLWxhbmd1YWdlLW1vZGVscy02ODJiY2ViOTcyNzcpLlxuICAgKlxuICAgKiBSZWNvbW1lbmRlZCBmb3IgYWR2YW5jZWQgdXNlIGNhc2VzIG9ubHkuIFlvdSB1c3VhbGx5IG9ubHkgbmVlZCB0byB1c2VcbiAgICogYHRlbXBlcmF0dXJlYC5cbiAgICovXG4gIHRvcF9rPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVc2UgbnVjbGV1cyBzYW1wbGluZy5cbiAgICpcbiAgICogSW4gbnVjbGV1cyBzYW1wbGluZywgd2UgY29tcHV0ZSB0aGUgY3VtdWxhdGl2ZSBkaXN0cmlidXRpb24gb3ZlciBhbGwgdGhlIG9wdGlvbnNcbiAgICogZm9yIGVhY2ggc3Vic2VxdWVudCB0b2tlbiBpbiBkZWNyZWFzaW5nIHByb2JhYmlsaXR5IG9yZGVyIGFuZCBjdXQgaXQgb2ZmIG9uY2UgaXRcbiAgICogcmVhY2hlcyBhIHBhcnRpY3VsYXIgcHJvYmFiaWxpdHkgc3BlY2lmaWVkIGJ5IGB0b3BfcGAuIFlvdSBzaG91bGQgZWl0aGVyIGFsdGVyXG4gICAqIGB0ZW1wZXJhdHVyZWAgb3IgYHRvcF9wYCwgYnV0IG5vdCBib3RoLlxuICAgKlxuICAgKiBSZWNvbW1lbmRlZCBmb3IgYWR2YW5jZWQgdXNlIGNhc2VzIG9ubHkuIFlvdSB1c3VhbGx5IG9ubHkgbmVlZCB0byB1c2VcbiAgICogYHRlbXBlcmF0dXJlYC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2VDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGBBbnRocm9waWMuTWVzc2FnZXMuVG9vbENob2ljZUF1dG9gIGluc3RlYWRcbiAgICovXG4gIGV4cG9ydCB0eXBlIE1ldGFkYXRhID0gTWVzc2FnZXNBUEkuTWV0YWRhdGE7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBgQW50aHJvcGljLk1lc3NhZ2VzLlRvb2xDaG9pY2VBdXRvYCBpbnN0ZWFkXG4gICAqL1xuICBleHBvcnQgdHlwZSBUb29sQ2hvaWNlQXV0byA9IE1lc3NhZ2VzQVBJLlRvb2xDaG9pY2VBdXRvO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYEFudGhyb3BpYy5NZXNzYWdlcy5Ub29sQ2hvaWNlQW55YCBpbnN0ZWFkXG4gICAqL1xuICBleHBvcnQgdHlwZSBUb29sQ2hvaWNlQW55ID0gTWVzc2FnZXNBUEkuVG9vbENob2ljZUFueTtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgdXNlIGBBbnRocm9waWMuTWVzc2FnZXMuVG9vbENob2ljZVRvb2xgIGluc3RlYWRcbiAgICovXG4gIGV4cG9ydCB0eXBlIFRvb2xDaG9pY2VUb29sID0gTWVzc2FnZXNBUEkuVG9vbENob2ljZVRvb2w7XG5cbiAgZXhwb3J0IHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyA9IE1lc3NhZ2VzQVBJLk1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG4gIGV4cG9ydCB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgPSBNZXNzYWdlc0FQSS5NZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgZXh0ZW5kcyBNZXNzYWdlQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGluY3JlbWVudGFsbHkgc3RyZWFtIHRoZSByZXNwb25zZSB1c2luZyBzZXJ2ZXItc2VudCBldmVudHMuXG4gICAqXG4gICAqIFNlZSBbc3RyZWFtaW5nXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9hcGkvbWVzc2FnZXMtc3RyZWFtaW5nKSBmb3JcbiAgICogZGV0YWlscy5cbiAgICovXG4gIHN0cmVhbT86IGZhbHNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgZXh0ZW5kcyBNZXNzYWdlQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGluY3JlbWVudGFsbHkgc3RyZWFtIHRoZSByZXNwb25zZSB1c2luZyBzZXJ2ZXItc2VudCBldmVudHMuXG4gICAqXG4gICAqIFNlZSBbc3RyZWFtaW5nXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9hcGkvbWVzc2FnZXMtc3RyZWFtaW5nKSBmb3JcbiAgICogZGV0YWlscy5cbiAgICovXG4gIHN0cmVhbTogdHJ1ZTtcbn1cblxuZXhwb3J0IHR5cGUgTWVzc2FnZVN0cmVhbVBhcmFtcyA9IE1lc3NhZ2VDcmVhdGVQYXJhbXNCYXNlO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyB7XG4gIC8qKlxuICAgKiBJbnB1dCBtZXNzYWdlcy5cbiAgICpcbiAgICogT3VyIG1vZGVscyBhcmUgdHJhaW5lZCB0byBvcGVyYXRlIG9uIGFsdGVybmF0aW5nIGB1c2VyYCBhbmQgYGFzc2lzdGFudGBcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMuIFdoZW4gY3JlYXRpbmcgYSBuZXcgYE1lc3NhZ2VgLCB5b3Ugc3BlY2lmeSB0aGUgcHJpb3JcbiAgICogY29udmVyc2F0aW9uYWwgdHVybnMgd2l0aCB0aGUgYG1lc3NhZ2VzYCBwYXJhbWV0ZXIsIGFuZCB0aGUgbW9kZWwgdGhlbiBnZW5lcmF0ZXNcbiAgICogdGhlIG5leHQgYE1lc3NhZ2VgIGluIHRoZSBjb252ZXJzYXRpb24uIENvbnNlY3V0aXZlIGB1c2VyYCBvciBgYXNzaXN0YW50YCB0dXJuc1xuICAgKiBpbiB5b3VyIHJlcXVlc3Qgd2lsbCBiZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIHR1cm4uXG4gICAqXG4gICAqIEVhY2ggaW5wdXQgbWVzc2FnZSBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgYHJvbGVgIGFuZCBgY29udGVudGAuIFlvdSBjYW5cbiAgICogc3BlY2lmeSBhIHNpbmdsZSBgdXNlcmAtcm9sZSBtZXNzYWdlLCBvciB5b3UgY2FuIGluY2x1ZGUgbXVsdGlwbGUgYHVzZXJgIGFuZFxuICAgKiBgYXNzaXN0YW50YCBtZXNzYWdlcy5cbiAgICpcbiAgICogSWYgdGhlIGZpbmFsIG1lc3NhZ2UgdXNlcyB0aGUgYGFzc2lzdGFudGAgcm9sZSwgdGhlIHJlc3BvbnNlIGNvbnRlbnQgd2lsbFxuICAgKiBjb250aW51ZSBpbW1lZGlhdGVseSBmcm9tIHRoZSBjb250ZW50IGluIHRoYXQgbWVzc2FnZS4gVGhpcyBjYW4gYmUgdXNlZCB0b1xuICAgKiBjb25zdHJhaW4gcGFydCBvZiB0aGUgbW9kZWwncyByZXNwb25zZS5cbiAgICpcbiAgICogRXhhbXBsZSB3aXRoIGEgc2luZ2xlIGB1c2VyYCBtZXNzYWdlOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFt7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dXG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGFtcGxlIHdpdGggbXVsdGlwbGUgY29udmVyc2F0aW9uYWwgdHVybnM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbyB0aGVyZS5cIiB9LFxuICAgKiAgIHsgXCJyb2xlXCI6IFwiYXNzaXN0YW50XCIsIFwiY29udGVudFwiOiBcIkhpLCBJJ20gQ2xhdWRlLiBIb3cgY2FuIEkgaGVscCB5b3U/XCIgfSxcbiAgICogICB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFwiQ2FuIHlvdSBleHBsYWluIExMTXMgaW4gcGxhaW4gRW5nbGlzaD9cIiB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIEV4YW1wbGUgd2l0aCBhIHBhcnRpYWxseS1maWxsZWQgcmVzcG9uc2UgZnJvbSBDbGF1ZGU6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwicm9sZVwiOiBcInVzZXJcIixcbiAgICogICAgIFwiY29udGVudFwiOiBcIldoYXQncyB0aGUgR3JlZWsgbmFtZSBmb3IgU3VuPyAoQSkgU29sIChCKSBIZWxpb3MgKEMpIFN1blwiXG4gICAqICAgfSxcbiAgICogICB7IFwicm9sZVwiOiBcImFzc2lzdGFudFwiLCBcImNvbnRlbnRcIjogXCJUaGUgYmVzdCBhbnN3ZXIgaXMgKFwiIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogRWFjaCBpbnB1dCBtZXNzYWdlIGBjb250ZW50YCBtYXkgYmUgZWl0aGVyIGEgc2luZ2xlIGBzdHJpbmdgIG9yIGFuIGFycmF5IG9mXG4gICAqIGNvbnRlbnQgYmxvY2tzLCB3aGVyZSBlYWNoIGJsb2NrIGhhcyBhIHNwZWNpZmljIGB0eXBlYC4gVXNpbmcgYSBgc3RyaW5nYCBmb3JcbiAgICogYGNvbnRlbnRgIGlzIHNob3J0aGFuZCBmb3IgYW4gYXJyYXkgb2Ygb25lIGNvbnRlbnQgYmxvY2sgb2YgdHlwZSBgXCJ0ZXh0XCJgLiBUaGVcbiAgICogZm9sbG93aW5nIGlucHV0IG1lc3NhZ2VzIGFyZSBlcXVpdmFsZW50OlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIHsgXCJyb2xlXCI6IFwidXNlclwiLCBcImNvbnRlbnRcIjogXCJIZWxsbywgQ2xhdWRlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7IFwicm9sZVwiOiBcInVzZXJcIiwgXCJjb250ZW50XCI6IFt7IFwidHlwZVwiOiBcInRleHRcIiwgXCJ0ZXh0XCI6IFwiSGVsbG8sIENsYXVkZVwiIH1dIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFN0YXJ0aW5nIHdpdGggQ2xhdWRlIDMgbW9kZWxzLCB5b3UgY2FuIGFsc28gc2VuZCBpbWFnZSBjb250ZW50IGJsb2NrczpcbiAgICpcbiAgICogYGBganNvblxuICAgKiB7XG4gICAqICAgXCJyb2xlXCI6IFwidXNlclwiLFxuICAgKiAgIFwiY29udGVudFwiOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIFwidHlwZVwiOiBcImltYWdlXCIsXG4gICAqICAgICAgIFwic291cmNlXCI6IHtcbiAgICogICAgICAgICBcInR5cGVcIjogXCJiYXNlNjRcIixcbiAgICogICAgICAgICBcIm1lZGlhX3R5cGVcIjogXCJpbWFnZS9qcGVnXCIsXG4gICAqICAgICAgICAgXCJkYXRhXCI6IFwiLzlqLzRBQVFTa1pKUmcuLi5cIlxuICAgKiAgICAgICB9XG4gICAqICAgICB9LFxuICAgKiAgICAgeyBcInR5cGVcIjogXCJ0ZXh0XCIsIFwidGV4dFwiOiBcIldoYXQgaXMgaW4gdGhpcyBpbWFnZT9cIiB9XG4gICAqICAgXVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBXZSBjdXJyZW50bHkgc3VwcG9ydCB0aGUgYGJhc2U2NGAgc291cmNlIHR5cGUgZm9yIGltYWdlcywgYW5kIHRoZSBgaW1hZ2UvanBlZ2AsXG4gICAqIGBpbWFnZS9wbmdgLCBgaW1hZ2UvZ2lmYCwgYW5kIGBpbWFnZS93ZWJwYCBtZWRpYSB0eXBlcy5cbiAgICpcbiAgICogU2VlIFtleGFtcGxlc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vYXBpL21lc3NhZ2VzLWV4YW1wbGVzI3Zpc2lvbikgZm9yXG4gICAqIG1vcmUgaW5wdXQgZXhhbXBsZXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3Ugd2FudCB0byBpbmNsdWRlIGFcbiAgICogW3N5c3RlbSBwcm9tcHRdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3Mvc3lzdGVtLXByb21wdHMpLCB5b3UgY2FuIHVzZVxuICAgKiB0aGUgdG9wLWxldmVsIGBzeXN0ZW1gIHBhcmFtZXRlciBcdTIwMTQgdGhlcmUgaXMgbm8gYFwic3lzdGVtXCJgIHJvbGUgZm9yIGlucHV0XG4gICAqIG1lc3NhZ2VzIGluIHRoZSBNZXNzYWdlcyBBUEkuXG4gICAqL1xuICBtZXNzYWdlczogQXJyYXk8TWVzc2FnZVBhcmFtPjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgd2lsbCBjb21wbGV0ZSB5b3VyIHByb21wdC5cXG5cXG5TZWVcbiAgICogW21vZGVsc10oaHR0cHM6Ly9kb2NzLmFudGhyb3BpYy5jb20vZW4vZG9jcy9tb2RlbHMtb3ZlcnZpZXcpIGZvciBhZGRpdGlvbmFsXG4gICAqIGRldGFpbHMgYW5kIG9wdGlvbnMuXG4gICAqL1xuICBtb2RlbDogTW9kZWw7XG5cbiAgLyoqXG4gICAqIFN5c3RlbSBwcm9tcHQuXG4gICAqXG4gICAqIEEgc3lzdGVtIHByb21wdCBpcyBhIHdheSBvZiBwcm92aWRpbmcgY29udGV4dCBhbmQgaW5zdHJ1Y3Rpb25zIHRvIENsYXVkZSwgc3VjaFxuICAgKiBhcyBzcGVjaWZ5aW5nIGEgcGFydGljdWxhciBnb2FsIG9yIHJvbGUuIFNlZSBvdXJcbiAgICogW2d1aWRlIHRvIHN5c3RlbSBwcm9tcHRzXShodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3N5c3RlbS1wcm9tcHRzKS5cbiAgICovXG4gIHN5c3RlbT86IHN0cmluZyB8IEFycmF5PFRleHRCbG9ja1BhcmFtPjtcblxuICAvKipcbiAgICogSG93IHRoZSBtb2RlbCBzaG91bGQgdXNlIHRoZSBwcm92aWRlZCB0b29scy4gVGhlIG1vZGVsIGNhbiB1c2UgYSBzcGVjaWZpYyB0b29sLFxuICAgKiBhbnkgYXZhaWxhYmxlIHRvb2wsIG9yIGRlY2lkZSBieSBpdHNlbGYuXG4gICAqL1xuICB0b29sX2Nob2ljZT86IFRvb2xDaG9pY2U7XG5cbiAgLyoqXG4gICAqIERlZmluaXRpb25zIG9mIHRvb2xzIHRoYXQgdGhlIG1vZGVsIG1heSB1c2UuXG4gICAqXG4gICAqIElmIHlvdSBpbmNsdWRlIGB0b29sc2AgaW4geW91ciBBUEkgcmVxdWVzdCwgdGhlIG1vZGVsIG1heSByZXR1cm4gYHRvb2xfdXNlYFxuICAgKiBjb250ZW50IGJsb2NrcyB0aGF0IHJlcHJlc2VudCB0aGUgbW9kZWwncyB1c2Ugb2YgdGhvc2UgdG9vbHMuIFlvdSBjYW4gdGhlbiBydW5cbiAgICogdGhvc2UgdG9vbHMgdXNpbmcgdGhlIHRvb2wgaW5wdXQgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBhbmQgdGhlbiBvcHRpb25hbGx5XG4gICAqIHJldHVybiByZXN1bHRzIGJhY2sgdG8gdGhlIG1vZGVsIHVzaW5nIGB0b29sX3Jlc3VsdGAgY29udGVudCBibG9ja3MuXG4gICAqXG4gICAqIEVhY2ggdG9vbCBkZWZpbml0aW9uIGluY2x1ZGVzOlxuICAgKlxuICAgKiAtIGBuYW1lYDogTmFtZSBvZiB0aGUgdG9vbC5cbiAgICogLSBgZGVzY3JpcHRpb25gOiBPcHRpb25hbCwgYnV0IHN0cm9uZ2x5LXJlY29tbWVuZGVkIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sLlxuICAgKiAtIGBpbnB1dF9zY2hlbWFgOiBbSlNPTiBzY2hlbWFdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykgZm9yIHRoZSB0b29sIGBpbnB1dGBcbiAgICogICBzaGFwZSB0aGF0IHRoZSBtb2RlbCB3aWxsIHByb2R1Y2UgaW4gYHRvb2xfdXNlYCBvdXRwdXQgY29udGVudCBibG9ja3MuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCBpZiB5b3UgZGVmaW5lZCBgdG9vbHNgIGFzOlxuICAgKlxuICAgKiBgYGBqc29uXG4gICAqIFtcbiAgICogICB7XG4gICAqICAgICBcIm5hbWVcIjogXCJnZXRfc3RvY2tfcHJpY2VcIixcbiAgICogICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZXQgdGhlIGN1cnJlbnQgc3RvY2sgcHJpY2UgZm9yIGEgZ2l2ZW4gdGlja2VyIHN5bWJvbC5cIixcbiAgICogICAgIFwiaW5wdXRfc2NoZW1hXCI6IHtcbiAgICogICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAqICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAqICAgICAgICAgXCJ0aWNrZXJcIjoge1xuICAgKiAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAqICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHN0b2NrIHRpY2tlciBzeW1ib2wsIGUuZy4gQUFQTCBmb3IgQXBwbGUgSW5jLlwiXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9LFxuICAgKiAgICAgICBcInJlcXVpcmVkXCI6IFtcInRpY2tlclwiXVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogQW5kIHRoZW4gYXNrZWQgdGhlIG1vZGVsIFwiV2hhdCdzIHRoZSBTJlAgNTAwIGF0IHRvZGF5P1wiLCB0aGUgbW9kZWwgbWlnaHQgcHJvZHVjZVxuICAgKiBgdG9vbF91c2VgIGNvbnRlbnQgYmxvY2tzIGluIHRoZSByZXNwb25zZSBsaWtlIHRoaXM6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwidHlwZVwiOiBcInRvb2xfdXNlXCIsXG4gICAqICAgICBcImlkXCI6IFwidG9vbHVfMDFEN0ZMcmZoNEdZcTd5VDFVTEZleU1WXCIsXG4gICAqICAgICBcIm5hbWVcIjogXCJnZXRfc3RvY2tfcHJpY2VcIixcbiAgICogICAgIFwiaW5wdXRcIjogeyBcInRpY2tlclwiOiBcIl5HU1BDXCIgfVxuICAgKiAgIH1cbiAgICogXVxuICAgKiBgYGBcbiAgICpcbiAgICogWW91IG1pZ2h0IHRoZW4gcnVuIHlvdXIgYGdldF9zdG9ja19wcmljZWAgdG9vbCB3aXRoIGB7XCJ0aWNrZXJcIjogXCJeR1NQQ1wifWAgYXMgYW5cbiAgICogaW5wdXQsIGFuZCByZXR1cm4gdGhlIGZvbGxvd2luZyBiYWNrIHRvIHRoZSBtb2RlbCBpbiBhIHN1YnNlcXVlbnQgYHVzZXJgXG4gICAqIG1lc3NhZ2U6XG4gICAqXG4gICAqIGBgYGpzb25cbiAgICogW1xuICAgKiAgIHtcbiAgICogICAgIFwidHlwZVwiOiBcInRvb2xfcmVzdWx0XCIsXG4gICAqICAgICBcInRvb2xfdXNlX2lkXCI6IFwidG9vbHVfMDFEN0ZMcmZoNEdZcTd5VDFVTEZleU1WXCIsXG4gICAqICAgICBcImNvbnRlbnRcIjogXCIyNTkuNzUgVVNEXCJcbiAgICogICB9XG4gICAqIF1cbiAgICogYGBgXG4gICAqXG4gICAqIFRvb2xzIGNhbiBiZSB1c2VkIGZvciB3b3JrZmxvd3MgdGhhdCBpbmNsdWRlIHJ1bm5pbmcgY2xpZW50LXNpZGUgdG9vbHMgYW5kXG4gICAqIGZ1bmN0aW9ucywgb3IgbW9yZSBnZW5lcmFsbHkgd2hlbmV2ZXIgeW91IHdhbnQgdGhlIG1vZGVsIHRvIHByb2R1Y2UgYSBwYXJ0aWN1bGFyXG4gICAqIEpTT04gc3RydWN0dXJlIG9mIG91dHB1dC5cbiAgICpcbiAgICogU2VlIG91ciBbZ3VpZGVdKGh0dHBzOi8vZG9jcy5hbnRocm9waWMuY29tL2VuL2RvY3MvdG9vbC11c2UpIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICB0b29scz86IEFycmF5PFRvb2w+O1xufVxuXG5NZXNzYWdlcy5CYXRjaGVzID0gQmF0Y2hlcztcbk1lc3NhZ2VzLk1lc3NhZ2VCYXRjaGVzUGFnZSA9IE1lc3NhZ2VCYXRjaGVzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIE1lc3NhZ2VzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIEJhc2U2NFBERlNvdXJjZSBhcyBCYXNlNjRQREZTb3VyY2UsXG4gICAgdHlwZSBDYWNoZUNvbnRyb2xFcGhlbWVyYWwgYXMgQ2FjaGVDb250cm9sRXBoZW1lcmFsLFxuICAgIHR5cGUgQ2l0YXRpb25DaGFyTG9jYXRpb24gYXMgQ2l0YXRpb25DaGFyTG9jYXRpb24sXG4gICAgdHlwZSBDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtIGFzIENpdGF0aW9uQ2hhckxvY2F0aW9uUGFyYW0sXG4gICAgdHlwZSBDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uIGFzIENpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb24sXG4gICAgdHlwZSBDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uUGFyYW0gYXMgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtLFxuICAgIHR5cGUgQ2l0YXRpb25QYWdlTG9jYXRpb24gYXMgQ2l0YXRpb25QYWdlTG9jYXRpb24sXG4gICAgdHlwZSBDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtIGFzIENpdGF0aW9uUGFnZUxvY2F0aW9uUGFyYW0sXG4gICAgdHlwZSBDaXRhdGlvbnNDb25maWdQYXJhbSBhcyBDaXRhdGlvbnNDb25maWdQYXJhbSxcbiAgICB0eXBlIENpdGF0aW9uc0RlbHRhIGFzIENpdGF0aW9uc0RlbHRhLFxuICAgIHR5cGUgQ29udGVudEJsb2NrIGFzIENvbnRlbnRCbG9jayxcbiAgICB0eXBlIENvbnRlbnRCbG9ja0RlbHRhRXZlbnQgYXMgQ29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgICB0eXBlIENvbnRlbnRCbG9ja1BhcmFtIGFzIENvbnRlbnRCbG9ja1BhcmFtLFxuICAgIHR5cGUgQ29udGVudEJsb2NrU291cmNlIGFzIENvbnRlbnRCbG9ja1NvdXJjZSxcbiAgICB0eXBlIENvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQgYXMgQ29udGVudEJsb2NrU291cmNlQ29udGVudCxcbiAgICB0eXBlIENvbnRlbnRCbG9ja1N0YXJ0RXZlbnQgYXMgQ29udGVudEJsb2NrU3RhcnRFdmVudCxcbiAgICB0eXBlIENvbnRlbnRCbG9ja1N0b3BFdmVudCBhcyBDb250ZW50QmxvY2tTdG9wRXZlbnQsXG4gICAgdHlwZSBEb2N1bWVudEJsb2NrUGFyYW0gYXMgRG9jdW1lbnRCbG9ja1BhcmFtLFxuICAgIHR5cGUgSW1hZ2VCbG9ja1BhcmFtIGFzIEltYWdlQmxvY2tQYXJhbSxcbiAgICB0eXBlIElucHV0SnNvbkRlbHRhIGFzIElucHV0SnNvbkRlbHRhLFxuICAgIHR5cGUgSW5wdXRKU09ORGVsdGEgYXMgSW5wdXRKU09ORGVsdGEsXG4gICAgdHlwZSBNZXNzYWdlIGFzIE1lc3NhZ2UsXG4gICAgdHlwZSBNZXNzYWdlRGVsdGFFdmVudCBhcyBNZXNzYWdlRGVsdGFFdmVudCxcbiAgICB0eXBlIE1lc3NhZ2VEZWx0YVVzYWdlIGFzIE1lc3NhZ2VEZWx0YVVzYWdlLFxuICAgIHR5cGUgTWVzc2FnZVBhcmFtIGFzIE1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIE1lc3NhZ2VTdGFydEV2ZW50IGFzIE1lc3NhZ2VTdGFydEV2ZW50LFxuICAgIHR5cGUgTWVzc2FnZVN0b3BFdmVudCBhcyBNZXNzYWdlU3RvcEV2ZW50LFxuICAgIHR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50IGFzIE1lc3NhZ2VTdHJlYW1FdmVudCxcbiAgICB0eXBlIE1lc3NhZ2VUb2tlbnNDb3VudCBhcyBNZXNzYWdlVG9rZW5zQ291bnQsXG4gICAgdHlwZSBNZXRhZGF0YSBhcyBNZXRhZGF0YSxcbiAgICB0eXBlIE1vZGVsIGFzIE1vZGVsLFxuICAgIHR5cGUgUGxhaW5UZXh0U291cmNlIGFzIFBsYWluVGV4dFNvdXJjZSxcbiAgICB0eXBlIFJhd0NvbnRlbnRCbG9ja0RlbHRhRXZlbnQgYXMgUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgICB0eXBlIFJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnQgYXMgUmF3Q29udGVudEJsb2NrU3RhcnRFdmVudCxcbiAgICB0eXBlIFJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudCBhcyBSYXdDb250ZW50QmxvY2tTdG9wRXZlbnQsXG4gICAgdHlwZSBSYXdNZXNzYWdlRGVsdGFFdmVudCBhcyBSYXdNZXNzYWdlRGVsdGFFdmVudCxcbiAgICB0eXBlIFJhd01lc3NhZ2VTdGFydEV2ZW50IGFzIFJhd01lc3NhZ2VTdGFydEV2ZW50LFxuICAgIHR5cGUgUmF3TWVzc2FnZVN0b3BFdmVudCBhcyBSYXdNZXNzYWdlU3RvcEV2ZW50LFxuICAgIHR5cGUgUmF3TWVzc2FnZVN0cmVhbUV2ZW50IGFzIFJhd01lc3NhZ2VTdHJlYW1FdmVudCxcbiAgICB0eXBlIFRleHRCbG9jayBhcyBUZXh0QmxvY2ssXG4gICAgdHlwZSBUZXh0QmxvY2tQYXJhbSBhcyBUZXh0QmxvY2tQYXJhbSxcbiAgICB0eXBlIFRleHRDaXRhdGlvbiBhcyBUZXh0Q2l0YXRpb24sXG4gICAgdHlwZSBUZXh0Q2l0YXRpb25QYXJhbSBhcyBUZXh0Q2l0YXRpb25QYXJhbSxcbiAgICB0eXBlIFRleHREZWx0YSBhcyBUZXh0RGVsdGEsXG4gICAgdHlwZSBUb29sIGFzIFRvb2wsXG4gICAgdHlwZSBUb29sQ2hvaWNlIGFzIFRvb2xDaG9pY2UsXG4gICAgdHlwZSBUb29sQ2hvaWNlQW55IGFzIFRvb2xDaG9pY2VBbnksXG4gICAgdHlwZSBUb29sQ2hvaWNlQXV0byBhcyBUb29sQ2hvaWNlQXV0byxcbiAgICB0eXBlIFRvb2xDaG9pY2VUb29sIGFzIFRvb2xDaG9pY2VUb29sLFxuICAgIHR5cGUgVG9vbFJlc3VsdEJsb2NrUGFyYW0gYXMgVG9vbFJlc3VsdEJsb2NrUGFyYW0sXG4gICAgdHlwZSBUb29sVXNlQmxvY2sgYXMgVG9vbFVzZUJsb2NrLFxuICAgIHR5cGUgVG9vbFVzZUJsb2NrUGFyYW0gYXMgVG9vbFVzZUJsb2NrUGFyYW0sXG4gICAgdHlwZSBVc2FnZSBhcyBVc2FnZSxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXMgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgICB0eXBlIE1lc3NhZ2VTdHJlYW1QYXJhbXMgYXMgTWVzc2FnZVN0cmVhbVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyBhcyBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBCYXRjaGVzIGFzIEJhdGNoZXMsXG4gICAgdHlwZSBEZWxldGVkTWVzc2FnZUJhdGNoIGFzIERlbGV0ZWRNZXNzYWdlQmF0Y2gsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2ggYXMgTWVzc2FnZUJhdGNoLFxuICAgIHR5cGUgTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHQgYXMgTWVzc2FnZUJhdGNoQ2FuY2VsZWRSZXN1bHQsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hFcnJvcmVkUmVzdWx0IGFzIE1lc3NhZ2VCYXRjaEVycm9yZWRSZXN1bHQsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hFeHBpcmVkUmVzdWx0IGFzIE1lc3NhZ2VCYXRjaEV4cGlyZWRSZXN1bHQsXG4gICAgdHlwZSBNZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2UgYXMgTWVzc2FnZUJhdGNoSW5kaXZpZHVhbFJlc3BvbnNlLFxuICAgIHR5cGUgTWVzc2FnZUJhdGNoUmVxdWVzdENvdW50cyBhcyBNZXNzYWdlQmF0Y2hSZXF1ZXN0Q291bnRzLFxuICAgIHR5cGUgTWVzc2FnZUJhdGNoUmVzdWx0IGFzIE1lc3NhZ2VCYXRjaFJlc3VsdCxcbiAgICB0eXBlIE1lc3NhZ2VCYXRjaFN1Y2NlZWRlZFJlc3VsdCBhcyBNZXNzYWdlQmF0Y2hTdWNjZWVkZWRSZXN1bHQsXG4gICAgTWVzc2FnZUJhdGNoZXNQYWdlIGFzIE1lc3NhZ2VCYXRjaGVzUGFnZSxcbiAgICB0eXBlIEJhdGNoQ3JlYXRlUGFyYW1zIGFzIEJhdGNoQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQmF0Y2hMaXN0UGFyYW1zIGFzIEJhdGNoTGlzdFBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi9jb3JlLmpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi9jb3JlLmpzXCI7XG5pbXBvcnQgeyBQYWdlLCB0eXBlIFBhZ2VQYXJhbXMgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi5qc1wiO1xuXG5leHBvcnQgY2xhc3MgTW9kZWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogR2V0IGEgc3BlY2lmaWMgbW9kZWwuXG4gICAqXG4gICAqIFRoZSBNb2RlbHMgQVBJIHJlc3BvbnNlIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljXG4gICAqIG1vZGVsIG9yIHJlc29sdmUgYSBtb2RlbCBhbGlhcyB0byBhIG1vZGVsIElELlxuICAgKi9cbiAgcmV0cmlldmUobW9kZWxJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxNb2RlbEluZm8+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3YxL21vZGVscy8ke21vZGVsSWR9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBhdmFpbGFibGUgbW9kZWxzLlxuICAgKlxuICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggbW9kZWxzIGFyZSBhdmFpbGFibGUgZm9yXG4gICAqIHVzZSBpbiB0aGUgQVBJLiBNb3JlIHJlY2VudGx5IHJlbGVhc2VkIG1vZGVscyBhcmUgbGlzdGVkIGZpcnN0LlxuICAgKi9cbiAgbGlzdChxdWVyeT86IE1vZGVsTGlzdFBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPE1vZGVsSW5mb3NQYWdlLCBNb2RlbEluZm8+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxNb2RlbEluZm9zUGFnZSwgTW9kZWxJbmZvPjtcbiAgbGlzdChcbiAgICBxdWVyeTogTW9kZWxMaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPE1vZGVsSW5mb3NQYWdlLCBNb2RlbEluZm8+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvdjEvbW9kZWxzJywgTW9kZWxJbmZvc1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsSW5mb3NQYWdlIGV4dGVuZHMgUGFnZTxNb2RlbEluZm8+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxJbmZvIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBtb2RlbCBpZGVudGlmaWVyLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogUkZDIDMzMzkgZGF0ZXRpbWUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGltZSBhdCB3aGljaCB0aGUgbW9kZWwgd2FzIHJlbGVhc2VkLlxuICAgKiBNYXkgYmUgc2V0IHRvIGFuIGVwb2NoIHZhbHVlIGlmIHRoZSByZWxlYXNlIGRhdGUgaXMgdW5rbm93bi5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZztcblxuICAvKipcbiAgICogQSBodW1hbi1yZWFkYWJsZSBuYW1lIGZvciB0aGUgbW9kZWwuXG4gICAqL1xuICBkaXNwbGF5X25hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogT2JqZWN0IHR5cGUuXG4gICAqXG4gICAqIEZvciBNb2RlbHMsIHRoaXMgaXMgYWx3YXlzIGBcIm1vZGVsXCJgLlxuICAgKi9cbiAgdHlwZTogJ21vZGVsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbExpc3RQYXJhbXMgZXh0ZW5kcyBQYWdlUGFyYW1zIHt9XG5cbk1vZGVscy5Nb2RlbEluZm9zUGFnZSA9IE1vZGVsSW5mb3NQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgTW9kZWxzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIE1vZGVsSW5mbyBhcyBNb2RlbEluZm8sXG4gICAgTW9kZWxJbmZvc1BhZ2UgYXMgTW9kZWxJbmZvc1BhZ2UsXG4gICAgdHlwZSBNb2RlbExpc3RQYXJhbXMgYXMgTW9kZWxMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmV4cG9ydCAqIGZyb20gXCIuL3NoYXJlZC5qc1wiO1xuZXhwb3J0IHtcbiAgQmV0YSxcbiAgdHlwZSBBbnRocm9waWNCZXRhLFxuICB0eXBlIEJldGFBUElFcnJvcixcbiAgdHlwZSBCZXRhQXV0aGVudGljYXRpb25FcnJvcixcbiAgdHlwZSBCZXRhQmlsbGluZ0Vycm9yLFxuICB0eXBlIEJldGFFcnJvcixcbiAgdHlwZSBCZXRhRXJyb3JSZXNwb25zZSxcbiAgdHlwZSBCZXRhR2F0ZXdheVRpbWVvdXRFcnJvcixcbiAgdHlwZSBCZXRhSW52YWxpZFJlcXVlc3RFcnJvcixcbiAgdHlwZSBCZXRhTm90Rm91bmRFcnJvcixcbiAgdHlwZSBCZXRhT3ZlcmxvYWRlZEVycm9yLFxuICB0eXBlIEJldGFQZXJtaXNzaW9uRXJyb3IsXG4gIHR5cGUgQmV0YVJhdGVMaW1pdEVycm9yLFxufSBmcm9tIFwiLi9iZXRhL2JldGEuanNcIjtcbmV4cG9ydCB7XG4gIENvbXBsZXRpb25zLFxuICB0eXBlIENvbXBsZXRpb24sXG4gIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG59IGZyb20gXCIuL2NvbXBsZXRpb25zLmpzXCI7XG5leHBvcnQge1xuICBNZXNzYWdlcyxcbiAgdHlwZSBCYXNlNjRQREZTb3VyY2UsXG4gIHR5cGUgQ2FjaGVDb250cm9sRXBoZW1lcmFsLFxuICB0eXBlIENpdGF0aW9uQ2hhckxvY2F0aW9uLFxuICB0eXBlIENpdGF0aW9uQ2hhckxvY2F0aW9uUGFyYW0sXG4gIHR5cGUgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbixcbiAgdHlwZSBDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uUGFyYW0sXG4gIHR5cGUgQ2l0YXRpb25QYWdlTG9jYXRpb24sXG4gIHR5cGUgQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSxcbiAgdHlwZSBDaXRhdGlvbnNDb25maWdQYXJhbSxcbiAgdHlwZSBDaXRhdGlvbnNEZWx0YSxcbiAgdHlwZSBDb250ZW50QmxvY2ssXG4gIHR5cGUgQ29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgdHlwZSBDb250ZW50QmxvY2tQYXJhbSxcbiAgdHlwZSBDb250ZW50QmxvY2tTb3VyY2UsXG4gIHR5cGUgQ29udGVudEJsb2NrU291cmNlQ29udGVudCxcbiAgdHlwZSBDb250ZW50QmxvY2tTdGFydEV2ZW50LFxuICB0eXBlIENvbnRlbnRCbG9ja1N0b3BFdmVudCxcbiAgdHlwZSBEb2N1bWVudEJsb2NrUGFyYW0sXG4gIHR5cGUgSW1hZ2VCbG9ja1BhcmFtLFxuICB0eXBlIElucHV0SnNvbkRlbHRhLFxuICB0eXBlIElucHV0SlNPTkRlbHRhLFxuICB0eXBlIE1lc3NhZ2UsXG4gIHR5cGUgTWVzc2FnZURlbHRhRXZlbnQsXG4gIHR5cGUgTWVzc2FnZURlbHRhVXNhZ2UsXG4gIHR5cGUgTWVzc2FnZVBhcmFtLFxuICB0eXBlIE1lc3NhZ2VTdGFydEV2ZW50LFxuICB0eXBlIE1lc3NhZ2VTdG9wRXZlbnQsXG4gIHR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50LFxuICB0eXBlIE1lc3NhZ2VTdHJlYW1QYXJhbXMsXG4gIHR5cGUgTWVzc2FnZVRva2Vuc0NvdW50LFxuICB0eXBlIE1ldGFkYXRhLFxuICB0eXBlIE1vZGVsLFxuICB0eXBlIFBsYWluVGV4dFNvdXJjZSxcbiAgdHlwZSBSYXdDb250ZW50QmxvY2tEZWx0YUV2ZW50LFxuICB0eXBlIFJhd0NvbnRlbnRCbG9ja1N0YXJ0RXZlbnQsXG4gIHR5cGUgUmF3Q29udGVudEJsb2NrU3RvcEV2ZW50LFxuICB0eXBlIFJhd01lc3NhZ2VEZWx0YUV2ZW50LFxuICB0eXBlIFJhd01lc3NhZ2VTdGFydEV2ZW50LFxuICB0eXBlIFJhd01lc3NhZ2VTdG9wRXZlbnQsXG4gIHR5cGUgUmF3TWVzc2FnZVN0cmVhbUV2ZW50LFxuICB0eXBlIFRleHRCbG9jayxcbiAgdHlwZSBUZXh0QmxvY2tQYXJhbSxcbiAgdHlwZSBUZXh0Q2l0YXRpb24sXG4gIHR5cGUgVGV4dENpdGF0aW9uUGFyYW0sXG4gIHR5cGUgVGV4dERlbHRhLFxuICB0eXBlIFRvb2wsXG4gIHR5cGUgVG9vbENob2ljZSxcbiAgdHlwZSBUb29sQ2hvaWNlQW55LFxuICB0eXBlIFRvb2xDaG9pY2VBdXRvLFxuICB0eXBlIFRvb2xDaG9pY2VUb29sLFxuICB0eXBlIFRvb2xSZXN1bHRCbG9ja1BhcmFtLFxuICB0eXBlIFRvb2xVc2VCbG9jayxcbiAgdHlwZSBUb29sVXNlQmxvY2tQYXJhbSxcbiAgdHlwZSBVc2FnZSxcbiAgdHlwZSBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gIHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgdHlwZSBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMsXG59IGZyb20gXCIuL21lc3NhZ2VzL21lc3NhZ2VzLmpzXCI7XG5leHBvcnQgeyBNb2RlbEluZm9zUGFnZSwgTW9kZWxzLCB0eXBlIE1vZGVsSW5mbywgdHlwZSBNb2RlbExpc3RQYXJhbXMgfSBmcm9tIFwiLi9tb2RlbHMuanNcIjtcbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyB0eXBlIEFnZW50IH0gZnJvbSBcIi4vX3NoaW1zL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuL2NvcmUuanNcIjtcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tIFwiLi9lcnJvci5qc1wiO1xuaW1wb3J0ICogYXMgUGFnaW5hdGlvbiBmcm9tIFwiLi9wYWdpbmF0aW9uLmpzXCI7XG5pbXBvcnQgeyB0eXBlIFBhZ2VQYXJhbXMsIFBhZ2VSZXNwb25zZSB9IGZyb20gXCIuL3BhZ2luYXRpb24uanNcIjtcbmltcG9ydCAqIGFzIFVwbG9hZHMgZnJvbSBcIi4vdXBsb2Fkcy5qc1wiO1xuaW1wb3J0ICogYXMgQVBJIGZyb20gXCIuL3Jlc291cmNlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgQ29tcGxldGlvbixcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgQ29tcGxldGlvbnMsXG59IGZyb20gXCIuL3Jlc291cmNlcy9jb21wbGV0aW9ucy5qc1wiO1xuaW1wb3J0IHsgTW9kZWxJbmZvLCBNb2RlbEluZm9zUGFnZSwgTW9kZWxMaXN0UGFyYW1zLCBNb2RlbHMgfSBmcm9tIFwiLi9yZXNvdXJjZXMvbW9kZWxzLmpzXCI7XG5pbXBvcnQge1xuICBBbnRocm9waWNCZXRhLFxuICBCZXRhLFxuICBCZXRhQVBJRXJyb3IsXG4gIEJldGFBdXRoZW50aWNhdGlvbkVycm9yLFxuICBCZXRhQmlsbGluZ0Vycm9yLFxuICBCZXRhRXJyb3IsXG4gIEJldGFFcnJvclJlc3BvbnNlLFxuICBCZXRhR2F0ZXdheVRpbWVvdXRFcnJvcixcbiAgQmV0YUludmFsaWRSZXF1ZXN0RXJyb3IsXG4gIEJldGFOb3RGb3VuZEVycm9yLFxuICBCZXRhT3ZlcmxvYWRlZEVycm9yLFxuICBCZXRhUGVybWlzc2lvbkVycm9yLFxuICBCZXRhUmF0ZUxpbWl0RXJyb3IsXG59IGZyb20gXCIuL3Jlc291cmNlcy9iZXRhL2JldGEuanNcIjtcbmltcG9ydCB7XG4gIEJhc2U2NFBERlNvdXJjZSxcbiAgQ2FjaGVDb250cm9sRXBoZW1lcmFsLFxuICBDaXRhdGlvbkNoYXJMb2NhdGlvbixcbiAgQ2l0YXRpb25DaGFyTG9jYXRpb25QYXJhbSxcbiAgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbixcbiAgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtLFxuICBDaXRhdGlvblBhZ2VMb2NhdGlvbixcbiAgQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSxcbiAgQ2l0YXRpb25zQ29uZmlnUGFyYW0sXG4gIENpdGF0aW9uc0RlbHRhLFxuICBDb250ZW50QmxvY2ssXG4gIENvbnRlbnRCbG9ja0RlbHRhRXZlbnQsXG4gIENvbnRlbnRCbG9ja1BhcmFtLFxuICBDb250ZW50QmxvY2tTb3VyY2UsXG4gIENvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQsXG4gIENvbnRlbnRCbG9ja1N0YXJ0RXZlbnQsXG4gIENvbnRlbnRCbG9ja1N0b3BFdmVudCxcbiAgRG9jdW1lbnRCbG9ja1BhcmFtLFxuICBJbWFnZUJsb2NrUGFyYW0sXG4gIElucHV0SlNPTkRlbHRhLFxuICBNZXNzYWdlLFxuICBNZXNzYWdlQ291bnRUb2tlbnNQYXJhbXMsXG4gIE1lc3NhZ2VDcmVhdGVQYXJhbXMsXG4gIE1lc3NhZ2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gIE1lc3NhZ2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gIE1lc3NhZ2VEZWx0YUV2ZW50LFxuICBNZXNzYWdlRGVsdGFVc2FnZSxcbiAgTWVzc2FnZVBhcmFtLFxuICBNZXNzYWdlU3RhcnRFdmVudCxcbiAgTWVzc2FnZVN0b3BFdmVudCxcbiAgTWVzc2FnZVN0cmVhbUV2ZW50LFxuICBNZXNzYWdlU3RyZWFtUGFyYW1zLFxuICBNZXNzYWdlVG9rZW5zQ291bnQsXG4gIE1lc3NhZ2VzLFxuICBNZXRhZGF0YSxcbiAgTW9kZWwsXG4gIFBsYWluVGV4dFNvdXJjZSxcbiAgUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCxcbiAgUmF3Q29udGVudEJsb2NrU3RhcnRFdmVudCxcbiAgUmF3Q29udGVudEJsb2NrU3RvcEV2ZW50LFxuICBSYXdNZXNzYWdlRGVsdGFFdmVudCxcbiAgUmF3TWVzc2FnZVN0YXJ0RXZlbnQsXG4gIFJhd01lc3NhZ2VTdG9wRXZlbnQsXG4gIFJhd01lc3NhZ2VTdHJlYW1FdmVudCxcbiAgVGV4dEJsb2NrLFxuICBUZXh0QmxvY2tQYXJhbSxcbiAgVGV4dENpdGF0aW9uLFxuICBUZXh0Q2l0YXRpb25QYXJhbSxcbiAgVGV4dERlbHRhLFxuICBUb29sLFxuICBUb29sQ2hvaWNlLFxuICBUb29sQ2hvaWNlQW55LFxuICBUb29sQ2hvaWNlQXV0byxcbiAgVG9vbENob2ljZVRvb2wsXG4gIFRvb2xSZXN1bHRCbG9ja1BhcmFtLFxuICBUb29sVXNlQmxvY2ssXG4gIFRvb2xVc2VCbG9ja1BhcmFtLFxuICBVc2FnZSxcbn0gZnJvbSBcIi4vcmVzb3VyY2VzL21lc3NhZ2VzL21lc3NhZ2VzLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBEZWZhdWx0cyB0byBwcm9jZXNzLmVudlsnQU5USFJPUElDX0FQSV9LRVknXS5cbiAgICovXG4gIGFwaUtleT86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHRzIHRvIHByb2Nlc3MuZW52WydBTlRIUk9QSUNfQVVUSF9UT0tFTiddLlxuICAgKi9cbiAgYXV0aFRva2VuPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFzZSBVUkwgZm9yIHRoZSBBUEksIGUuZy4sIFwiaHR0cHM6Ly9hcGkuZXhhbXBsZS5jb20vdjIvXCJcbiAgICpcbiAgICogRGVmYXVsdHMgdG8gcHJvY2Vzcy5lbnZbJ0FOVEhST1BJQ19CQVNFX1VSTCddLlxuICAgKi9cbiAgYmFzZVVSTD86IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgdGhlIGNsaWVudCBzaG91bGQgd2FpdCBmb3IgYSByZXNwb25zZVxuICAgKiBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHRpbWluZyBvdXQgYSBzaW5nbGUgcmVxdWVzdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHJlcXVlc3QgdGltZW91dHMgYXJlIHJldHJpZWQgYnkgZGVmYXVsdCwgc28gaW4gYSB3b3JzdC1jYXNlIHNjZW5hcmlvIHlvdSBtYXkgd2FpdFxuICAgKiBtdWNoIGxvbmdlciB0aGFuIHRoaXMgdGltZW91dCBiZWZvcmUgdGhlIHByb21pc2Ugc3VjY2VlZHMgb3IgZmFpbHMuXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBBbiBIVFRQIGFnZW50IHVzZWQgdG8gbWFuYWdlIEhUVFAoUykgY29ubmVjdGlvbnMuXG4gICAqXG4gICAqIElmIG5vdCBwcm92aWRlZCwgYW4gYWdlbnQgd2lsbCBiZSBjb25zdHJ1Y3RlZCBieSBkZWZhdWx0IGluIHRoZSBOb2RlLmpzIGVudmlyb25tZW50LFxuICAgKiBvdGhlcndpc2Ugbm8gYWdlbnQgaXMgdXNlZC5cbiAgICovXG4gIGh0dHBBZ2VudD86IEFnZW50IHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGEgY3VzdG9tIGBmZXRjaGAgZnVuY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIElmIG5vdCBwcm92aWRlZCwgd2UgdXNlIGBub2RlLWZldGNoYCBvbiBOb2RlLmpzIGFuZCBvdGhlcndpc2UgZXhwZWN0IHRoYXQgYGZldGNoYCBpc1xuICAgKiBkZWZpbmVkIGdsb2JhbGx5LlxuICAgKi9cbiAgZmV0Y2g/OiBDb3JlLkZldGNoIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGltZXMgdGhhdCB0aGUgY2xpZW50IHdpbGwgcmV0cnkgYSByZXF1ZXN0IGluIGNhc2Ugb2YgYVxuICAgKiB0ZW1wb3JhcnkgZmFpbHVyZSwgbGlrZSBhIG5ldHdvcmsgZXJyb3Igb3IgYSA1WFggZXJyb3IgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAZGVmYXVsdCAyXG4gICAqL1xuICBtYXhSZXRyaWVzPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGhlYWRlcnMgdG8gaW5jbHVkZSB3aXRoIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIEFQSS5cbiAgICpcbiAgICogVGhlc2UgY2FuIGJlIHJlbW92ZWQgaW4gaW5kaXZpZHVhbCByZXF1ZXN0cyBieSBleHBsaWNpdGx5IHNldHRpbmcgdGhlXG4gICAqIGhlYWRlciB0byBgdW5kZWZpbmVkYCBvciBgbnVsbGAgaW4gcmVxdWVzdCBvcHRpb25zLlxuICAgKi9cbiAgZGVmYXVsdEhlYWRlcnM/OiBDb3JlLkhlYWRlcnMgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgcXVlcnkgcGFyYW1ldGVycyB0byBpbmNsdWRlIHdpdGggZXZlcnkgcmVxdWVzdCB0byB0aGUgQVBJLlxuICAgKlxuICAgKiBUaGVzZSBjYW4gYmUgcmVtb3ZlZCBpbiBpbmRpdmlkdWFsIHJlcXVlc3RzIGJ5IGV4cGxpY2l0bHkgc2V0dGluZyB0aGVcbiAgICogcGFyYW0gdG8gYHVuZGVmaW5lZGAgaW4gcmVxdWVzdCBvcHRpb25zLlxuICAgKi9cbiAgZGVmYXVsdFF1ZXJ5PzogQ29yZS5EZWZhdWx0UXVlcnkgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIGNsaWVudC1zaWRlIHVzZSBvZiB0aGlzIGxpYnJhcnkgaXMgbm90IGFsbG93ZWQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXG4gICAqIE9ubHkgc2V0IHRoaXMgb3B0aW9uIHRvIGB0cnVlYCBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgcmlza3MgYW5kIGhhdmUgYXBwcm9wcmlhdGUgbWl0aWdhdGlvbnMgaW4gcGxhY2UuXG4gICAqL1xuICBkYW5nZXJvdXNseUFsbG93QnJvd3Nlcj86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQVBJIENsaWVudCBmb3IgaW50ZXJmYWNpbmcgd2l0aCB0aGUgQW50aHJvcGljIEFQSS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFudGhyb3BpYyBleHRlbmRzIENvcmUuQVBJQ2xpZW50IHtcbiAgYXBpS2V5OiBzdHJpbmcgfCBudWxsO1xuICBhdXRoVG9rZW46IHN0cmluZyB8IG51bGw7XG5cbiAgcHJpdmF0ZSBfb3B0aW9uczogQ2xpZW50T3B0aW9ucztcblxuICAvKipcbiAgICogQVBJIENsaWVudCBmb3IgaW50ZXJmYWNpbmcgd2l0aCB0aGUgQW50aHJvcGljIEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0cy5hcGlLZXk9cHJvY2Vzcy5lbnZbJ0FOVEhST1BJQ19BUElfS0VZJ10gPz8gbnVsbF1cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0cy5hdXRoVG9rZW49cHJvY2Vzcy5lbnZbJ0FOVEhST1BJQ19BVVRIX1RPS0VOJ10gPz8gbnVsbF1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJhc2VVUkw9cHJvY2Vzcy5lbnZbJ0FOVEhST1BJQ19CQVNFX1VSTCddID8/IGh0dHBzOi8vYXBpLmFudGhyb3BpYy5jb21dIC0gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFzZSBVUkwgZm9yIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lb3V0PTEwIG1pbnV0ZXNdIC0gVGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdGhlIGNsaWVudCB3aWxsIHdhaXQgZm9yIGEgcmVzcG9uc2UgYmVmb3JlIHRpbWluZyBvdXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5odHRwQWdlbnRdIC0gQW4gSFRUUCBhZ2VudCB1c2VkIHRvIG1hbmFnZSBIVFRQKHMpIGNvbm5lY3Rpb25zLlxuICAgKiBAcGFyYW0ge0NvcmUuRmV0Y2h9IFtvcHRzLmZldGNoXSAtIFNwZWNpZnkgYSBjdXN0b20gYGZldGNoYCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLm1heFJldHJpZXM9Ml0gLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGltZXMgdGhlIGNsaWVudCB3aWxsIHJldHJ5IGEgcmVxdWVzdC5cbiAgICogQHBhcmFtIHtDb3JlLkhlYWRlcnN9IG9wdHMuZGVmYXVsdEhlYWRlcnMgLSBEZWZhdWx0IGhlYWRlcnMgdG8gaW5jbHVkZSB3aXRoIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIEFQSS5cbiAgICogQHBhcmFtIHtDb3JlLkRlZmF1bHRRdWVyeX0gb3B0cy5kZWZhdWx0UXVlcnkgLSBEZWZhdWx0IHF1ZXJ5IHBhcmFtZXRlcnMgdG8gaW5jbHVkZSB3aXRoIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIEFQSS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5kYW5nZXJvdXNseUFsbG93QnJvd3Nlcj1mYWxzZV0gLSBCeSBkZWZhdWx0LCBjbGllbnQtc2lkZSB1c2Ugb2YgdGhpcyBsaWJyYXJ5IGlzIG5vdCBhbGxvd2VkLCBhcyBpdCByaXNrcyBleHBvc2luZyB5b3VyIHNlY3JldCBBUEkgY3JlZGVudGlhbHMgdG8gYXR0YWNrZXJzLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGJhc2VVUkwgPSBDb3JlLnJlYWRFbnYoJ0FOVEhST1BJQ19CQVNFX1VSTCcpLFxuICAgIGFwaUtleSA9IENvcmUucmVhZEVudignQU5USFJPUElDX0FQSV9LRVknKSA/PyBudWxsLFxuICAgIGF1dGhUb2tlbiA9IENvcmUucmVhZEVudignQU5USFJPUElDX0FVVEhfVE9LRU4nKSA/PyBudWxsLFxuICAgIC4uLm9wdHNcbiAgfTogQ2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgb3B0aW9uczogQ2xpZW50T3B0aW9ucyA9IHtcbiAgICAgIGFwaUtleSxcbiAgICAgIGF1dGhUb2tlbixcbiAgICAgIC4uLm9wdHMsXG4gICAgICBiYXNlVVJMOiBiYXNlVVJMIHx8IGBodHRwczovL2FwaS5hbnRocm9waWMuY29tYCxcbiAgICB9O1xuXG4gICAgaWYgKCFvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dCcm93c2VyICYmIENvcmUuaXNSdW5uaW5nSW5Ccm93c2VyKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcnMuQW50aHJvcGljRXJyb3IoXG4gICAgICAgIFwiSXQgbG9va3MgbGlrZSB5b3UncmUgcnVubmluZyBpbiBhIGJyb3dzZXItbGlrZSBlbnZpcm9ubWVudC5cXG5cXG5UaGlzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXFxuSWYgeW91IHVuZGVyc3RhbmQgdGhlIHJpc2tzIGFuZCBoYXZlIGFwcHJvcHJpYXRlIG1pdGlnYXRpb25zIGluIHBsYWNlLFxcbnlvdSBjYW4gc2V0IHRoZSBgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXJgIG9wdGlvbiB0byBgdHJ1ZWAsIGUuZy4sXFxuXFxubmV3IEFudGhyb3BpYyh7IGFwaUtleSwgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUgfSk7XFxuXCIsXG4gICAgICApO1xuICAgIH1cblxuICAgIHN1cGVyKHtcbiAgICAgIGJhc2VVUkw6IG9wdGlvbnMuYmFzZVVSTCEsXG4gICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgPz8gNjAwMDAwIC8qIDEwIG1pbnV0ZXMgKi8sXG4gICAgICBodHRwQWdlbnQ6IG9wdGlvbnMuaHR0cEFnZW50LFxuICAgICAgbWF4UmV0cmllczogb3B0aW9ucy5tYXhSZXRyaWVzLFxuICAgICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2gsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgIHRoaXMuYXV0aFRva2VuID0gYXV0aFRva2VuO1xuICB9XG5cbiAgY29tcGxldGlvbnM6IEFQSS5Db21wbGV0aW9ucyA9IG5ldyBBUEkuQ29tcGxldGlvbnModGhpcyk7XG4gIG1lc3NhZ2VzOiBBUEkuTWVzc2FnZXMgPSBuZXcgQVBJLk1lc3NhZ2VzKHRoaXMpO1xuICBtb2RlbHM6IEFQSS5Nb2RlbHMgPSBuZXcgQVBJLk1vZGVscyh0aGlzKTtcbiAgYmV0YTogQVBJLkJldGEgPSBuZXcgQVBJLkJldGEodGhpcyk7XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGRlZmF1bHRRdWVyeSgpOiBDb3JlLkRlZmF1bHRRdWVyeSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZGVmYXVsdFF1ZXJ5O1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGRlZmF1bHRIZWFkZXJzKG9wdHM6IENvcmUuRmluYWxSZXF1ZXN0T3B0aW9ucyk6IENvcmUuSGVhZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN1cGVyLmRlZmF1bHRIZWFkZXJzKG9wdHMpLFxuICAgICAgLi4uKHRoaXMuX29wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXIgP1xuICAgICAgICB7ICdhbnRocm9waWMtZGFuZ2Vyb3VzLWRpcmVjdC1icm93c2VyLWFjY2Vzcyc6ICd0cnVlJyB9XG4gICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAnYW50aHJvcGljLXZlcnNpb24nOiAnMjAyMy0wNi0wMScsXG4gICAgICAuLi50aGlzLl9vcHRpb25zLmRlZmF1bHRIZWFkZXJzLFxuICAgIH07XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdmFsaWRhdGVIZWFkZXJzKGhlYWRlcnM6IENvcmUuSGVhZGVycywgY3VzdG9tSGVhZGVyczogQ29yZS5IZWFkZXJzKSB7XG4gICAgaWYgKHRoaXMuYXBpS2V5ICYmIGhlYWRlcnNbJ3gtYXBpLWtleSddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjdXN0b21IZWFkZXJzWyd4LWFwaS1rZXknXSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmF1dGhUb2tlbiAmJiBoZWFkZXJzWydhdXRob3JpemF0aW9uJ10pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1c3RvbUhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDb3VsZCBub3QgcmVzb2x2ZSBhdXRoZW50aWNhdGlvbiBtZXRob2QuIEV4cGVjdGVkIGVpdGhlciBhcGlLZXkgb3IgYXV0aFRva2VuIHRvIGJlIHNldC4gT3IgZm9yIG9uZSBvZiB0aGUgXCJYLUFwaS1LZXlcIiBvciBcIkF1dGhvcml6YXRpb25cIiBoZWFkZXJzIHRvIGJlIGV4cGxpY2l0bHkgb21pdHRlZCcsXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBhdXRoSGVhZGVycyhvcHRzOiBDb3JlLkZpbmFsUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkhlYWRlcnMge1xuICAgIGNvbnN0IGFwaUtleUF1dGggPSB0aGlzLmFwaUtleUF1dGgob3B0cyk7XG4gICAgY29uc3QgYmVhcmVyQXV0aCA9IHRoaXMuYmVhcmVyQXV0aChvcHRzKTtcblxuICAgIGlmIChhcGlLZXlBdXRoICE9IG51bGwgJiYgIUNvcmUuaXNFbXB0eU9iaihhcGlLZXlBdXRoKSkge1xuICAgICAgcmV0dXJuIGFwaUtleUF1dGg7XG4gICAgfVxuXG4gICAgaWYgKGJlYXJlckF1dGggIT0gbnVsbCAmJiAhQ29yZS5pc0VtcHR5T2JqKGJlYXJlckF1dGgpKSB7XG4gICAgICByZXR1cm4gYmVhcmVyQXV0aDtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGFwaUtleUF1dGgob3B0czogQ29yZS5GaW5hbFJlcXVlc3RPcHRpb25zKTogQ29yZS5IZWFkZXJzIHtcbiAgICBpZiAodGhpcy5hcGlLZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4geyAnWC1BcGktS2V5JzogdGhpcy5hcGlLZXkgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBiZWFyZXJBdXRoKG9wdHM6IENvcmUuRmluYWxSZXF1ZXN0T3B0aW9ucyk6IENvcmUuSGVhZGVycyB7XG4gICAgaWYgKHRoaXMuYXV0aFRva2VuID09IG51bGwpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuYXV0aFRva2VufWAgfTtcbiAgfVxuXG4gIHN0YXRpYyBBbnRocm9waWMgPSB0aGlzO1xuICBzdGF0aWMgSFVNQU5fUFJPTVBUID0gJ1xcblxcbkh1bWFuOic7XG4gIHN0YXRpYyBBSV9QUk9NUFQgPSAnXFxuXFxuQXNzaXN0YW50Oic7XG4gIHN0YXRpYyBERUZBVUxUX1RJTUVPVVQgPSA2MDAwMDA7IC8vIDEwIG1pbnV0ZXNcblxuICBzdGF0aWMgQW50aHJvcGljRXJyb3IgPSBFcnJvcnMuQW50aHJvcGljRXJyb3I7XG4gIHN0YXRpYyBBUElFcnJvciA9IEVycm9ycy5BUElFcnJvcjtcbiAgc3RhdGljIEFQSUNvbm5lY3Rpb25FcnJvciA9IEVycm9ycy5BUElDb25uZWN0aW9uRXJyb3I7XG4gIHN0YXRpYyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yID0gRXJyb3JzLkFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3I7XG4gIHN0YXRpYyBBUElVc2VyQWJvcnRFcnJvciA9IEVycm9ycy5BUElVc2VyQWJvcnRFcnJvcjtcbiAgc3RhdGljIE5vdEZvdW5kRXJyb3IgPSBFcnJvcnMuTm90Rm91bmRFcnJvcjtcbiAgc3RhdGljIENvbmZsaWN0RXJyb3IgPSBFcnJvcnMuQ29uZmxpY3RFcnJvcjtcbiAgc3RhdGljIFJhdGVMaW1pdEVycm9yID0gRXJyb3JzLlJhdGVMaW1pdEVycm9yO1xuICBzdGF0aWMgQmFkUmVxdWVzdEVycm9yID0gRXJyb3JzLkJhZFJlcXVlc3RFcnJvcjtcbiAgc3RhdGljIEF1dGhlbnRpY2F0aW9uRXJyb3IgPSBFcnJvcnMuQXV0aGVudGljYXRpb25FcnJvcjtcbiAgc3RhdGljIEludGVybmFsU2VydmVyRXJyb3IgPSBFcnJvcnMuSW50ZXJuYWxTZXJ2ZXJFcnJvcjtcbiAgc3RhdGljIFBlcm1pc3Npb25EZW5pZWRFcnJvciA9IEVycm9ycy5QZXJtaXNzaW9uRGVuaWVkRXJyb3I7XG4gIHN0YXRpYyBVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IgPSBFcnJvcnMuVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yO1xuXG4gIHN0YXRpYyB0b0ZpbGUgPSBVcGxvYWRzLnRvRmlsZTtcbiAgc3RhdGljIGZpbGVGcm9tUGF0aCA9IFVwbG9hZHMuZmlsZUZyb21QYXRoO1xufVxuXG5BbnRocm9waWMuQ29tcGxldGlvbnMgPSBDb21wbGV0aW9ucztcbkFudGhyb3BpYy5NZXNzYWdlcyA9IE1lc3NhZ2VzO1xuQW50aHJvcGljLk1vZGVscyA9IE1vZGVscztcbkFudGhyb3BpYy5Nb2RlbEluZm9zUGFnZSA9IE1vZGVsSW5mb3NQYWdlO1xuQW50aHJvcGljLkJldGEgPSBCZXRhO1xuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEFudGhyb3BpYyB7XG4gIGV4cG9ydCB0eXBlIFJlcXVlc3RPcHRpb25zID0gQ29yZS5SZXF1ZXN0T3B0aW9ucztcblxuICBleHBvcnQgaW1wb3J0IFBhZ2UgPSBQYWdpbmF0aW9uLlBhZ2U7XG4gIGV4cG9ydCB7IHR5cGUgUGFnZVBhcmFtcyBhcyBQYWdlUGFyYW1zLCB0eXBlIFBhZ2VSZXNwb25zZSBhcyBQYWdlUmVzcG9uc2UgfTtcblxuICBleHBvcnQge1xuICAgIENvbXBsZXRpb25zIGFzIENvbXBsZXRpb25zLFxuICAgIHR5cGUgQ29tcGxldGlvbiBhcyBDb21wbGV0aW9uLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgTWVzc2FnZXMgYXMgTWVzc2FnZXMsXG4gICAgdHlwZSBCYXNlNjRQREZTb3VyY2UgYXMgQmFzZTY0UERGU291cmNlLFxuICAgIHR5cGUgQ2FjaGVDb250cm9sRXBoZW1lcmFsIGFzIENhY2hlQ29udHJvbEVwaGVtZXJhbCxcbiAgICB0eXBlIENpdGF0aW9uQ2hhckxvY2F0aW9uIGFzIENpdGF0aW9uQ2hhckxvY2F0aW9uLFxuICAgIHR5cGUgQ2l0YXRpb25DaGFyTG9jYXRpb25QYXJhbSBhcyBDaXRhdGlvbkNoYXJMb2NhdGlvblBhcmFtLFxuICAgIHR5cGUgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvbiBhcyBDaXRhdGlvbkNvbnRlbnRCbG9ja0xvY2F0aW9uLFxuICAgIHR5cGUgQ2l0YXRpb25Db250ZW50QmxvY2tMb2NhdGlvblBhcmFtIGFzIENpdGF0aW9uQ29udGVudEJsb2NrTG9jYXRpb25QYXJhbSxcbiAgICB0eXBlIENpdGF0aW9uUGFnZUxvY2F0aW9uIGFzIENpdGF0aW9uUGFnZUxvY2F0aW9uLFxuICAgIHR5cGUgQ2l0YXRpb25QYWdlTG9jYXRpb25QYXJhbSBhcyBDaXRhdGlvblBhZ2VMb2NhdGlvblBhcmFtLFxuICAgIHR5cGUgQ2l0YXRpb25zQ29uZmlnUGFyYW0gYXMgQ2l0YXRpb25zQ29uZmlnUGFyYW0sXG4gICAgdHlwZSBDaXRhdGlvbnNEZWx0YSBhcyBDaXRhdGlvbnNEZWx0YSxcbiAgICB0eXBlIENvbnRlbnRCbG9jayBhcyBDb250ZW50QmxvY2ssXG4gICAgdHlwZSBDb250ZW50QmxvY2tEZWx0YUV2ZW50IGFzIENvbnRlbnRCbG9ja0RlbHRhRXZlbnQsXG4gICAgdHlwZSBDb250ZW50QmxvY2tQYXJhbSBhcyBDb250ZW50QmxvY2tQYXJhbSxcbiAgICB0eXBlIENvbnRlbnRCbG9ja1NvdXJjZSBhcyBDb250ZW50QmxvY2tTb3VyY2UsXG4gICAgdHlwZSBDb250ZW50QmxvY2tTb3VyY2VDb250ZW50IGFzIENvbnRlbnRCbG9ja1NvdXJjZUNvbnRlbnQsXG4gICAgdHlwZSBDb250ZW50QmxvY2tTdGFydEV2ZW50IGFzIENvbnRlbnRCbG9ja1N0YXJ0RXZlbnQsXG4gICAgdHlwZSBDb250ZW50QmxvY2tTdG9wRXZlbnQgYXMgQ29udGVudEJsb2NrU3RvcEV2ZW50LFxuICAgIHR5cGUgRG9jdW1lbnRCbG9ja1BhcmFtIGFzIERvY3VtZW50QmxvY2tQYXJhbSxcbiAgICB0eXBlIEltYWdlQmxvY2tQYXJhbSBhcyBJbWFnZUJsb2NrUGFyYW0sXG4gICAgdHlwZSBJbnB1dEpTT05EZWx0YSBhcyBJbnB1dEpTT05EZWx0YSxcbiAgICB0eXBlIE1lc3NhZ2UgYXMgTWVzc2FnZSxcbiAgICB0eXBlIE1lc3NhZ2VEZWx0YUV2ZW50IGFzIE1lc3NhZ2VEZWx0YUV2ZW50LFxuICAgIHR5cGUgTWVzc2FnZURlbHRhVXNhZ2UgYXMgTWVzc2FnZURlbHRhVXNhZ2UsXG4gICAgdHlwZSBNZXNzYWdlUGFyYW0gYXMgTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgTWVzc2FnZVN0YXJ0RXZlbnQgYXMgTWVzc2FnZVN0YXJ0RXZlbnQsXG4gICAgdHlwZSBNZXNzYWdlU3RvcEV2ZW50IGFzIE1lc3NhZ2VTdG9wRXZlbnQsXG4gICAgdHlwZSBNZXNzYWdlU3RyZWFtRXZlbnQgYXMgTWVzc2FnZVN0cmVhbUV2ZW50LFxuICAgIHR5cGUgTWVzc2FnZVRva2Vuc0NvdW50IGFzIE1lc3NhZ2VUb2tlbnNDb3VudCxcbiAgICB0eXBlIE1ldGFkYXRhIGFzIE1ldGFkYXRhLFxuICAgIHR5cGUgTW9kZWwgYXMgTW9kZWwsXG4gICAgdHlwZSBQbGFpblRleHRTb3VyY2UgYXMgUGxhaW5UZXh0U291cmNlLFxuICAgIHR5cGUgUmF3Q29udGVudEJsb2NrRGVsdGFFdmVudCBhcyBSYXdDb250ZW50QmxvY2tEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmF3Q29udGVudEJsb2NrU3RhcnRFdmVudCBhcyBSYXdDb250ZW50QmxvY2tTdGFydEV2ZW50LFxuICAgIHR5cGUgUmF3Q29udGVudEJsb2NrU3RvcEV2ZW50IGFzIFJhd0NvbnRlbnRCbG9ja1N0b3BFdmVudCxcbiAgICB0eXBlIFJhd01lc3NhZ2VEZWx0YUV2ZW50IGFzIFJhd01lc3NhZ2VEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmF3TWVzc2FnZVN0YXJ0RXZlbnQgYXMgUmF3TWVzc2FnZVN0YXJ0RXZlbnQsXG4gICAgdHlwZSBSYXdNZXNzYWdlU3RvcEV2ZW50IGFzIFJhd01lc3NhZ2VTdG9wRXZlbnQsXG4gICAgdHlwZSBSYXdNZXNzYWdlU3RyZWFtRXZlbnQgYXMgUmF3TWVzc2FnZVN0cmVhbUV2ZW50LFxuICAgIHR5cGUgVGV4dEJsb2NrIGFzIFRleHRCbG9jayxcbiAgICB0eXBlIFRleHRCbG9ja1BhcmFtIGFzIFRleHRCbG9ja1BhcmFtLFxuICAgIHR5cGUgVGV4dENpdGF0aW9uIGFzIFRleHRDaXRhdGlvbixcbiAgICB0eXBlIFRleHRDaXRhdGlvblBhcmFtIGFzIFRleHRDaXRhdGlvblBhcmFtLFxuICAgIHR5cGUgVGV4dERlbHRhIGFzIFRleHREZWx0YSxcbiAgICB0eXBlIFRvb2wgYXMgVG9vbCxcbiAgICB0eXBlIFRvb2xDaG9pY2UgYXMgVG9vbENob2ljZSxcbiAgICB0eXBlIFRvb2xDaG9pY2VBbnkgYXMgVG9vbENob2ljZUFueSxcbiAgICB0eXBlIFRvb2xDaG9pY2VBdXRvIGFzIFRvb2xDaG9pY2VBdXRvLFxuICAgIHR5cGUgVG9vbENob2ljZVRvb2wgYXMgVG9vbENob2ljZVRvb2wsXG4gICAgdHlwZSBUb29sUmVzdWx0QmxvY2tQYXJhbSBhcyBUb29sUmVzdWx0QmxvY2tQYXJhbSxcbiAgICB0eXBlIFRvb2xVc2VCbG9jayBhcyBUb29sVXNlQmxvY2ssXG4gICAgdHlwZSBUb29sVXNlQmxvY2tQYXJhbSBhcyBUb29sVXNlQmxvY2tQYXJhbSxcbiAgICB0eXBlIFVzYWdlIGFzIFVzYWdlLFxuICAgIHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtcyBhcyBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBNZXNzYWdlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgTWVzc2FnZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBNZXNzYWdlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgTWVzc2FnZVN0cmVhbVBhcmFtcyBhcyBNZXNzYWdlU3RyZWFtUGFyYW1zLFxuICAgIHR5cGUgTWVzc2FnZUNvdW50VG9rZW5zUGFyYW1zIGFzIE1lc3NhZ2VDb3VudFRva2Vuc1BhcmFtcyxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIE1vZGVscyBhcyBNb2RlbHMsXG4gICAgdHlwZSBNb2RlbEluZm8gYXMgTW9kZWxJbmZvLFxuICAgIE1vZGVsSW5mb3NQYWdlIGFzIE1vZGVsSW5mb3NQYWdlLFxuICAgIHR5cGUgTW9kZWxMaXN0UGFyYW1zIGFzIE1vZGVsTGlzdFBhcmFtcyxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIEJldGEgYXMgQmV0YSxcbiAgICB0eXBlIEFudGhyb3BpY0JldGEgYXMgQW50aHJvcGljQmV0YSxcbiAgICB0eXBlIEJldGFBUElFcnJvciBhcyBCZXRhQVBJRXJyb3IsXG4gICAgdHlwZSBCZXRhQXV0aGVudGljYXRpb25FcnJvciBhcyBCZXRhQXV0aGVudGljYXRpb25FcnJvcixcbiAgICB0eXBlIEJldGFCaWxsaW5nRXJyb3IgYXMgQmV0YUJpbGxpbmdFcnJvcixcbiAgICB0eXBlIEJldGFFcnJvciBhcyBCZXRhRXJyb3IsXG4gICAgdHlwZSBCZXRhRXJyb3JSZXNwb25zZSBhcyBCZXRhRXJyb3JSZXNwb25zZSxcbiAgICB0eXBlIEJldGFHYXRld2F5VGltZW91dEVycm9yIGFzIEJldGFHYXRld2F5VGltZW91dEVycm9yLFxuICAgIHR5cGUgQmV0YUludmFsaWRSZXF1ZXN0RXJyb3IgYXMgQmV0YUludmFsaWRSZXF1ZXN0RXJyb3IsXG4gICAgdHlwZSBCZXRhTm90Rm91bmRFcnJvciBhcyBCZXRhTm90Rm91bmRFcnJvcixcbiAgICB0eXBlIEJldGFPdmVybG9hZGVkRXJyb3IgYXMgQmV0YU92ZXJsb2FkZWRFcnJvcixcbiAgICB0eXBlIEJldGFQZXJtaXNzaW9uRXJyb3IgYXMgQmV0YVBlcm1pc3Npb25FcnJvcixcbiAgICB0eXBlIEJldGFSYXRlTGltaXRFcnJvciBhcyBCZXRhUmF0ZUxpbWl0RXJyb3IsXG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgQVBJRXJyb3JPYmplY3QgPSBBUEkuQVBJRXJyb3JPYmplY3Q7XG4gIGV4cG9ydCB0eXBlIEF1dGhlbnRpY2F0aW9uRXJyb3IgPSBBUEkuQXV0aGVudGljYXRpb25FcnJvcjtcbiAgZXhwb3J0IHR5cGUgQmlsbGluZ0Vycm9yID0gQVBJLkJpbGxpbmdFcnJvcjtcbiAgZXhwb3J0IHR5cGUgRXJyb3JPYmplY3QgPSBBUEkuRXJyb3JPYmplY3Q7XG4gIGV4cG9ydCB0eXBlIEVycm9yUmVzcG9uc2UgPSBBUEkuRXJyb3JSZXNwb25zZTtcbiAgZXhwb3J0IHR5cGUgR2F0ZXdheVRpbWVvdXRFcnJvciA9IEFQSS5HYXRld2F5VGltZW91dEVycm9yO1xuICBleHBvcnQgdHlwZSBJbnZhbGlkUmVxdWVzdEVycm9yID0gQVBJLkludmFsaWRSZXF1ZXN0RXJyb3I7XG4gIGV4cG9ydCB0eXBlIE5vdEZvdW5kRXJyb3IgPSBBUEkuTm90Rm91bmRFcnJvcjtcbiAgZXhwb3J0IHR5cGUgT3ZlcmxvYWRlZEVycm9yID0gQVBJLk92ZXJsb2FkZWRFcnJvcjtcbiAgZXhwb3J0IHR5cGUgUGVybWlzc2lvbkVycm9yID0gQVBJLlBlcm1pc3Npb25FcnJvcjtcbiAgZXhwb3J0IHR5cGUgUmF0ZUxpbWl0RXJyb3IgPSBBUEkuUmF0ZUxpbWl0RXJyb3I7XG59XG5leHBvcnQgY29uc3QgeyBIVU1BTl9QUk9NUFQsIEFJX1BST01QVCB9ID0gQW50aHJvcGljO1xuXG5leHBvcnQgeyB0b0ZpbGUsIGZpbGVGcm9tUGF0aCB9IGZyb20gXCIuL3VwbG9hZHMuanNcIjtcbmV4cG9ydCB7XG4gIEFudGhyb3BpY0Vycm9yLFxuICBBUElFcnJvcixcbiAgQVBJQ29ubmVjdGlvbkVycm9yLFxuICBBUElDb25uZWN0aW9uVGltZW91dEVycm9yLFxuICBBUElVc2VyQWJvcnRFcnJvcixcbiAgTm90Rm91bmRFcnJvcixcbiAgQ29uZmxpY3RFcnJvcixcbiAgUmF0ZUxpbWl0RXJyb3IsXG4gIEJhZFJlcXVlc3RFcnJvcixcbiAgQXV0aGVudGljYXRpb25FcnJvcixcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcixcbiAgUGVybWlzc2lvbkRlbmllZEVycm9yLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IsXG59IGZyb20gXCIuL2Vycm9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IEFudGhyb3BpYztcbiIsICIvKipcclxuICogQW50aHJvcGljIFByb3ZpZGVyIEltcGxlbWVudGF0aW9uXHJcbiAqIFxyXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBBbnRocm9waWMgcHJvdmlkZXIsXHJcbiAqIHdoaWNoIGFsbG93cyB0aGUgcGx1Z2luIHRvIGludGVyYWN0IHdpdGggQW50aHJvcGljJ3MgQVBJIChDbGF1ZGUgbW9kZWxzKVxyXG4gKiB1c2luZyB0aGUgb2ZmaWNpYWwgQW50aHJvcGljIFR5cGVTY3JpcHQgU0RLLlxyXG4gKiBcclxuICogQ2xhdWRlIG1vZGVscyBoYXZlIGxhcmdlIGNvbnRleHQgd2luZG93cyBhbmQgc3Ryb25nIHJlYXNvbmluZyBjYXBhYmlsaXRpZXMuXHJcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaGFuZGxlcyB0b2tlbiBjb3VudGluZyBhbmQgY29udGV4dCB3aW5kb3cgbWFuYWdlbWVudC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBNZXNzYWdlLCBDb21wbGV0aW9uT3B0aW9ucywgQ29ubmVjdGlvblRlc3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIFByb3ZpZGVyRXJyb3IsIFByb3ZpZGVyRXJyb3JUeXBlIH0gZnJvbSAnLi9iYXNlJztcclxuaW1wb3J0IEFudGhyb3BpYyBmcm9tICdAYW50aHJvcGljLWFpL3Nkayc7XHJcblxyXG4vKipcclxuICogQW50aHJvcGljIEFQSSByZXNwb25zZSB0eXBlc1xyXG4gKiBUaGVzZSBhcmUgc2ltcGxpZmllZCB2ZXJzaW9ucyBvZiB0aGUgYWN0dWFsIHJlc3BvbnNlIHR5cGVzXHJcbiAqL1xyXG5pbnRlcmZhY2UgQW50aHJvcGljTWVzc2FnZSB7XHJcbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JztcclxuICAgIGNvbnRlbnQ6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIEFudGhyb3BpY1N0cmVhbUV2ZW50IHtcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIGRlbHRhPzoge1xyXG4gICAgICAgIHR5cGU6IHN0cmluZztcclxuICAgICAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogTWF4aW11bSBjb250ZXh0IHdpbmRvdyBzaXplcyBmb3IgQW50aHJvcGljIG1vZGVscyAoaW4gdG9rZW5zKVxyXG4gKiBUaGVzZSB2YWx1ZXMgcmVwcmVzZW50IHRoZSB0b3RhbCB0b2tlbnMgKGlucHV0ICsgb3V0cHV0KSB0aGF0IGVhY2ggbW9kZWwgY2FuIGhhbmRsZVxyXG4gKi9cclxuY29uc3QgTU9ERUxfQ09OVEVYVF9XSU5ET1dTOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xyXG4gICAgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknOiAyMDAwMDAsXHJcbiAgICAnY2xhdWRlLTMtc29ubmV0LTIwMjQwMjI5JzogMjAwMDAwLFxyXG4gICAgJ2NsYXVkZS0zLWhhaWt1LTIwMjQwMzA3JzogMjAwMDAwLFxyXG4gICAgJ2NsYXVkZS0zLTctc29ubmV0LTIwMjUwMjE5JzogMjAwMDAwLFxyXG4gICAgJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyJzogMjAwMDAwLFxyXG4gICAgJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQwNjIwJzogMjAwMDAwLFxyXG4gICAgJ2NsYXVkZS0zLTUtaGFpa3UtMjAyNDEwMjInOiAyMDAwMDAsXHJcbn07XHJcblxyXG4vKipcclxuICogTWF4aW11bSBvdXRwdXQgdG9rZW5zIHBlciBBbnRocm9waWMgbW9kZWxcclxuICovXHJcbmNvbnN0IE1PREVMX09VVFBVVF9UT0tFTl9MSU1JVFM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7XHJcbiAgICAnY2xhdWRlLTMtNy1zb25uZXQtMjAyNTAyMTknOiA2NDAwMCxcclxuICAgICdjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMic6IDgxOTIsXHJcbiAgICAnY2xhdWRlLTMtNS1zb25uZXQtMjAyNDA2MjAnOiA4MTkyLFxyXG4gICAgJ2NsYXVkZS0zLTUtaGFpa3UtMjAyNDEwMjInOiA4MTkyLFxyXG4gICAgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknOiA0MDk2LFxyXG4gICAgJ2NsYXVkZS0zLXNvbm5ldC0yMDI0MDIyOSc6IDgxOTIsIC8vIGZhbGxiYWNrIGZvciBvbGRlciBzb25uZXRcclxuICAgICdjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwNyc6IDQwOTYsICAvLyBmYWxsYmFjayBmb3Igb2xkZXIgaGFpa3VcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBcHByb3hpbWF0ZSB0b2tlbiBjb3VudCBmb3IgbWVzc2FnZXNcclxuICogXHJcbiAqIFRoaXMgaXMgYSBzaW1wbGUgYXBwcm94aW1hdGlvbiBiYXNlZCBvbiBjaGFyYWN0ZXIgY291bnQuXHJcbiAqIENsYXVkZSBtb2RlbHMgdXNlIH4zLjUgY2hhcnMgcGVyIHRva2VuIG9uIGF2ZXJhZ2UsIGJ1dCB3ZSB1c2UgNCBmb3Igc2FmZXR5LlxyXG4gKiBcclxuICogQHBhcmFtIG1lc3NhZ2VzIC0gVGhlIG1lc3NhZ2VzIHRvIGNvdW50IHRva2VucyBmb3JcclxuICogQHJldHVybnMgQXBwcm94aW1hdGUgdG9rZW4gY291bnRcclxuICovXHJcbmZ1bmN0aW9uIGVzdGltYXRlVG9rZW5Db3VudChtZXNzYWdlczogTWVzc2FnZVtdKTogbnVtYmVyIHtcclxuICAgIC8vIFNpbXBsZSBhcHByb3hpbWF0aW9uOiAxIHRva2VuIFx1MjI0OCA0IGNoYXJhY3RlcnNcclxuICAgIGNvbnN0IENIQVJTX1BFUl9UT0tFTiA9IDQ7XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBjaGFyYWN0ZXJzIGluIGFsbCBtZXNzYWdlc1xyXG4gICAgY29uc3QgdG90YWxDaGFycyA9IG1lc3NhZ2VzLnJlZHVjZSgodG90YWwsIG1zZykgPT4ge1xyXG4gICAgICAgIHJldHVybiB0b3RhbCArIG1zZy5jb250ZW50Lmxlbmd0aDtcclxuICAgIH0sIDApO1xyXG4gICAgXHJcbiAgICAvLyBDb252ZXJ0IHRvIHRva2Vuc1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCh0b3RhbENoYXJzIC8gQ0hBUlNfUEVSX1RPS0VOKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgdGhlIEFudGhyb3BpYyBwcm92aWRlciBmdW5jdGlvbmFsaXR5XHJcbiAqIFxyXG4gKiBIYW5kbGVzIGNvbW11bmljYXRpb24gd2l0aCBBbnRocm9waWMncyBBUEksIGluY2x1ZGluZzpcclxuICogLSBDaGF0IGNvbXBsZXRpb25zXHJcbiAqIC0gTW9kZWwgbGlzdGluZ1xyXG4gKiAtIENvbm5lY3Rpb24gdGVzdGluZ1xyXG4gKiAtIFN0cmVhbWluZyByZXNwb25zZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBbnRocm9waWNQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlciB7XHJcbiAgICBwcm90ZWN0ZWQgYXBpS2V5OiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgYmFzZVVybCA9ICdodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxJztcclxuICAgIHByb3RlY3RlZCBtb2RlbDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBjbGllbnQ6IEFudGhyb3BpYztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcGlLZXk6IHN0cmluZywgbW9kZWw6IHN0cmluZyA9ICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcclxuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQW50aHJvcGljKHtcclxuICAgICAgICAgICAgYXBpS2V5OiB0aGlzLmFwaUtleSxcclxuICAgICAgICAgICAgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUgLy8gUmVxdWlyZWQgZm9yIGJyb3dzZXIgZW52aXJvbm1lbnRzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjb21wbGV0aW9uIGZyb20gQW50aHJvcGljXHJcbiAgICAgKiBcclxuICAgICAqIFNlbmRzIHRoZSBjb252ZXJzYXRpb24gdG8gQW50aHJvcGljIGFuZCBzdHJlYW1zIGJhY2sgdGhlIHJlc3BvbnNlXHJcbiAgICAgKiB1c2luZyB0aGUgb2ZmaWNpYWwgU0RLJ3Mgc3RyZWFtaW5nIHN1cHBvcnQuXHJcbiAgICAgKiBcclxuICAgICAqIEF1dG9tYXRpY2FsbHkgYWRqdXN0cyBtYXhfdG9rZW5zIGlmIHRoZSByZXF1ZXN0IHdvdWxkIGV4Y2VlZCB0aGUgbW9kZWwncyBjb250ZXh0IHdpbmRvdy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzIC0gVGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFNldHRpbmdzIGZvciB0aGlzIGNvbXBsZXRpb25cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0Q29tcGxldGlvbihtZXNzYWdlczogTWVzc2FnZVtdLCBvcHRpb25zOiBDb21wbGV0aW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY29udGV4dCB3aW5kb3cgc2l6ZSBmb3IgdGhlIGN1cnJlbnQgbW9kZWxcclxuICAgICAgICAgICAgY29uc3QgY29udGV4dFdpbmRvdyA9IE1PREVMX0NPTlRFWFRfV0lORE9XU1t0aGlzLm1vZGVsXSA/PyAyMDAwMDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFRva2VuTGltaXQgPSBNT0RFTF9PVVRQVVRfVE9LRU5fTElNSVRTW3RoaXMubW9kZWxdO1xyXG5cclxuICAgICAgICAgICAgLy8gRXN0aW1hdGUgdG9rZW4gY291bnQgZm9yIGlucHV0IG1lc3NhZ2VzXHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0VG9rZW5zID0gZXN0aW1hdGVUb2tlbkNvdW50KG1lc3NhZ2VzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBzYWZlIG1heF90b2tlbnMgdmFsdWVcclxuICAgICAgICAgICAgbGV0IG1heFRva2VucyA9IG9wdGlvbnMubWF4VG9rZW5zID8/IDEwMDA7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGUgY29tYmluZWQgaW5wdXQgKyBvdXRwdXQgdG9rZW5zIHdvdWxkIGV4Y2VlZCB0aGUgY29udGV4dCB3aW5kb3csXHJcbiAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgYWRqdXN0IG1heF90b2tlbnMgdG8gZml0XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFRva2VucyArIG1heFRva2VucyA+IGNvbnRleHRXaW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFkanVzdGVkTWF4VG9rZW5zID0gY29udGV4dFdpbmRvdyAtIGlucHV0VG9rZW5zO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhZGp1c3RlZE1heFRva2VucyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb3ZpZGVyRXJyb3JUeXBlLkludmFsaWRSZXF1ZXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSW5wdXQgaXMgdG9vIGxvbmcgZm9yICR7dGhpcy5tb2RlbH0ncyBjb250ZXh0IHdpbmRvdy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBFc3RpbWF0ZWQgaW5wdXQgdG9rZW5zOiAke2lucHV0VG9rZW5zfSwgY29udGV4dCB3aW5kb3c6ICR7Y29udGV4dFdpbmRvd31gXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgICAgICBgQWRqdXN0aW5nIG1heF90b2tlbnMgZnJvbSAke21heFRva2Vuc30gdG8gJHthZGp1c3RlZE1heFRva2Vuc30gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYHRvIGZpdCB3aXRoaW4gJHt0aGlzLm1vZGVsfSdzIGNvbnRleHQgd2luZG93YFxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtYXhUb2tlbnMgPSBhZGp1c3RlZE1heFRva2VucztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRW5mb3JjZSBtb2RlbCBvdXRwdXQgdG9rZW4gbGltaXRcclxuICAgICAgICAgICAgaWYgKG91dHB1dFRva2VuTGltaXQgJiYgbWF4VG9rZW5zID4gb3V0cHV0VG9rZW5MaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgICAgICAgICAgICAgYENhcHBpbmcgbWF4X3Rva2VucyBmcm9tICR7bWF4VG9rZW5zfSB0byBtb2RlbCBvdXRwdXQgbGltaXQgJHtvdXRwdXRUb2tlbkxpbWl0fSBmb3IgJHt0aGlzLm1vZGVsfWBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBtYXhUb2tlbnMgPSBvdXRwdXRUb2tlbkxpbWl0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBGb3JtYXQgbWVzc2FnZXMgZm9yIEFudGhyb3BpYyBBUElcclxuICAgICAgICAgICAgY29uc3QgeyBzeXN0ZW1Qcm9tcHQsIGFudGhyb3BpY01lc3NhZ2VzIH0gPSB0aGlzLmZvcm1hdE1lc3NhZ2VzKG1lc3NhZ2VzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcmVxdWVzdCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RQYXJhbXM6IGFueSA9IHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IGFudGhyb3BpY01lc3NhZ2VzLFxyXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IG9wdGlvbnMudGVtcGVyYXR1cmUgPz8gMC43LFxyXG4gICAgICAgICAgICAgICAgbWF4X3Rva2VuczogbWF4VG9rZW5zLFxyXG4gICAgICAgICAgICAgICAgc3RyZWFtOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBBZGQgc3lzdGVtIHByb21wdCBpZiBwcmVzZW50XHJcbiAgICAgICAgICAgIGlmIChzeXN0ZW1Qcm9tcHQpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RQYXJhbXMuc3lzdGVtID0gc3lzdGVtUHJvbXB0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHN0cmVhbSB3aXRoIHByb3BlciBtZXNzYWdlIGZvcm1hdFxyXG4gICAgICAgICAgICAvLyBVc2UgdHlwZSBhc3NlcnRpb24gdG8gYnlwYXNzIFR5cGVTY3JpcHQgZXJyb3JzXHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IHRoaXMuY2xpZW50Lm1lc3NhZ2VzLmNyZWF0ZShyZXF1ZXN0UGFyYW1zKSBhcyBhbnk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIHRoZSBzdHJlYW0gdXNpbmcgYSB0cnktY2F0Y2ggdG8gaGFuZGxlIGFueSBzdHJlYW1pbmcgZXJyb3JzXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIHN0cmVhbSBiYXNlZCBvbiB0aGUgQW50aHJvcGljIFNESydzIHN0cmVhbWluZyBpbXBsZW1lbnRhdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHNpbXBsaWZpZWQgYXBwcm9hY2ggdGhhdCBzaG91bGQgd29yayB3aXRoIG1vc3QgdmVyc2lvbnMgb2YgdGhlIFNES1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbSAmJiB0eXBlb2Ygc3RyZWFtID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0ub24gJiYgdHlwZW9mIHN0cmVhbS5vbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFdmVudC1iYXNlZCBBUElcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLm9uKCdjb250ZW50X2Jsb2NrX2RlbHRhJywgKGNodW5rOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsuZGVsdGE/LnR5cGUgPT09ICd0ZXh0X2RlbHRhJyAmJiBvcHRpb25zLnN0cmVhbUNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyZWFtQ2FsbGJhY2soY2h1bmsuZGVsdGEudGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ub24oJ2VuZCcsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoU3ltYm9sLmFzeW5jSXRlcmF0b3IgaW4gc3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jIGl0ZXJhdG9yIEFQSVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rLnR5cGUgPT09ICdjb250ZW50X2Jsb2NrX2RlbHRhJyAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5kZWx0YT8udHlwZSA9PT0gJ3RleHRfZGVsdGEnICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyZWFtQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0cmVhbUNhbGxiYWNrKGNodW5rLmRlbHRhLnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnN0cmVhbUNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vbi1zdHJlYW1pbmcgcmVzcG9uc2UgKGZhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0FudGhyb3BpYyByZXNwb25zZSBpcyBub3QgYSBzdHJlYW0sIGhhbmRsaW5nIGFzIHJlZ3VsYXIgcmVzcG9uc2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCdjb250ZW50JyBpbiBzdHJlYW0gJiYgdHlwZW9mIHN0cmVhbS5jb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJlYW1DYWxsYmFjayhzdHJlYW0uY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKHN0cmVhbUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIEFudGhyb3BpYyBzdHJlYW06Jywgc3RyZWFtRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgc3RyZWFtRXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQcm92aWRlckVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQW50aHJvcGljIHN0cmVhbSB3YXMgYWJvcnRlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsbGluZyBBbnRocm9waWM6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXZhaWxhYmxlIEFudGhyb3BpYyBtb2RlbHNcclxuICAgICAqIFxyXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgQ2xhdWRlIG1vZGVscy5cclxuICAgICAqIE5vdGU6IEFudGhyb3BpYyBkb2Vzbid0IGhhdmUgYSBtb2RlbHMgZW5kcG9pbnQsIHNvIHdlIHJldHVybiBrbm93biBtb2RlbHMuXHJcbiAgICAgKiBUaGlzIGxpc3QgaXMgYmFzZWQgb24gdGhlIG1vZGVscyBkZWZpbmVkIGluIE1PREVMX0NPTlRFWFRfV0lORE9XUy5cclxuICAgICAqIFxyXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBhdmFpbGFibGUgbW9kZWwgbmFtZXNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0QXZhaWxhYmxlTW9kZWxzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGtleXMgZnJvbSBvdXIgTU9ERUxfQ09OVEVYVF9XSU5ET1dTIG9iamVjdFxyXG4gICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhlIG1vZGVsIGxpc3QgaXMgc3luY2hyb25pemVkIHdpdGggb3VyIGNvbnRleHQgd2luZG93IGRlZmluaXRpb25zXHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhNT0RFTF9DT05URVhUX1dJTkRPV1MpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgQW50aHJvcGljIG1vZGVsczonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JtYXQgbWVzc2FnZXMgZm9yIEFudGhyb3BpYyBBUElcclxuICAgICAqIFxyXG4gICAgICogQ29udmVydHMgZnJvbSB0aGUgcGx1Z2luJ3MgTWVzc2FnZSBmb3JtYXQgdG8gQW50aHJvcGljJ3MgZXhwZWN0ZWQgZm9ybWF0LlxyXG4gICAgICogSGFuZGxlcyBzeXN0ZW0gbWVzc2FnZXMgc3BlY2lhbGx5IGFzIEFudGhyb3BpYyBoYXMgYSBkaWZmZXJlbnQgZm9ybWF0LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXMgLSBBcnJheSBvZiBtZXNzYWdlcyB0byBmb3JtYXRcclxuICAgICAqIEByZXR1cm5zIEZvcm1hdHRlZCBtZXNzYWdlcyBhbmQgc3lzdGVtIHByb21wdCBmb3IgQW50aHJvcGljIEFQSVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZvcm1hdE1lc3NhZ2VzKG1lc3NhZ2VzOiBNZXNzYWdlW10pOiB7IFxyXG4gICAgICAgIHN5c3RlbVByb21wdDogc3RyaW5nIHwgdW5kZWZpbmVkLCBcclxuICAgICAgICBhbnRocm9waWNNZXNzYWdlczogQW50aHJvcGljTWVzc2FnZVtdIFxyXG4gICAgfSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIHN5c3RlbSBtZXNzYWdlcyBzcGVjaWFsbHkgYXMgQW50aHJvcGljIGhhcyBhIGRpZmZlcmVudCBmb3JtYXRcclxuICAgICAgICBjb25zdCBzeXN0ZW1NZXNzYWdlcyA9IG1lc3NhZ2VzLmZpbHRlcihtc2cgPT4gbXNnLnJvbGUgPT09ICdzeXN0ZW0nKTtcclxuICAgICAgICBjb25zdCBub25TeXN0ZW1NZXNzYWdlcyA9IG1lc3NhZ2VzLmZpbHRlcihtc2cgPT4gbXNnLnJvbGUgIT09ICdzeXN0ZW0nKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBFeHRyYWN0IHN5c3RlbSBtZXNzYWdlIGlmIHByZXNlbnRcclxuICAgICAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBzeXN0ZW1NZXNzYWdlcy5sZW5ndGggPiAwIFxyXG4gICAgICAgICAgICA/IHN5c3RlbU1lc3NhZ2VzLm1hcChtc2cgPT4gbXNnLmNvbnRlbnQpLmpvaW4oJ1xcblxcbicpXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENvbnZlcnQgbWVzc2FnZXMgdG8gQW50aHJvcGljIGZvcm1hdFxyXG4gICAgICAgIC8vIEZpcnN0LCBwcmVwYXJlIGEgY2xlYW4gYXJyYXkgb2YgbWVzc2FnZXMgd2l0aCBwcm9wZXIgcm9sZXNcclxuICAgICAgICBjb25zdCBhbnRocm9waWNNZXNzYWdlcyA9IG5vblN5c3RlbU1lc3NhZ2VzLm1hcChtc2cgPT4ge1xyXG4gICAgICAgICAgICAvLyBFbnN1cmUgcm9sZSBpcyBlaXRoZXIgJ3VzZXInIG9yICdhc3Npc3RhbnQnXHJcbiAgICAgICAgICAgIGNvbnN0IHJvbGUgPSAobXNnLnJvbGUgPT09ICd1c2VyJyB8fCBtc2cucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIFxyXG4gICAgICAgICAgICAgICAgPyBtc2cucm9sZSBhcyAndXNlcicgfCAnYXNzaXN0YW50JyAgLy8gVHlwZSBhc3NlcnRpb24gdG8gaGVscCBUeXBlU2NyaXB0XHJcbiAgICAgICAgICAgICAgICA6ICd1c2VyJyBhcyBjb25zdDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB7IHJvbGUsIGNvbnRlbnQ6IG1zZy5jb250ZW50IH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHsgc3lzdGVtUHJvbXB0LCBhbnRocm9waWNNZXNzYWdlcyB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBjb25uZWN0aW9uIHRvIEFudGhyb3BpY1xyXG4gICAgICogXHJcbiAgICAgKiBWZXJpZmllcyB0aGUgQVBJIGtleSB3b3JrcyBieSBhdHRlbXB0aW5nIGEgc2ltcGxlIGNvbXBsZXRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIFRlc3QgcmVzdWx0cyBpbmNsdWRpbmcgc3VjY2Vzcy9mYWlsdXJlXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRlc3RDb25uZWN0aW9uKCk6IFByb21pc2U8Q29ubmVjdGlvblRlc3RSZXN1bHQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBUZXN0IHRoZSBjb25uZWN0aW9uIGJ5IHNlbmRpbmcgYSBtaW5pbWFsIG1lc3NhZ2VcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGllbnQubWVzc2FnZXMuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFt7IHJvbGU6ICd1c2VyJyBhcyBjb25zdCwgY29udGVudDogJ0hpJyB9XSxcclxuICAgICAgICAgICAgICAgIG1heF90b2tlbnM6IDFcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCB0aGlzLmdldEF2YWlsYWJsZU1vZGVscygpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIEFudGhyb3BpYyEnLFxyXG4gICAgICAgICAgICAgICAgbW9kZWxzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3JSZXNwb25zZShlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsICIvKipcclxuICogT3BlbkFJIFByb3ZpZGVyIEltcGxlbWVudGF0aW9uXHJcbiAqIFxyXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPcGVuQUkgcHJvdmlkZXIsXHJcbiAqIHdoaWNoIGFsbG93cyB0aGUgcGx1Z2luIHRvIGludGVyYWN0IHdpdGggT3BlbkFJJ3MgQVBJIChHUFQtMy41LCBHUFQtNCwgZXRjLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBNZXNzYWdlLCBDb21wbGV0aW9uT3B0aW9ucywgQ29ubmVjdGlvblRlc3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIFByb3ZpZGVyRXJyb3IsIFByb3ZpZGVyRXJyb3JUeXBlIH0gZnJvbSAnLi9iYXNlJztcclxuXHJcbmludGVyZmFjZSBPcGVuQUlSZXNwb25zZSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgb2JqZWN0OiBzdHJpbmc7XHJcbiAgICBjcmVhdGVkOiBudW1iZXI7XHJcbiAgICBtb2RlbDogc3RyaW5nO1xyXG4gICAgc3lzdGVtX2ZpbmdlcnByaW50OiBzdHJpbmc7XHJcbiAgICBjaG9pY2VzOiBBcnJheTx7XHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBtZXNzYWdlOiB7XHJcbiAgICAgICAgICAgIHJvbGU6IHN0cmluZztcclxuICAgICAgICAgICAgY29udGVudDogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZmluaXNoX3JlYXNvbjogc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICB1c2FnZToge1xyXG4gICAgICAgIHByb21wdF90b2tlbnM6IG51bWJlcjtcclxuICAgICAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xyXG4gICAgICAgIHRvdGFsX3Rva2VuczogbnVtYmVyO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgdGhlIE9wZW5BSSBwcm92aWRlciBmdW5jdGlvbmFsaXR5XHJcbiAqIFxyXG4gKiBIYW5kbGVzIGNvbW11bmljYXRpb24gd2l0aCBPcGVuQUkncyBBUEksIGluY2x1ZGluZzpcclxuICogLSBDaGF0IGNvbXBsZXRpb25zXHJcbiAqIC0gTW9kZWwgbGlzdGluZ1xyXG4gKiAtIENvbm5lY3Rpb24gdGVzdGluZ1xyXG4gKiAtIFN0cmVhbWluZyByZXNwb25zZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPcGVuQUlQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlciB7XHJcbiAgICBwcm90ZWN0ZWQgYXBpS2V5OiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgYmFzZVVybCA9ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxJztcclxuICAgIHByb3RlY3RlZCBtb2RlbDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwaUtleTogc3RyaW5nLCBtb2RlbDogc3RyaW5nID0gJ2dwdC00Jykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgY29tcGxldGlvbiBmcm9tIE9wZW5BSVxyXG4gICAgICogXHJcbiAgICAgKiBTZW5kcyB0aGUgY29udmVyc2F0aW9uIHRvIE9wZW5BSSBhbmQgc3RyZWFtcyBiYWNrIHRoZSByZXNwb25zZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzIC0gVGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFNldHRpbmdzIGZvciB0aGlzIGNvbXBsZXRpb25cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0Q29tcGxldGlvbihtZXNzYWdlczogTWVzc2FnZVtdLCBvcHRpb25zOiBDb21wbGV0aW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9jaGF0L2NvbXBsZXRpb25zYCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcclxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBvcHRpb25zLnRlbXBlcmF0dXJlID8/IDAuNyxcclxuICAgICAgICAgICAgICAgICAgICBtYXhfdG9rZW5zOiBvcHRpb25zLm1heFRva2VucyA/PyAxMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBzaWduYWw6IG9wdGlvbnMuYWJvcnRDb250cm9sbGVyPy5zaWduYWxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUh0dHBFcnJvcihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHk/LmdldFJlYWRlcigpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xyXG4gICAgICAgICAgICBsZXQgYnVmZmVyID0gJyc7XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyPy5yZWFkKCkgfHwgeyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgYnVmZmVyICs9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gYnVmZmVyLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGxpbmVzLnBvcCgpIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ2RhdGE6ICcpICYmIGxpbmUgIT09ICdkYXRhOiBbRE9ORV0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShsaW5lLnNsaWNlKDYpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkYXRhLmNob2ljZXNbMF0/LmRlbHRhPy5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgJiYgb3B0aW9ucy5zdHJlYW1DYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyZWFtQ2FsbGJhY2soY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgcGFyc2luZyBPcGVuQUkgcmVzcG9uc2UgY2h1bms6JywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBQcm92aWRlckVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbkFJIHN0cmVhbSB3YXMgYWJvcnRlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsbGluZyBPcGVuQUk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXZhaWxhYmxlIE9wZW5BSSBtb2RlbHNcclxuICAgICAqIFxyXG4gICAgICogRmV0Y2hlcyB0aGUgbGlzdCBvZiBtb2RlbHMgZnJvbSBPcGVuQUkncyBBUEkuXHJcbiAgICAgKiBGaWx0ZXJzIHRvIG9ubHkgaW5jbHVkZSBjaGF0IG1vZGVscyAoR1BULTMuNSwgR1BULTQsIGV0Yy4pXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgYXZhaWxhYmxlIG1vZGVsIG5hbWVzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L21vZGVsc2AsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5hcGlLZXl9YCxcclxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVIdHRwRXJyb3IocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5kYXRhXHJcbiAgICAgICAgICAgICAgICAubWFwKChtb2RlbDogYW55KSA9PiBtb2RlbC5pZClcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGlkOiBzdHJpbmcpID0+IGlkLnN0YXJ0c1dpdGgoJ2dwdC0nKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgT3BlbkFJIG1vZGVsczonLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgY29ubmVjdGlvbiB0byBPcGVuQUlcclxuICAgICAqIFxyXG4gICAgICogVmVyaWZpZXMgdGhlIEFQSSBrZXkgd29ya3MgYnkgYXR0ZW1wdGluZyB0byBsaXN0IG1vZGVscy5cclxuICAgICAqIFxyXG4gICAgICogQHJldHVybnMgVGVzdCByZXN1bHRzIGluY2x1ZGluZyBzdWNjZXNzL2ZhaWx1cmUgYW5kIGF2YWlsYWJsZSBtb2RlbHNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgdGVzdENvbm5lY3Rpb24oKTogUHJvbWlzZTxDb25uZWN0aW9uVGVzdFJlc3VsdD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IHRoaXMuZ2V0QXZhaWxhYmxlTW9kZWxzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYFN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gT3BlbkFJISBGb3VuZCAke21vZGVscy5sZW5ndGh9IGF2YWlsYWJsZSBtb2RlbHMuYCxcclxuICAgICAgICAgICAgICAgIG1vZGVsc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yUmVzcG9uc2UoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCAiLyoqXHJcbiAqIEdvb2dsZSBHZW1pbmkgUHJvdmlkZXIgSW1wbGVtZW50YXRpb25cclxuICogXHJcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEdvb2dsZSBHZW1pbmkgcHJvdmlkZXIsXHJcbiAqIHdoaWNoIGFsbG93cyB0aGUgcGx1Z2luIHRvIGludGVyYWN0IHdpdGggR29vZ2xlJ3MgR2VtaW5pIEFQSS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBNZXNzYWdlLCBDb21wbGV0aW9uT3B0aW9ucywgQ29ubmVjdGlvblRlc3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIFByb3ZpZGVyRXJyb3IsIFByb3ZpZGVyRXJyb3JUeXBlIH0gZnJvbSAnLi9iYXNlJztcclxuXHJcbmludGVyZmFjZSBHZW1pbmlSZXNwb25zZSB7XHJcbiAgICBjYW5kaWRhdGVzOiBBcnJheTx7XHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICBwYXJ0czogQXJyYXk8e1xyXG4gICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nO1xyXG4gICAgICAgICAgICB9PjtcclxuICAgICAgICAgICAgcm9sZTogc3RyaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZmluaXNoUmVhc29uOiBzdHJpbmc7XHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuICAgICAgICBzYWZldHlSYXRpbmdzOiBBcnJheTxhbnk+O1xyXG4gICAgfT47XHJcbiAgICBwcm9tcHRGZWVkYmFjazoge1xyXG4gICAgICAgIHNhZmV0eVJhdGluZ3M6IEFycmF5PGFueT47XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyB0aGUgR29vZ2xlIEdlbWluaSBwcm92aWRlciBmdW5jdGlvbmFsaXR5XHJcbiAqIFxyXG4gKiBIYW5kbGVzIGNvbW11bmljYXRpb24gd2l0aCBHb29nbGUncyBHZW1pbmkgQVBJLCBpbmNsdWRpbmc6XHJcbiAqIC0gQ2hhdCBjb21wbGV0aW9uc1xyXG4gKiAtIE1vZGVsIGxpc3RpbmdcclxuICogLSBDb25uZWN0aW9uIHRlc3RpbmdcclxuICogLSBTdHJlYW1pbmcgcmVzcG9uc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2VtaW5pUHJvdmlkZXIgZXh0ZW5kcyBCYXNlUHJvdmlkZXIge1xyXG4gICAgcHJvdGVjdGVkIGFwaUtleTogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIGJhc2VVcmwgPSAnaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vdjEnO1xyXG4gICAgcHJvdGVjdGVkIG1vZGVsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBpS2V5OiBzdHJpbmcsIG1vZGVsOiBzdHJpbmcgPSAnZ2VtaW5pLXBybycpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGNvbXBsZXRpb24gZnJvbSBHb29nbGUgR2VtaW5pXHJcbiAgICAgKiBcclxuICAgICAqIFNlbmRzIHRoZSBjb252ZXJzYXRpb24gdG8gR2VtaW5pIGFuZCBzdHJlYW1zIGJhY2sgdGhlIHJlc3BvbnNlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXMgLSBUaGUgY29udmVyc2F0aW9uIGhpc3RvcnlcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gU2V0dGluZ3MgZm9yIHRoaXMgY29tcGxldGlvblxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRDb21wbGV0aW9uKG1lc3NhZ2VzOiBNZXNzYWdlW10sIG9wdGlvbnM6IENvbXBsZXRpb25PcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gRm9ybWF0IG1lc3NhZ2VzIGZvciBHZW1pbmkgQVBJXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2VzID0gdGhpcy5mb3JtYXRNZXNzYWdlcyhtZXNzYWdlcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBGb3IgY2hhdCBtb2RlbHMsIHdlIHNob3VsZCB1c2UgdGhlIGdlbmVyYXRlQ29udGVudCBlbmRwb2ludFxyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9L21vZGVscy8ke3RoaXMubW9kZWx9OmdlbmVyYXRlQ29udGVudD9rZXk9JHt0aGlzLmFwaUtleX1gO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gVXNlIG5vbi1zdHJlYW1pbmcgdmVyc2lvbiBmb3IgY2hhdCBjb21wbGV0aW9uc1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50czogZm9ybWF0dGVkTWVzc2FnZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGlvbkNvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogb3B0aW9ucy50ZW1wZXJhdHVyZSA/PyAwLjcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heE91dHB1dFRva2Vuczogb3B0aW9ucy5tYXhUb2tlbnMgPz8gMTAwMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLmFib3J0Q29udHJvbGxlcj8uc2lnbmFsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVIdHRwRXJyb3IocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGb3Igbm9uLXN0cmVhbWluZyByZXNwb25zZSwgcGFyc2UgdGhlIEpTT04gZGlyZWN0bHlcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0dlbWluaSByZXNwb25zZTonLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSB0ZXh0IGZyb20gdGhlIHJlc3BvbnNlXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBkYXRhLmNhbmRpZGF0ZXM/LlswXT8uY29udGVudD8ucGFydHM/LlswXT8udGV4dDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0ZXh0ICYmIG9wdGlvbnMuc3RyZWFtQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIC8vIEV2ZW4gdGhvdWdoIGl0J3Mgbm90IHN0cmVhbWluZywgd2UgdXNlIHRoZSBzdHJlYW1DYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgLy8gdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBleGlzdGluZyBpbnRlcmZhY2VcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyZWFtQ2FsbGJhY2sodGV4dCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIHRleHQgZm91bmQgaW4gR2VtaW5pIHJlc3BvbnNlOicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFByb3ZpZGVyRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHZW1pbmkgcmVxdWVzdCB3YXMgYWJvcnRlZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsbGluZyBHZW1pbmk6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXZhaWxhYmxlIEdlbWluaSBtb2RlbHNcclxuICAgICAqIFxyXG4gICAgICogRmV0Y2hlcyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgbW9kZWxzIGZyb20gR29vZ2xlJ3MgQVBJLlxyXG4gICAgICogRmlsdGVycyB0byBvbmx5IGluY2x1ZGUgR2VtaW5pIG1vZGVscy5cclxuICAgICAqIFxyXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBhdmFpbGFibGUgbW9kZWwgbmFtZXNcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0QXZhaWxhYmxlTW9kZWxzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0vbW9kZWxzP2tleT0ke3RoaXMuYXBpS2V5fWAsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlSHR0cEVycm9yKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEubW9kZWxzXHJcbiAgICAgICAgICAgICAgICAubWFwKChtb2RlbDogYW55KSA9PiBtb2RlbC5uYW1lLnNwbGl0KCcvJykucG9wKCkpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChpZDogc3RyaW5nKSA9PiBpZC5zdGFydHNXaXRoKCdnZW1pbmktJykpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIEdlbWluaSBtb2RlbHM6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0IGNvbm5lY3Rpb24gdG8gR2VtaW5pXHJcbiAgICAgKiBcclxuICAgICAqIFZlcmlmaWVzIHRoZSBBUEkga2V5IHdvcmtzIGJ5IGF0dGVtcHRpbmcgdG8gbGlzdCBtb2RlbHMuXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIFRlc3QgcmVzdWx0cyBpbmNsdWRpbmcgc3VjY2Vzcy9mYWlsdXJlIGFuZCBhdmFpbGFibGUgbW9kZWxzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRlc3RDb25uZWN0aW9uKCk6IFByb21pc2U8Q29ubmVjdGlvblRlc3RSZXN1bHQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCB0aGlzLmdldEF2YWlsYWJsZU1vZGVscygpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIEdvb2dsZSBHZW1pbmkhIEZvdW5kICR7bW9kZWxzLmxlbmd0aH0gYXZhaWxhYmxlIG1vZGVscy5gLFxyXG4gICAgICAgICAgICAgICAgbW9kZWxzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3JSZXNwb25zZShlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0IG1lc3NhZ2VzIGZvciBHZW1pbmkgQVBJXHJcbiAgICAgKiBcclxuICAgICAqIENvbnZlcnRzIGZyb20gdGhlIHBsdWdpbidzIE1lc3NhZ2UgZm9ybWF0IHRvIEdlbWluaSdzIGV4cGVjdGVkIGZvcm1hdC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzIC0gQXJyYXkgb2YgbWVzc2FnZXMgdG8gZm9ybWF0XHJcbiAgICAgKiBAcmV0dXJucyBGb3JtYXR0ZWQgbWVzc2FnZXMgZm9yIEdlbWluaSBBUElcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmb3JtYXRNZXNzYWdlcyhtZXNzYWdlczogTWVzc2FnZVtdKTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgLy8gVGhlIEdlbWluaSBBUEkgZXhwZWN0cyBhIGNoYXQgZm9ybWF0IHdoZXJlOlxyXG4gICAgICAgIC8vIDEuIFN5c3RlbSBtZXNzYWdlcyBzaG91bGQgYmUgc2VudCBhcyB1c2VyIG1lc3NhZ2VzIHRoYXQgY29tZSBmaXJzdFxyXG4gICAgICAgIC8vIDIuIEVhY2ggbWVzc2FnZSBuZWVkcyB0byBoYXZlIGEgcm9sZSBhbmQgcGFydHMgYXJyYXlcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBnZW1pbmlNZXNzYWdlcyA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZpcnN0LCBmaW5kIGFuZCBwcm9jZXNzIHN5c3RlbSBtZXNzYWdlc1xyXG4gICAgICAgIGNvbnN0IHN5c3RlbU1lc3NhZ2VzID0gbWVzc2FnZXMuZmlsdGVyKG1zZyA9PiBtc2cucm9sZSA9PT0gJ3N5c3RlbScpO1xyXG4gICAgICAgIGNvbnN0IG5vblN5c3RlbU1lc3NhZ2VzID0gbWVzc2FnZXMuZmlsdGVyKG1zZyA9PiBtc2cucm9sZSAhPT0gJ3N5c3RlbScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFkZCBzeXN0ZW0gbWVzc2FnZXMgZmlyc3QgYXMgdXNlciBtZXNzYWdlc1xyXG4gICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBzeXN0ZW1NZXNzYWdlcykge1xyXG4gICAgICAgICAgICBnZW1pbmlNZXNzYWdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcclxuICAgICAgICAgICAgICAgIHBhcnRzOiBbeyB0ZXh0OiBtZXNzYWdlLmNvbnRlbnQgfV1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRoZW4gYWRkIHRoZSByZWd1bGFyIGNvbnZlcnNhdGlvbiBtZXNzYWdlc1xyXG4gICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBub25TeXN0ZW1NZXNzYWdlcykge1xyXG4gICAgICAgICAgICAvLyBHZW1pbmkgb25seSBzdXBwb3J0cyAndXNlcicgYW5kICdtb2RlbCcgcm9sZXNcclxuICAgICAgICAgICAgY29uc3Qgcm9sZSA9IG1lc3NhZ2Uucm9sZSA9PT0gJ2Fzc2lzdGFudCcgPyAnbW9kZWwnIDogJ3VzZXInO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZ2VtaW5pTWVzc2FnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICByb2xlOiByb2xlLFxyXG4gICAgICAgICAgICAgICAgcGFydHM6IFt7IHRleHQ6IG1lc3NhZ2UuY29udGVudCB9XVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGdlbWluaU1lc3NhZ2VzO1xyXG4gICAgfVxyXG59XHJcbiIsICIvKipcclxuICogT2xsYW1hIFByb3ZpZGVyIEltcGxlbWVudGF0aW9uXHJcbiAqIFxyXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPbGxhbWEgcHJvdmlkZXIsXHJcbiAqIHdoaWNoIGFsbG93cyB0aGUgcGx1Z2luIHRvIGludGVyYWN0IHdpdGggYSBsb2NhbCBPbGxhbWEgc2VydmVyXHJcbiAqIHJ1bm5pbmcgQUkgbW9kZWxzIGxpa2UgTGxhbWEsIE1pc3RyYWwsIGV0Yy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBNZXNzYWdlLCBDb21wbGV0aW9uT3B0aW9ucywgQ29ubmVjdGlvblRlc3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIFByb3ZpZGVyRXJyb3IsIFByb3ZpZGVyRXJyb3JUeXBlIH0gZnJvbSAnLi9iYXNlJztcclxuXHJcbmludGVyZmFjZSBPbGxhbWFSZXNwb25zZSB7XHJcbiAgICBtb2RlbDogc3RyaW5nO1xyXG4gICAgY3JlYXRlZF9hdDogc3RyaW5nO1xyXG4gICAgcmVzcG9uc2U6IHN0cmluZztcclxuICAgIGRvbmU6IGJvb2xlYW47XHJcbiAgICBjb250ZXh0PzogbnVtYmVyW107XHJcbiAgICB0b3RhbF9kdXJhdGlvbj86IG51bWJlcjtcclxuICAgIGxvYWRfZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgICBwcm9tcHRfZXZhbF9kdXJhdGlvbj86IG51bWJlcjtcclxuICAgIGV2YWxfZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgICBldmFsX2NvdW50PzogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgT2xsYW1hTW9kZWwge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgbW9kaWZpZWRfYXQ6IHN0cmluZztcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIGRpZ2VzdDogc3RyaW5nO1xyXG4gICAgZGV0YWlsczoge1xyXG4gICAgICAgIGZvcm1hdDogc3RyaW5nO1xyXG4gICAgICAgIGZhbWlseTogc3RyaW5nO1xyXG4gICAgICAgIHBhcmFtZXRlcl9zaXplOiBzdHJpbmc7XHJcbiAgICAgICAgcXVhbnRpemF0aW9uX2xldmVsOiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyB0aGUgT2xsYW1hIHByb3ZpZGVyIGZ1bmN0aW9uYWxpdHlcclxuICogXHJcbiAqIEhhbmRsZXMgY29tbXVuaWNhdGlvbiB3aXRoIGEgbG9jYWwgT2xsYW1hIHNlcnZlciwgaW5jbHVkaW5nOlxyXG4gKiAtIENoYXQgY29tcGxldGlvbnNcclxuICogLSBNb2RlbCBsaXN0aW5nXHJcbiAqIC0gQ29ubmVjdGlvbiB0ZXN0aW5nXHJcbiAqIC0gU3RyZWFtaW5nIHJlc3BvbnNlc1xyXG4gKiBcclxuICogUmVxdWlyZXMgT2xsYW1hIHRvIGJlIGluc3RhbGxlZCBhbmQgcnVubmluZyBsb2NhbGx5OlxyXG4gKiAxLiBJbnN0YWxsIE9sbGFtYSBmcm9tIGh0dHBzOi8vb2xsYW1hLmFpXHJcbiAqIDIuIFN0YXJ0IHRoZSBPbGxhbWEgc2VydmVyXHJcbiAqIDMuIFB1bGwgeW91ciBkZXNpcmVkIG1vZGVscyB1c2luZyAnb2xsYW1hIHB1bGwgbW9kZWwtbmFtZSdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBPbGxhbWFQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlciB7XHJcbiAgICBwcm90ZWN0ZWQgYXBpS2V5OiBzdHJpbmcgPSAnJzsgLy8gTm90IHVzZWQgZm9yIE9sbGFtYVxyXG4gICAgcHJvdGVjdGVkIGJhc2VVcmw6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBtb2RlbDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNlcnZlclVybDogc3RyaW5nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MTE0MzQnLCBtb2RlbDogc3RyaW5nID0gJ2xsYW1hMicpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IHNlcnZlclVybC5yZXBsYWNlKC9cXC8kLywgJycpOyAvLyBSZW1vdmUgdHJhaWxpbmcgc2xhc2ggaWYgcHJlc2VudFxyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgbWVzc2FnZXMgdG8gT2xsYW1hIGZvcm1hdFxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXMgLSBTdGFuZGFyZCBtZXNzYWdlIGZvcm1hdFxyXG4gICAgICogQHJldHVybnMgUHJvbXB0IHN0cmluZyBpbiBPbGxhbWEgZm9ybWF0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY29udmVydFRvT2xsYW1hRm9ybWF0KG1lc3NhZ2VzOiBNZXNzYWdlW10pOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdlcy5tYXAobXNnID0+IHtcclxuICAgICAgICAgICAgaWYgKG1zZy5yb2xlID09PSAnc3lzdGVtJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBTeXN0ZW06ICR7bXNnLmNvbnRlbnR9XFxuXFxuYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYCR7bXNnLnJvbGUgPT09ICd1c2VyJyA/ICdIdW1hbicgOiAnQXNzaXN0YW50J306ICR7bXNnLmNvbnRlbnR9XFxuXFxuYDtcclxuICAgICAgICB9KS5qb2luKCcnKSArICdBc3Npc3RhbnQ6JztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGNvbXBsZXRpb24gZnJvbSBPbGxhbWFcclxuICAgICAqIFxyXG4gICAgICogU2VuZHMgdGhlIGNvbnZlcnNhdGlvbiB0byB0aGUgbG9jYWwgT2xsYW1hIHNlcnZlciBhbmQgc3RyZWFtcyBiYWNrIHRoZSByZXNwb25zZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzIC0gVGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFNldHRpbmdzIGZvciB0aGlzIGNvbXBsZXRpb25cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0Q29tcGxldGlvbihtZXNzYWdlczogTWVzc2FnZVtdLCBvcHRpb25zOiBDb21wbGV0aW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb21wdCA9IHRoaXMuY29udmVydFRvT2xsYW1hRm9ybWF0KG1lc3NhZ2VzKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2FwaS9nZW5lcmF0ZWAsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBvcHRpb25zLnRlbXBlcmF0dXJlID8/IDAuNyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtX3ByZWRpY3Q6IG9wdGlvbnMubWF4VG9rZW5zID8/IDEwMDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucy5hYm9ydENvbnRyb2xsZXI/LnNpZ25hbFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlSHR0cEVycm9yKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keT8uZ2V0UmVhZGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04Jyk7XHJcbiAgICAgICAgICAgIGxldCBidWZmZXIgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXI/LnJlYWQoKSB8fCB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcclxuICAgICAgICAgICAgICAgIGlmIChkb25lKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBidWZmZXIgKz0gZGVjb2Rlci5kZWNvZGUodmFsdWUsIHsgc3RyZWFtOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBidWZmZXIuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gbGluZXMucG9wKCkgfHwgJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUudHJpbSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBPbGxhbWFSZXNwb25zZSA9IEpTT04ucGFyc2UobGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZXNwb25zZSAmJiBvcHRpb25zLnN0cmVhbUNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJlYW1DYWxsYmFjayhkYXRhLnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBwYXJzaW5nIE9sbGFtYSByZXNwb25zZSBjaHVuazonLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFByb3ZpZGVyRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPbGxhbWEgc3RyZWFtIHdhcyBhYm9ydGVkJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYWxsaW5nIE9sbGFtYTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhdmFpbGFibGUgT2xsYW1hIG1vZGVsc1xyXG4gICAgICogXHJcbiAgICAgKiBGZXRjaGVzIHRoZSBsaXN0IG9mIG1vZGVscyBpbnN0YWxsZWQgb24gdGhlIGxvY2FsIE9sbGFtYSBzZXJ2ZXIuXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgYXZhaWxhYmxlIG1vZGVsIG5hbWVzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2FwaS90YWdzYCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUh0dHBFcnJvcihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoZGF0YS5tb2RlbHMgYXMgT2xsYW1hTW9kZWxbXSk/Lm1hcChtb2RlbCA9PiBtb2RlbC5uYW1lKSB8fCBbXTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBPbGxhbWEgbW9kZWxzOicsIGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBjb25uZWN0aW9uIHRvIE9sbGFtYVxyXG4gICAgICogXHJcbiAgICAgKiBWZXJpZmllcyB0aGUgT2xsYW1hIHNlcnZlciBpcyBydW5uaW5nIGFuZCBhY2Nlc3NpYmxlLlxyXG4gICAgICogQWxzbyBjaGVja3MgaWYgYW55IG1vZGVscyBhcmUgaW5zdGFsbGVkLlxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJucyBUZXN0IHJlc3VsdHMgaW5jbHVkaW5nIHN1Y2Nlc3MvZmFpbHVyZSBhbmQgYXZhaWxhYmxlIG1vZGVsc1xyXG4gICAgICovXHJcbiAgICBhc3luYyB0ZXN0Q29ubmVjdGlvbigpOiBQcm9taXNlPENvbm5lY3Rpb25UZXN0UmVzdWx0PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZWxzID0gYXdhaXQgdGhpcy5nZXRBdmFpbGFibGVNb2RlbHMoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChtb2RlbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0ZWQgdG8gT2xsYW1hIHNlcnZlciwgYnV0IG5vIG1vZGVscyBhcmUgaW5zdGFsbGVkLiBVc2UgXCJvbGxhbWEgcHVsbCBtb2RlbC1uYW1lXCIgdG8gaW5zdGFsbCBtb2RlbHMuJyxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbHM6IFtdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIE9sbGFtYSEgRm91bmQgJHttb2RlbHMubGVuZ3RofSBpbnN0YWxsZWQgbW9kZWxzLmAsXHJcbiAgICAgICAgICAgICAgICBtb2RlbHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvclJlc3BvbnNlKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwgIi8qKlxyXG4gKiBBSSBQcm92aWRlcnMgSW5kZXhcclxuICogXHJcbiAqIFRoaXMgZmlsZSBleHBvcnRzIGFsbCBBSSBwcm92aWRlciBpbXBsZW1lbnRhdGlvbnMgYW5kIHNoYXJlZCB0eXBlcy5cclxuICogSW1wb3J0IHByb3ZpZGVycyBmcm9tIHRoaXMgZmlsZSByYXRoZXIgdGhhbiBkaXJlY3RseSBmcm9tIHRoZWlyIG1vZHVsZXMuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTXlQbHVnaW5TZXR0aW5ncyB9IGZyb20gJy4uL3NyYy90eXBlcyc7XHJcbmltcG9ydCB7IEJhc2VQcm92aWRlciwgUHJvdmlkZXJFcnJvciwgUHJvdmlkZXJFcnJvclR5cGUgfSBmcm9tICcuL2Jhc2UnO1xyXG5pbXBvcnQgeyBBbnRocm9waWNQcm92aWRlciB9IGZyb20gJy4vYW50aHJvcGljJztcclxuaW1wb3J0IHsgT3BlbkFJUHJvdmlkZXIgfSBmcm9tICcuL29wZW5haSc7XHJcbmltcG9ydCB7IEdlbWluaVByb3ZpZGVyIH0gZnJvbSAnLi9nZW1pbmknO1xyXG5pbXBvcnQgeyBPbGxhbWFQcm92aWRlciB9IGZyb20gJy4vb2xsYW1hJztcclxuXHJcbmV4cG9ydCB7IEJhc2VQcm92aWRlciwgUHJvdmlkZXJFcnJvciwgUHJvdmlkZXJFcnJvclR5cGUgfTtcclxuZXhwb3J0IHsgQW50aHJvcGljUHJvdmlkZXIgfTtcclxuZXhwb3J0IHsgT3BlbkFJUHJvdmlkZXIgfTtcclxuZXhwb3J0IHsgR2VtaW5pUHJvdmlkZXIgfTtcclxuZXhwb3J0IHsgT2xsYW1hUHJvdmlkZXIgfTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIEFJIHByb3ZpZGVyIGluc3RhbmNlIGJhc2VkIG9uIHRoZSBwbHVnaW4gc2V0dGluZ3NcclxuICogXHJcbiAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgcGx1Z2luIHNldHRpbmdzIGNvbnRhaW5pbmcgcHJvdmlkZXIgY29uZmlndXJhdGlvblxyXG4gKiBAcmV0dXJucyBUaGUgYXBwcm9wcmlhdGUgcHJvdmlkZXIgaW5zdGFuY2VcclxuICogQHRocm93cyBFcnJvciBpZiB0aGUgcHJvdmlkZXIgdHlwZSBpcyBpbnZhbGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3MpOiBCYXNlUHJvdmlkZXIge1xyXG4gICAgc3dpdGNoIChzZXR0aW5ncy5wcm92aWRlcikge1xyXG4gICAgICAgIGNhc2UgJ29wZW5haSc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgT3BlbkFJUHJvdmlkZXIoXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5hcGlLZXksXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5tb2RlbFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGNhc2UgJ2FudGhyb3BpYyc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW50aHJvcGljUHJvdmlkZXIoXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5hbnRocm9waWNTZXR0aW5ncy5hcGlLZXksXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5hbnRocm9waWNTZXR0aW5ncy5tb2RlbFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGNhc2UgJ2dlbWluaSc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VtaW5pUHJvdmlkZXIoXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5hcGlLZXksXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5tb2RlbFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGNhc2UgJ29sbGFtYSc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2xsYW1hUHJvdmlkZXIoXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5zZXJ2ZXJVcmwsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5tb2RlbFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm92aWRlciB0eXBlOiAke3NldHRpbmdzLnByb3ZpZGVyfWApO1xyXG4gICAgfVxyXG59XHJcbiIsICJcbi8qISBqcy15YW1sIDQuMS4wIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvanMteWFtbCBAbGljZW5zZSBNSVQgKi9cbmZ1bmN0aW9uIGlzTm90aGluZyhzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnKSB8fCAoc3ViamVjdCA9PT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JykgJiYgKHN1YmplY3QgIT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gWyBzZXF1ZW5jZSBdO1xufVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwga2V5LCBzb3VyY2VLZXlzO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAnJywgY3ljbGU7XG5cbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlWmVybyhudW1iZXIpIHtcbiAgcmV0dXJuIChudW1iZXIgPT09IDApICYmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IDEgLyBudW1iZXIpO1xufVxuXG5cbnZhciBpc05vdGhpbmdfMSAgICAgID0gaXNOb3RoaW5nO1xudmFyIGlzT2JqZWN0XzEgICAgICAgPSBpc09iamVjdDtcbnZhciB0b0FycmF5XzEgICAgICAgID0gdG9BcnJheTtcbnZhciByZXBlYXRfMSAgICAgICAgID0gcmVwZWF0O1xudmFyIGlzTmVnYXRpdmVaZXJvXzEgPSBpc05lZ2F0aXZlWmVybztcbnZhciBleHRlbmRfMSAgICAgICAgID0gZXh0ZW5kO1xuXG52YXIgY29tbW9uID0ge1xuXHRpc05vdGhpbmc6IGlzTm90aGluZ18xLFxuXHRpc09iamVjdDogaXNPYmplY3RfMSxcblx0dG9BcnJheTogdG9BcnJheV8xLFxuXHRyZXBlYXQ6IHJlcGVhdF8xLFxuXHRpc05lZ2F0aXZlWmVybzogaXNOZWdhdGl2ZVplcm9fMSxcblx0ZXh0ZW5kOiBleHRlbmRfMVxufTtcblxuLy8gWUFNTCBlcnJvciBjbGFzcy4gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDU4OTg0XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXhjZXB0aW9uLCBjb21wYWN0KSB7XG4gIHZhciB3aGVyZSA9ICcnLCBtZXNzYWdlID0gZXhjZXB0aW9uLnJlYXNvbiB8fCAnKHVua25vd24gcmVhc29uKSc7XG5cbiAgaWYgKCFleGNlcHRpb24ubWFyaykgcmV0dXJuIG1lc3NhZ2U7XG5cbiAgaWYgKGV4Y2VwdGlvbi5tYXJrLm5hbWUpIHtcbiAgICB3aGVyZSArPSAnaW4gXCInICsgZXhjZXB0aW9uLm1hcmsubmFtZSArICdcIiAnO1xuICB9XG5cbiAgd2hlcmUgKz0gJygnICsgKGV4Y2VwdGlvbi5tYXJrLmxpbmUgKyAxKSArICc6JyArIChleGNlcHRpb24ubWFyay5jb2x1bW4gKyAxKSArICcpJztcblxuICBpZiAoIWNvbXBhY3QgJiYgZXhjZXB0aW9uLm1hcmsuc25pcHBldCkge1xuICAgIHdoZXJlICs9ICdcXG5cXG4nICsgZXhjZXB0aW9uLm1hcmsuc25pcHBldDtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlICsgJyAnICsgd2hlcmU7XG59XG5cblxuZnVuY3Rpb24gWUFNTEV4Y2VwdGlvbiQxKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9IGZvcm1hdEVycm9yKHRoaXMsIGZhbHNlKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uJDEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuWUFNTEV4Y2VwdGlvbiQxLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFlBTUxFeGNlcHRpb24kMTtcblxuXG5ZQU1MRXhjZXB0aW9uJDEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoY29tcGFjdCkge1xuICByZXR1cm4gdGhpcy5uYW1lICsgJzogJyArIGZvcm1hdEVycm9yKHRoaXMsIGNvbXBhY3QpO1xufTtcblxuXG52YXIgZXhjZXB0aW9uID0gWUFNTEV4Y2VwdGlvbiQxO1xuXG4vLyBnZXQgc25pcHBldCBmb3IgYSBzaW5nbGUgbGluZSwgcmVzcGVjdGluZyBtYXhMZW5ndGhcbmZ1bmN0aW9uIGdldExpbmUoYnVmZmVyLCBsaW5lU3RhcnQsIGxpbmVFbmQsIHBvc2l0aW9uLCBtYXhMaW5lTGVuZ3RoKSB7XG4gIHZhciBoZWFkID0gJyc7XG4gIHZhciB0YWlsID0gJyc7XG4gIHZhciBtYXhIYWxmTGVuZ3RoID0gTWF0aC5mbG9vcihtYXhMaW5lTGVuZ3RoIC8gMikgLSAxO1xuXG4gIGlmIChwb3NpdGlvbiAtIGxpbmVTdGFydCA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICBoZWFkID0gJyAuLi4gJztcbiAgICBsaW5lU3RhcnQgPSBwb3NpdGlvbiAtIG1heEhhbGZMZW5ndGggKyBoZWFkLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChsaW5lRW5kIC0gcG9zaXRpb24gPiBtYXhIYWxmTGVuZ3RoKSB7XG4gICAgdGFpbCA9ICcgLi4uJztcbiAgICBsaW5lRW5kID0gcG9zaXRpb24gKyBtYXhIYWxmTGVuZ3RoIC0gdGFpbC5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0cjogaGVhZCArIGJ1ZmZlci5zbGljZShsaW5lU3RhcnQsIGxpbmVFbmQpLnJlcGxhY2UoL1xcdC9nLCAnXHUyMTkyJykgKyB0YWlsLFxuICAgIHBvczogcG9zaXRpb24gLSBsaW5lU3RhcnQgKyBoZWFkLmxlbmd0aCAvLyByZWxhdGl2ZSBwb3NpdGlvblxuICB9O1xufVxuXG5cbmZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbWF4KSB7XG4gIHJldHVybiBjb21tb24ucmVwZWF0KCcgJywgbWF4IC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cblxuZnVuY3Rpb24gbWFrZVNuaXBwZXQobWFyaywgb3B0aW9ucykge1xuICBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zIHx8IG51bGwpO1xuXG4gIGlmICghbWFyay5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGlmICghb3B0aW9ucy5tYXhMZW5ndGgpIG9wdGlvbnMubWF4TGVuZ3RoID0gNzk7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbmRlbnQgICAgICAhPT0gJ251bWJlcicpIG9wdGlvbnMuaW5kZW50ICAgICAgPSAxO1xuICBpZiAodHlwZW9mIG9wdGlvbnMubGluZXNCZWZvcmUgIT09ICdudW1iZXInKSBvcHRpb25zLmxpbmVzQmVmb3JlID0gMztcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbmVzQWZ0ZXIgICE9PSAnbnVtYmVyJykgb3B0aW9ucy5saW5lc0FmdGVyICA9IDI7XG5cbiAgdmFyIHJlID0gL1xccj9cXG58XFxyfFxcMC9nO1xuICB2YXIgbGluZVN0YXJ0cyA9IFsgMCBdO1xuICB2YXIgbGluZUVuZHMgPSBbXTtcbiAgdmFyIG1hdGNoO1xuICB2YXIgZm91bmRMaW5lTm8gPSAtMTtcblxuICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhtYXJrLmJ1ZmZlcikpKSB7XG4gICAgbGluZUVuZHMucHVzaChtYXRjaC5pbmRleCk7XG4gICAgbGluZVN0YXJ0cy5wdXNoKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcblxuICAgIGlmIChtYXJrLnBvc2l0aW9uIDw9IG1hdGNoLmluZGV4ICYmIGZvdW5kTGluZU5vIDwgMCkge1xuICAgICAgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZvdW5kTGluZU5vIDwgMCkgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIHJlc3VsdCA9ICcnLCBpLCBsaW5lO1xuICB2YXIgbGluZU5vTGVuZ3RoID0gTWF0aC5taW4obWFyay5saW5lICsgb3B0aW9ucy5saW5lc0FmdGVyLCBsaW5lRW5kcy5sZW5ndGgpLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgbWF4TGluZUxlbmd0aCA9IG9wdGlvbnMubWF4TGVuZ3RoIC0gKG9wdGlvbnMuaW5kZW50ICsgbGluZU5vTGVuZ3RoICsgMyk7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQmVmb3JlOyBpKyspIHtcbiAgICBpZiAoZm91bmRMaW5lTm8gLSBpIDwgMCkgYnJlYWs7XG4gICAgbGluZSA9IGdldExpbmUoXG4gICAgICBtYXJrLmJ1ZmZlcixcbiAgICAgIGxpbmVTdGFydHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIGxpbmVFbmRzW2ZvdW5kTGluZU5vIC0gaV0sXG4gICAgICBtYXJrLnBvc2l0aW9uIC0gKGxpbmVTdGFydHNbZm91bmRMaW5lTm9dIC0gbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldKSxcbiAgICAgIG1heExpbmVMZW5ndGhcbiAgICApO1xuICAgIHJlc3VsdCA9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lIC0gaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nICsgcmVzdWx0O1xuICB9XG5cbiAgbGluZSA9IGdldExpbmUobWFyay5idWZmZXIsIGxpbmVTdGFydHNbZm91bmRMaW5lTm9dLCBsaW5lRW5kc1tmb3VuZExpbmVOb10sIG1hcmsucG9zaXRpb24sIG1heExpbmVMZW5ndGgpO1xuICByZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnICcsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyAxKS50b1N0cmluZygpLCBsaW5lTm9MZW5ndGgpICtcbiAgICAnIHwgJyArIGxpbmUuc3RyICsgJ1xcbic7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KCctJywgb3B0aW9ucy5pbmRlbnQgKyBsaW5lTm9MZW5ndGggKyAzICsgbGluZS5wb3MpICsgJ14nICsgJ1xcbic7XG5cbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQWZ0ZXI7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyArIGkgPj0gbGluZUVuZHMubGVuZ3RoKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gKyBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJyAnLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lICsgaSArIDEpLnRvU3RyaW5nKCksIGxpbmVOb0xlbmd0aCkgK1xuICAgICAgJyB8ICcgKyBsaW5lLnN0ciArICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9cXG4kLywgJycpO1xufVxuXG5cbnZhciBzbmlwcGV0ID0gbWFrZVNuaXBwZXQ7XG5cbnZhciBUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMgPSBbXG4gICdraW5kJyxcbiAgJ211bHRpJyxcbiAgJ3Jlc29sdmUnLFxuICAnY29uc3RydWN0JyxcbiAgJ2luc3RhbmNlT2YnLFxuICAncHJlZGljYXRlJyxcbiAgJ3JlcHJlc2VudCcsXG4gICdyZXByZXNlbnROYW1lJyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUkMSh0YWcsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ1Vua25vd24gb3B0aW9uIFwiJyArIG5hbWUgKyAnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRPRE86IEFkZCB0YWcgZm9ybWF0IGNoZWNrLlxuICB0aGlzLm9wdGlvbnMgICAgICAgPSBvcHRpb25zOyAvLyBrZWVwIG9yaWdpbmFsIG9wdGlvbnMgaW4gY2FzZSB1c2VyIHdhbnRzIHRvIGV4dGVuZCB0aGlzIHR5cGUgbGF0ZXJcbiAgdGhpcy50YWcgICAgICAgICAgID0gdGFnO1xuICB0aGlzLmtpbmQgICAgICAgICAgPSBvcHRpb25zWydraW5kJ10gICAgICAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXNvbHZlICAgICAgID0gb3B0aW9uc1sncmVzb2x2ZSddICAgICAgIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIHRoaXMuY29uc3RydWN0ICAgICA9IG9wdGlvbnNbJ2NvbnN0cnVjdCddICAgICB8fCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YTsgfTtcbiAgdGhpcy5pbnN0YW5jZU9mICAgID0gb3B0aW9uc1snaW5zdGFuY2VPZiddICAgIHx8IG51bGw7XG4gIHRoaXMucHJlZGljYXRlICAgICA9IG9wdGlvbnNbJ3ByZWRpY2F0ZSddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudCAgICAgPSBvcHRpb25zWydyZXByZXNlbnQnXSAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXByZXNlbnROYW1lID0gb3B0aW9uc1sncmVwcmVzZW50TmFtZSddIHx8IG51bGw7XG4gIHRoaXMuZGVmYXVsdFN0eWxlICA9IG9wdGlvbnNbJ2RlZmF1bHRTdHlsZSddICB8fCBudWxsO1xuICB0aGlzLm11bHRpICAgICAgICAgPSBvcHRpb25zWydtdWx0aSddICAgICAgICAgfHwgZmFsc2U7XG4gIHRoaXMuc3R5bGVBbGlhc2VzICA9IGNvbXBpbGVTdHlsZUFsaWFzZXMob3B0aW9uc1snc3R5bGVBbGlhc2VzJ10gfHwgbnVsbCk7XG5cbiAgaWYgKFlBTUxfTk9ERV9LSU5EUy5pbmRleE9mKHRoaXMua2luZCkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignVW5rbm93biBraW5kIFwiJyArIHRoaXMua2luZCArICdcIiBpcyBzcGVjaWZpZWQgZm9yIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gIH1cbn1cblxudmFyIHR5cGUgPSBUeXBlJDE7XG5cbi8qZXNsaW50LWRpc2FibGUgbWF4LWxlbiovXG5cblxuXG5cblxuZnVuY3Rpb24gY29tcGlsZUxpc3Qoc2NoZW1hLCBuYW1lKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBzY2hlbWFbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudFR5cGUpIHtcbiAgICB2YXIgbmV3SW5kZXggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKHByZXZpb3VzVHlwZSwgcHJldmlvdXNJbmRleCkge1xuICAgICAgaWYgKHByZXZpb3VzVHlwZS50YWcgPT09IGN1cnJlbnRUeXBlLnRhZyAmJlxuICAgICAgICAgIHByZXZpb3VzVHlwZS5raW5kID09PSBjdXJyZW50VHlwZS5raW5kICYmXG4gICAgICAgICAgcHJldmlvdXNUeXBlLm11bHRpID09PSBjdXJyZW50VHlwZS5tdWx0aSkge1xuXG4gICAgICAgIG5ld0luZGV4ID0gcHJldmlvdXNJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlc3VsdFtuZXdJbmRleF0gPSBjdXJyZW50VHlwZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBjb21waWxlTWFwKC8qIGxpc3RzLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgICAgIHNjYWxhcjoge30sXG4gICAgICAgIHNlcXVlbmNlOiB7fSxcbiAgICAgICAgbWFwcGluZzoge30sXG4gICAgICAgIGZhbGxiYWNrOiB7fSxcbiAgICAgICAgbXVsdGk6IHtcbiAgICAgICAgICBzY2FsYXI6IFtdLFxuICAgICAgICAgIHNlcXVlbmNlOiBbXSxcbiAgICAgICAgICBtYXBwaW5nOiBbXSxcbiAgICAgICAgICBmYWxsYmFjazogW11cbiAgICAgICAgfVxuICAgICAgfSwgaW5kZXgsIGxlbmd0aDtcblxuICBmdW5jdGlvbiBjb2xsZWN0VHlwZSh0eXBlKSB7XG4gICAgaWYgKHR5cGUubXVsdGkpIHtcbiAgICAgIHJlc3VsdC5tdWx0aVt0eXBlLmtpbmRdLnB1c2godHlwZSk7XG4gICAgICByZXN1bHQubXVsdGlbJ2ZhbGxiYWNrJ10ucHVzaCh0eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3R5cGUua2luZF1bdHlwZS50YWddID0gcmVzdWx0WydmYWxsYmFjayddW3R5cGUudGFnXSA9IHR5cGU7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgYXJndW1lbnRzW2luZGV4XS5mb3JFYWNoKGNvbGxlY3RUeXBlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cbmZ1bmN0aW9uIFNjaGVtYSQxKGRlZmluaXRpb24pIHtcbiAgcmV0dXJuIHRoaXMuZXh0ZW5kKGRlZmluaXRpb24pO1xufVxuXG5cblNjaGVtYSQxLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoZGVmaW5pdGlvbikge1xuICB2YXIgaW1wbGljaXQgPSBbXTtcbiAgdmFyIGV4cGxpY2l0ID0gW107XG5cbiAgaWYgKGRlZmluaXRpb24gaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgLy8gU2NoZW1hLmV4dGVuZCh0eXBlKVxuICAgIGV4cGxpY2l0LnB1c2goZGVmaW5pdGlvbik7XG5cbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgLy8gU2NoZW1hLmV4dGVuZChbIHR5cGUxLCB0eXBlMiwgLi4uIF0pXG4gICAgZXhwbGljaXQgPSBleHBsaWNpdC5jb25jYXQoZGVmaW5pdGlvbik7XG5cbiAgfSBlbHNlIGlmIChkZWZpbml0aW9uICYmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24uaW1wbGljaXQpIHx8IEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbi5leHBsaWNpdCkpKSB7XG4gICAgLy8gU2NoZW1hLmV4dGVuZCh7IGV4cGxpY2l0OiBbIHR5cGUxLCB0eXBlMiwgLi4uIF0sIGltcGxpY2l0OiBbIHR5cGUxLCB0eXBlMiwgLi4uIF0gfSlcbiAgICBpZiAoZGVmaW5pdGlvbi5pbXBsaWNpdCkgaW1wbGljaXQgPSBpbXBsaWNpdC5jb25jYXQoZGVmaW5pdGlvbi5pbXBsaWNpdCk7XG4gICAgaWYgKGRlZmluaXRpb24uZXhwbGljaXQpIGV4cGxpY2l0ID0gZXhwbGljaXQuY29uY2F0KGRlZmluaXRpb24uZXhwbGljaXQpO1xuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignU2NoZW1hLmV4dGVuZCBhcmd1bWVudCBzaG91bGQgYmUgYSBUeXBlLCBbIFR5cGUgXSwgJyArXG4gICAgICAnb3IgYSBzY2hlbWEgZGVmaW5pdGlvbiAoeyBpbXBsaWNpdDogWy4uLl0sIGV4cGxpY2l0OiBbLi4uXSB9KScpO1xuICB9XG5cbiAgaW1wbGljaXQuZm9yRWFjaChmdW5jdGlvbiAodHlwZSQxKSB7XG4gICAgaWYgKCEodHlwZSQxIGluc3RhbmNlb2YgdHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ1NwZWNpZmllZCBsaXN0IG9mIFlBTUwgdHlwZXMgKG9yIGEgc2luZ2xlIFR5cGUgb2JqZWN0KSBjb250YWlucyBhIG5vbi1UeXBlIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSQxLmxvYWRLaW5kICYmIHR5cGUkMS5sb2FkS2luZCAhPT0gJ3NjYWxhcicpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ1RoZXJlIGlzIGEgbm9uLXNjYWxhciB0eXBlIGluIHRoZSBpbXBsaWNpdCBsaXN0IG9mIGEgc2NoZW1hLiBJbXBsaWNpdCByZXNvbHZpbmcgb2Ygc3VjaCB0eXBlcyBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlJDEubXVsdGkpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ1RoZXJlIGlzIGEgbXVsdGkgdHlwZSBpbiB0aGUgaW1wbGljaXQgbGlzdCBvZiBhIHNjaGVtYS4gTXVsdGkgdGFncyBjYW4gb25seSBiZSBsaXN0ZWQgYXMgZXhwbGljaXQuJyk7XG4gICAgfVxuICB9KTtcblxuICBleHBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlJDEpIHtcbiAgICBpZiAoISh0eXBlJDEgaW5zdGFuY2VvZiB0eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LicpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUoU2NoZW1hJDEucHJvdG90eXBlKTtcblxuICByZXN1bHQuaW1wbGljaXQgPSAodGhpcy5pbXBsaWNpdCB8fCBbXSkuY29uY2F0KGltcGxpY2l0KTtcbiAgcmVzdWx0LmV4cGxpY2l0ID0gKHRoaXMuZXhwbGljaXQgfHwgW10pLmNvbmNhdChleHBsaWNpdCk7XG5cbiAgcmVzdWx0LmNvbXBpbGVkSW1wbGljaXQgPSBjb21waWxlTGlzdChyZXN1bHQsICdpbXBsaWNpdCcpO1xuICByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgJ2V4cGxpY2l0Jyk7XG4gIHJlc3VsdC5jb21waWxlZFR5cGVNYXAgID0gY29tcGlsZU1hcChyZXN1bHQuY29tcGlsZWRJbXBsaWNpdCwgcmVzdWx0LmNvbXBpbGVkRXhwbGljaXQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbnZhciBzY2hlbWEgPSBTY2hlbWEkMTtcblxudmFyIHN0ciA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzdHInLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6ICcnOyB9XG59KTtcblxudmFyIHNlcSA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107IH1cbn0pO1xuXG52YXIgbWFwID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9OyB9XG59KTtcblxudmFyIGZhaWxzYWZlID0gbmV3IHNjaGVtYSh7XG4gIGV4cGxpY2l0OiBbXG4gICAgc3RyLFxuICAgIHNlcSxcbiAgICBtYXBcbiAgXVxufSk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTnVsbChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDEgJiYgZGF0YSA9PT0gJ34nKSB8fFxuICAgICAgICAgKG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gJ251bGwnIHx8IGRhdGEgPT09ICdOdWxsJyB8fCBkYXRhID09PSAnTlVMTCcpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc051bGwob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT09IG51bGw7XG59XG5cbnZhciBfbnVsbCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxOdWxsLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxOdWxsLFxuICBwcmVkaWNhdGU6IGlzTnVsbCxcbiAgcmVwcmVzZW50OiB7XG4gICAgY2Fub25pY2FsOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnfic7ICAgIH0sXG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnbnVsbCc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTlVMTCc7IH0sXG4gICAgY2FtZWxjYXNlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAnTnVsbCc7IH0sXG4gICAgZW1wdHk6ICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAnJzsgICAgIH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSA0ICYmIChkYXRhID09PSAndHJ1ZScgfHwgZGF0YSA9PT0gJ1RydWUnIHx8IGRhdGEgPT09ICdUUlVFJykpIHx8XG4gICAgICAgICAobWF4ID09PSA1ICYmIChkYXRhID09PSAnZmFsc2UnIHx8IGRhdGEgPT09ICdGYWxzZScgfHwgZGF0YSA9PT0gJ0ZBTFNFJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAndHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUcnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RSVUUnO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuXG52YXIgYm9vbCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpib29sJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCb29sZWFuLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCb29sZWFuLFxuICBwcmVkaWNhdGU6IGlzQm9vbGVhbixcbiAgcmVwcmVzZW50OiB7XG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAndHJ1ZScgOiAnZmFsc2UnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RSVUUnIDogJ0ZBTFNFJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUcnVlJyA6ICdGYWxzZSc7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG5cbmZ1bmN0aW9uIGlzSGV4Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkgfHxcbiAgICAgICAgICgoMHg0MS8qIEEgKi8gPD0gYykgJiYgKGMgPD0gMHg0Ni8qIEYgKi8pKSB8fFxuICAgICAgICAgKCgweDYxLyogYSAqLyA8PSBjKSAmJiAoYyA8PSAweDY2LyogZiAqLykpO1xufVxuXG5mdW5jdGlvbiBpc09jdENvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM3LyogNyAqLykpO1xufVxuXG5mdW5jdGlvbiBpc0RlY0NvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEludGVnZXIoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGhhc0RpZ2l0cyA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgaWYgKCFtYXgpIHJldHVybiBmYWxzZTtcblxuICBjaCA9IGRhdGFbaW5kZXhdO1xuXG4gIC8vIHNpZ25cbiAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgIGNoID0gZGF0YVsrK2luZGV4XTtcbiAgfVxuXG4gIGlmIChjaCA9PT0gJzAnKSB7XG4gICAgLy8gMFxuICAgIGlmIChpbmRleCArIDEgPT09IG1heCkgcmV0dXJuIHRydWU7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuXG4gICAgLy8gYmFzZSAyLCBiYXNlIDgsIGJhc2UgMTZcblxuICAgIGlmIChjaCA9PT0gJ2InKSB7XG4gICAgICAvLyBiYXNlIDJcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmIChjaCAhPT0gJzAnICYmIGNoICE9PSAnMScpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG5cblxuICAgIGlmIChjaCA9PT0gJ3gnKSB7XG4gICAgICAvLyBiYXNlIDE2XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzSGV4Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAnbycpIHtcbiAgICAgIC8vIGJhc2UgOFxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc09jdENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG4gIH1cblxuICAvLyBiYXNlIDEwIChleGNlcHQgMClcblxuICAvLyB2YWx1ZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYF9gO1xuICBpZiAoY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgIGlmICghaXNEZWNDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gIH1cblxuICAvLyBTaG91bGQgaGF2ZSBkaWdpdHMgYW5kIHNob3VsZCBub3QgZW5kIHdpdGggYF9gXG4gIGlmICghaGFzRGlnaXRzIHx8IGNoID09PSAnXycpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEludGVnZXIoZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLCBzaWduID0gMSwgY2g7XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoJ18nKSAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL18vZywgJycpO1xuICB9XG5cbiAgY2ggPSB2YWx1ZVswXTtcblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgaWYgKGNoID09PSAnLScpIHNpZ24gPSAtMTtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICAgIGNoID0gdmFsdWVbMF07XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIDA7XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdiJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMik7XG4gICAgaWYgKHZhbHVlWzFdID09PSAneCcpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDE2KTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdvJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgOCk7XG4gIH1cblxuICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmXG4gICAgICAgICAob2JqZWN0ICUgMSA9PT0gMCAmJiAhY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG52YXIgaW50ID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sSW50ZWdlcixcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sSW50ZWdlcixcbiAgcHJlZGljYXRlOiBpc0ludGVnZXIsXG4gIHJlcHJlc2VudDoge1xuICAgIGJpbmFyeTogICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcwYicgKyBvYmoudG9TdHJpbmcoMikgOiAnLTBiJyArIG9iai50b1N0cmluZygyKS5zbGljZSgxKTsgfSxcbiAgICBvY3RhbDogICAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMG8nICArIG9iai50b1N0cmluZyg4KSA6ICctMG8nICArIG9iai50b1N0cmluZyg4KS5zbGljZSgxKTsgfSxcbiAgICBkZWNpbWFsOiAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqLnRvU3RyaW5nKDEwKTsgfSxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgaGV4YWRlY2ltYWw6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzB4JyArIG9iai50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSA6ICAnLTB4JyArIG9iai50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5zbGljZSgxKTsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdkZWNpbWFsJyxcbiAgc3R5bGVBbGlhc2VzOiB7XG4gICAgYmluYXJ5OiAgICAgIFsgMiwgICdiaW4nIF0sXG4gICAgb2N0YWw6ICAgICAgIFsgOCwgICdvY3QnIF0sXG4gICAgZGVjaW1hbDogICAgIFsgMTAsICdkZWMnIF0sXG4gICAgaGV4YWRlY2ltYWw6IFsgMTYsICdoZXgnIF1cbiAgfVxufSk7XG5cbnZhciBZQU1MX0ZMT0FUX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFxuICAvLyAyLjVlNCwgMi41IGFuZCBpbnRlZ2Vyc1xuICAnXig/OlstK10/KD86WzAtOV1bMC05X10qKSg/OlxcXFwuWzAtOV9dKik/KD86W2VFXVstK10/WzAtOV0rKT8nICtcbiAgLy8gLjJlNCwgLjJcbiAgLy8gc3BlY2lhbCBjYXNlLCBzZWVtcyBub3QgZnJvbSBzcGVjXG4gICd8XFxcXC5bMC05X10rKD86W2VFXVstK10/WzAtOV0rKT8nICtcbiAgLy8gLmluZlxuICAnfFstK10/XFxcXC4oPzppbmZ8SW5mfElORiknICtcbiAgLy8gLm5hblxuICAnfFxcXFwuKD86bmFufE5hTnxOQU4pKSQnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxGbG9hdChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFZQU1MX0ZMT0FUX1BBVFRFUk4udGVzdChkYXRhKSB8fFxuICAgICAgLy8gUXVpY2sgaGFjayB0byBub3QgYWxsb3cgaW50ZWdlcnMgZW5kIHdpdGggYF9gXG4gICAgICAvLyBQcm9iYWJseSBzaG91bGQgdXBkYXRlIHJlZ2V4cCAmIGNoZWNrIHNwZWVkXG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPT09ICdfJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sRmxvYXQoZGF0YSkge1xuICB2YXIgdmFsdWUsIHNpZ247XG5cbiAgdmFsdWUgID0gZGF0YS5yZXBsYWNlKC9fL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuICBzaWduICAgPSB2YWx1ZVswXSA9PT0gJy0nID8gLTEgOiAxO1xuXG4gIGlmICgnKy0nLmluZGV4T2YodmFsdWVbMF0pID49IDApIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnLmluZicpIHtcbiAgICByZXR1cm4gKHNpZ24gPT09IDEpID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICcubmFuJykge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgcmV0dXJuIHNpZ24gKiBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG59XG5cblxudmFyIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QgPSAvXlstK10/WzAtOV0rZS87XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxGbG9hdChvYmplY3QsIHN0eWxlKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKGlzTmFOKG9iamVjdCkpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5uYW4nO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuTkFOJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLk5hTic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcuaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLS5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICctLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy0uSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpIHtcbiAgICByZXR1cm4gJy0wLjAnO1xuICB9XG5cbiAgcmVzID0gb2JqZWN0LnRvU3RyaW5nKDEwKTtcblxuICAvLyBKUyBzdHJpbmdpZmllciBjYW4gYnVpbGQgc2NpZW50aWZpYyBmb3JtYXQgd2l0aG91dCBkb3RzOiA1ZS0xMDAsXG4gIC8vIHdoaWxlIFlBTUwgcmVxdXJlcyBkb3Q6IDUuZS0xMDAuIEZpeCBpdCB3aXRoIHNpbXBsZSBoYWNrXG5cbiAgcmV0dXJuIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QudGVzdChyZXMpID8gcmVzLnJlcGxhY2UoJ2UnLCAnLmUnKSA6IHJlcztcbn1cblxuZnVuY3Rpb24gaXNGbG9hdChvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpICYmXG4gICAgICAgICAob2JqZWN0ICUgMSAhPT0gMCB8fCBjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbnZhciBmbG9hdCA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sRmxvYXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEZsb2F0LFxuICBwcmVkaWNhdGU6IGlzRmxvYXQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbEZsb2F0LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcblxudmFyIGpzb24gPSBmYWlsc2FmZS5leHRlbmQoe1xuICBpbXBsaWNpdDogW1xuICAgIF9udWxsLFxuICAgIGJvb2wsXG4gICAgaW50LFxuICAgIGZsb2F0XG4gIF1cbn0pO1xuXG52YXIgY29yZSA9IGpzb247XG5cbnZhciBZQU1MX0RBVEVfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XSkkJyk7ICAgICAgICAgICAgICAgICAgIC8vIFszXSBkYXlcblxudmFyIFlBTUxfVElNRVNUQU1QX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbM10gZGF5XG4gICcoPzpbVHRdfFsgXFxcXHRdKyknICAgICAgICAgICAgICAgICArIC8vIC4uLlxuICAnKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgICsgLy8gWzRdIGhvdXJcbiAgJzooWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFs1XSBtaW51dGVcbiAgJzooWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFs2XSBzZWNvbmRcbiAgJyg/OlxcXFwuKFswLTldKikpPycgICAgICAgICAgICAgICAgICsgLy8gWzddIGZyYWN0aW9uXG4gICcoPzpbIFxcXFx0XSooWnwoWy0rXSkoWzAtOV1bMC05XT8pJyArIC8vIFs4XSB0eiBbOV0gdHpfc2lnbiBbMTBdIHR6X2hvdXJcbiAgJyg/OjooWzAtOV1bMC05XSkpPykpPyQnKTsgICAgICAgICAgIC8vIFsxMV0gdHpfbWludXRlXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIGlmIChZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIHZhciBtYXRjaCwgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uID0gMCxcbiAgICAgIGRlbHRhID0gbnVsbCwgdHpfaG91ciwgdHpfbWludXRlLCBkYXRlO1xuXG4gIG1hdGNoID0gWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpO1xuICBpZiAobWF0Y2ggPT09IG51bGwpIG1hdGNoID0gWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSk7XG5cbiAgaWYgKG1hdGNoID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ0RhdGUgcmVzb2x2ZSBlcnJvcicpO1xuXG4gIC8vIG1hdGNoOiBbMV0geWVhciBbMl0gbW9udGggWzNdIGRheVxuXG4gIHllYXIgPSArKG1hdGNoWzFdKTtcbiAgbW9udGggPSArKG1hdGNoWzJdKSAtIDE7IC8vIEpTIG1vbnRoIHN0YXJ0cyB3aXRoIDBcbiAgZGF5ID0gKyhtYXRjaFszXSk7XG5cbiAgaWYgKCFtYXRjaFs0XSkgeyAvLyBubyBob3VyXG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXkpKTtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbNF0gaG91ciBbNV0gbWludXRlIFs2XSBzZWNvbmQgWzddIGZyYWN0aW9uXG5cbiAgaG91ciA9ICsobWF0Y2hbNF0pO1xuICBtaW51dGUgPSArKG1hdGNoWzVdKTtcbiAgc2Vjb25kID0gKyhtYXRjaFs2XSk7XG5cbiAgaWYgKG1hdGNoWzddKSB7XG4gICAgZnJhY3Rpb24gPSBtYXRjaFs3XS5zbGljZSgwLCAzKTtcbiAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgMykgeyAvLyBtaWxsaS1zZWNvbmRzXG4gICAgICBmcmFjdGlvbiArPSAnMCc7XG4gICAgfVxuICAgIGZyYWN0aW9uID0gK2ZyYWN0aW9uO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs4XSB0eiBbOV0gdHpfc2lnbiBbMTBdIHR6X2hvdXIgWzExXSB0el9taW51dGVcblxuICBpZiAobWF0Y2hbOV0pIHtcbiAgICB0el9ob3VyID0gKyhtYXRjaFsxMF0pO1xuICAgIHR6X21pbnV0ZSA9ICsobWF0Y2hbMTFdIHx8IDApO1xuICAgIGRlbHRhID0gKHR6X2hvdXIgKiA2MCArIHR6X21pbnV0ZSkgKiA2MDAwMDsgLy8gZGVsdGEgaW4gbWlsaS1zZWNvbmRzXG4gICAgaWYgKG1hdGNoWzldID09PSAnLScpIGRlbHRhID0gLWRlbHRhO1xuICB9XG5cbiAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbikpO1xuXG4gIGlmIChkZWx0YSkgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gZGVsdGEpO1xuXG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sVGltZXN0YW1wKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICByZXR1cm4gb2JqZWN0LnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciB0aW1lc3RhbXAgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxUaW1lc3RhbXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFRpbWVzdGFtcCxcbiAgaW5zdGFuY2VPZjogRGF0ZSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sVGltZXN0YW1wXG59KTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxNZXJnZShkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAnPDwnIHx8IGRhdGEgPT09IG51bGw7XG59XG5cbnZhciBtZXJnZSA9IG5ldyB0eXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTWVyZ2Vcbn0pO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UqL1xuXG5cblxuXG5cbi8vIFsgNjQsIDY1LCA2NiBdIC0+IFsgcGFkZGluZywgQ1IsIExGIF1cbnZhciBCQVNFNjRfTUFQID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XFxuXFxyJztcblxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEJpbmFyeShkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGNvZGUsIGlkeCwgYml0bGVuID0gMCwgbWF4ID0gZGF0YS5sZW5ndGgsIG1hcCA9IEJBU0U2NF9NQVA7XG5cbiAgLy8gQ29udmVydCBvbmUgYnkgb25lLlxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBjb2RlID0gbWFwLmluZGV4T2YoZGF0YS5jaGFyQXQoaWR4KSk7XG5cbiAgICAvLyBTa2lwIENSL0xGXG4gICAgaWYgKGNvZGUgPiA2NCkgY29udGludWU7XG5cbiAgICAvLyBGYWlsIG9uIGlsbGVnYWwgY2hhcmFjdGVyc1xuICAgIGlmIChjb2RlIDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgYml0bGVuICs9IDY7XG4gIH1cblxuICAvLyBJZiB0aGVyZSBhcmUgYW55IGJpdHMgbGVmdCwgc291cmNlIHdhcyBjb3JydXB0ZWRcbiAgcmV0dXJuIChiaXRsZW4gJSA4KSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEJpbmFyeShkYXRhKSB7XG4gIHZhciBpZHgsIHRhaWxiaXRzLFxuICAgICAgaW5wdXQgPSBkYXRhLnJlcGxhY2UoL1tcXHJcXG49XS9nLCAnJyksIC8vIHJlbW92ZSBDUi9MRiAmIHBhZGRpbmcgdG8gc2ltcGxpZnkgc2NhblxuICAgICAgbWF4ID0gaW5wdXQubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUCxcbiAgICAgIGJpdHMgPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgLy8gQ29sbGVjdCBieSA2KjQgYml0cyAoMyBieXRlcylcblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDQgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTYpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiA4KSAmIDB4RkYpO1xuICAgICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICAgIH1cblxuICAgIGJpdHMgPSAoYml0cyA8PCA2KSB8IG1hcC5pbmRleE9mKGlucHV0LmNoYXJBdChpZHgpKTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWxiaXRzID0gKG1heCAlIDQpICogNjtcblxuICBpZiAodGFpbGJpdHMgPT09IDApIHtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiA4KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKGJpdHMgJiAweEZGKTtcbiAgfSBlbHNlIGlmICh0YWlsYml0cyA9PT0gMTgpIHtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxMCkgJiAweEZGKTtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiAyKSAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxMikge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDQpICYgMHhGRik7XG4gIH1cblxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEJpbmFyeShvYmplY3QgLyosIHN0eWxlKi8pIHtcbiAgdmFyIHJlc3VsdCA9ICcnLCBiaXRzID0gMCwgaWR4LCB0YWlsLFxuICAgICAgbWF4ID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgIG1hcCA9IEJBU0U2NF9NQVA7XG5cbiAgLy8gQ29udmVydCBldmVyeSB0aHJlZSBieXRlcyB0byA0IEFTQ0lJIGNoYXJhY3RlcnMuXG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgaWYgKChpZHggJSAzID09PSAwKSAmJiBpZHgpIHtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTgpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiA2KSAmIDB4M0ZdO1xuICAgICAgcmVzdWx0ICs9IG1hcFtiaXRzICYgMHgzRl07XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDgpICsgb2JqZWN0W2lkeF07XG4gIH1cblxuICAvLyBEdW1wIHRhaWxcblxuICB0YWlsID0gbWF4ICUgMztcblxuICBpZiAodGFpbCA9PT0gMCkge1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTgpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFtiaXRzICYgMHgzRl07XG4gIH0gZWxzZSBpZiAodGFpbCA9PT0gMikge1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTApICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPDwgMikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWzY0XTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAxKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPDwgNCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWzY0XTtcbiAgICByZXN1bHQgKz0gbWFwWzY0XTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICAnW29iamVjdCBVaW50OEFycmF5XSc7XG59XG5cbnZhciBiaW5hcnkgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSQzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmckMiAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sT21hcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgb2JqZWN0S2V5cyA9IFtdLCBpbmRleCwgbGVuZ3RoLCBwYWlyLCBwYWlyS2V5LCBwYWlySGFzS2V5LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcbiAgICBwYWlySGFzS2V5ID0gZmFsc2U7XG5cbiAgICBpZiAoX3RvU3RyaW5nJDIuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAocGFpcktleSBpbiBwYWlyKSB7XG4gICAgICBpZiAoX2hhc093blByb3BlcnR5JDMuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxudmFyIG9tYXAgPSBuZXcgdHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcblxudmFyIF90b1N0cmluZyQxID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nJDEuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIGlmIChrZXlzLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gW107XG5cbiAgdmFyIGluZGV4LCBsZW5ndGgsIHBhaXIsIGtleXMsIHJlc3VsdCxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgcmVzdWx0ID0gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIHBhaXJzID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG5cbnZhciBfaGFzT3duUHJvcGVydHkkMiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQyLmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICBpZiAob2JqZWN0W2tleV0gIT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFNldChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9O1xufVxuXG52YXIgc2V0ID0gbmV3IHR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNldCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFNldCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sU2V0XG59KTtcblxudmFyIF9kZWZhdWx0ID0gY29yZS5leHRlbmQoe1xuICBpbXBsaWNpdDogW1xuICAgIHRpbWVzdGFtcCxcbiAgICBtZXJnZVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIGJpbmFyeSxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNldFxuICBdXG59KTtcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuLG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cblxuXG5cblxuXG5cblxudmFyIF9oYXNPd25Qcm9wZXJ0eSQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuXG52YXIgQ09OVEVYVF9GTE9XX0lOICAgPSAxO1xudmFyIENPTlRFWFRfRkxPV19PVVQgID0gMjtcbnZhciBDT05URVhUX0JMT0NLX0lOICA9IDM7XG52YXIgQ09OVEVYVF9CTE9DS19PVVQgPSA0O1xuXG5cbnZhciBDSE9NUElOR19DTElQICA9IDE7XG52YXIgQ0hPTVBJTkdfU1RSSVAgPSAyO1xudmFyIENIT01QSU5HX0tFRVAgID0gMztcblxuXG52YXIgUEFUVEVSTl9OT05fUFJJTlRBQkxFICAgICAgICAgPSAvW1xceDAwLVxceDA4XFx4MEJcXHgwQ1xceDBFLVxceDFGXFx4N0YtXFx4ODRcXHg4Ni1cXHg5RlxcdUZGRkVcXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS87XG52YXIgUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MgPSAvW1xceDg1XFx1MjAyOFxcdTIwMjldLztcbnZhciBQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUyAgICAgICA9IC9bLFxcW1xcXVxce1xcfV0vO1xudmFyIFBBVFRFUk5fVEFHX0hBTkRMRSAgICAgICAgICAgID0gL14oPzohfCEhfCFbYS16XFwtXSshKSQvaTtcbnZhciBQQVRURVJOX1RBR19VUkkgICAgICAgICAgICAgICA9IC9eKD86IXxbXixcXFtcXF1cXHtcXH1dKSg/OiVbMC05YS1mXXsyfXxbMC05YS16XFwtIztcXC9cXD86QCY9XFwrXFwkLF9cXC4hflxcKidcXChcXClcXFtcXF1dKSokL2k7XG5cblxuZnVuY3Rpb24gX2NsYXNzKG9iaikgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7IH1cblxuZnVuY3Rpb24gaXNfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDBBLyogTEYgKi8pIHx8IChjID09PSAweDBELyogQ1IgKi8pO1xufVxuXG5mdW5jdGlvbiBpc19XSElURV9TUEFDRShjKSB7XG4gIHJldHVybiAoYyA9PT0gMHgwOS8qIFRhYiAqLykgfHwgKGMgPT09IDB4MjAvKiBTcGFjZSAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dTX09SX0VPTChjKSB7XG4gIHJldHVybiAoYyA9PT0gMHgwOS8qIFRhYiAqLykgfHxcbiAgICAgICAgIChjID09PSAweDIwLyogU3BhY2UgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwQS8qIExGICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX0ZMT1dfSU5ESUNBVE9SKGMpIHtcbiAgcmV0dXJuIGMgPT09IDB4MkMvKiAsICovIHx8XG4gICAgICAgICBjID09PSAweDVCLyogWyAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg1RC8qIF0gKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0IvKiB7ICovIHx8XG4gICAgICAgICBjID09PSAweDdELyogfSAqLztcbn1cblxuZnVuY3Rpb24gZnJvbUhleENvZGUoYykge1xuICB2YXIgbGM7XG5cbiAgaWYgKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpIHtcbiAgICByZXR1cm4gYyAtIDB4MzA7XG4gIH1cblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UqL1xuICBsYyA9IGMgfCAweDIwO1xuXG4gIGlmICgoMHg2MS8qIGEgKi8gPD0gbGMpICYmIChsYyA8PSAweDY2LyogZiAqLykpIHtcbiAgICByZXR1cm4gbGMgLSAweDYxICsgMTA7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWRIZXhMZW4oYykge1xuICBpZiAoYyA9PT0gMHg3OC8qIHggKi8pIHsgcmV0dXJuIDI7IH1cbiAgaWYgKGMgPT09IDB4NzUvKiB1ICovKSB7IHJldHVybiA0OyB9XG4gIGlmIChjID09PSAweDU1LyogVSAqLykgeyByZXR1cm4gODsgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZnJvbURlY2ltYWxDb2RlKGMpIHtcbiAgaWYgKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpIHtcbiAgICByZXR1cm4gYyAtIDB4MzA7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVzY2FwZVNlcXVlbmNlKGMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgaW5kZW50ICovXG4gIHJldHVybiAoYyA9PT0gMHgzMC8qIDAgKi8pID8gJ1xceDAwJyA6XG4gICAgICAgIChjID09PSAweDYxLyogYSAqLykgPyAnXFx4MDcnIDpcbiAgICAgICAgKGMgPT09IDB4NjIvKiBiICovKSA/ICdcXHgwOCcgOlxuICAgICAgICAoYyA9PT0gMHg3NC8qIHQgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDA5LyogVGFiICovKSA/ICdcXHgwOScgOlxuICAgICAgICAoYyA9PT0gMHg2RS8qIG4gKi8pID8gJ1xceDBBJyA6XG4gICAgICAgIChjID09PSAweDc2LyogdiAqLykgPyAnXFx4MEInIDpcbiAgICAgICAgKGMgPT09IDB4NjYvKiBmICovKSA/ICdcXHgwQycgOlxuICAgICAgICAoYyA9PT0gMHg3Mi8qIHIgKi8pID8gJ1xceDBEJyA6XG4gICAgICAgIChjID09PSAweDY1LyogZSAqLykgPyAnXFx4MUInIDpcbiAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgPyAnICcgOlxuICAgICAgICAoYyA9PT0gMHgyMi8qIFwiICovKSA/ICdcXHgyMicgOlxuICAgICAgICAoYyA9PT0gMHgyRi8qIC8gKi8pID8gJy8nIDpcbiAgICAgICAgKGMgPT09IDB4NUMvKiBcXCAqLykgPyAnXFx4NUMnIDpcbiAgICAgICAgKGMgPT09IDB4NEUvKiBOICovKSA/ICdcXHg4NScgOlxuICAgICAgICAoYyA9PT0gMHg1Ri8qIF8gKi8pID8gJ1xceEEwJyA6XG4gICAgICAgIChjID09PSAweDRDLyogTCAqLykgPyAnXFx1MjAyOCcgOlxuICAgICAgICAoYyA9PT0gMHg1MC8qIFAgKi8pID8gJ1xcdTIwMjknIDogJyc7XG59XG5cbmZ1bmN0aW9uIGNoYXJGcm9tQ29kZXBvaW50KGMpIHtcbiAgaWYgKGMgPD0gMHhGRkZGKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gIH1cbiAgLy8gRW5jb2RlIFVURi0xNiBzdXJyb2dhdGUgcGFpclxuICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtMTYjQ29kZV9wb2ludHNfVS4yQjAxMDAwMF90b19VLjJCMTBGRkZGXG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICgoYyAtIDB4MDEwMDAwKSA+PiAxMCkgKyAweEQ4MDAsXG4gICAgKChjIC0gMHgwMTAwMDApICYgMHgwM0ZGKSArIDB4REMwMFxuICApO1xufVxuXG52YXIgc2ltcGxlRXNjYXBlQ2hlY2sgPSBuZXcgQXJyYXkoMjU2KTsgLy8gaW50ZWdlciwgZm9yIGZhc3QgYWNjZXNzXG52YXIgc2ltcGxlRXNjYXBlTWFwID0gbmV3IEFycmF5KDI1Nik7XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gIHNpbXBsZUVzY2FwZUNoZWNrW2ldID0gc2ltcGxlRXNjYXBlU2VxdWVuY2UoaSkgPyAxIDogMDtcbiAgc2ltcGxlRXNjYXBlTWFwW2ldID0gc2ltcGxlRXNjYXBlU2VxdWVuY2UoaSk7XG59XG5cblxuZnVuY3Rpb24gU3RhdGUkMShpbnB1dCwgb3B0aW9ucykge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG5cbiAgdGhpcy5maWxlbmFtZSAgPSBvcHRpb25zWydmaWxlbmFtZSddICB8fCBudWxsO1xuICB0aGlzLnNjaGVtYSAgICA9IG9wdGlvbnNbJ3NjaGVtYSddICAgIHx8IF9kZWZhdWx0O1xuICB0aGlzLm9uV2FybmluZyA9IG9wdGlvbnNbJ29uV2FybmluZyddIHx8IG51bGw7XG4gIC8vIChIaWRkZW4pIFJlbW92ZT8gbWFrZXMgdGhlIGxvYWRlciB0byBleHBlY3QgWUFNTCAxLjEgZG9jdW1lbnRzXG4gIC8vIGlmIHN1Y2ggZG9jdW1lbnRzIGhhdmUgbm8gZXhwbGljaXQgJVlBTUwgZGlyZWN0aXZlXG4gIHRoaXMubGVnYWN5ICAgID0gb3B0aW9uc1snbGVnYWN5J10gICAgfHwgZmFsc2U7XG5cbiAgdGhpcy5qc29uICAgICAgPSBvcHRpb25zWydqc29uJ10gICAgICB8fCBmYWxzZTtcbiAgdGhpcy5saXN0ZW5lciAgPSBvcHRpb25zWydsaXN0ZW5lciddICB8fCBudWxsO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMudHlwZU1hcCAgICAgICA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkVHlwZU1hcDtcblxuICB0aGlzLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gIHRoaXMucG9zaXRpb24gICA9IDA7XG4gIHRoaXMubGluZSAgICAgICA9IDA7XG4gIHRoaXMubGluZVN0YXJ0ICA9IDA7XG4gIHRoaXMubGluZUluZGVudCA9IDA7XG5cbiAgLy8gcG9zaXRpb24gb2YgZmlyc3QgbGVhZGluZyB0YWIgaW4gdGhlIGN1cnJlbnQgbGluZSxcbiAgLy8gdXNlZCB0byBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHRhYnMgaW4gdGhlIGluZGVudGF0aW9uXG4gIHRoaXMuZmlyc3RUYWJJbkxpbmUgPSAtMTtcblxuICB0aGlzLmRvY3VtZW50cyA9IFtdO1xuXG4gIC8qXG4gIHRoaXMudmVyc2lvbjtcbiAgdGhpcy5jaGVja0xpbmVCcmVha3M7XG4gIHRoaXMudGFnTWFwO1xuICB0aGlzLmFuY2hvck1hcDtcbiAgdGhpcy50YWc7XG4gIHRoaXMuYW5jaG9yO1xuICB0aGlzLmtpbmQ7XG4gIHRoaXMucmVzdWx0OyovXG5cbn1cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVycm9yKHN0YXRlLCBtZXNzYWdlKSB7XG4gIHZhciBtYXJrID0ge1xuICAgIG5hbWU6ICAgICBzdGF0ZS5maWxlbmFtZSxcbiAgICBidWZmZXI6ICAgc3RhdGUuaW5wdXQuc2xpY2UoMCwgLTEpLCAvLyBvbWl0IHRyYWlsaW5nIFxcMFxuICAgIHBvc2l0aW9uOiBzdGF0ZS5wb3NpdGlvbixcbiAgICBsaW5lOiAgICAgc3RhdGUubGluZSxcbiAgICBjb2x1bW46ICAgc3RhdGUucG9zaXRpb24gLSBzdGF0ZS5saW5lU3RhcnRcbiAgfTtcblxuICBtYXJrLnNuaXBwZXQgPSBzbmlwcGV0KG1hcmspO1xuXG4gIHJldHVybiBuZXcgZXhjZXB0aW9uKG1lc3NhZ2UsIG1hcmspO1xufVxuXG5mdW5jdGlvbiB0aHJvd0Vycm9yKHN0YXRlLCBtZXNzYWdlKSB7XG4gIHRocm93IGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiB0aHJvd1dhcm5pbmcoc3RhdGUsIG1lc3NhZ2UpIHtcbiAgaWYgKHN0YXRlLm9uV2FybmluZykge1xuICAgIHN0YXRlLm9uV2FybmluZy5jYWxsKG51bGwsIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5cbnZhciBkaXJlY3RpdmVIYW5kbGVycyA9IHtcblxuICBZQU1MOiBmdW5jdGlvbiBoYW5kbGVZYW1sRGlyZWN0aXZlKHN0YXRlLCBuYW1lLCBhcmdzKSB7XG5cbiAgICB2YXIgbWF0Y2gsIG1ham9yLCBtaW5vcjtcblxuICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRpb24gb2YgJVlBTUwgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnWUFNTCBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIG1hdGNoID0gL14oWzAtOV0rKVxcLihbMC05XSspJC8uZXhlYyhhcmdzWzBdKTtcblxuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgYXJndW1lbnQgb2YgdGhlIFlBTUwgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgbWFqb3IgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgIG1pbm9yID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcblxuICAgIGlmIChtYWpvciAhPT0gMSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBZQU1MIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50Jyk7XG4gICAgfVxuXG4gICAgc3RhdGUudmVyc2lvbiA9IGFyZ3NbMF07XG4gICAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gKG1pbm9yIDwgMik7XG5cbiAgICBpZiAobWlub3IgIT09IDEgJiYgbWlub3IgIT09IDIpIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vuc3VwcG9ydGVkIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG4gIH0sXG5cbiAgVEFHOiBmdW5jdGlvbiBoYW5kbGVUYWdEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBoYW5kbGUsIHByZWZpeDtcblxuICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ1RBRyBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IHR3byBhcmd1bWVudHMnKTtcbiAgICB9XG5cbiAgICBoYW5kbGUgPSBhcmdzWzBdO1xuICAgIHByZWZpeCA9IGFyZ3NbMV07XG5cbiAgICBpZiAoIVBBVFRFUk5fVEFHX0hBTkRMRS50ZXN0KGhhbmRsZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdpbGwtZm9ybWVkIHRhZyBoYW5kbGUgKGZpcnN0IGFyZ3VtZW50KSBvZiB0aGUgVEFHIGRpcmVjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmIChfaGFzT3duUHJvcGVydHkkMS5jYWxsKHN0YXRlLnRhZ01hcCwgaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZXJlIGlzIGEgcHJldmlvdXNseSBkZWNsYXJlZCBzdWZmaXggZm9yIFwiJyArIGhhbmRsZSArICdcIiB0YWcgaGFuZGxlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFQQVRURVJOX1RBR19VUkkudGVzdChwcmVmaXgpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnaWxsLWZvcm1lZCB0YWcgcHJlZml4IChzZWNvbmQgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByZWZpeCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBwcmVmaXggaXMgbWFsZm9ybWVkOiAnICsgcHJlZml4KTtcbiAgICB9XG5cbiAgICBzdGF0ZS50YWdNYXBbaGFuZGxlXSA9IHByZWZpeDtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBjYXB0dXJlU2VnbWVudChzdGF0ZSwgc3RhcnQsIGVuZCwgY2hlY2tKc29uKSB7XG4gIHZhciBfcG9zaXRpb24sIF9sZW5ndGgsIF9jaGFyYWN0ZXIsIF9yZXN1bHQ7XG5cbiAgaWYgKHN0YXJ0IDwgZW5kKSB7XG4gICAgX3Jlc3VsdCA9IHN0YXRlLmlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgaWYgKGNoZWNrSnNvbikge1xuICAgICAgZm9yIChfcG9zaXRpb24gPSAwLCBfbGVuZ3RoID0gX3Jlc3VsdC5sZW5ndGg7IF9wb3NpdGlvbiA8IF9sZW5ndGg7IF9wb3NpdGlvbiArPSAxKSB7XG4gICAgICAgIF9jaGFyYWN0ZXIgPSBfcmVzdWx0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcbiAgICAgICAgaWYgKCEoX2NoYXJhY3RlciA9PT0gMHgwOSB8fFxuICAgICAgICAgICAgICAoMHgyMCA8PSBfY2hhcmFjdGVyICYmIF9jaGFyYWN0ZXIgPD0gMHgxMEZGRkYpKSkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCB2YWxpZCBKU09OIGNoYXJhY3RlcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChQQVRURVJOX05PTl9QUklOVEFCTEUudGVzdChfcmVzdWx0KSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RoZSBzdHJlYW0gY29udGFpbnMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuXG4gICAgc3RhdGUucmVzdWx0ICs9IF9yZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgZGVzdGluYXRpb24sIHNvdXJjZSwgb3ZlcnJpZGFibGVLZXlzKSB7XG4gIHZhciBzb3VyY2VLZXlzLCBrZXksIGluZGV4LCBxdWFudGl0eTtcblxuICBpZiAoIWNvbW1vbi5pc09iamVjdChzb3VyY2UpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2Nhbm5vdCBtZXJnZSBtYXBwaW5nczsgdGhlIHByb3ZpZGVkIHNvdXJjZSBvYmplY3QgaXMgdW5hY2NlcHRhYmxlJyk7XG4gIH1cblxuICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBxdWFudGl0eTsgaW5kZXggKz0gMSkge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuXG4gICAgaWYgKCFfaGFzT3duUHJvcGVydHkkMS5jYWxsKGRlc3RpbmF0aW9uLCBrZXkpKSB7XG4gICAgICBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgICBvdmVycmlkYWJsZUtleXNba2V5XSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsXG4gIHN0YXJ0TGluZSwgc3RhcnRMaW5lU3RhcnQsIHN0YXJ0UG9zKSB7XG5cbiAgdmFyIGluZGV4LCBxdWFudGl0eTtcblxuICAvLyBUaGUgb3V0cHV0IGlzIGEgcGxhaW4gb2JqZWN0IGhlcmUsIHNvIGtleXMgY2FuIG9ubHkgYmUgc3RyaW5ncy5cbiAgLy8gV2UgbmVlZCB0byBjb252ZXJ0IGtleU5vZGUgdG8gYSBzdHJpbmcsIGJ1dCBkb2luZyBzbyBjYW4gaGFuZyB0aGUgcHJvY2Vzc1xuICAvLyAoZGVlcGx5IG5lc3RlZCBhcnJheXMgdGhhdCBleHBsb2RlIGV4cG9uZW50aWFsbHkgdXNpbmcgYWxpYXNlcykuXG4gIGlmIChBcnJheS5pc0FycmF5KGtleU5vZGUpKSB7XG4gICAga2V5Tm9kZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGtleU5vZGUpO1xuXG4gICAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0ga2V5Tm9kZS5sZW5ndGg7IGluZGV4IDwgcXVhbnRpdHk7IGluZGV4ICs9IDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGtleU5vZGVbaW5kZXhdKSkge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmVzdGVkIGFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCBpbnNpZGUga2V5cycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGtleU5vZGUgPT09ICdvYmplY3QnICYmIF9jbGFzcyhrZXlOb2RlW2luZGV4XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgIGtleU5vZGVbaW5kZXhdID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQXZvaWQgY29kZSBleGVjdXRpb24gaW4gbG9hZCgpIHZpYSB0b1N0cmluZyBwcm9wZXJ0eVxuICAvLyAoc3RpbGwgdXNlIGl0cyBvd24gdG9TdHJpbmcgZm9yIGFycmF5cywgdGltZXN0YW1wcyxcbiAgLy8gYW5kIHdoYXRldmVyIHVzZXIgc2NoZW1hIGV4dGVuc2lvbnMgaGFwcGVuIHRvIGhhdmUgQEB0b1N0cmluZ1RhZylcbiAgaWYgKHR5cGVvZiBrZXlOb2RlID09PSAnb2JqZWN0JyAmJiBfY2xhc3Moa2V5Tm9kZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAga2V5Tm9kZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuICB9XG5cblxuICBrZXlOb2RlID0gU3RyaW5nKGtleU5vZGUpO1xuXG4gIGlmIChfcmVzdWx0ID09PSBudWxsKSB7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9XG5cbiAgaWYgKGtleVRhZyA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlTm9kZSkpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHZhbHVlTm9kZS5sZW5ndGg7IGluZGV4IDwgcXVhbnRpdHk7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgX3Jlc3VsdCwgdmFsdWVOb2RlW2luZGV4XSwgb3ZlcnJpZGFibGVLZXlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgX3Jlc3VsdCwgdmFsdWVOb2RlLCBvdmVycmlkYWJsZUtleXMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoIXN0YXRlLmpzb24gJiZcbiAgICAgICAgIV9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwob3ZlcnJpZGFibGVLZXlzLCBrZXlOb2RlKSAmJlxuICAgICAgICBfaGFzT3duUHJvcGVydHkkMS5jYWxsKF9yZXN1bHQsIGtleU5vZGUpKSB7XG4gICAgICBzdGF0ZS5saW5lID0gc3RhcnRMaW5lIHx8IHN0YXRlLmxpbmU7XG4gICAgICBzdGF0ZS5saW5lU3RhcnQgPSBzdGFydExpbmVTdGFydCB8fCBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXJ0UG9zIHx8IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0ZWQgbWFwcGluZyBrZXknKTtcbiAgICB9XG5cbiAgICAvLyB1c2VkIGZvciB0aGlzIHNwZWNpZmljIGtleSBvbmx5IGJlY2F1c2UgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIHNsb3dcbiAgICBpZiAoa2V5Tm9kZSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcmVzdWx0LCBrZXlOb2RlLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZU5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0W2tleU5vZGVdID0gdmFsdWVOb2RlO1xuICAgIH1cbiAgICBkZWxldGUgb3ZlcnJpZGFibGVLZXlzW2tleU5vZGVdO1xuICB9XG5cbiAgcmV0dXJuIF9yZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRMaW5lQnJlYWsoc3RhdGUpIHtcbiAgdmFyIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDBBLyogTEYgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICB9IGVsc2UgaWYgKGNoID09PSAweDBELyogQ1IgKi8pIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgwQS8qIExGICovKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYSBsaW5lIGJyZWFrIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBzdGF0ZS5saW5lICs9IDE7XG4gIHN0YXRlLmxpbmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICBzdGF0ZS5maXJzdFRhYkluTGluZSA9IC0xO1xufVxuXG5mdW5jdGlvbiBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBhbGxvd0NvbW1lbnRzLCBjaGVja0luZGVudCkge1xuICB2YXIgbGluZUJyZWFrcyA9IDAsXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgIGlmIChjaCA9PT0gMHgwOS8qIFRhYiAqLyAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSA9PT0gLTEpIHtcbiAgICAgICAgc3RhdGUuZmlyc3RUYWJJbkxpbmUgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dDb21tZW50cyAmJiBjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfSB3aGlsZSAoY2ggIT09IDB4MEEvKiBMRiAqLyAmJiBjaCAhPT0gMHgwRC8qIENSICovICYmIGNoICE9PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBsaW5lQnJlYWtzKys7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgICAgd2hpbGUgKGNoID09PSAweDIwLyogU3BhY2UgKi8pIHtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCsrO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjaGVja0luZGVudCAhPT0gLTEgJiYgbGluZUJyZWFrcyAhPT0gMCAmJiBzdGF0ZS5saW5lSW5kZW50IDwgY2hlY2tJbmRlbnQpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICdkZWZpY2llbnQgaW5kZW50YXRpb24nKTtcbiAgfVxuXG4gIHJldHVybiBsaW5lQnJlYWtzO1xufVxuXG5mdW5jdGlvbiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbik7XG5cbiAgLy8gQ29uZGl0aW9uIHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgaXMgdGVzdGVkXG4gIC8vIGluIHBhcmVudCBvbiBlYWNoIGNhbGwsIGZvciBlZmZpY2llbmN5LiBObyBuZWVkcyB0byB0ZXN0IGhlcmUgYWdhaW4uXG4gIGlmICgoY2ggPT09IDB4MkQvKiAtICovIHx8IGNoID09PSAweDJFLyogLiAqLykgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDEpICYmXG4gICAgICBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAyKSkge1xuXG4gICAgX3Bvc2l0aW9uICs9IDM7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMCB8fCBpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIGNvdW50KSB7XG4gIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHN0YXRlLnJlc3VsdCArPSAnICc7XG4gIH0gZWxzZSBpZiAoY291bnQgPiAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGNvdW50IC0gMSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiByZWFkUGxhaW5TY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQsIHdpdGhpbkZsb3dDb2xsZWN0aW9uKSB7XG4gIHZhciBwcmVjZWRpbmcsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICBjYXB0dXJlU3RhcnQsXG4gICAgICBjYXB0dXJlRW5kLFxuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfbGluZUluZGVudCxcbiAgICAgIF9raW5kID0gc3RhdGUua2luZCxcbiAgICAgIF9yZXN1bHQgPSBzdGF0ZS5yZXN1bHQsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChpc19XU19PUl9FT0woY2gpICAgICAgfHxcbiAgICAgIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSB8fFxuICAgICAgY2ggPT09IDB4MjMvKiAjICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNi8qICYgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDJBLyogKiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjEvKiAhICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg3Qy8qIHwgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDNFLyogPiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MjcvKiAnICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMi8qIFwiICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNS8qICUgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDQwLyogQCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NjAvKiBgICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGNoID09PSAweDNGLyogPyAqLyB8fCBjaCA9PT0gMHgyRC8qIC0gKi8pIHtcbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHxcbiAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGZvbGxvd2luZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgcHJlY2VkaW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiAtIDEpO1xuXG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKHByZWNlZGluZykpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHx8XG4gICAgICAgICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICAgIGJyZWFrO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfbGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2xpbmVJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIC0xKTtcblxuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPj0gbm9kZUluZGVudCkge1xuICAgICAgICBoYXNQZW5kaW5nQ29udGVudCA9IHRydWU7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucG9zaXRpb24gPSBjYXB0dXJlRW5kO1xuICAgICAgICBzdGF0ZS5saW5lID0gX2xpbmU7XG4gICAgICAgIHN0YXRlLmxpbmVTdGFydCA9IF9saW5lU3RhcnQ7XG4gICAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSBfbGluZUluZGVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1BlbmRpbmdDb250ZW50KSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBzdGF0ZS5saW5lIC0gX2xpbmUpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgaGFzUGVuZGluZ0NvbnRlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uICsgMTtcbiAgICB9XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCBmYWxzZSk7XG5cbiAgaWYgKHN0YXRlLnJlc3VsdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9IF9raW5kO1xuICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRTaW5nbGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNoLFxuICAgICAgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDI3LyogJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmtpbmQgPSAnc2NhbGFyJztcbiAgc3RhdGUucmVzdWx0ID0gJyc7XG4gIHN0YXRlLnBvc2l0aW9uKys7XG4gIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoKGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikpICE9PSAwKSB7XG4gICAgaWYgKGNoID09PSAweDI3LyogJyAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgY2FwdHVyZUVuZCwgdHJ1ZSk7XG4gICAgICB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgbm9kZUluZGVudCkpO1xuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoZXhMZW5ndGgsXG4gICAgICBoZXhSZXN1bHQsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMi8qIFwiICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjIvKiBcIiAqLykge1xuICAgICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIHRydWUpO1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHg1Qy8qIFxcICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KTtcblxuICAgICAgICAvLyBUT0RPOiByZXdvcmsgdG8gaW5saW5lIGZuIHdpdGggbm8gdHlwZSBjYXN0P1xuICAgICAgfSBlbHNlIGlmIChjaCA8IDI1NiAmJiBzaW1wbGVFc2NhcGVDaGVja1tjaF0pIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IHNpbXBsZUVzY2FwZU1hcFtjaF07XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSBpZiAoKHRtcCA9IGVzY2FwZWRIZXhMZW4oY2gpKSA+IDApIHtcbiAgICAgICAgaGV4TGVuZ3RoID0gdG1wO1xuICAgICAgICBoZXhSZXN1bHQgPSAwO1xuXG4gICAgICAgIGZvciAoOyBoZXhMZW5ndGggPiAwOyBoZXhMZW5ndGgtLSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgICAgIGlmICgodG1wID0gZnJvbUhleENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICAgICAgICBoZXhSZXN1bHQgPSAoaGV4UmVzdWx0IDw8IDQpICsgdG1wO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdleHBlY3RlZCBoZXhhZGVjaW1hbCBjaGFyYWN0ZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY2hhckZyb21Db2RlcG9pbnQoaGV4UmVzdWx0KTtcblxuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5rbm93biBlc2NhcGUgc2VxdWVuY2UnKTtcbiAgICAgIH1cblxuICAgICAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZEZsb3dDb2xsZWN0aW9uKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciByZWFkTmV4dCA9IHRydWUsXG4gICAgICBfbGluZSxcbiAgICAgIF9saW5lU3RhcnQsXG4gICAgICBfcG9zLFxuICAgICAgX3RhZyAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfcmVzdWx0LFxuICAgICAgX2FuY2hvciAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICB0ZXJtaW5hdG9yLFxuICAgICAgaXNQYWlyLFxuICAgICAgaXNFeHBsaWNpdFBhaXIsXG4gICAgICBpc01hcHBpbmcsXG4gICAgICBvdmVycmlkYWJsZUtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAga2V5Tm9kZSxcbiAgICAgIGtleVRhZyxcbiAgICAgIHZhbHVlTm9kZSxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDVCLyogWyAqLykge1xuICAgIHRlcm1pbmF0b3IgPSAweDVEOy8qIF0gKi9cbiAgICBpc01hcHBpbmcgPSBmYWxzZTtcbiAgICBfcmVzdWx0ID0gW107XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4N0IvKiB7ICovKSB7XG4gICAgdGVybWluYXRvciA9IDB4N0Q7LyogfSAqL1xuICAgIGlzTWFwcGluZyA9IHRydWU7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSB0ZXJtaW5hdG9yKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICBzdGF0ZS5raW5kID0gaXNNYXBwaW5nID8gJ21hcHBpbmcnIDogJ3NlcXVlbmNlJztcbiAgICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFyZWFkTmV4dCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ21pc3NlZCBjb21tYSBiZXR3ZWVuIGZsb3cgY29sbGVjdGlvbiBlbnRyaWVzJyk7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgyQy8qICwgKi8pIHtcbiAgICAgIC8vIFwiZmxvdyBjb2xsZWN0aW9uIGVudHJpZXMgY2FuIG5ldmVyIGJlIGNvbXBsZXRlbHkgZW1wdHlcIiwgYXMgcGVyIFlBTUwgMS4yLCBzZWN0aW9uIDcuNFxuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJleHBlY3RlZCB0aGUgbm9kZSBjb250ZW50LCBidXQgZm91bmQgJywnXCIpO1xuICAgIH1cblxuICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gZmFsc2U7XG5cbiAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuICAgICAgICBpc1BhaXIgPSBpc0V4cGxpY2l0UGFpciA9IHRydWU7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBsaW5lLlxuICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgX3BvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKGlzRXhwbGljaXRQYWlyIHx8IHN0YXRlLmxpbmUgPT09IF9saW5lKSAmJiBjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGlzUGFpciA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICAgIHZhbHVlTm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAoaXNNYXBwaW5nKSB7XG4gICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3Bvcyk7XG4gICAgfSBlbHNlIGlmIChpc1BhaXIpIHtcbiAgICAgIF9yZXN1bHQucHVzaChzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBudWxsLCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3BvcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0LnB1c2goa2V5Tm9kZSk7XG4gICAgfVxuXG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAweDJDLyogLCAqLykge1xuICAgICAgcmVhZE5leHQgPSB0cnVlO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFkTmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvbicpO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCxcbiAgICAgIGZvbGRpbmcsXG4gICAgICBjaG9tcGluZyAgICAgICA9IENIT01QSU5HX0NMSVAsXG4gICAgICBkaWRSZWFkQ29udGVudCA9IGZhbHNlLFxuICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSBmYWxzZSxcbiAgICAgIHRleHRJbmRlbnQgICAgID0gbm9kZUluZGVudCxcbiAgICAgIGVtcHR5TGluZXMgICAgID0gMCxcbiAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2UsXG4gICAgICB0bXAsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHg3Qy8qIHwgKi8pIHtcbiAgICBmb2xkaW5nID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4M0UvKiA+ICovKSB7XG4gICAgZm9sZGluZyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkIvKiArICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgICAgaWYgKENIT01QSU5HX0NMSVAgPT09IGNob21waW5nKSB7XG4gICAgICAgIGNob21waW5nID0gKGNoID09PSAweDJCLyogKyAqLykgPyBDSE9NUElOR19LRUVQIDogQ0hPTVBJTkdfU1RSSVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAncmVwZWF0IG9mIGEgY2hvbXBpbmcgbW9kZSBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKCh0bXAgPSBmcm9tRGVjaW1hbENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICBpZiAodG1wID09PSAwKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgZXhwbGljaXQgaW5kZW50YXRpb24gd2lkdGggb2YgYSBibG9jayBzY2FsYXI7IGl0IGNhbm5vdCBiZSBsZXNzIHRoYW4gb25lJyk7XG4gICAgICB9IGVsc2UgaWYgKCFkZXRlY3RlZEluZGVudCkge1xuICAgICAgICB0ZXh0SW5kZW50ID0gbm9kZUluZGVudCArIHRtcCAtIDE7XG4gICAgICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYW4gaW5kZW50YXRpb24gd2lkdGggaWRlbnRpZmllcicpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpO1xuXG4gICAgaWYgKGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKTtcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcbiAgICBzdGF0ZS5saW5lSW5kZW50ID0gMDtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICB3aGlsZSAoKCFkZXRlY3RlZEluZGVudCB8fCBzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkgJiZcbiAgICAgICAgICAgKGNoID09PSAweDIwLyogU3BhY2UgKi8pKSB7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKCFkZXRlY3RlZEluZGVudCAmJiBzdGF0ZS5saW5lSW5kZW50ID4gdGV4dEluZGVudCkge1xuICAgICAgdGV4dEluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGVtcHR5TGluZXMrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEVuZCBvZiB0aGUgc2NhbGFyLlxuICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkge1xuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBjaG9tcGluZy5cbiAgICAgIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfS0VFUCkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZGlkUmVhZENvbnRlbnQgPyAxICsgZW1wdHlMaW5lcyA6IGVtcHR5TGluZXMpO1xuICAgICAgfSBlbHNlIGlmIChjaG9tcGluZyA9PT0gQ0hPTVBJTkdfQ0xJUCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHRoZSBzY2FsYXIgaXMgbm90IGVtcHR5LlxuICAgICAgICAgIHN0YXRlLnJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCcmVhayB0aGlzIGB3aGlsZWAgY3ljbGUgYW5kIGdvIHRvIHRoZSBmdW5jaXRvbidzIGVwaWxvZ3VlLlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gRm9sZGVkIHN0eWxlOiB1c2UgZmFuY3kgcnVsZXMgdG8gaGFuZGxlIGxpbmUgYnJlYWtzLlxuICAgIGlmIChmb2xkaW5nKSB7XG5cbiAgICAgIC8vIExpbmVzIHN0YXJ0aW5nIHdpdGggd2hpdGUgc3BhY2UgY2hhcmFjdGVycyAobW9yZS1pbmRlbnRlZCBsaW5lcykgYXJlIG5vdCBmb2xkZWQuXG4gICAgICBpZiAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gZXhjZXB0IGZvciB0aGUgZmlyc3QgY29udGVudCBsaW5lIChjZi4gRXhhbXBsZSA4LjEpXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG5cbiAgICAgIC8vIEVuZCBvZiBtb3JlLWluZGVudGVkIGJsb2NrLlxuICAgICAgfSBlbHNlIGlmIChhdE1vcmVJbmRlbnRlZCkge1xuICAgICAgICBhdE1vcmVJbmRlbnRlZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyArIDEpO1xuXG4gICAgICAvLyBKdXN0IG9uZSBsaW5lIGJyZWFrIC0gcGVyY2VpdmUgYXMgdGhlIHNhbWUgbGluZS5cbiAgICAgIH0gZWxzZSBpZiAoZW1wdHlMaW5lcyA9PT0gMCkge1xuICAgICAgICBpZiAoZGlkUmVhZENvbnRlbnQpIHsgLy8gaS5lLiBvbmx5IGlmIHdlIGhhdmUgYWxyZWFkeSByZWFkIHNvbWUgc2NhbGFyIGNvbnRlbnQuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAvLyBTZXZlcmFsIGxpbmUgYnJlYWtzIC0gcGVyY2VpdmUgYXMgZGlmZmVyZW50IGxpbmVzLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGVtcHR5TGluZXMpO1xuICAgICAgfVxuXG4gICAgLy8gTGl0ZXJhbCBzdHlsZToganVzdCBhZGQgZXhhY3QgbnVtYmVyIG9mIGxpbmUgYnJlYWtzIGJldHdlZW4gY29udGVudCBsaW5lcy5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gS2VlcCBhbGwgbGluZSBicmVha3MgZXhjZXB0IHRoZSBoZWFkZXIgbGluZSBicmVhay5cbiAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgfVxuXG4gICAgZGlkUmVhZENvbnRlbnQgPSB0cnVlO1xuICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICBlbXB0eUxpbmVzID0gMDtcbiAgICBjYXB0dXJlU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIHdoaWxlICghaXNfRU9MKGNoKSAmJiAoY2ggIT09IDApKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgX2xpbmUsXG4gICAgICBfdGFnICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBfcmVzdWx0ICAgPSBbXSxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGRldGVjdGVkICA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgLy8gdGhlcmUgaXMgYSBsZWFkaW5nIHRhYiBiZWZvcmUgdGhpcyB0b2tlbiwgc28gaXQgY2FuJ3QgYmUgYSBibG9jayBzZXF1ZW5jZS9tYXBwaW5nO1xuICAvLyBpdCBjYW4gc3RpbGwgYmUgZmxvdyBzZXF1ZW5jZS9tYXBwaW5nIG9yIGEgc2NhbGFyXG4gIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXRlLmZpcnN0VGFiSW5MaW5lO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhYiBjaGFyYWN0ZXJzIG11c3Qgbm90IGJlIHVzZWQgaW4gaW5kZW50YXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoY2ggIT09IDB4MkQvKiAtICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICBpZiAoIWlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgIGlmIChza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSkpIHtcbiAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDw9IG5vZGVJbmRlbnQpIHtcbiAgICAgICAgX3Jlc3VsdC5wdXNoKG51bGwpO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBfcmVzdWx0LnB1c2goc3RhdGUucmVzdWx0KTtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgKGNoICE9PSAwKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBpbmRlbnRhdGlvbiBvZiBhIHNlcXVlbmNlIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnc2VxdWVuY2UnO1xuICAgIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZWFkQmxvY2tNYXBwaW5nKHN0YXRlLCBub2RlSW5kZW50LCBmbG93SW5kZW50KSB7XG4gIHZhciBmb2xsb3dpbmcsXG4gICAgICBhbGxvd0NvbXBhY3QsXG4gICAgICBfbGluZSxcbiAgICAgIF9rZXlMaW5lLFxuICAgICAgX2tleUxpbmVTdGFydCxcbiAgICAgIF9rZXlQb3MsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgX2FuY2hvciAgICAgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICAgICAgPSB7fSxcbiAgICAgIG92ZXJyaWRhYmxlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBrZXlUYWcgICAgICAgID0gbnVsbCxcbiAgICAgIGtleU5vZGUgICAgICAgPSBudWxsLFxuICAgICAgdmFsdWVOb2RlICAgICA9IG51bGwsXG4gICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZCAgICAgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICAvLyB0aGVyZSBpcyBhIGxlYWRpbmcgdGFiIGJlZm9yZSB0aGlzIHRva2VuLCBzbyBpdCBjYW4ndCBiZSBhIGJsb2NrIHNlcXVlbmNlL21hcHBpbmc7XG4gIC8vIGl0IGNhbiBzdGlsbCBiZSBmbG93IHNlcXVlbmNlL21hcHBpbmcgb3IgYSBzY2FsYXJcbiAgaWYgKHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmICghYXRFeHBsaWNpdEtleSAmJiBzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhdGUuZmlyc3RUYWJJbkxpbmU7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICBfbGluZSA9IHN0YXRlLmxpbmU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgbGluZS5cblxuICAgIC8vXG4gICAgLy8gRXhwbGljaXQgbm90YXRpb24gY2FzZS4gVGhlcmUgYXJlIHR3byBzZXBhcmF0ZSBibG9ja3M6XG4gICAgLy8gZmlyc3QgZm9yIHRoZSBrZXkgKGRlbm90ZWQgYnkgXCI/XCIpIGFuZCBzZWNvbmQgZm9yIHRoZSB2YWx1ZSAoZGVub3RlZCBieSBcIjpcIilcbiAgICAvL1xuICAgIGlmICgoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDNBLyogOiAqLykgJiYgaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcblxuICAgICAgaWYgKGNoID09PSAweDNGLyogPyAqLykge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuXG4gICAgICB9IGVsc2UgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgLy8gaS5lLiAweDNBLyogOiAqLyA9PT0gY2hhcmFjdGVyIGFmdGVyIHRoZSBleHBsaWNpdCBrZXkuXG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2luY29tcGxldGUgZXhwbGljaXQgbWFwcGluZyBwYWlyOyBhIGtleSBub2RlIGlzIG1pc3NlZDsgb3IgZm9sbG93ZWQgYnkgYSBub24tdGFidWxhdGVkIGVtcHR5IGxpbmUnKTtcbiAgICAgIH1cblxuICAgICAgc3RhdGUucG9zaXRpb24gKz0gMTtcbiAgICAgIGNoID0gZm9sbG93aW5nO1xuXG4gICAgLy9cbiAgICAvLyBJbXBsaWNpdCBub3RhdGlvbiBjYXNlLiBGbG93LXN0eWxlIG5vZGUgYXMgdGhlIGtleSBmaXJzdCwgdGhlbiBcIjpcIiwgYW5kIHRoZSB2YWx1ZS5cbiAgICAvL1xuICAgIH0gZWxzZSB7XG4gICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfa2V5TGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2tleVBvcyA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICBpZiAoIWNvbXBvc2VOb2RlKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfT1VULCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgICAgLy8gTmVpdGhlciBpbXBsaWNpdCBub3IgZXhwbGljaXQgbm90YXRpb24uXG4gICAgICAgIC8vIFJlYWRpbmcgaXMgZG9uZS4gR28gdG8gdGhlIGVwaWxvZ3VlLlxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgICBpZiAoIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIGV4cGVjdGVkIGFmdGVyIHRoZSBrZXktdmFsdWUgc2VwYXJhdG9yIHdpdGhpbiBhIGJsb2NrIG1hcHBpbmcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgICAgICAgYWxsb3dDb21wYWN0ID0gZmFsc2U7XG4gICAgICAgICAga2V5VGFnID0gc3RhdGUudGFnO1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkZXRlY3RlZCkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYW4gaW1wbGljaXQgbWFwcGluZyBwYWlyOyBhIGNvbG9uIGlzIG1pc3NlZCcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBLZWVwIHRoZSByZXN1bHQgb2YgYGNvbXBvc2VOb2RlYC5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW4gbm90IHJlYWQgYSBibG9jayBtYXBwaW5nIGVudHJ5OyBhIG11bHRpbGluZSBrZXkgbWF5IG5vdCBiZSBhbiBpbXBsaWNpdCBrZXknKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gQ29tbW9uIHJlYWRpbmcgY29kZSBmb3IgYm90aCBleHBsaWNpdCBhbmQgaW1wbGljaXQgbm90YXRpb25zLlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSB7XG4gICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBfa2V5TGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICAgIF9rZXlMaW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICAgIF9rZXlQb3MgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0JMT0NLX09VVCwgdHJ1ZSwgYWxsb3dDb21wYWN0KSkge1xuICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmICgoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgaW5kZW50YXRpb24gb2YgYSBtYXBwaW5nIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gRXBpbG9ndWUuXG4gIC8vXG5cbiAgLy8gU3BlY2lhbCBjYXNlOiBsYXN0IG1hcHBpbmcncyBub2RlIGNvbnRhaW5zIG9ubHkgdGhlIGtleSBpbiBleHBsaWNpdCBub3RhdGlvbi5cbiAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICB9XG5cbiAgLy8gRXhwb3NlIHRoZSByZXN1bHRpbmcgbWFwcGluZy5cbiAgaWYgKGRldGVjdGVkKSB7XG4gICAgc3RhdGUudGFnID0gX3RhZztcbiAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgIHN0YXRlLmtpbmQgPSAnbWFwcGluZyc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBkZXRlY3RlZDtcbn1cblxuZnVuY3Rpb24gcmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sXG4gICAgICBpc1ZlcmJhdGltID0gZmFsc2UsXG4gICAgICBpc05hbWVkICAgID0gZmFsc2UsXG4gICAgICB0YWdIYW5kbGUsXG4gICAgICB0YWdOYW1lLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjEvKiAhICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhIHRhZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHgzQy8qIDwgKi8pIHtcbiAgICBpc1ZlcmJhdGltID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICB0YWdIYW5kbGUgPSAnISEnO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2Uge1xuICAgIHRhZ0hhbmRsZSA9ICchJztcbiAgfVxuXG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIGlmIChpc1ZlcmJhdGltKSB7XG4gICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgY2ggIT09IDB4M0UvKiA+ICovKTtcblxuICAgIGlmIChzdGF0ZS5wb3NpdGlvbiA8IHN0YXRlLmxlbmd0aCkge1xuICAgICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSB2ZXJiYXRpbSB0YWcnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMS8qICEgKi8pIHtcbiAgICAgICAgaWYgKCFpc05hbWVkKSB7XG4gICAgICAgICAgdGFnSGFuZGxlID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uIC0gMSwgc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QodGFnSGFuZGxlKSkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWVkIHRhZyBoYW5kbGUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOYW1lZCA9IHRydWU7XG4gICAgICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGV4Y2xhbWF0aW9uIG1hcmtzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHRhZ05hbWUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUy50ZXN0KHRhZ05hbWUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBmbG93IGluZGljYXRvciBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRhZ05hbWUgJiYgIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHRhZ05hbWUpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBuYW1lIGNhbm5vdCBjb250YWluIHN1Y2ggY2hhcmFjdGVyczogJyArIHRhZ05hbWUpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0YWdOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgaXMgbWFsZm9ybWVkOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIHN0YXRlLnRhZyA9IHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmIChfaGFzT3duUHJvcGVydHkkMS5jYWxsKHN0YXRlLnRhZ01hcCwgdGFnSGFuZGxlKSkge1xuICAgIHN0YXRlLnRhZyA9IHN0YXRlLnRhZ01hcFt0YWdIYW5kbGVdICsgdGFnTmFtZTtcblxuICB9IGVsc2UgaWYgKHRhZ0hhbmRsZSA9PT0gJyEnKSB7XG4gICAgc3RhdGUudGFnID0gJyEnICsgdGFnTmFtZTtcblxuICB9IGVsc2UgaWYgKHRhZ0hhbmRsZSA9PT0gJyEhJykge1xuICAgIHN0YXRlLnRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjonICsgdGFnTmFtZTtcblxuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmRlY2xhcmVkIHRhZyBoYW5kbGUgXCInICsgdGFnSGFuZGxlICsgJ1wiJyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyNi8qICYgKi8pIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0aW9uIG9mIGFuIGFuY2hvciBwcm9wZXJ0eScpO1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkgJiYgIWlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gX3Bvc2l0aW9uKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWUgb2YgYW4gYW5jaG9yIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXInKTtcbiAgfVxuXG4gIHN0YXRlLmFuY2hvciA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVhZEFsaWFzKHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sIGFsaWFzLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MkEvKiAqICovKSByZXR1cm4gZmFsc2U7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbjtcblxuICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkgJiYgIWlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gX3Bvc2l0aW9uKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ25hbWUgb2YgYW4gYWxpYXMgbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlcicpO1xuICB9XG5cbiAgYWxpYXMgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoIV9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUuYW5jaG9yTWFwLCBhbGlhcykpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5pZGVudGlmaWVkIGFsaWFzIFwiJyArIGFsaWFzICsgJ1wiJyk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bHQgPSBzdGF0ZS5hbmNob3JNYXBbYWxpYXNdO1xuICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlTm9kZShzdGF0ZSwgcGFyZW50SW5kZW50LCBub2RlQ29udGV4dCwgYWxsb3dUb1NlZWssIGFsbG93Q29tcGFjdCkge1xuICB2YXIgYWxsb3dCbG9ja1N0eWxlcyxcbiAgICAgIGFsbG93QmxvY2tTY2FsYXJzLFxuICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zLFxuICAgICAgaW5kZW50U3RhdHVzID0gMSwgLy8gMTogdGhpcz5wYXJlbnQsIDA6IHRoaXM9cGFyZW50LCAtMTogdGhpczxwYXJlbnRcbiAgICAgIGF0TmV3TGluZSAgPSBmYWxzZSxcbiAgICAgIGhhc0NvbnRlbnQgPSBmYWxzZSxcbiAgICAgIHR5cGVJbmRleCxcbiAgICAgIHR5cGVRdWFudGl0eSxcbiAgICAgIHR5cGVMaXN0LFxuICAgICAgdHlwZSxcbiAgICAgIGZsb3dJbmRlbnQsXG4gICAgICBibG9ja0luZGVudDtcblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignb3BlbicsIHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLnRhZyAgICA9IG51bGw7XG4gIHN0YXRlLmFuY2hvciA9IG51bGw7XG4gIHN0YXRlLmtpbmQgICA9IG51bGw7XG4gIHN0YXRlLnJlc3VsdCA9IG51bGw7XG5cbiAgYWxsb3dCbG9ja1N0eWxlcyA9IGFsbG93QmxvY2tTY2FsYXJzID0gYWxsb3dCbG9ja0NvbGxlY3Rpb25zID1cbiAgICBDT05URVhUX0JMT0NLX09VVCA9PT0gbm9kZUNvbnRleHQgfHxcbiAgICBDT05URVhUX0JMT0NLX0lOICA9PT0gbm9kZUNvbnRleHQ7XG5cbiAgaWYgKGFsbG93VG9TZWVrKSB7XG4gICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgYXROZXdMaW5lID0gdHJ1ZTtcblxuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gcGFyZW50SW5kZW50KSB7XG4gICAgICAgIGluZGVudFN0YXR1cyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgIHdoaWxlIChyZWFkVGFnUHJvcGVydHkoc3RhdGUpIHx8IHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkpIHtcbiAgICAgIGlmIChza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSkpIHtcbiAgICAgICAgYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gYWxsb3dCbG9ja1N0eWxlcztcblxuICAgICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICAgIGluZGVudFN0YXR1cyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMpIHtcbiAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhdE5ld0xpbmUgfHwgYWxsb3dDb21wYWN0O1xuICB9XG5cbiAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSB8fCBDT05URVhUX0JMT0NLX09VVCA9PT0gbm9kZUNvbnRleHQpIHtcbiAgICBpZiAoQ09OVEVYVF9GTE9XX0lOID09PSBub2RlQ29udGV4dCB8fCBDT05URVhUX0ZMT1dfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgICAgZmxvd0luZGVudCA9IHBhcmVudEluZGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxvd0luZGVudCA9IHBhcmVudEluZGVudCArIDE7XG4gICAgfVxuXG4gICAgYmxvY2tJbmRlbnQgPSBzdGF0ZS5wb3NpdGlvbiAtIHN0YXRlLmxpbmVTdGFydDtcblxuICAgIGlmIChpbmRlbnRTdGF0dXMgPT09IDEpIHtcbiAgICAgIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiZcbiAgICAgICAgICAocmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIGJsb2NrSW5kZW50KSB8fFxuICAgICAgICAgICByZWFkQmxvY2tNYXBwaW5nKHN0YXRlLCBibG9ja0luZGVudCwgZmxvd0luZGVudCkpIHx8XG4gICAgICAgICAgcmVhZEZsb3dDb2xsZWN0aW9uKHN0YXRlLCBmbG93SW5kZW50KSkge1xuICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoYWxsb3dCbG9ja1NjYWxhcnMgJiYgcmVhZEJsb2NrU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICAgIHJlYWRTaW5nbGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpIHx8XG4gICAgICAgICAgICByZWFkRG91YmxlUXVvdGVkU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZEFsaWFzKHN0YXRlKSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCB8fCBzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhbGlhcyBub2RlIHNob3VsZCBub3QgaGF2ZSBhbnkgcHJvcGVydGllcycpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCwgQ09OVEVYVF9GTE9XX0lOID09PSBub2RlQ29udGV4dCkpIHtcbiAgICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzdGF0ZS50YWcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlLnRhZyA9ICc/JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluZGVudFN0YXR1cyA9PT0gMCkge1xuICAgICAgLy8gU3BlY2lhbCBjYXNlOiBibG9jayBzZXF1ZW5jZXMgYXJlIGFsbG93ZWQgdG8gaGF2ZSBzYW1lIGluZGVudGF0aW9uIGxldmVsIGFzIHRoZSBwYXJlbnQuXG4gICAgICAvLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI3OTk3ODRcbiAgICAgIGhhc0NvbnRlbnQgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiYgcmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIGJsb2NrSW5kZW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUudGFnID09PSBudWxsKSB7XG4gICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBzdGF0ZS5yZXN1bHQ7XG4gICAgfVxuXG4gIH0gZWxzZSBpZiAoc3RhdGUudGFnID09PSAnPycpIHtcbiAgICAvLyBJbXBsaWNpdCByZXNvbHZpbmcgaXMgbm90IGFsbG93ZWQgZm9yIG5vbi1zY2FsYXIgdHlwZXMsIGFuZCAnPydcbiAgICAvLyBub24tc3BlY2lmaWMgdGFnIGlzIG9ubHkgYXV0b21hdGljYWxseSBhc3NpZ25lZCB0byBwbGFpbiBzY2FsYXJzLlxuICAgIC8vXG4gICAgLy8gV2Ugb25seSBuZWVkIHRvIGNoZWNrIGtpbmQgY29uZm9ybWl0eSBpbiBjYXNlIHVzZXIgZXhwbGljaXRseSBhc3NpZ25zICc/J1xuICAgIC8vIHRhZywgZm9yIGV4YW1wbGUgbGlrZSB0aGlzOiBcIiE8Pz4gWzBdXCJcbiAgICAvL1xuICAgIGlmIChzdGF0ZS5yZXN1bHQgIT09IG51bGwgJiYgc3RhdGUua2luZCAhPT0gJ3NjYWxhcicpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPD8+IHRhZzsgaXQgc2hvdWxkIGJlIFwic2NhbGFyXCIsIG5vdCBcIicgKyBzdGF0ZS5raW5kICsgJ1wiJyk7XG4gICAgfVxuXG4gICAgZm9yICh0eXBlSW5kZXggPSAwLCB0eXBlUXVhbnRpdHkgPSBzdGF0ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDsgdHlwZUluZGV4IDwgdHlwZVF1YW50aXR5OyB0eXBlSW5kZXggKz0gMSkge1xuICAgICAgdHlwZSA9IHN0YXRlLmltcGxpY2l0VHlwZXNbdHlwZUluZGV4XTtcblxuICAgICAgaWYgKHR5cGUucmVzb2x2ZShzdGF0ZS5yZXN1bHQpKSB7IC8vIGBzdGF0ZS5yZXN1bHRgIHVwZGF0ZWQgaW4gcmVzb2x2ZXIgaWYgbWF0Y2hlZFxuICAgICAgICBzdGF0ZS5yZXN1bHQgPSB0eXBlLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQpO1xuICAgICAgICBzdGF0ZS50YWcgPSB0eXBlLnRhZztcbiAgICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgIT09ICchJykge1xuICAgIGlmIChfaGFzT3duUHJvcGVydHkkMS5jYWxsKHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXSwgc3RhdGUudGFnKSkge1xuICAgICAgdHlwZSA9IHN0YXRlLnR5cGVNYXBbc3RhdGUua2luZCB8fCAnZmFsbGJhY2snXVtzdGF0ZS50YWddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsb29raW5nIGZvciBtdWx0aSB0eXBlXG4gICAgICB0eXBlID0gbnVsbDtcbiAgICAgIHR5cGVMaXN0ID0gc3RhdGUudHlwZU1hcC5tdWx0aVtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddO1xuXG4gICAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHR5cGVMaXN0Lmxlbmd0aDsgdHlwZUluZGV4IDwgdHlwZVF1YW50aXR5OyB0eXBlSW5kZXggKz0gMSkge1xuICAgICAgICBpZiAoc3RhdGUudGFnLnNsaWNlKDAsIHR5cGVMaXN0W3R5cGVJbmRleF0udGFnLmxlbmd0aCkgPT09IHR5cGVMaXN0W3R5cGVJbmRleF0udGFnKSB7XG4gICAgICAgICAgdHlwZSA9IHR5cGVMaXN0W3R5cGVJbmRleF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIHRhZyAhPCcgKyBzdGF0ZS50YWcgKyAnPicpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5yZXN1bHQgIT09IG51bGwgJiYgdHlwZS5raW5kICE9PSBzdGF0ZS5raW5kKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITwnICsgc3RhdGUudGFnICsgJz4gdGFnOyBpdCBzaG91bGQgYmUgXCInICsgdHlwZS5raW5kICsgJ1wiLCBub3QgXCInICsgc3RhdGUua2luZCArICdcIicpO1xuICAgIH1cblxuICAgIGlmICghdHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCwgc3RhdGUudGFnKSkgeyAvLyBgc3RhdGUucmVzdWx0YCB1cGRhdGVkIGluIHJlc29sdmVyIGlmIG1hdGNoZWRcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW5ub3QgcmVzb2x2ZSBhIG5vZGUgd2l0aCAhPCcgKyBzdGF0ZS50YWcgKyAnPiBleHBsaWNpdCB0YWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucmVzdWx0ID0gdHlwZS5jb25zdHJ1Y3Qoc3RhdGUucmVzdWx0LCBzdGF0ZS50YWcpO1xuICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignY2xvc2UnLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnRhZyAhPT0gbnVsbCB8fCAgc3RhdGUuYW5jaG9yICE9PSBudWxsIHx8IGhhc0NvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWREb2N1bWVudChzdGF0ZSkge1xuICB2YXIgZG9jdW1lbnRTdGFydCA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgX3Bvc2l0aW9uLFxuICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgIGRpcmVjdGl2ZUFyZ3MsXG4gICAgICBoYXNEaXJlY3RpdmVzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBzdGF0ZS52ZXJzaW9uID0gbnVsbDtcbiAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gc3RhdGUubGVnYWN5O1xuICBzdGF0ZS50YWdNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdGF0ZS5hbmNob3JNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiAwIHx8IGNoICE9PSAweDI1LyogJSAqLykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgZGlyZWN0aXZlTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGRpcmVjdGl2ZUFyZ3MgPSBbXTtcblxuICAgIGlmIChkaXJlY3RpdmVOYW1lLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmUgbmFtZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gb25lIGNoYXJhY3RlciBpbiBsZW5ndGgnKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICAgIHdoaWxlIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfRU9MKGNoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNfRU9MKGNoKSkgYnJlYWs7XG5cbiAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVBcmdzLnB1c2goc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbikpO1xuICAgIH1cblxuICAgIGlmIChjaCAhPT0gMCkgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG5cbiAgICBpZiAoX2hhc093blByb3BlcnR5JDEuY2FsbChkaXJlY3RpdmVIYW5kbGVycywgZGlyZWN0aXZlTmFtZSkpIHtcbiAgICAgIGRpcmVjdGl2ZUhhbmRsZXJzW2RpcmVjdGl2ZU5hbWVdKHN0YXRlLCBkaXJlY3RpdmVOYW1lLCBkaXJlY3RpdmVBcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5rbm93biBkb2N1bWVudCBkaXJlY3RpdmUgXCInICsgZGlyZWN0aXZlTmFtZSArICdcIicpO1xuICAgIH1cbiAgfVxuXG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gMCAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgICAgID09PSAweDJELyogLSAqLyAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpID09PSAweDJELyogLSAqLyAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDIpID09PSAweDJELyogLSAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uICs9IDM7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIH0gZWxzZSBpZiAoaGFzRGlyZWN0aXZlcykge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmVzIGVuZCBtYXJrIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBjb21wb3NlTm9kZShzdGF0ZSwgc3RhdGUubGluZUluZGVudCAtIDEsIENPTlRFWFRfQkxPQ0tfT1VULCBmYWxzZSwgdHJ1ZSk7XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICBpZiAoc3RhdGUuY2hlY2tMaW5lQnJlYWtzICYmXG4gICAgICBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUy50ZXN0KHN0YXRlLmlucHV0LnNsaWNlKGRvY3VtZW50U3RhcnQsIHN0YXRlLnBvc2l0aW9uKSkpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICdub24tQVNDSUkgbGluZSBicmVha3MgYXJlIGludGVycHJldGVkIGFzIGNvbnRlbnQnKTtcbiAgfVxuXG4gIHN0YXRlLmRvY3VtZW50cy5wdXNoKHN0YXRlLnJlc3VsdCk7XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuXG4gICAgaWYgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDJFLyogLiAqLykge1xuICAgICAgc3RhdGUucG9zaXRpb24gKz0gMztcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2VuZCBvZiB0aGUgc3RyZWFtIG9yIGEgZG9jdW1lbnQgc2VwYXJhdG9yIGlzIGV4cGVjdGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cblxuZnVuY3Rpb24gbG9hZERvY3VtZW50cyhpbnB1dCwgb3B0aW9ucykge1xuICBpbnB1dCA9IFN0cmluZyhpbnB1dCk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChpbnB1dC5sZW5ndGggIT09IDApIHtcblxuICAgIC8vIEFkZCB0YWlsaW5nIGBcXG5gIGlmIG5vdCBleGlzdHNcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChpbnB1dC5sZW5ndGggLSAxKSAhPT0gMHgwQS8qIExGICovICYmXG4gICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT09IDB4MEQvKiBDUiAqLykge1xuICAgICAgaW5wdXQgKz0gJ1xcbic7XG4gICAgfVxuXG4gICAgLy8gU3RyaXAgQk9NXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZSgxKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUkMShpbnB1dCwgb3B0aW9ucyk7XG5cbiAgdmFyIG51bGxwb3MgPSBpbnB1dC5pbmRleE9mKCdcXDAnKTtcblxuICBpZiAobnVsbHBvcyAhPT0gLTEpIHtcbiAgICBzdGF0ZS5wb3NpdGlvbiA9IG51bGxwb3M7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ251bGwgYnl0ZSBpcyBub3QgYWxsb3dlZCBpbiBpbnB1dCcpO1xuICB9XG5cbiAgLy8gVXNlIDAgYXMgc3RyaW5nIHRlcm1pbmF0b3IuIFRoYXQgc2lnbmlmaWNhbnRseSBzaW1wbGlmaWVzIGJvdW5kcyBjaGVjay5cbiAgc3RhdGUuaW5wdXQgKz0gJ1xcMCc7XG5cbiAgd2hpbGUgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDIwLyogU3BhY2UgKi8pIHtcbiAgICBzdGF0ZS5saW5lSW5kZW50ICs9IDE7XG4gICAgc3RhdGUucG9zaXRpb24gKz0gMTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5wb3NpdGlvbiA8IChzdGF0ZS5sZW5ndGggLSAxKSkge1xuICAgIHJlYWREb2N1bWVudChzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuZG9jdW1lbnRzO1xufVxuXG5cbmZ1bmN0aW9uIGxvYWRBbGwkMShpbnB1dCwgaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKGl0ZXJhdG9yICE9PSBudWxsICYmIHR5cGVvZiBpdGVyYXRvciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IGl0ZXJhdG9yO1xuICAgIGl0ZXJhdG9yID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkb2N1bWVudHMgPSBsb2FkRG9jdW1lbnRzKGlucHV0LCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50cztcbiAgfVxuXG4gIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZG9jdW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpdGVyYXRvcihkb2N1bWVudHNbaW5kZXhdKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWQkMShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgZG9jdW1lbnRzID0gbG9hZERvY3VtZW50cyhpbnB1dCwgb3B0aW9ucyk7XG5cbiAgaWYgKGRvY3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIG5vLXVuZGVmaW5lZCovXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChkb2N1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50c1swXTtcbiAgfVxuICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdleHBlY3RlZCBhIHNpbmdsZSBkb2N1bWVudCBpbiB0aGUgc3RyZWFtLCBidXQgZm91bmQgbW9yZScpO1xufVxuXG5cbnZhciBsb2FkQWxsXzEgPSBsb2FkQWxsJDE7XG52YXIgbG9hZF8xICAgID0gbG9hZCQxO1xuXG52YXIgbG9hZGVyID0ge1xuXHRsb2FkQWxsOiBsb2FkQWxsXzEsXG5cdGxvYWQ6IGxvYWRfMVxufTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSovXG5cblxuXG5cblxudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIENIQVJfQk9NICAgICAgICAgICAgICAgICAgPSAweEZFRkY7XG52YXIgQ0hBUl9UQUIgICAgICAgICAgICAgICAgICA9IDB4MDk7IC8qIFRhYiAqL1xudmFyIENIQVJfTElORV9GRUVEICAgICAgICAgICAgPSAweDBBOyAvKiBMRiAqL1xudmFyIENIQVJfQ0FSUklBR0VfUkVUVVJOICAgICAgPSAweDBEOyAvKiBDUiAqL1xudmFyIENIQVJfU1BBQ0UgICAgICAgICAgICAgICAgPSAweDIwOyAvKiBTcGFjZSAqL1xudmFyIENIQVJfRVhDTEFNQVRJT04gICAgICAgICAgPSAweDIxOyAvKiAhICovXG52YXIgQ0hBUl9ET1VCTEVfUVVPVEUgICAgICAgICA9IDB4MjI7IC8qIFwiICovXG52YXIgQ0hBUl9TSEFSUCAgICAgICAgICAgICAgICA9IDB4MjM7IC8qICMgKi9cbnZhciBDSEFSX1BFUkNFTlQgICAgICAgICAgICAgID0gMHgyNTsgLyogJSAqL1xudmFyIENIQVJfQU1QRVJTQU5EICAgICAgICAgICAgPSAweDI2OyAvKiAmICovXG52YXIgQ0hBUl9TSU5HTEVfUVVPVEUgICAgICAgICA9IDB4Mjc7IC8qICcgKi9cbnZhciBDSEFSX0FTVEVSSVNLICAgICAgICAgICAgID0gMHgyQTsgLyogKiAqL1xudmFyIENIQVJfQ09NTUEgICAgICAgICAgICAgICAgPSAweDJDOyAvKiAsICovXG52YXIgQ0hBUl9NSU5VUyAgICAgICAgICAgICAgICA9IDB4MkQ7IC8qIC0gKi9cbnZhciBDSEFSX0NPTE9OICAgICAgICAgICAgICAgID0gMHgzQTsgLyogOiAqL1xudmFyIENIQVJfRVFVQUxTICAgICAgICAgICAgICAgPSAweDNEOyAvKiA9ICovXG52YXIgQ0hBUl9HUkVBVEVSX1RIQU4gICAgICAgICA9IDB4M0U7IC8qID4gKi9cbnZhciBDSEFSX1FVRVNUSU9OICAgICAgICAgICAgID0gMHgzRjsgLyogPyAqL1xudmFyIENIQVJfQ09NTUVSQ0lBTF9BVCAgICAgICAgPSAweDQwOyAvKiBAICovXG52YXIgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUICA9IDB4NUI7IC8qIFsgKi9cbnZhciBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUID0gMHg1RDsgLyogXSAqL1xudmFyIENIQVJfR1JBVkVfQUNDRU5UICAgICAgICAgPSAweDYwOyAvKiBgICovXG52YXIgQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVQgICA9IDB4N0I7IC8qIHsgKi9cbnZhciBDSEFSX1ZFUlRJQ0FMX0xJTkUgICAgICAgID0gMHg3QzsgLyogfCAqL1xudmFyIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCAgPSAweDdEOyAvKiB9ICovXG5cbnZhciBFU0NBUEVfU0VRVUVOQ0VTID0ge307XG5cbkVTQ0FQRV9TRVFVRU5DRVNbMHgwMF0gICA9ICdcXFxcMCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDddICAgPSAnXFxcXGEnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA4XSAgID0gJ1xcXFxiJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwOV0gICA9ICdcXFxcdCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MEFdICAgPSAnXFxcXG4nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBCXSAgID0gJ1xcXFx2JztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQ10gICA9ICdcXFxcZic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MERdICAgPSAnXFxcXHInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDFCXSAgID0gJ1xcXFxlJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMl0gICA9ICdcXFxcXCInO1xuRVNDQVBFX1NFUVVFTkNFU1sweDVDXSAgID0gJ1xcXFxcXFxcJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHg4NV0gICA9ICdcXFxcTic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4QTBdICAgPSAnXFxcXF8nO1xuRVNDQVBFX1NFUVVFTkNFU1sweDIwMjhdID0gJ1xcXFxMJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMDI5XSA9ICdcXFxcUCc7XG5cbnZhciBERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWCA9IFtcbiAgJ3knLCAnWScsICd5ZXMnLCAnWWVzJywgJ1lFUycsICdvbicsICdPbicsICdPTicsXG4gICduJywgJ04nLCAnbm8nLCAnTm8nLCAnTk8nLCAnb2ZmJywgJ09mZicsICdPRkYnXG5dO1xuXG52YXIgREVQUkVDQVRFRF9CQVNFNjBfU1lOVEFYID0gL15bLStdP1swLTlfXSsoPzo6WzAtOV9dKykrKD86XFwuWzAtOV9dKik/JC87XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZU1hcChzY2hlbWEsIG1hcCkge1xuICB2YXIgcmVzdWx0LCBrZXlzLCBpbmRleCwgbGVuZ3RoLCB0YWcsIHN0eWxlLCB0eXBlO1xuXG4gIGlmIChtYXAgPT09IG51bGwpIHJldHVybiB7fTtcblxuICByZXN1bHQgPSB7fTtcbiAga2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHRhZyA9IGtleXNbaW5kZXhdO1xuICAgIHN0eWxlID0gU3RyaW5nKG1hcFt0YWddKTtcblxuICAgIGlmICh0YWcuc2xpY2UoMCwgMikgPT09ICchIScpIHtcbiAgICAgIHRhZyA9ICd0YWc6eWFtbC5vcmcsMjAwMjonICsgdGFnLnNsaWNlKDIpO1xuICAgIH1cbiAgICB0eXBlID0gc2NoZW1hLmNvbXBpbGVkVHlwZU1hcFsnZmFsbGJhY2snXVt0YWddO1xuXG4gICAgaWYgKHR5cGUgJiYgX2hhc093blByb3BlcnR5LmNhbGwodHlwZS5zdHlsZUFsaWFzZXMsIHN0eWxlKSkge1xuICAgICAgc3R5bGUgPSB0eXBlLnN0eWxlQWxpYXNlc1tzdHlsZV07XG4gICAgfVxuXG4gICAgcmVzdWx0W3RhZ10gPSBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUhleChjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0cmluZywgaGFuZGxlLCBsZW5ndGg7XG5cbiAgc3RyaW5nID0gY2hhcmFjdGVyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgPD0gMHhGRikge1xuICAgIGhhbmRsZSA9ICd4JztcbiAgICBsZW5ndGggPSAyO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkYpIHtcbiAgICBoYW5kbGUgPSAndSc7XG4gICAgbGVuZ3RoID0gNDtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPD0gMHhGRkZGRkZGRikge1xuICAgIGhhbmRsZSA9ICdVJztcbiAgICBsZW5ndGggPSA4O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBleGNlcHRpb24oJ2NvZGUgcG9pbnQgd2l0aGluIGEgc3RyaW5nIG1heSBub3QgYmUgZ3JlYXRlciB0aGFuIDB4RkZGRkZGRkYnKTtcbiAgfVxuXG4gIHJldHVybiAnXFxcXCcgKyBoYW5kbGUgKyBjb21tb24ucmVwZWF0KCcwJywgbGVuZ3RoIC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cblxudmFyIFFVT1RJTkdfVFlQRV9TSU5HTEUgPSAxLFxuICAgIFFVT1RJTkdfVFlQRV9ET1VCTEUgPSAyO1xuXG5mdW5jdGlvbiBTdGF0ZShvcHRpb25zKSB7XG4gIHRoaXMuc2NoZW1hICAgICAgICA9IG9wdGlvbnNbJ3NjaGVtYSddIHx8IF9kZWZhdWx0O1xuICB0aGlzLmluZGVudCAgICAgICAgPSBNYXRoLm1heCgxLCAob3B0aW9uc1snaW5kZW50J10gfHwgMikpO1xuICB0aGlzLm5vQXJyYXlJbmRlbnQgPSBvcHRpb25zWydub0FycmF5SW5kZW50J10gfHwgZmFsc2U7XG4gIHRoaXMuc2tpcEludmFsaWQgICA9IG9wdGlvbnNbJ3NraXBJbnZhbGlkJ10gfHwgZmFsc2U7XG4gIHRoaXMuZmxvd0xldmVsICAgICA9IChjb21tb24uaXNOb3RoaW5nKG9wdGlvbnNbJ2Zsb3dMZXZlbCddKSA/IC0xIDogb3B0aW9uc1snZmxvd0xldmVsJ10pO1xuICB0aGlzLnN0eWxlTWFwICAgICAgPSBjb21waWxlU3R5bGVNYXAodGhpcy5zY2hlbWEsIG9wdGlvbnNbJ3N0eWxlcyddIHx8IG51bGwpO1xuICB0aGlzLnNvcnRLZXlzICAgICAgPSBvcHRpb25zWydzb3J0S2V5cyddIHx8IGZhbHNlO1xuICB0aGlzLmxpbmVXaWR0aCAgICAgPSBvcHRpb25zWydsaW5lV2lkdGgnXSB8fCA4MDtcbiAgdGhpcy5ub1JlZnMgICAgICAgID0gb3B0aW9uc1snbm9SZWZzJ10gfHwgZmFsc2U7XG4gIHRoaXMubm9Db21wYXRNb2RlICA9IG9wdGlvbnNbJ25vQ29tcGF0TW9kZSddIHx8IGZhbHNlO1xuICB0aGlzLmNvbmRlbnNlRmxvdyAgPSBvcHRpb25zWydjb25kZW5zZUZsb3cnXSB8fCBmYWxzZTtcbiAgdGhpcy5xdW90aW5nVHlwZSAgID0gb3B0aW9uc1sncXVvdGluZ1R5cGUnXSA9PT0gJ1wiJyA/IFFVT1RJTkdfVFlQRV9ET1VCTEUgOiBRVU9USU5HX1RZUEVfU0lOR0xFO1xuICB0aGlzLmZvcmNlUXVvdGVzICAgPSBvcHRpb25zWydmb3JjZVF1b3RlcyddIHx8IGZhbHNlO1xuICB0aGlzLnJlcGxhY2VyICAgICAgPSB0eXBlb2Ygb3B0aW9uc1sncmVwbGFjZXInXSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnNbJ3JlcGxhY2VyJ10gOiBudWxsO1xuXG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMuZXhwbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkRXhwbGljaXQ7XG5cbiAgdGhpcy50YWcgPSBudWxsO1xuICB0aGlzLnJlc3VsdCA9ICcnO1xuXG4gIHRoaXMuZHVwbGljYXRlcyA9IFtdO1xuICB0aGlzLnVzZWREdXBsaWNhdGVzID0gbnVsbDtcbn1cblxuLy8gSW5kZW50cyBldmVyeSBsaW5lIGluIGEgc3RyaW5nLiBFbXB0eSBsaW5lcyAoXFxuIG9ubHkpIGFyZSBub3QgaW5kZW50ZWQuXG5mdW5jdGlvbiBpbmRlbnRTdHJpbmcoc3RyaW5nLCBzcGFjZXMpIHtcbiAgdmFyIGluZCA9IGNvbW1vbi5yZXBlYXQoJyAnLCBzcGFjZXMpLFxuICAgICAgcG9zaXRpb24gPSAwLFxuICAgICAgbmV4dCA9IC0xLFxuICAgICAgcmVzdWx0ID0gJycsXG4gICAgICBsaW5lLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICBuZXh0ID0gc3RyaW5nLmluZGV4T2YoJ1xcbicsIHBvc2l0aW9uKTtcbiAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgIGxpbmUgPSBzdHJpbmcuc2xpY2UocG9zaXRpb24pO1xuICAgICAgcG9zaXRpb24gPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgPSBzdHJpbmcuc2xpY2UocG9zaXRpb24sIG5leHQgKyAxKTtcbiAgICAgIHBvc2l0aW9uID0gbmV4dCArIDE7XG4gICAgfVxuXG4gICAgaWYgKGxpbmUubGVuZ3RoICYmIGxpbmUgIT09ICdcXG4nKSByZXN1bHQgKz0gaW5kO1xuXG4gICAgcmVzdWx0ICs9IGxpbmU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCkge1xuICByZXR1cm4gJ1xcbicgKyBjb21tb24ucmVwZWF0KCcgJywgc3RhdGUuaW5kZW50ICogbGV2ZWwpO1xufVxuXG5mdW5jdGlvbiB0ZXN0SW1wbGljaXRSZXNvbHZpbmcoc3RhdGUsIHN0cikge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwgdHlwZTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc3RhdGUuaW1wbGljaXRUeXBlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdHlwZSA9IHN0YXRlLmltcGxpY2l0VHlwZXNbaW5kZXhdO1xuXG4gICAgaWYgKHR5cGUucmVzb2x2ZShzdHIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIFszM10gcy13aGl0ZSA6Oj0gcy1zcGFjZSB8IHMtdGFiXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UoYykge1xuICByZXR1cm4gYyA9PT0gQ0hBUl9TUEFDRSB8fCBjID09PSBDSEFSX1RBQjtcbn1cblxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBjaGFyYWN0ZXIgY2FuIGJlIHByaW50ZWQgd2l0aG91dCBlc2NhcGluZy5cbi8vIEZyb20gWUFNTCAxLjI6IFwiYW55IGFsbG93ZWQgY2hhcmFjdGVycyBrbm93biB0byBiZSBub24tcHJpbnRhYmxlXG4vLyBzaG91bGQgYWxzbyBiZSBlc2NhcGVkLiBbSG93ZXZlcixdIFRoaXMgaXNuXHUyMDE5dCBtYW5kYXRvcnlcIlxuLy8gRGVyaXZlZCBmcm9tIG5iLWNoYXIgLSBcXHQgLSAjeDg1IC0gI3hBMCAtICN4MjAyOCAtICN4MjAyOS5cbmZ1bmN0aW9uIGlzUHJpbnRhYmxlKGMpIHtcbiAgcmV0dXJuICAoMHgwMDAyMCA8PSBjICYmIGMgPD0gMHgwMDAwN0UpXG4gICAgICB8fCAoKDB4MDAwQTEgPD0gYyAmJiBjIDw9IDB4MDBEN0ZGKSAmJiBjICE9PSAweDIwMjggJiYgYyAhPT0gMHgyMDI5KVxuICAgICAgfHwgKCgweDBFMDAwIDw9IGMgJiYgYyA8PSAweDAwRkZGRCkgJiYgYyAhPT0gQ0hBUl9CT00pXG4gICAgICB8fCAgKDB4MTAwMDAgPD0gYyAmJiBjIDw9IDB4MTBGRkZGKTtcbn1cblxuLy8gWzM0XSBucy1jaGFyIDo6PSBuYi1jaGFyIC0gcy13aGl0ZVxuLy8gWzI3XSBuYi1jaGFyIDo6PSBjLXByaW50YWJsZSAtIGItY2hhciAtIGMtYnl0ZS1vcmRlci1tYXJrXG4vLyBbMjZdIGItY2hhciAgOjo9IGItbGluZS1mZWVkIHwgYi1jYXJyaWFnZS1yZXR1cm5cbi8vIEluY2x1ZGluZyBzLXdoaXRlIChmb3Igc29tZSByZWFzb24sIGV4YW1wbGVzIGRvZXNuJ3QgbWF0Y2ggc3BlY3MgaW4gdGhpcyBhc3BlY3QpXG4vLyBucy1jaGFyIDo6PSBjLXByaW50YWJsZSAtIGItbGluZS1mZWVkIC0gYi1jYXJyaWFnZS1yZXR1cm4gLSBjLWJ5dGUtb3JkZXItbWFya1xuZnVuY3Rpb24gaXNOc0NoYXJPcldoaXRlc3BhY2UoYykge1xuICByZXR1cm4gaXNQcmludGFibGUoYylcbiAgICAmJiBjICE9PSBDSEFSX0JPTVxuICAgIC8vIC0gYi1jaGFyXG4gICAgJiYgYyAhPT0gQ0hBUl9DQVJSSUFHRV9SRVRVUk5cbiAgICAmJiBjICE9PSBDSEFSX0xJTkVfRkVFRDtcbn1cblxuLy8gWzEyN10gIG5zLXBsYWluLXNhZmUoYykgOjo9IGMgPSBmbG93LW91dCAgXHUyMUQyIG5zLXBsYWluLXNhZmUtb3V0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGZsb3ctaW4gICBcdTIxRDIgbnMtcGxhaW4tc2FmZS1pblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBibG9jay1rZXkgXHUyMUQyIG5zLXBsYWluLXNhZmUtb3V0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGZsb3cta2V5ICBcdTIxRDIgbnMtcGxhaW4tc2FmZS1pblxuLy8gWzEyOF0gbnMtcGxhaW4tc2FmZS1vdXQgOjo9IG5zLWNoYXJcbi8vIFsxMjldICBucy1wbGFpbi1zYWZlLWluIDo6PSBucy1jaGFyIC0gYy1mbG93LWluZGljYXRvclxuLy8gWzEzMF0gIG5zLXBsYWluLWNoYXIoYykgOjo9ICAoIG5zLXBsYWluLXNhZmUoYykgLSBcdTIwMUM6XHUyMDFEIC0gXHUyMDFDI1x1MjAxRCApXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICggLyogQW4gbnMtY2hhciBwcmVjZWRpbmcgKi8gXHUyMDFDI1x1MjAxRCApXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICggXHUyMDFDOlx1MjAxRCAvKiBGb2xsb3dlZCBieSBhbiBucy1wbGFpbi1zYWZlKGMpICovIClcbmZ1bmN0aW9uIGlzUGxhaW5TYWZlKGMsIHByZXYsIGluYmxvY2spIHtcbiAgdmFyIGNJc05zQ2hhck9yV2hpdGVzcGFjZSA9IGlzTnNDaGFyT3JXaGl0ZXNwYWNlKGMpO1xuICB2YXIgY0lzTnNDaGFyID0gY0lzTnNDaGFyT3JXaGl0ZXNwYWNlICYmICFpc1doaXRlc3BhY2UoYyk7XG4gIHJldHVybiAoXG4gICAgLy8gbnMtcGxhaW4tc2FmZVxuICAgIGluYmxvY2sgPyAvLyBjID0gZmxvdy1pblxuICAgICAgY0lzTnNDaGFyT3JXaGl0ZXNwYWNlXG4gICAgICA6IGNJc05zQ2hhck9yV2hpdGVzcGFjZVxuICAgICAgICAvLyAtIGMtZmxvdy1pbmRpY2F0b3JcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9DT01NQVxuICAgICAgICAmJiBjICE9PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVRcbiAgICAgICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVFxuICAgICAgICAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVFxuICAgICAgICAmJiBjICE9PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVRcbiAgKVxuICAgIC8vIG5zLXBsYWluLWNoYXJcbiAgICAmJiBjICE9PSBDSEFSX1NIQVJQIC8vIGZhbHNlIG9uICcjJ1xuICAgICYmICEocHJldiA9PT0gQ0hBUl9DT0xPTiAmJiAhY0lzTnNDaGFyKSAvLyBmYWxzZSBvbiAnOiAnXG4gICAgfHwgKGlzTnNDaGFyT3JXaGl0ZXNwYWNlKHByZXYpICYmICFpc1doaXRlc3BhY2UocHJldikgJiYgYyA9PT0gQ0hBUl9TSEFSUCkgLy8gY2hhbmdlIHRvIHRydWUgb24gJ1teIF0jJ1xuICAgIHx8IChwcmV2ID09PSBDSEFSX0NPTE9OICYmIGNJc05zQ2hhcik7IC8vIGNoYW5nZSB0byB0cnVlIG9uICc6W14gXSdcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmVGaXJzdChjKSB7XG4gIC8vIFVzZXMgYSBzdWJzZXQgb2YgbnMtY2hhciAtIGMtaW5kaWNhdG9yXG4gIC8vIHdoZXJlIG5zLWNoYXIgPSBuYi1jaGFyIC0gcy13aGl0ZS5cbiAgLy8gTm8gc3VwcG9ydCBvZiAoICggXHUyMDFDP1x1MjAxRCB8IFx1MjAxQzpcdTIwMUQgfCBcdTIwMUMtXHUyMDFEICkgLyogRm9sbG93ZWQgYnkgYW4gbnMtcGxhaW4tc2FmZShjKSkgKi8gKSBwYXJ0XG4gIHJldHVybiBpc1ByaW50YWJsZShjKSAmJiBjICE9PSBDSEFSX0JPTVxuICAgICYmICFpc1doaXRlc3BhY2UoYykgLy8gLSBzLXdoaXRlXG4gICAgLy8gLSAoYy1pbmRpY2F0b3IgOjo9XG4gICAgLy8gXHUyMDFDLVx1MjAxRCB8IFx1MjAxQz9cdTIwMUQgfCBcdTIwMUM6XHUyMDFEIHwgXHUyMDFDLFx1MjAxRCB8IFx1MjAxQ1tcdTIwMUQgfCBcdTIwMUNdXHUyMDFEIHwgXHUyMDFDe1x1MjAxRCB8IFx1MjAxQ31cdTIwMURcbiAgICAmJiBjICE9PSBDSEFSX01JTlVTXG4gICAgJiYgYyAhPT0gQ0hBUl9RVUVTVElPTlxuICAgICYmIGMgIT09IENIQVJfQ09MT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gICAgLy8gfCBcdTIwMUMjXHUyMDFEIHwgXHUyMDFDJlx1MjAxRCB8IFx1MjAxQypcdTIwMUQgfCBcdTIwMUMhXHUyMDFEIHwgXHUyMDFDfFx1MjAxRCB8IFx1MjAxQz1cdTIwMUQgfCBcdTIwMUM+XHUyMDFEIHwgXHUyMDFDJ1x1MjAxRCB8IFx1MjAxQ1wiXHUyMDFEXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUFxuICAgICYmIGMgIT09IENIQVJfQU1QRVJTQU5EXG4gICAgJiYgYyAhPT0gQ0hBUl9BU1RFUklTS1xuICAgICYmIGMgIT09IENIQVJfRVhDTEFNQVRJT05cbiAgICAmJiBjICE9PSBDSEFSX1ZFUlRJQ0FMX0xJTkVcbiAgICAmJiBjICE9PSBDSEFSX0VRVUFMU1xuICAgICYmIGMgIT09IENIQVJfR1JFQVRFUl9USEFOXG4gICAgJiYgYyAhPT0gQ0hBUl9TSU5HTEVfUVVPVEVcbiAgICAmJiBjICE9PSBDSEFSX0RPVUJMRV9RVU9URVxuICAgIC8vIHwgXHUyMDFDJVx1MjAxRCB8IFx1MjAxQ0BcdTIwMUQgfCBcdTIwMUNgXHUyMDFEKVxuICAgICYmIGMgIT09IENIQVJfUEVSQ0VOVFxuICAgICYmIGMgIT09IENIQVJfQ09NTUVSQ0lBTF9BVFxuICAgICYmIGMgIT09IENIQVJfR1JBVkVfQUNDRU5UO1xufVxuXG4vLyBTaW1wbGlmaWVkIHRlc3QgZm9yIHZhbHVlcyBhbGxvd2VkIGFzIHRoZSBsYXN0IGNoYXJhY3RlciBpbiBwbGFpbiBzdHlsZS5cbmZ1bmN0aW9uIGlzUGxhaW5TYWZlTGFzdChjKSB7XG4gIC8vIGp1c3Qgbm90IHdoaXRlc3BhY2Ugb3IgY29sb24sIGl0IHdpbGwgYmUgY2hlY2tlZCB0byBiZSBwbGFpbiBjaGFyYWN0ZXIgbGF0ZXJcbiAgcmV0dXJuICFpc1doaXRlc3BhY2UoYykgJiYgYyAhPT0gQ0hBUl9DT0xPTjtcbn1cblxuLy8gU2FtZSBhcyAnc3RyaW5nJy5jb2RlUG9pbnRBdChwb3MpLCBidXQgd29ya3MgaW4gb2xkZXIgYnJvd3NlcnMuXG5mdW5jdGlvbiBjb2RlUG9pbnRBdChzdHJpbmcsIHBvcykge1xuICB2YXIgZmlyc3QgPSBzdHJpbmcuY2hhckNvZGVBdChwb3MpLCBzZWNvbmQ7XG4gIGlmIChmaXJzdCA+PSAweEQ4MDAgJiYgZmlyc3QgPD0gMHhEQkZGICYmIHBvcyArIDEgPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgc2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zICsgMSk7XG4gICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgLy8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG4gICAgICByZXR1cm4gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpcnN0O1xufVxuXG4vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYmxvY2sgaW5kZW50YXRpb24gaW5kaWNhdG9yIGlzIHJlcXVpcmVkLlxuZnVuY3Rpb24gbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpIHtcbiAgdmFyIGxlYWRpbmdTcGFjZVJlID0gL15cXG4qIC87XG4gIHJldHVybiBsZWFkaW5nU3BhY2VSZS50ZXN0KHN0cmluZyk7XG59XG5cbnZhciBTVFlMRV9QTEFJTiAgID0gMSxcbiAgICBTVFlMRV9TSU5HTEUgID0gMixcbiAgICBTVFlMRV9MSVRFUkFMID0gMyxcbiAgICBTVFlMRV9GT0xERUQgID0gNCxcbiAgICBTVFlMRV9ET1VCTEUgID0gNTtcblxuLy8gRGV0ZXJtaW5lcyB3aGljaCBzY2FsYXIgc3R5bGVzIGFyZSBwb3NzaWJsZSBhbmQgcmV0dXJucyB0aGUgcHJlZmVycmVkIHN0eWxlLlxuLy8gbGluZVdpZHRoID0gLTEgPT4gbm8gbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogc3RyLmxlbmd0aCA+IDAuXG4vLyBQb3N0LWNvbmRpdGlvbnM6XG4vLyAgICBTVFlMRV9QTEFJTiBvciBTVFlMRV9TSU5HTEUgPT4gbm8gXFxuIGFyZSBpbiB0aGUgc3RyaW5nLlxuLy8gICAgU1RZTEVfTElURVJBTCA9PiBubyBsaW5lcyBhcmUgc3VpdGFibGUgZm9yIGZvbGRpbmcgKG9yIGxpbmVXaWR0aCBpcyAtMSkuXG4vLyAgICBTVFlMRV9GT0xERUQgPT4gYSBsaW5lID4gbGluZVdpZHRoIGFuZCBjYW4gYmUgZm9sZGVkIChhbmQgbGluZVdpZHRoICE9IC0xKS5cbmZ1bmN0aW9uIGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIGluZGVudFBlckxldmVsLCBsaW5lV2lkdGgsXG4gIHRlc3RBbWJpZ3VvdXNUeXBlLCBxdW90aW5nVHlwZSwgZm9yY2VRdW90ZXMsIGluYmxvY2spIHtcblxuICB2YXIgaTtcbiAgdmFyIGNoYXIgPSAwO1xuICB2YXIgcHJldkNoYXIgPSBudWxsO1xuICB2YXIgaGFzTGluZUJyZWFrID0gZmFsc2U7XG4gIHZhciBoYXNGb2xkYWJsZUxpbmUgPSBmYWxzZTsgLy8gb25seSBjaGVja2VkIGlmIHNob3VsZFRyYWNrV2lkdGhcbiAgdmFyIHNob3VsZFRyYWNrV2lkdGggPSBsaW5lV2lkdGggIT09IC0xO1xuICB2YXIgcHJldmlvdXNMaW5lQnJlYWsgPSAtMTsgLy8gY291bnQgdGhlIGZpcnN0IGxpbmUgY29ycmVjdGx5XG4gIHZhciBwbGFpbiA9IGlzUGxhaW5TYWZlRmlyc3QoY29kZVBvaW50QXQoc3RyaW5nLCAwKSlcbiAgICAgICAgICAmJiBpc1BsYWluU2FmZUxhc3QoY29kZVBvaW50QXQoc3RyaW5nLCBzdHJpbmcubGVuZ3RoIC0gMSkpO1xuXG4gIGlmIChzaW5nbGVMaW5lT25seSB8fCBmb3JjZVF1b3Rlcykge1xuICAgIC8vIENhc2U6IG5vIGJsb2NrIHN0eWxlcy5cbiAgICAvLyBDaGVjayBmb3IgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzIHRvIHJ1bGUgb3V0IHBsYWluIGFuZCBzaW5nbGUuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gMHgxMDAwMCA/IGkgKz0gMiA6IGkrKykge1xuICAgICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgICBpZiAoIWlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gICAgICB9XG4gICAgICBwbGFpbiA9IHBsYWluICYmIGlzUGxhaW5TYWZlKGNoYXIsIHByZXZDaGFyLCBpbmJsb2NrKTtcbiAgICAgIHByZXZDaGFyID0gY2hhcjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FzZTogYmxvY2sgc3R5bGVzIHBlcm1pdHRlZC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSAweDEwMDAwID8gaSArPSAyIDogaSsrKSB7XG4gICAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICAgIGlmIChjaGFyID09PSBDSEFSX0xJTkVfRkVFRCkge1xuICAgICAgICBoYXNMaW5lQnJlYWsgPSB0cnVlO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgbGluZSBjYW4gYmUgZm9sZGVkLlxuICAgICAgICBpZiAoc2hvdWxkVHJhY2tXaWR0aCkge1xuICAgICAgICAgIGhhc0ZvbGRhYmxlTGluZSA9IGhhc0ZvbGRhYmxlTGluZSB8fFxuICAgICAgICAgICAgLy8gRm9sZGFibGUgbGluZSA9IHRvbyBsb25nLCBhbmQgbm90IG1vcmUtaW5kZW50ZWQuXG4gICAgICAgICAgICAoaSAtIHByZXZpb3VzTGluZUJyZWFrIC0gMSA+IGxpbmVXaWR0aCAmJlxuICAgICAgICAgICAgIHN0cmluZ1twcmV2aW91c0xpbmVCcmVhayArIDFdICE9PSAnICcpO1xuICAgICAgICAgIHByZXZpb3VzTGluZUJyZWFrID0gaTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhciwgcHJldkNoYXIsIGluYmxvY2spO1xuICAgICAgcHJldkNoYXIgPSBjaGFyO1xuICAgIH1cbiAgICAvLyBpbiBjYXNlIHRoZSBlbmQgaXMgbWlzc2luZyBhIFxcblxuICAgIGhhc0ZvbGRhYmxlTGluZSA9IGhhc0ZvbGRhYmxlTGluZSB8fCAoc2hvdWxkVHJhY2tXaWR0aCAmJlxuICAgICAgKGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiZcbiAgICAgICBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gJyAnKSk7XG4gIH1cbiAgLy8gQWx0aG91Z2ggZXZlcnkgc3R5bGUgY2FuIHJlcHJlc2VudCBcXG4gd2l0aG91dCBlc2NhcGluZywgcHJlZmVyIGJsb2NrIHN0eWxlc1xuICAvLyBmb3IgbXVsdGlsaW5lLCBzaW5jZSB0aGV5J3JlIG1vcmUgcmVhZGFibGUgYW5kIHRoZXkgZG9uJ3QgYWRkIGVtcHR5IGxpbmVzLlxuICAvLyBBbHNvIHByZWZlciBmb2xkaW5nIGEgc3VwZXItbG9uZyBsaW5lLlxuICBpZiAoIWhhc0xpbmVCcmVhayAmJiAhaGFzRm9sZGFibGVMaW5lKSB7XG4gICAgLy8gU3RyaW5ncyBpbnRlcnByZXRhYmxlIGFzIGFub3RoZXIgdHlwZSBoYXZlIHRvIGJlIHF1b3RlZDtcbiAgICAvLyBlLmcuIHRoZSBzdHJpbmcgJ3RydWUnIHZzLiB0aGUgYm9vbGVhbiB0cnVlLlxuICAgIGlmIChwbGFpbiAmJiAhZm9yY2VRdW90ZXMgJiYgIXRlc3RBbWJpZ3VvdXNUeXBlKHN0cmluZykpIHtcbiAgICAgIHJldHVybiBTVFlMRV9QTEFJTjtcbiAgICB9XG4gICAgcmV0dXJuIHF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gU1RZTEVfRE9VQkxFIDogU1RZTEVfU0lOR0xFO1xuICB9XG4gIC8vIEVkZ2UgY2FzZTogYmxvY2sgaW5kZW50YXRpb24gaW5kaWNhdG9yIGNhbiBvbmx5IGhhdmUgb25lIGRpZ2l0LlxuICBpZiAoaW5kZW50UGVyTGV2ZWwgPiA5ICYmIG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSkge1xuICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gIH1cbiAgLy8gQXQgdGhpcyBwb2ludCB3ZSBrbm93IGJsb2NrIHN0eWxlcyBhcmUgdmFsaWQuXG4gIC8vIFByZWZlciBsaXRlcmFsIHN0eWxlIHVubGVzcyB3ZSB3YW50IHRvIGZvbGQuXG4gIGlmICghZm9yY2VRdW90ZXMpIHtcbiAgICByZXR1cm4gaGFzRm9sZGFibGVMaW5lID8gU1RZTEVfRk9MREVEIDogU1RZTEVfTElURVJBTDtcbiAgfVxuICByZXR1cm4gcXVvdGluZ1R5cGUgPT09IFFVT1RJTkdfVFlQRV9ET1VCTEUgPyBTVFlMRV9ET1VCTEUgOiBTVFlMRV9TSU5HTEU7XG59XG5cbi8vIE5vdGU6IGxpbmUgYnJlYWtpbmcvZm9sZGluZyBpcyBpbXBsZW1lbnRlZCBmb3Igb25seSB0aGUgZm9sZGVkIHN0eWxlLlxuLy8gTkIuIFdlIGRyb3AgdGhlIGxhc3QgdHJhaWxpbmcgbmV3bGluZSAoaWYgYW55KSBvZiBhIHJldHVybmVkIGJsb2NrIHNjYWxhclxuLy8gIHNpbmNlIHRoZSBkdW1wZXIgYWRkcyBpdHMgb3duIG5ld2xpbmUuIFRoaXMgYWx3YXlzIHdvcmtzOlxuLy8gICAgXHUyMDIyIE5vIGVuZGluZyBuZXdsaW5lID0+IHVuYWZmZWN0ZWQ7IGFscmVhZHkgdXNpbmcgc3RyaXAgXCItXCIgY2hvbXBpbmcuXG4vLyAgICBcdTIwMjIgRW5kaW5nIG5ld2xpbmUgICAgPT4gcmVtb3ZlZCB0aGVuIHJlc3RvcmVkLlxuLy8gIEltcG9ydGFudGx5LCB0aGlzIGtlZXBzIHRoZSBcIitcIiBjaG9tcCBpbmRpY2F0b3IgZnJvbSBnYWluaW5nIGFuIGV4dHJhIGxpbmUuXG5mdW5jdGlvbiB3cml0ZVNjYWxhcihzdGF0ZSwgc3RyaW5nLCBsZXZlbCwgaXNrZXksIGluYmxvY2spIHtcbiAgc3RhdGUuZHVtcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBzdGF0ZS5xdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/ICdcIlwiJyA6IFwiJydcIjtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5ub0NvbXBhdE1vZGUpIHtcbiAgICAgIGlmIChERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWC5pbmRleE9mKHN0cmluZykgIT09IC0xIHx8IERFUFJFQ0FURURfQkFTRTYwX1NZTlRBWC50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gKCdcIicgKyBzdHJpbmcgKyAnXCInKSA6IChcIidcIiArIHN0cmluZyArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaW5kZW50ID0gc3RhdGUuaW5kZW50ICogTWF0aC5tYXgoMSwgbGV2ZWwpOyAvLyBubyAwLWluZGVudCBzY2FsYXJzXG4gICAgLy8gQXMgaW5kZW50YXRpb24gZ2V0cyBkZWVwZXIsIGxldCB0aGUgd2lkdGggZGVjcmVhc2UgbW9ub3RvbmljYWxseVxuICAgIC8vIHRvIHRoZSBsb3dlciBib3VuZCBtaW4oc3RhdGUubGluZVdpZHRoLCA0MCkuXG4gICAgLy8gTm90ZSB0aGF0IHRoaXMgaW1wbGllc1xuICAgIC8vICBzdGF0ZS5saW5lV2lkdGggXHUyMjY0IDQwICsgc3RhdGUuaW5kZW50OiB3aWR0aCBpcyBmaXhlZCBhdCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCA+IDQwICsgc3RhdGUuaW5kZW50OiB3aWR0aCBkZWNyZWFzZXMgdW50aWwgdGhlIGxvd2VyIGJvdW5kLlxuICAgIC8vIFRoaXMgYmVoYXZlcyBiZXR0ZXIgdGhhbiBhIGNvbnN0YW50IG1pbmltdW0gd2lkdGggd2hpY2ggZGlzYWxsb3dzIG5hcnJvd2VyIG9wdGlvbnMsXG4gICAgLy8gb3IgYW4gaW5kZW50IHRocmVzaG9sZCB3aGljaCBjYXVzZXMgdGhlIHdpZHRoIHRvIHN1ZGRlbmx5IGluY3JlYXNlLlxuICAgIHZhciBsaW5lV2lkdGggPSBzdGF0ZS5saW5lV2lkdGggPT09IC0xXG4gICAgICA/IC0xIDogTWF0aC5tYXgoTWF0aC5taW4oc3RhdGUubGluZVdpZHRoLCA0MCksIHN0YXRlLmxpbmVXaWR0aCAtIGluZGVudCk7XG5cbiAgICAvLyBXaXRob3V0IGtub3dpbmcgaWYga2V5cyBhcmUgaW1wbGljaXQvZXhwbGljaXQsIGFzc3VtZSBpbXBsaWNpdCBmb3Igc2FmZXR5LlxuICAgIHZhciBzaW5nbGVMaW5lT25seSA9IGlza2V5XG4gICAgICAvLyBObyBibG9jayBzdHlsZXMgaW4gZmxvdyBtb2RlLlxuICAgICAgfHwgKHN0YXRlLmZsb3dMZXZlbCA+IC0xICYmIGxldmVsID49IHN0YXRlLmZsb3dMZXZlbCk7XG4gICAgZnVuY3Rpb24gdGVzdEFtYmlndWl0eShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB0ZXN0SW1wbGljaXRSZXNvbHZpbmcoc3RhdGUsIHN0cmluZyk7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjaG9vc2VTY2FsYXJTdHlsZShzdHJpbmcsIHNpbmdsZUxpbmVPbmx5LCBzdGF0ZS5pbmRlbnQsIGxpbmVXaWR0aCxcbiAgICAgIHRlc3RBbWJpZ3VpdHksIHN0YXRlLnF1b3RpbmdUeXBlLCBzdGF0ZS5mb3JjZVF1b3RlcyAmJiAhaXNrZXksIGluYmxvY2spKSB7XG5cbiAgICAgIGNhc2UgU1RZTEVfUExBSU46XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICBjYXNlIFNUWUxFX1NJTkdMRTpcbiAgICAgICAgcmV0dXJuIFwiJ1wiICsgc3RyaW5nLnJlcGxhY2UoLycvZywgXCInJ1wiKSArIFwiJ1wiO1xuICAgICAgY2FzZSBTVFlMRV9MSVRFUkFMOlxuICAgICAgICByZXR1cm4gJ3wnICsgYmxvY2tIZWFkZXIoc3RyaW5nLCBzdGF0ZS5pbmRlbnQpXG4gICAgICAgICAgKyBkcm9wRW5kaW5nTmV3bGluZShpbmRlbnRTdHJpbmcoc3RyaW5nLCBpbmRlbnQpKTtcbiAgICAgIGNhc2UgU1RZTEVfRk9MREVEOlxuICAgICAgICByZXR1cm4gJz4nICsgYmxvY2tIZWFkZXIoc3RyaW5nLCBzdGF0ZS5pbmRlbnQpXG4gICAgICAgICAgKyBkcm9wRW5kaW5nTmV3bGluZShpbmRlbnRTdHJpbmcoZm9sZFN0cmluZyhzdHJpbmcsIGxpbmVXaWR0aCksIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9ET1VCTEU6XG4gICAgICAgIHJldHVybiAnXCInICsgZXNjYXBlU3RyaW5nKHN0cmluZykgKyAnXCInO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IGV4Y2VwdGlvbignaW1wb3NzaWJsZSBlcnJvcjogaW52YWxpZCBzY2FsYXIgc3R5bGUnKTtcbiAgICB9XG4gIH0oKSk7XG59XG5cbi8vIFByZS1jb25kaXRpb25zOiBzdHJpbmcgaXMgdmFsaWQgZm9yIGEgYmxvY2sgc2NhbGFyLCAxIDw9IGluZGVudFBlckxldmVsIDw9IDkuXG5mdW5jdGlvbiBibG9ja0hlYWRlcihzdHJpbmcsIGluZGVudFBlckxldmVsKSB7XG4gIHZhciBpbmRlbnRJbmRpY2F0b3IgPSBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykgPyBTdHJpbmcoaW5kZW50UGVyTGV2ZWwpIDogJyc7XG5cbiAgLy8gbm90ZSB0aGUgc3BlY2lhbCBjYXNlOiB0aGUgc3RyaW5nICdcXG4nIGNvdW50cyBhcyBhIFwidHJhaWxpbmdcIiBlbXB0eSBsaW5lLlxuICB2YXIgY2xpcCA9ICAgICAgICAgIHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMV0gPT09ICdcXG4nO1xuICB2YXIga2VlcCA9IGNsaXAgJiYgKHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMl0gPT09ICdcXG4nIHx8IHN0cmluZyA9PT0gJ1xcbicpO1xuICB2YXIgY2hvbXAgPSBrZWVwID8gJysnIDogKGNsaXAgPyAnJyA6ICctJyk7XG5cbiAgcmV0dXJuIGluZGVudEluZGljYXRvciArIGNob21wICsgJ1xcbic7XG59XG5cbi8vIChTZWUgdGhlIG5vdGUgZm9yIHdyaXRlU2NhbGFyLilcbmZ1bmN0aW9uIGRyb3BFbmRpbmdOZXdsaW5lKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJ1xcbicgPyBzdHJpbmcuc2xpY2UoMCwgLTEpIDogc3RyaW5nO1xufVxuXG4vLyBOb3RlOiBhIGxvbmcgbGluZSB3aXRob3V0IGEgc3VpdGFibGUgYnJlYWsgcG9pbnQgd2lsbCBleGNlZWQgdGhlIHdpZHRoIGxpbWl0LlxuLy8gUHJlLWNvbmRpdGlvbnM6IGV2ZXJ5IGNoYXIgaW4gc3RyIGlzUHJpbnRhYmxlLCBzdHIubGVuZ3RoID4gMCwgd2lkdGggPiAwLlxuZnVuY3Rpb24gZm9sZFN0cmluZyhzdHJpbmcsIHdpZHRoKSB7XG4gIC8vIEluIGZvbGRlZCBzdHlsZSwgJGskIGNvbnNlY3V0aXZlIG5ld2xpbmVzIG91dHB1dCBhcyAkaysxJCBuZXdsaW5lc1x1MjAxNFxuICAvLyB1bmxlc3MgdGhleSdyZSBiZWZvcmUgb3IgYWZ0ZXIgYSBtb3JlLWluZGVudGVkIGxpbmUsIG9yIGF0IHRoZSB2ZXJ5XG4gIC8vIGJlZ2lubmluZyBvciBlbmQsIGluIHdoaWNoIGNhc2UgJGskIG1hcHMgdG8gJGskLlxuICAvLyBUaGVyZWZvcmUsIHBhcnNlIGVhY2ggY2h1bmsgYXMgbmV3bGluZShzKSBmb2xsb3dlZCBieSBhIGNvbnRlbnQgbGluZS5cbiAgdmFyIGxpbmVSZSA9IC8oXFxuKykoW15cXG5dKikvZztcblxuICAvLyBmaXJzdCBsaW5lIChwb3NzaWJseSBhbiBlbXB0eSBsaW5lKVxuICB2YXIgcmVzdWx0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV4dExGID0gc3RyaW5nLmluZGV4T2YoJ1xcbicpO1xuICAgIG5leHRMRiA9IG5leHRMRiAhPT0gLTEgPyBuZXh0TEYgOiBzdHJpbmcubGVuZ3RoO1xuICAgIGxpbmVSZS5sYXN0SW5kZXggPSBuZXh0TEY7XG4gICAgcmV0dXJuIGZvbGRMaW5lKHN0cmluZy5zbGljZSgwLCBuZXh0TEYpLCB3aWR0aCk7XG4gIH0oKSk7XG4gIC8vIElmIHdlIGhhdmVuJ3QgcmVhY2hlZCB0aGUgZmlyc3QgY29udGVudCBsaW5lIHlldCwgZG9uJ3QgYWRkIGFuIGV4dHJhIFxcbi5cbiAgdmFyIHByZXZNb3JlSW5kZW50ZWQgPSBzdHJpbmdbMF0gPT09ICdcXG4nIHx8IHN0cmluZ1swXSA9PT0gJyAnO1xuICB2YXIgbW9yZUluZGVudGVkO1xuXG4gIC8vIHJlc3Qgb2YgdGhlIGxpbmVzXG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IGxpbmVSZS5leGVjKHN0cmluZykpKSB7XG4gICAgdmFyIHByZWZpeCA9IG1hdGNoWzFdLCBsaW5lID0gbWF0Y2hbMl07XG4gICAgbW9yZUluZGVudGVkID0gKGxpbmVbMF0gPT09ICcgJyk7XG4gICAgcmVzdWx0ICs9IHByZWZpeFxuICAgICAgKyAoIXByZXZNb3JlSW5kZW50ZWQgJiYgIW1vcmVJbmRlbnRlZCAmJiBsaW5lICE9PSAnJ1xuICAgICAgICA/ICdcXG4nIDogJycpXG4gICAgICArIGZvbGRMaW5lKGxpbmUsIHdpZHRoKTtcbiAgICBwcmV2TW9yZUluZGVudGVkID0gbW9yZUluZGVudGVkO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gR3JlZWR5IGxpbmUgYnJlYWtpbmcuXG4vLyBQaWNrcyB0aGUgbG9uZ2VzdCBsaW5lIHVuZGVyIHRoZSBsaW1pdCBlYWNoIHRpbWUsXG4vLyBvdGhlcndpc2Ugc2V0dGxlcyBmb3IgdGhlIHNob3J0ZXN0IGxpbmUgb3ZlciB0aGUgbGltaXQuXG4vLyBOQi4gTW9yZS1pbmRlbnRlZCBsaW5lcyAqY2Fubm90KiBiZSBmb2xkZWQsIGFzIHRoYXQgd291bGQgYWRkIGFuIGV4dHJhIFxcbi5cbmZ1bmN0aW9uIGZvbGRMaW5lKGxpbmUsIHdpZHRoKSB7XG4gIGlmIChsaW5lID09PSAnJyB8fCBsaW5lWzBdID09PSAnICcpIHJldHVybiBsaW5lO1xuXG4gIC8vIFNpbmNlIGEgbW9yZS1pbmRlbnRlZCBsaW5lIGFkZHMgYSBcXG4sIGJyZWFrcyBjYW4ndCBiZSBmb2xsb3dlZCBieSBhIHNwYWNlLlxuICB2YXIgYnJlYWtSZSA9IC8gW14gXS9nOyAvLyBub3RlOiB0aGUgbWF0Y2ggaW5kZXggd2lsbCBhbHdheXMgYmUgPD0gbGVuZ3RoLTIuXG4gIHZhciBtYXRjaDtcbiAgLy8gc3RhcnQgaXMgYW4gaW5jbHVzaXZlIGluZGV4LiBlbmQsIGN1cnIsIGFuZCBuZXh0IGFyZSBleGNsdXNpdmUuXG4gIHZhciBzdGFydCA9IDAsIGVuZCwgY3VyciA9IDAsIG5leHQgPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgLy8gSW52YXJpYW50czogMCA8PSBzdGFydCA8PSBsZW5ndGgtMS5cbiAgLy8gICAwIDw9IGN1cnIgPD0gbmV4dCA8PSBtYXgoMCwgbGVuZ3RoLTIpLiBjdXJyIC0gc3RhcnQgPD0gd2lkdGguXG4gIC8vIEluc2lkZSB0aGUgbG9vcDpcbiAgLy8gICBBIG1hdGNoIGltcGxpZXMgbGVuZ3RoID49IDIsIHNvIGN1cnIgYW5kIG5leHQgYXJlIDw9IGxlbmd0aC0yLlxuICB3aGlsZSAoKG1hdGNoID0gYnJlYWtSZS5leGVjKGxpbmUpKSkge1xuICAgIG5leHQgPSBtYXRjaC5pbmRleDtcbiAgICAvLyBtYWludGFpbiBpbnZhcmlhbnQ6IGN1cnIgLSBzdGFydCA8PSB3aWR0aFxuICAgIGlmIChuZXh0IC0gc3RhcnQgPiB3aWR0aCkge1xuICAgICAgZW5kID0gKGN1cnIgPiBzdGFydCkgPyBjdXJyIDogbmV4dDsgLy8gZGVyaXZlIGVuZCA8PSBsZW5ndGgtMlxuICAgICAgcmVzdWx0ICs9ICdcXG4nICsgbGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIC8vIHNraXAgdGhlIHNwYWNlIHRoYXQgd2FzIG91dHB1dCBhcyBcXG5cbiAgICAgIHN0YXJ0ID0gZW5kICsgMTsgICAgICAgICAgICAgICAgICAgIC8vIGRlcml2ZSBzdGFydCA8PSBsZW5ndGgtMVxuICAgIH1cbiAgICBjdXJyID0gbmV4dDtcbiAgfVxuXG4gIC8vIEJ5IHRoZSBpbnZhcmlhbnRzLCBzdGFydCA8PSBsZW5ndGgtMSwgc28gdGhlcmUgaXMgc29tZXRoaW5nIGxlZnQgb3Zlci5cbiAgLy8gSXQgaXMgZWl0aGVyIHRoZSB3aG9sZSBzdHJpbmcgb3IgYSBwYXJ0IHN0YXJ0aW5nIGZyb20gbm9uLXdoaXRlc3BhY2UuXG4gIHJlc3VsdCArPSAnXFxuJztcbiAgLy8gSW5zZXJ0IGEgYnJlYWsgaWYgdGhlIHJlbWFpbmRlciBpcyB0b28gbG9uZyBhbmQgdGhlcmUgaXMgYSBicmVhayBhdmFpbGFibGUuXG4gIGlmIChsaW5lLmxlbmd0aCAtIHN0YXJ0ID4gd2lkdGggJiYgY3VyciA+IHN0YXJ0KSB7XG4gICAgcmVzdWx0ICs9IGxpbmUuc2xpY2Uoc3RhcnQsIGN1cnIpICsgJ1xcbicgKyBsaW5lLnNsaWNlKGN1cnIgKyAxKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgKz0gbGluZS5zbGljZShzdGFydCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LnNsaWNlKDEpOyAvLyBkcm9wIGV4dHJhIFxcbiBqb2luZXJcbn1cblxuLy8gRXNjYXBlcyBhIGRvdWJsZS1xdW90ZWQgc3RyaW5nLlxuZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBjaGFyID0gMDtcbiAgdmFyIGVzY2FwZVNlcTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gMHgxMDAwMCA/IGkgKz0gMiA6IGkrKykge1xuICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgIGVzY2FwZVNlcSA9IEVTQ0FQRV9TRVFVRU5DRVNbY2hhcl07XG5cbiAgICBpZiAoIWVzY2FwZVNlcSAmJiBpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgcmVzdWx0ICs9IHN0cmluZ1tpXTtcbiAgICAgIGlmIChjaGFyID49IDB4MTAwMDApIHJlc3VsdCArPSBzdHJpbmdbaSArIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gZXNjYXBlU2VxIHx8IGVuY29kZUhleChjaGFyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgdmFsdWU7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdmFsdWUgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgICB2YWx1ZSA9IHN0YXRlLnJlcGxhY2VyLmNhbGwob2JqZWN0LCBTdHJpbmcoaW5kZXgpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gV3JpdGUgb25seSB2YWxpZCBlbGVtZW50cywgcHV0IG51bGwgaW5zdGVhZCBvZiBpbnZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCB2YWx1ZSwgZmFsc2UsIGZhbHNlKSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgbnVsbCwgZmFsc2UsIGZhbHNlKSkpIHtcblxuICAgICAgaWYgKF9yZXN1bHQgIT09ICcnKSBfcmVzdWx0ICs9ICcsJyArICghc3RhdGUuY29uZGVuc2VGbG93ID8gJyAnIDogJycpO1xuICAgICAgX3Jlc3VsdCArPSBzdGF0ZS5kdW1wO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSAnWycgKyBfcmVzdWx0ICsgJ10nO1xufVxuXG5mdW5jdGlvbiB3cml0ZUJsb2NrU2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QsIGNvbXBhY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIHZhbHVlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHZhbHVlID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgU3RyaW5nKGluZGV4KSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMsIHB1dCBudWxsIGluc3RlYWQgb2YgaW52YWxpZCBlbGVtZW50cy5cbiAgICBpZiAod3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIHZhbHVlLCB0cnVlLCB0cnVlLCBmYWxzZSwgdHJ1ZSkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBudWxsLCB0cnVlLCB0cnVlLCBmYWxzZSwgdHJ1ZSkpKSB7XG5cbiAgICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSAnJykge1xuICAgICAgICBfcmVzdWx0ICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBfcmVzdWx0ICs9ICctJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0gJztcbiAgICAgIH1cblxuICAgICAgX3Jlc3VsdCArPSBzdGF0ZS5kdW1wO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSBfcmVzdWx0IHx8ICdbXSc7IC8vIEVtcHR5IHNlcXVlbmNlIGlmIG5vIHZhbGlkIHZhbHVlcy5cbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93TWFwcGluZyhzdGF0ZSwgbGV2ZWwsIG9iamVjdCkge1xuICB2YXIgX3Jlc3VsdCAgICAgICA9ICcnLFxuICAgICAgX3RhZyAgICAgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGgsXG4gICAgICBvYmplY3RLZXksXG4gICAgICBvYmplY3RWYWx1ZSxcbiAgICAgIHBhaXJCdWZmZXI7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuXG4gICAgcGFpckJ1ZmZlciA9ICcnO1xuICAgIGlmIChfcmVzdWx0ICE9PSAnJykgcGFpckJ1ZmZlciArPSAnLCAnO1xuXG4gICAgaWYgKHN0YXRlLmNvbmRlbnNlRmxvdykgcGFpckJ1ZmZlciArPSAnXCInO1xuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RLZXksIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5O1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpIHBhaXJCdWZmZXIgKz0gJz8gJztcblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcCArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnXCInIDogJycpICsgJzonICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/ICcnIDogJyAnKTtcblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0VmFsdWUsIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQgdmFsdWUuXG4gICAgfVxuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuXG4gICAgLy8gQm90aCBrZXkgYW5kIHZhbHVlIGFyZSB2YWxpZC5cbiAgICBfcmVzdWx0ICs9IHBhaXJCdWZmZXI7XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gJ3snICsgX3Jlc3VsdCArICd9Jztcbn1cblxuZnVuY3Rpb24gd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBvYmplY3QsIGNvbXBhY3QpIHtcbiAgdmFyIF9yZXN1bHQgICAgICAgPSAnJyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgb2JqZWN0S2V5LFxuICAgICAgb2JqZWN0VmFsdWUsXG4gICAgICBleHBsaWNpdFBhaXIsXG4gICAgICBwYWlyQnVmZmVyO1xuXG4gIC8vIEFsbG93IHNvcnRpbmcga2V5cyBzbyB0aGF0IHRoZSBvdXRwdXQgZmlsZSBpcyBkZXRlcm1pbmlzdGljXG4gIGlmIChzdGF0ZS5zb3J0S2V5cyA9PT0gdHJ1ZSkge1xuICAgIC8vIERlZmF1bHQgc29ydGluZ1xuICAgIG9iamVjdEtleUxpc3Quc29ydCgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzdGF0ZS5zb3J0S2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEN1c3RvbSBzb3J0IGZ1bmN0aW9uXG4gICAgb2JqZWN0S2V5TGlzdC5zb3J0KHN0YXRlLnNvcnRLZXlzKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5zb3J0S2V5cykge1xuICAgIC8vIFNvbWV0aGluZyBpcyB3cm9uZ1xuICAgIHRocm93IG5ldyBleGNlcHRpb24oJ3NvcnRLZXlzIG11c3QgYmUgYSBib29sZWFuIG9yIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3RLZXlMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyQnVmZmVyID0gJyc7XG5cbiAgICBpZiAoIWNvbXBhY3QgfHwgX3Jlc3VsdCAhPT0gJycpIHtcbiAgICAgIHBhaXJCdWZmZXIgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgIH1cblxuICAgIG9iamVjdEtleSA9IG9iamVjdEtleUxpc3RbaW5kZXhdO1xuICAgIG9iamVjdFZhbHVlID0gb2JqZWN0W29iamVjdEtleV07XG5cbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIG9iamVjdFZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIG9iamVjdEtleSwgb2JqZWN0VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIG9iamVjdEtleSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5LlxuICAgIH1cblxuICAgIGV4cGxpY2l0UGFpciA9IChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHx8XG4gICAgICAgICAgICAgICAgICAgKHN0YXRlLmR1bXAgJiYgc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KTtcblxuICAgIGlmIChleHBsaWNpdFBhaXIpIHtcbiAgICAgIGlmIChzdGF0ZS5kdW1wICYmIENIQVJfTElORV9GRUVEID09PSBzdGF0ZS5kdW1wLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgcGFpckJ1ZmZlciArPSAnPyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/ICc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0VmFsdWUsIHRydWUsIGV4cGxpY2l0UGFpcikpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQgdmFsdWUuXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhaXJCdWZmZXIgKz0gJzogJztcbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICAvLyBCb3RoIGtleSBhbmQgdmFsdWUgYXJlIHZhbGlkLlxuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSBfcmVzdWx0IHx8ICd7fSc7IC8vIEVtcHR5IG1hcHBpbmcgaWYgbm8gdmFsaWQgcGFpcnMuXG59XG5cbmZ1bmN0aW9uIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgZXhwbGljaXQpIHtcbiAgdmFyIF9yZXN1bHQsIHR5cGVMaXN0LCBpbmRleCwgbGVuZ3RoLCB0eXBlLCBzdHlsZTtcblxuICB0eXBlTGlzdCA9IGV4cGxpY2l0ID8gc3RhdGUuZXhwbGljaXRUeXBlcyA6IHN0YXRlLmltcGxpY2l0VHlwZXM7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHR5cGVMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gdHlwZUxpc3RbaW5kZXhdO1xuXG4gICAgaWYgKCh0eXBlLmluc3RhbmNlT2YgIHx8IHR5cGUucHJlZGljYXRlKSAmJlxuICAgICAgICAoIXR5cGUuaW5zdGFuY2VPZiB8fCAoKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSAmJiAob2JqZWN0IGluc3RhbmNlb2YgdHlwZS5pbnN0YW5jZU9mKSkpICYmXG4gICAgICAgICghdHlwZS5wcmVkaWNhdGUgIHx8IHR5cGUucHJlZGljYXRlKG9iamVjdCkpKSB7XG5cbiAgICAgIGlmIChleHBsaWNpdCkge1xuICAgICAgICBpZiAodHlwZS5tdWx0aSAmJiB0eXBlLnJlcHJlc2VudE5hbWUpIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSB0eXBlLnJlcHJlc2VudE5hbWUob2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSB0eXBlLnRhZztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZS5yZXByZXNlbnQpIHtcbiAgICAgICAgc3R5bGUgPSBzdGF0ZS5zdHlsZU1hcFt0eXBlLnRhZ10gfHwgdHlwZS5kZWZhdWx0U3R5bGU7XG5cbiAgICAgICAgaWYgKF90b1N0cmluZy5jYWxsKHR5cGUucmVwcmVzZW50KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICAgIF9yZXN1bHQgPSB0eXBlLnJlcHJlc2VudChvYmplY3QsIHN0eWxlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlLnJlcHJlc2VudCwgc3R5bGUpKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50W3N0eWxlXShvYmplY3QsIHN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCchPCcgKyB0eXBlLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZHVtcCA9IF9yZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gU2VyaWFsaXplcyBgb2JqZWN0YCBhbmQgd3JpdGVzIGl0IHRvIGdsb2JhbCBgcmVzdWx0YC5cbi8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvciBmYWxzZSBvbiBpbnZhbGlkIG9iamVjdC5cbi8vXG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSwgaXNibG9ja3NlcSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuXG4gIGlmICghZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBmYWxzZSkpIHtcbiAgICBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIHRydWUpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcbiAgdmFyIGluYmxvY2sgPSBibG9jaztcbiAgdmFyIHRhZ1N0cjtcblxuICBpZiAoYmxvY2spIHtcbiAgICBibG9jayA9IChzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsKTtcbiAgfVxuXG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGR1cGxpY2F0ZUluZGV4LFxuICAgICAgZHVwbGljYXRlO1xuXG4gIGlmIChvYmplY3RPckFycmF5KSB7XG4gICAgZHVwbGljYXRlSW5kZXggPSBzdGF0ZS5kdXBsaWNhdGVzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBkdXBsaWNhdGUgPSBkdXBsaWNhdGVJbmRleCAhPT0gLTE7XG4gIH1cblxuICBpZiAoKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHwgZHVwbGljYXRlIHx8IChzdGF0ZS5pbmRlbnQgIT09IDIgJiYgbGV2ZWwgPiAwKSkge1xuICAgIGNvbXBhY3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChkdXBsaWNhdGUgJiYgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgc3RhdGUuZHVtcCA9ICcqcmVmXycgKyBkdXBsaWNhdGVJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2JqZWN0T3JBcnJheSAmJiBkdXBsaWNhdGUgJiYgIXN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSkge1xuICAgICAgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgaWYgKHN0YXRlLm5vQXJyYXlJbmRlbnQgJiYgIWlzYmxvY2tzZXEgJiYgbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCAtIDEsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAgIHdyaXRlU2NhbGFyKHN0YXRlLCBzdGF0ZS5kdW1wLCBsZXZlbCwgaXNrZXksIGluYmxvY2spO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnNraXBJbnZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCd1bmFjY2VwdGFibGUga2luZCBvZiBhbiBvYmplY3QgdG8gZHVtcCAnICsgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/Jykge1xuICAgICAgLy8gTmVlZCB0byBlbmNvZGUgYWxsIGNoYXJhY3RlcnMgZXhjZXB0IHRob3NlIGFsbG93ZWQgYnkgdGhlIHNwZWM6XG4gICAgICAvL1xuICAgICAgLy8gWzM1XSBucy1kZWMtZGlnaXQgICAgOjo9ICBbI3gzMC0jeDM5XSAvKiAwLTkgKi9cbiAgICAgIC8vIFszNl0gbnMtaGV4LWRpZ2l0ICAgIDo6PSAgbnMtZGVjLWRpZ2l0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB8IFsjeDQxLSN4NDZdIC8qIEEtRiAqLyB8IFsjeDYxLSN4NjZdIC8qIGEtZiAqL1xuICAgICAgLy8gWzM3XSBucy1hc2NpaS1sZXR0ZXIgOjo9ICBbI3g0MS0jeDVBXSAvKiBBLVogKi8gfCBbI3g2MS0jeDdBXSAvKiBhLXogKi9cbiAgICAgIC8vIFszOF0gbnMtd29yZC1jaGFyICAgIDo6PSAgbnMtZGVjLWRpZ2l0IHwgbnMtYXNjaWktbGV0dGVyIHwgXHUyMDFDLVx1MjAxRFxuICAgICAgLy8gWzM5XSBucy11cmktY2hhciAgICAgOjo9ICBcdTIwMUMlXHUyMDFEIG5zLWhleC1kaWdpdCBucy1oZXgtZGlnaXQgfCBucy13b3JkLWNoYXIgfCBcdTIwMUMjXHUyMDFEXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB8IFx1MjAxQztcdTIwMUQgfCBcdTIwMUMvXHUyMDFEIHwgXHUyMDFDP1x1MjAxRCB8IFx1MjAxQzpcdTIwMUQgfCBcdTIwMUNAXHUyMDFEIHwgXHUyMDFDJlx1MjAxRCB8IFx1MjAxQz1cdTIwMUQgfCBcdTIwMUMrXHUyMDFEIHwgXHUyMDFDJFx1MjAxRCB8IFx1MjAxQyxcdTIwMURcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHwgXHUyMDFDX1x1MjAxRCB8IFx1MjAxQy5cdTIwMUQgfCBcdTIwMUMhXHUyMDFEIHwgXHUyMDFDflx1MjAxRCB8IFx1MjAxQypcdTIwMUQgfCBcdTIwMUMnXHUyMDFEIHwgXHUyMDFDKFx1MjAxRCB8IFx1MjAxQylcdTIwMUQgfCBcdTIwMUNbXHUyMDFEIHwgXHUyMDFDXVx1MjAxRFxuICAgICAgLy9cbiAgICAgIC8vIEFsc28gbmVlZCB0byBlbmNvZGUgJyEnIGJlY2F1c2UgaXQgaGFzIHNwZWNpYWwgbWVhbmluZyAoZW5kIG9mIHRhZyBwcmVmaXgpLlxuICAgICAgLy9cbiAgICAgIHRhZ1N0ciA9IGVuY29kZVVSSShcbiAgICAgICAgc3RhdGUudGFnWzBdID09PSAnIScgPyBzdGF0ZS50YWcuc2xpY2UoMSkgOiBzdGF0ZS50YWdcbiAgICAgICkucmVwbGFjZSgvIS9nLCAnJTIxJyk7XG5cbiAgICAgIGlmIChzdGF0ZS50YWdbMF0gPT09ICchJykge1xuICAgICAgICB0YWdTdHIgPSAnIScgKyB0YWdTdHI7XG4gICAgICB9IGVsc2UgaWYgKHRhZ1N0ci5zbGljZSgwLCAxOCkgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjonKSB7XG4gICAgICAgIHRhZ1N0ciA9ICchIScgKyB0YWdTdHIuc2xpY2UoMTgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFnU3RyID0gJyE8JyArIHRhZ1N0ciArICc+JztcbiAgICAgIH1cblxuICAgICAgc3RhdGUuZHVtcCA9IHRhZ1N0ciArICcgJyArIHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMob2JqZWN0LCBzdGF0ZSkge1xuICB2YXIgb2JqZWN0cyA9IFtdLFxuICAgICAgZHVwbGljYXRlc0luZGV4ZXMgPSBbXSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGluc3BlY3ROb2RlKG9iamVjdCwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBkdXBsaWNhdGVzSW5kZXhlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgc3RhdGUuZHVwbGljYXRlcy5wdXNoKG9iamVjdHNbZHVwbGljYXRlc0luZGV4ZXNbaW5kZXhdXSk7XG4gIH1cbiAgc3RhdGUudXNlZER1cGxpY2F0ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcykge1xuICB2YXIgb2JqZWN0S2V5TGlzdCxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGlmIChvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICBpbmRleCA9IG9iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChkdXBsaWNhdGVzSW5kZXhlcy5pbmRleE9mKGluZGV4KSA9PT0gLTEpIHtcbiAgICAgICAgZHVwbGljYXRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdHMucHVzaChvYmplY3QpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICAgIGluc3BlY3ROb2RlKG9iamVjdFtpbmRleF0sIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICAgIGluc3BlY3ROb2RlKG9iamVjdFtvYmplY3RLZXlMaXN0W2luZGV4XV0sIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkdW1wJDEoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKG9wdGlvbnMpO1xuXG4gIGlmICghc3RhdGUubm9SZWZzKSBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKGlucHV0LCBzdGF0ZSk7XG5cbiAgdmFyIHZhbHVlID0gaW5wdXQ7XG5cbiAgaWYgKHN0YXRlLnJlcGxhY2VyKSB7XG4gICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKHsgJyc6IHZhbHVlIH0sICcnLCB2YWx1ZSk7XG4gIH1cblxuICBpZiAod3JpdGVOb2RlKHN0YXRlLCAwLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSkpIHJldHVybiBzdGF0ZS5kdW1wICsgJ1xcbic7XG5cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgZHVtcF8xID0gZHVtcCQxO1xuXG52YXIgZHVtcGVyID0ge1xuXHRkdW1wOiBkdW1wXzFcbn07XG5cbmZ1bmN0aW9uIHJlbmFtZWQoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIHlhbWwuJyArIGZyb20gKyAnIGlzIHJlbW92ZWQgaW4ganMteWFtbCA0LiAnICtcbiAgICAgICdVc2UgeWFtbC4nICsgdG8gKyAnIGluc3RlYWQsIHdoaWNoIGlzIG5vdyBzYWZlIGJ5IGRlZmF1bHQuJyk7XG4gIH07XG59XG5cblxudmFyIFR5cGUgICAgICAgICAgICAgICAgPSB0eXBlO1xudmFyIFNjaGVtYSAgICAgICAgICAgICAgPSBzY2hlbWE7XG52YXIgRkFJTFNBRkVfU0NIRU1BICAgICA9IGZhaWxzYWZlO1xudmFyIEpTT05fU0NIRU1BICAgICAgICAgPSBqc29uO1xudmFyIENPUkVfU0NIRU1BICAgICAgICAgPSBjb3JlO1xudmFyIERFRkFVTFRfU0NIRU1BICAgICAgPSBfZGVmYXVsdDtcbnZhciBsb2FkICAgICAgICAgICAgICAgID0gbG9hZGVyLmxvYWQ7XG52YXIgbG9hZEFsbCAgICAgICAgICAgICA9IGxvYWRlci5sb2FkQWxsO1xudmFyIGR1bXAgICAgICAgICAgICAgICAgPSBkdW1wZXIuZHVtcDtcbnZhciBZQU1MRXhjZXB0aW9uICAgICAgID0gZXhjZXB0aW9uO1xuXG4vLyBSZS1leHBvcnQgYWxsIHR5cGVzIGluIGNhc2UgdXNlciB3YW50cyB0byBjcmVhdGUgY3VzdG9tIHNjaGVtYVxudmFyIHR5cGVzID0ge1xuICBiaW5hcnk6ICAgIGJpbmFyeSxcbiAgZmxvYXQ6ICAgICBmbG9hdCxcbiAgbWFwOiAgICAgICBtYXAsXG4gIG51bGw6ICAgICAgX251bGwsXG4gIHBhaXJzOiAgICAgcGFpcnMsXG4gIHNldDogICAgICAgc2V0LFxuICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgYm9vbDogICAgICBib29sLFxuICBpbnQ6ICAgICAgIGludCxcbiAgbWVyZ2U6ICAgICBtZXJnZSxcbiAgb21hcDogICAgICBvbWFwLFxuICBzZXE6ICAgICAgIHNlcSxcbiAgc3RyOiAgICAgICBzdHJcbn07XG5cbi8vIFJlbW92ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAzLjAueFxudmFyIHNhZmVMb2FkICAgICAgICAgICAgPSByZW5hbWVkKCdzYWZlTG9hZCcsICdsb2FkJyk7XG52YXIgc2FmZUxvYWRBbGwgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkQWxsJywgJ2xvYWRBbGwnKTtcbnZhciBzYWZlRHVtcCAgICAgICAgICAgID0gcmVuYW1lZCgnc2FmZUR1bXAnLCAnZHVtcCcpO1xuXG52YXIganNZYW1sID0ge1xuXHRUeXBlOiBUeXBlLFxuXHRTY2hlbWE6IFNjaGVtYSxcblx0RkFJTFNBRkVfU0NIRU1BOiBGQUlMU0FGRV9TQ0hFTUEsXG5cdEpTT05fU0NIRU1BOiBKU09OX1NDSEVNQSxcblx0Q09SRV9TQ0hFTUE6IENPUkVfU0NIRU1BLFxuXHRERUZBVUxUX1NDSEVNQTogREVGQVVMVF9TQ0hFTUEsXG5cdGxvYWQ6IGxvYWQsXG5cdGxvYWRBbGw6IGxvYWRBbGwsXG5cdGR1bXA6IGR1bXAsXG5cdFlBTUxFeGNlcHRpb246IFlBTUxFeGNlcHRpb24sXG5cdHR5cGVzOiB0eXBlcyxcblx0c2FmZUxvYWQ6IHNhZmVMb2FkLFxuXHRzYWZlTG9hZEFsbDogc2FmZUxvYWRBbGwsXG5cdHNhZmVEdW1wOiBzYWZlRHVtcFxufTtcblxuZXhwb3J0IGRlZmF1bHQganNZYW1sO1xuZXhwb3J0IHsgQ09SRV9TQ0hFTUEsIERFRkFVTFRfU0NIRU1BLCBGQUlMU0FGRV9TQ0hFTUEsIEpTT05fU0NIRU1BLCBTY2hlbWEsIFR5cGUsIFlBTUxFeGNlcHRpb24sIGR1bXAsIGxvYWQsIGxvYWRBbGwsIHNhZmVEdW1wLCBzYWZlTG9hZCwgc2FmZUxvYWRBbGwsIHR5cGVzIH07XG4iLCAiaW1wb3J0IHsgTm90aWNlLCBURmlsZSwgQXBwIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyIH0gZnJvbSBcIi4uL3Byb3ZpZGVyc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNeVBsdWdpblNldHRpbmdzIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgREVGQVVMVF9USVRMRV9QUk9NUFQsIERFRkFVTFRfU1VNTUFSWV9QUk9NUFQsIERFRkFVTFRfWUFNTF9TWVNURU1fTUVTU0FHRSB9IGZyb20gXCIuL3Byb21wdHNcIjtcclxuaW1wb3J0ICogYXMgeWFtbCBmcm9tIFwianMteWFtbFwiO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgVGFibGUgb2YgQ29udGVudHMgZnJvbSBhbGwgaGVhZGVycyBpbiB0aGUgbm90ZS5cclxuICogUmV0dXJucyBhIHN0cmluZyB3aXRoIGluZGVudGVkIGJ1bGxldCBwb2ludHMsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBubyBoZWFkZXJzLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVUYWJsZU9mQ29udGVudHMobm90ZUNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBoZWFkZXJMaW5lcyA9IG5vdGVDb250ZW50LnNwbGl0KCdcXG4nKS5maWx0ZXIobGluZSA9PiAvXiN7MSw2fVxccysuKy8udGVzdChsaW5lKSk7XHJcbiAgICBpZiAoaGVhZGVyTGluZXMubGVuZ3RoID09PSAwKSByZXR1cm4gXCJcIjtcclxuICAgIHJldHVybiBoZWFkZXJMaW5lc1xyXG4gICAgICAgIC5tYXAobGluZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXigjezEsNn0pXFxzKyguKykvKTtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsID0gbWF0Y2hbMV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IG1hdGNoWzJdLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gSW5kZW50IGJhc2VkIG9uIGhlYWRlciBsZXZlbCAoMiBzcGFjZXMgcGVyIGxldmVsIGFmdGVyIEgxKVxyXG4gICAgICAgICAgICByZXR1cm4gYCR7JyAgJy5yZXBlYXQobGV2ZWwgLSAxKX0tICR7dGl0bGV9YDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5qb2luKCdcXG4nKTtcclxufVxyXG5cclxuY29uc3QgREVCVUcgPSB0cnVlO1xyXG5cclxuZnVuY3Rpb24gZGVidWcoLi4uYXJnczogYW55W10pIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0RFQlVHXVwiLCAuLi5hcmdzKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlTm90ZVRpdGxlKFxyXG4gICAgYXBwOiBBcHAsXHJcbiAgICBzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncyxcclxuICAgIHByb2Nlc3NNZXNzYWdlczogKG1lc3NhZ2VzOiBNZXNzYWdlW10pID0+IFByb21pc2U8TWVzc2FnZVtdPlxyXG4pIHtcclxuICAgIGRlYnVnKFwiU3RhcnRpbmcgZ2VuZXJhdGVOb3RlVGl0bGVcIik7XHJcbiAgICBjb25zdCBhY3RpdmVGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcclxuICAgICAgICBuZXcgTm90aWNlKFwiTm8gYWN0aXZlIG5vdGUgZm91bmQuXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBub3RlQ29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGFjdGl2ZUZpbGUpO1xyXG4gICAgbm90ZUNvbnRlbnQgPSBub3RlQ29udGVudC5zbGljZSgwLCAxNTAwMCk7XHJcblxyXG4gICAgLy8gR2VuZXJhdGUgVGFibGUgb2YgQ29udGVudHMgZnJvbSBhbGwgaGVhZGVycyBpbiB0aGUgbm90ZVxyXG4gICAgY29uc3QgdG9jID0gZ2VuZXJhdGVUYWJsZU9mQ29udGVudHMobm90ZUNvbnRlbnQpO1xyXG5cclxuICAgIC8vIFVzZSB0aGUgZGVmYXVsdCB0aXRsZSBwcm9tcHQgZnJvbSBwcm9tcHRzLnRzXHJcbiAgICBjb25zdCBwcm9tcHQgPSBERUZBVUxUX1RJVExFX1BST01QVDtcclxuICAgIGNvbnN0IHVzZXJDb250ZW50ID0gKHRvYyAmJiB0b2MudHJpbSgpLmxlbmd0aCA+IDAgPyBcIlRhYmxlIG9mIENvbnRlbnRzOlxcblwiICsgdG9jICsgXCJcXG5cXG5cIiA6IFwiXCIpICsgbm90ZUNvbnRlbnQ7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBkZWJ1ZyhcIlByb3ZpZGVyOlwiLCBzZXR0aW5ncy5wcm92aWRlcik7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBjcmVhdGVQcm92aWRlcihzZXR0aW5ncyk7XHJcbiAgICAgICAgLy8gQ29tcG9zZSBtZXNzYWdlczogc3lzdGVtID0gcHJvbXB0LCB1c2VyID0gbm90ZSBjb250ZW50ICh3aXRoIFRPQylcclxuICAgICAgICBjb25zdCBtZXNzYWdlczogTWVzc2FnZVtdID0gW1xyXG4gICAgICAgICAgICB7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IHByb21wdCB9LFxyXG4gICAgICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiB1c2VyQ29udGVudCB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgZGVidWcoXCJPcmlnaW5hbCBtZXNzYWdlczpcIiwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZXMpKTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbEVuYWJsZUNvbnRleHROb3RlcyA9IHNldHRpbmdzLmVuYWJsZUNvbnRleHROb3RlcztcclxuICAgICAgICBkZWJ1ZyhcIk9yaWdpbmFsIGVuYWJsZUNvbnRleHROb3RlczpcIiwgb3JpZ2luYWxFbmFibGVDb250ZXh0Tm90ZXMpO1xyXG4gICAgICAgIChzZXR0aW5ncyBhcyBhbnkpLmVuYWJsZUNvbnRleHROb3RlcyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRNZXNzYWdlcyA9IGF3YWl0IHByb2Nlc3NNZXNzYWdlcyhtZXNzYWdlcyk7XHJcbiAgICAgICAgICAgIGRlYnVnKFwiUHJvY2Vzc2VkIG1lc3NhZ2VzOlwiLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWRNZXNzYWdlcykpO1xyXG4gICAgICAgICAgICAoc2V0dGluZ3MgYXMgYW55KS5lbmFibGVDb250ZXh0Tm90ZXMgPSBvcmlnaW5hbEVuYWJsZUNvbnRleHROb3RlcztcclxuXHJcbiAgICAgICAgICAgIGlmICghcHJvY2Vzc2VkTWVzc2FnZXMgfHwgcHJvY2Vzc2VkTWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIk5vIHByb2Nlc3NlZCBtZXNzYWdlcyFcIik7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gdmFsaWQgbWVzc2FnZXMgdG8gc2VuZCB0byB0aGUgbW9kZWwuIFBsZWFzZSBjaGVjayB5b3VyIG5vdGUgY29udGVudC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlYnVnKFwiQ2FsbGluZyBwcm92aWRlci5nZXRDb21wbGV0aW9uXCIpO1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0QnVmZmVyID0gXCJcIjtcclxuICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIuZ2V0Q29tcGxldGlvbihwcm9jZXNzZWRNZXNzYWdlcywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAsXHJcbiAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjazogKGNodW5rOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRCdWZmZXIgKz0gY2h1bms7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkZWJ1ZyhcIlJlc3VsdCBmcm9tIHByb3ZpZGVyIChidWZmZXJlZCk6XCIsIHJlc3VsdEJ1ZmZlcik7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSByZXN1bHRCdWZmZXIudHJpbSgpO1xyXG4gICAgICAgICAgICBkZWJ1ZyhcIkV4dHJhY3RlZCB0aXRsZSBiZWZvcmUgc2FuaXRpemF0aW9uOlwiLCB0aXRsZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgZm9yYmlkZGVuIGNoYXJhY3RlcnM6IGJhY2tzbGFzaGVzLCBmb3J3YXJkIHNsYXNoZXMsIGNvbG9uc1xyXG4gICAgICAgICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoL1tcXFxcLzpdL2csIFwiXCIpLnRyaW0oKTtcclxuICAgICAgICAgICAgZGVidWcoXCJTYW5pdGl6ZWQgdGl0bGU6XCIsIHRpdGxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aXRsZSAmJiB0eXBlb2YgdGl0bGUgPT09IFwic3RyaW5nXCIgJiYgdGl0bGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0TW9kZSA9IHNldHRpbmdzLnRpdGxlT3V0cHV0TW9kZSA/PyBcImNsaXBib2FyZFwiO1xyXG4gICAgICAgICAgICAgICAgZGVidWcoXCJPdXRwdXQgbW9kZTpcIiwgb3V0cHV0TW9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0TW9kZSA9PT0gXCJyZXBsYWNlLWZpbGVuYW1lXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0ID0gZmlsZS5leHRlbnNpb24gPyBcIi5cIiArIGZpbGUuZXh0ZW5zaW9uIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2FuaXRpemVkID0gdGl0bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBmaWxlLnBhcmVudCA/IGZpbGUucGFyZW50LnBhdGggOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gcGFyZW50UGF0aCA/IChwYXJlbnRQYXRoICsgXCIvXCIgKyBzYW5pdGl6ZWQgKyBleHQpIDogKHNhbml0aXplZCArIGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnBhdGggIT09IG5ld1BhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGZpbGUsIG5ld1BhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgTm90ZSByZW5hbWVkIHRvOiAke3Nhbml0aXplZH0ke2V4dH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE5vdGUgdGl0bGUgaXMgYWxyZWFkeTogJHtzYW5pdGl6ZWR9JHtleHR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91dHB1dE1vZGUgPT09IFwibWV0YWRhdGFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBhcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB1cHNlcnRZYW1sRmllbGQoYXBwLCBmaWxlLCBcInRpdGxlXCIsIHRpdGxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSW5zZXJ0ZWQgdGl0bGUgaW50byBtZXRhZGF0YTogJHt0aXRsZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRpdGxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgR2VuZXJhdGVkIHRpdGxlIChjb3BpZWQpOiAke3RpdGxlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgR2VuZXJhdGVkIHRpdGxlOiAke3RpdGxlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnKFwiTm8gdGl0bGUgZ2VuZXJhdGVkIGFmdGVyIHNhbml0aXphdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiTm8gdGl0bGUgZ2VuZXJhdGVkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKHByb2Nlc3NFcnJvcikge1xyXG4gICAgICAgICAgICBkZWJ1ZyhcIkVycm9yIGluIHByb2Nlc3NNZXNzYWdlcyBvciBwcm92aWRlci5nZXRDb21wbGV0aW9uOlwiLCBwcm9jZXNzRXJyb3IpO1xyXG4gICAgICAgICAgICAoc2V0dGluZ3MgYXMgYW55KS5lbmFibGVDb250ZXh0Tm90ZXMgPSBvcmlnaW5hbEVuYWJsZUNvbnRleHROb3RlcztcclxuICAgICAgICAgICAgdGhyb3cgcHJvY2Vzc0Vycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoXCJFcnJvciBnZW5lcmF0aW5nIHRpdGxlOiBcIiArIChlcnI/Lm1lc3NhZ2UgPz8gZXJyKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmljIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuZCBpbnNlcnQvdXBkYXRlIGEgWUFNTCBhdHRyaWJ1dGUgaW4gdGhlIGFjdGl2ZSBub3RlLlxyXG4gKiBBbHdheXMgdXNlcyB0aGUgZGVmYXVsdCBzeXN0ZW0gbWVzc2FnZSBhbmQgdGVtcGVyYXR1cmUgMC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVlhbWxBdHRyaWJ1dGUoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzLFxyXG4gICAgcHJvY2Vzc01lc3NhZ2VzOiAobWVzc2FnZXM6IE1lc3NhZ2VbXSkgPT4gUHJvbWlzZTxNZXNzYWdlW10+LFxyXG4gICAgYXR0cmlidXRlTmFtZTogc3RyaW5nLFxyXG4gICAgcHJvbXB0OiBzdHJpbmcsXHJcbiAgICBvdXRwdXRNb2RlOiBzdHJpbmcgPSBcIm1ldGFkYXRhXCJcclxuKSB7XHJcbiAgICBkZWJ1ZyhgU3RhcnRpbmcgZ2VuZXJhdGVZYW1sQXR0cmlidXRlIGZvciAke2F0dHJpYnV0ZU5hbWV9YCk7XHJcbiAgICBjb25zdCBhY3RpdmVGaWxlID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICBpZiAoIWFjdGl2ZUZpbGUpIHtcclxuICAgICAgICBuZXcgTm90aWNlKFwiTm8gYWN0aXZlIG5vdGUgZm91bmQuXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBub3RlQ29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGFjdGl2ZUZpbGUpO1xyXG4gICAgbm90ZUNvbnRlbnQgPSBub3RlQ29udGVudC5zbGljZSgwLCAxNTAwMCk7XHJcblxyXG4gICAgLy8gQ29tcG9zZSBtZXNzYWdlczogc3lzdGVtID0gZGVmYXVsdCBzeXN0ZW0gbWVzc2FnZSwgdXNlciA9IHByb21wdCArIG5vdGUgY29udGVudFxyXG4gICAgY29uc3QgbWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFtcclxuICAgICAgICB7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQ6IERFRkFVTFRfWUFNTF9TWVNURU1fTUVTU0FHRSB9LFxyXG4gICAgICAgIHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IHByb21wdCArIFwiXFxuXFxuXCIgKyBub3RlQ29udGVudCB9XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIFVzZSBwcm9jZXNzTWVzc2FnZXMgZm9yIE9ic2lkaWFuIGxpbmsgZXhwYW5zaW9uLCBidXQgc2tpcCBjb250ZXh0IG5vdGVzXHJcbiAgICBkZWJ1ZyhcIk9yaWdpbmFsIG1lc3NhZ2VzOlwiLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlcykpO1xyXG4gICAgY29uc3Qgb3JpZ2luYWxFbmFibGVDb250ZXh0Tm90ZXMgPSBzZXR0aW5ncy5lbmFibGVDb250ZXh0Tm90ZXM7XHJcbiAgICBkZWJ1ZyhcIk9yaWdpbmFsIGVuYWJsZUNvbnRleHROb3RlczpcIiwgb3JpZ2luYWxFbmFibGVDb250ZXh0Tm90ZXMpO1xyXG4gICAgKHNldHRpbmdzIGFzIGFueSkuZW5hYmxlQ29udGV4dE5vdGVzID0gZmFsc2U7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzZWRNZXNzYWdlcyA9IGF3YWl0IHByb2Nlc3NNZXNzYWdlcyhtZXNzYWdlcyk7XHJcbiAgICAgICAgZGVidWcoXCJQcm9jZXNzZWQgbWVzc2FnZXM6XCIsIEpTT04uc3RyaW5naWZ5KHByb2Nlc3NlZE1lc3NhZ2VzKSk7XHJcbiAgICAgICAgKHNldHRpbmdzIGFzIGFueSkuZW5hYmxlQ29udGV4dE5vdGVzID0gb3JpZ2luYWxFbmFibGVDb250ZXh0Tm90ZXM7XHJcblxyXG4gICAgICAgIGlmICghcHJvY2Vzc2VkTWVzc2FnZXMgfHwgcHJvY2Vzc2VkTWVzc2FnZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGRlYnVnKFwiTm8gcHJvY2Vzc2VkIG1lc3NhZ2VzIVwiKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShcIk5vIHZhbGlkIG1lc3NhZ2VzIHRvIHNlbmQgdG8gdGhlIG1vZGVsLiBQbGVhc2UgY2hlY2sgeW91ciBub3RlIGNvbnRlbnQuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHZXQgY29tcGxldGlvbiAoYnVmZmVyIHN0cmVhbWVkIG91dHB1dClcclxuICAgICAgICBkZWJ1ZyhcIkNhbGxpbmcgcHJvdmlkZXIuZ2V0Q29tcGxldGlvblwiKTtcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHNldHRpbmdzKTtcclxuICAgICAgICBsZXQgcmVzdWx0QnVmZmVyID0gXCJcIjtcclxuICAgICAgICBhd2FpdCBwcm92aWRlci5nZXRDb21wbGV0aW9uKHByb2Nlc3NlZE1lc3NhZ2VzLCB7XHJcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLFxyXG4gICAgICAgICAgICBzdHJlYW1DYWxsYmFjazogKGNodW5rOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdEJ1ZmZlciArPSBjaHVuaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlYnVnKFwiUmVzdWx0IGZyb20gcHJvdmlkZXIgKGJ1ZmZlcmVkKTpcIiwgcmVzdWx0QnVmZmVyKTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmVzdWx0QnVmZmVyLnRyaW0oKTtcclxuICAgICAgICBkZWJ1ZyhcIkV4dHJhY3RlZCB2YWx1ZSBiZWZvcmUgc2FuaXRpemF0aW9uOlwiLCB2YWx1ZSk7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXFxcXC9dL2csIFwiXCIpLnRyaW0oKTsgLy8gQWxsb3cgY29sb25zIGluIFlBTUwgdmFsdWVzXHJcbiAgICAgICAgZGVidWcoXCJTYW5pdGl6ZWQgdmFsdWU6XCIsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGRlYnVnKFwiT3V0cHV0IG1vZGU6XCIsIG91dHB1dE1vZGUpO1xyXG4gICAgICAgICAgICBpZiAob3V0cHV0TW9kZSA9PT0gXCJtZXRhZGF0YVwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgb3IgdXBkYXRlIGF0dHJpYnV0ZSBpbiBZQU1MIGZyb250bWF0dGVyIHVzaW5nIGhlbHBlclxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdXBzZXJ0WWFtbEZpZWxkKGFwcCwgYWN0aXZlRmlsZSwgYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSW5zZXJ0ZWQgJHthdHRyaWJ1dGVOYW1lfSBpbnRvIG1ldGFkYXRhOiAke3ZhbHVlfWApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xpcGJvYXJkIChkZWZhdWx0KVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgR2VuZXJhdGVkICR7YXR0cmlidXRlTmFtZX0gKGNvcGllZCk6ICR7dmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgR2VuZXJhdGVkICR7YXR0cmlidXRlTmFtZX06ICR7dmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWJ1ZyhgTm8gdmFsdWUgZ2VuZXJhdGVkIGZvciAke2F0dHJpYnV0ZU5hbWV9IGFmdGVyIHNhbml0aXphdGlvbi5gKTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgTm8gdmFsdWUgZ2VuZXJhdGVkIGZvciAke2F0dHJpYnV0ZU5hbWV9LmApO1xyXG4gICAgICAgIH1cclxuICAgIH0gY2F0Y2ggKHByb2Nlc3NFcnJvcikge1xyXG4gICAgICAgIGRlYnVnKFwiRXJyb3IgaW4gcHJvY2Vzc01lc3NhZ2VzIG9yIHByb3ZpZGVyLmdldENvbXBsZXRpb246XCIsIHByb2Nlc3NFcnJvcik7XHJcbiAgICAgICAgKHNldHRpbmdzIGFzIGFueSkuZW5hYmxlQ29udGV4dE5vdGVzID0gb3JpZ2luYWxFbmFibGVDb250ZXh0Tm90ZXM7XHJcbiAgICAgICAgdGhyb3cgcHJvY2Vzc0Vycm9yO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSW5zZXJ0IG9yIHVwZGF0ZSBhIGZpZWxkIGluIHRoZSBZQU1MIGZyb250bWF0dGVyIG9mIGEgbm90ZS5cclxuICogSWYgdGhlIGZpZWxkIGV4aXN0cywgaXQgaXMgdXBkYXRlZC4gSWYgbm90LCBpdCBpcyBhZGRlZC5cclxuICogSWYgbm8gZnJvbnRtYXR0ZXIgZXhpc3RzLCBpdCBpcyBjcmVhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwc2VydFlhbWxGaWVsZChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcbiAgICBsZXQgbmV3Q29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICBjb25zdCBmcm9udG1hdHRlclJlZ2V4ID0gL14tLS1cXG4oW1xcc1xcU10qPylcXG4tLS0vO1xyXG4gICAgY29uc3QgbWF0Y2ggPSBjb250ZW50Lm1hdGNoKGZyb250bWF0dGVyUmVnZXgpO1xyXG4gICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgLy8gUGFyc2UgWUFNTCBmcm9udG1hdHRlclxyXG4gICAgICAgIGxldCB5YW1sT2JqOiBhbnkgPSB7fTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB5YW1sT2JqID0geWFtbC5sb2FkKG1hdGNoWzFdKSB8fCB7fTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHlhbWxPYmogPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgeWFtbE9ialtmaWVsZF0gPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBuZXdZYW1sID0geWFtbC5kdW1wKHlhbWxPYmosIHsgbGluZVdpZHRoOiAtMSB9KS50cmltKCk7XHJcbiAgICAgICAgbmV3Q29udGVudCA9IGNvbnRlbnQucmVwbGFjZShmcm9udG1hdHRlclJlZ2V4LCBgLS0tXFxuJHtuZXdZYW1sfVxcbi0tLWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyBmcm9udG1hdHRlciwgYWRkIGl0XHJcbiAgICAgICAgY29uc3QgbmV3WWFtbCA9IHlhbWwuZHVtcCh7IFtmaWVsZF06IHZhbHVlIH0sIHsgbGluZVdpZHRoOiAtMSB9KS50cmltKCk7XHJcbiAgICAgICAgbmV3Q29udGVudCA9IGAtLS1cXG4ke25ld1lhbWx9XFxuLS0tXFxuYCArIGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICBhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQpO1xyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpbiwgU2V0dGluZywgV29ya3NwYWNlTGVhZiwgSXRlbVZpZXcsIE5vdGljZSwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IE15UGx1Z2luU2V0dGluZ3MsIE1lc3NhZ2UsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMnO1xyXG5pbXBvcnQgeyBNeVBsdWdpblNldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgQ2hhdFZpZXcsIFZJRVdfVFlQRV9DSEFUIH0gZnJvbSAnLi9jb21wb25lbnRzL2NoYXQnO1xyXG5pbXBvcnQgeyBwYXJzZVNlbGVjdGlvbiB9IGZyb20gJy4vY29tcG9uZW50cy9wYXJzZVNlbGVjdGlvbic7XHJcbmltcG9ydCB7IE1vZGVsU2V0dGluZ3NWaWV3IH0gZnJvbSAnLi9jb21wb25lbnRzL01vZGVsU2V0dGluZ3NWaWV3JztcclxuaW1wb3J0IHsgcHJvY2Vzc01lc3NhZ2VzLCBnZXRDb250ZXh0Tm90ZXNDb250ZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25vdGVVdGlscyc7XHJcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi9jb21wb25lbnRzL3V0aWxzJztcclxuaW1wb3J0IHsgZ2V0U3lzdGVtTWVzc2FnZSB9IGZyb20gJy4vY29tcG9uZW50cy9zeXN0ZW1NZXNzYWdlJztcclxuXHJcbmNvbnN0IFZJRVdfVFlQRV9NT0RFTF9TRVRUSU5HUyA9ICdtb2RlbC1zZXR0aW5ncy12aWV3JztcclxuXHJcbi8qKlxyXG4gKiBBSSBBc3Npc3RhbnQgUGx1Z2luXHJcbiAqIFxyXG4gKiBUaGlzIHBsdWdpbiBhZGRzIEFJIGNhcGFiaWxpdGllcyB0byBPYnNpZGlhbiwgc3VwcG9ydGluZyBtdWx0aXBsZSBwcm92aWRlcnM6XHJcbiAqIC0gT3BlbkFJIChDaGF0R1BUKVxyXG4gKiAtIEFudGhyb3BpYyAoQ2xhdWRlKVxyXG4gKiAtIEdvb2dsZSAoR2VtaW5pKVxyXG4gKiAtIE9sbGFtYSAoTG9jYWwgQUkpXHJcbiAqIFxyXG4gKiBGZWF0dXJlczpcclxuICogLSBDaGF0IHdpdGggQUkgbW9kZWxzXHJcbiAqIC0gU3RyZWFtIHJlc3BvbnNlcyBpbiByZWFsLXRpbWVcclxuICogLSBDb25maWd1cmUgbW9kZWwgc2V0dGluZ3NcclxuICogLSBUZXN0IEFQSSBjb25uZWN0aW9uc1xyXG4gKiAtIFVzZSBsb2NhbCBBSSBtb2RlbHMgdGhyb3VnaCBPbGxhbWFcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xyXG4gICAgbW9kZWxTZXR0aW5nc1ZpZXc6IE1vZGVsU2V0dGluZ3NWaWV3IHwgbnVsbCA9IG51bGw7XHJcbiAgICBhY3RpdmVTdHJlYW06IEFib3J0Q29udHJvbGxlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfeWFtbEF0dHJpYnV0ZUNvbW1hbmRJZHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgTXlQbHVnaW5TZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG4gICAgICAgIC8vIFJlZ2lzdGVyIHZpZXdzXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXHJcbiAgICAgICAgICAgIFZJRVdfVFlQRV9NT0RFTF9TRVRUSU5HUyxcclxuICAgICAgICAgICAgKGxlYWYpID0+IG5ldyBNb2RlbFNldHRpbmdzVmlldyhsZWFmLCB0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICAgICAgICBWSUVXX1RZUEVfQ0hBVCxcclxuICAgICAgICAgICAgKGxlYWYpID0+IG5ldyBDaGF0VmlldyhsZWFmLCB0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEFkZCByaWJib24gaWNvbnNcclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2ZpbGUtc2xpZGVycycsICdPcGVuIEFJIFNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ21lc3NhZ2Utc3F1YXJlJywgJ09wZW4gQUkgQ2hhdCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZUNoYXRWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b09wZW5Nb2RlbFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnYWktY29tcGxldGlvbicsXHJcbiAgICAgICAgICAgIG5hbWU6ICdHZXQgQUkgQ29tcGxldGlvbicsXHJcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dDogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluc2VydFBvc2l0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlZGl0b3Iuc29tZXRoaW5nU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgc2VsZWN0ZWQgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0UG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGN1cnJlbnQgY3Vyc29yIGxpbmUgYXMgdGhlIHJlcXVlc3RcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TGluZU51bWJlciA9IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBhbGwgbGluZXMgZnJvbSB0aGUgdG9wIG9mIHRoZSBmaWxlIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgbGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBjdXJyZW50TGluZU51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goZWRpdG9yLmdldExpbmUoaSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNoYXRTdGFydFN0cmluZyBpbiB0aGUgbGluZXMgYW5kIHNsaWNlIGlmIGZvdW5kXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhdFN0YXJ0U3RyaW5nID0gdGhpcy5zZXR0aW5ncy5jaGF0U3RhcnRTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXRTdGFydFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydElkeCA9IGxpbmVzLmZpbmRJbmRleChsaW5lID0+IGxpbmUudHJpbSgpID09PSBjaGF0U3RhcnRTdHJpbmcudHJpbSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0SWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhjbHVkZSB0aGUgY2hhdFN0YXJ0U3RyaW5nIGxpbmUgaXRzZWxmIGZyb20gdGhlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzID0gbGluZXMuc2xpY2Uoc3RhcnRJZHggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgaW5zZXJ0aW9uIHBvaW50IHRvIGJlIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjdXJyZW50IGxpbmVcclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRQb3NpdGlvbiA9IHsgbGluZTogY3VycmVudExpbmVOdW1iZXIgKyAxLCBjaDogMCB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIERlYnVnZ2luZzogTG9nIHRoZSBleHRyYWN0ZWQgdGV4dFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0V4dHJhY3RlZCB0ZXh0IGZvciBjb21wbGV0aW9uOicsIHRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBzZWxlY3Rpb24gaW50byBtZXNzYWdlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBwYXJzZVNlbGVjdGlvbih0ZXh0LCB0aGlzLnNldHRpbmdzLmNoYXRTZXBhcmF0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGVyZSBhcmUgbWVzc2FnZXMgdG8gc2VuZFxyXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIHZhbGlkIG1lc3NhZ2VzIGZvdW5kIGluIHRoZSBzZWxlY3Rpb24uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGVyZSdzIGEgY2xlYXIgc2VwYXJhdGlvbiBiZXR3ZWVuIHVzZXIgcmVxdWVzdCBhbmQgQUkgcmVzcG9uc2VcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjb250ZW50IG9mIHRoZSBsaW5lIHdoZXJlIHdlIHdhbnQgdG8gaW5zZXJ0IHRoZSBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUoaW5zZXJ0UG9zaXRpb24ubGluZSkgPz8gJyc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgdmFyaWFibGUgd2lsbCBob2xkIGEgbmV3bGluZSBjaGFyYWN0ZXIgaWYgd2UgbmVlZCB0byBhZGQgb25lIGJlZm9yZSB0aGUgc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICBsZXQgcHJlZml4ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGxpbmUgaXMgbm90IGVtcHR5IChoYXMgdGV4dCksIGFkZCBhIG5ld2xpbmUgYmVmb3JlIHRoZSBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgIGlmIChsaW5lQ29udGVudC50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gJ1xcbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIEluc2VydCB0aGUgc2VwYXJhdG9yIHdpdGggYSBzaW5nbGUgYmxhbmsgbGluZSBiZWZvcmUgYW5kIGFmdGVyXHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKGAke3ByZWZpeH1cXG4ke3RoaXMuc2V0dGluZ3MuY2hhdFNlcGFyYXRvcn1cXG5gLCBpbnNlcnRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbmV3IHBvc2l0aW9uIGZvciB0aGUgY3Vyc29yIGFmdGVyIGluc2VydGluZyB0aGUgc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAvLyAtIElmIHdlIGFkZGVkIGEgcHJlZml4LCBtb3ZlIGRvd24gb25lIGxpbmVcclxuICAgICAgICAgICAgICAgIC8vIC0gTW92ZSBkb3duIG9uZSBsaW5lIGZvciB0aGUgbmV3bGluZSBiZWZvcmUgc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAvLyAtIE1vdmUgZG93biBvbmUgbGluZSBmb3IgdGhlIHNlcGFyYXRvciBpdHNlbGZcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTogaW5zZXJ0UG9zaXRpb24ubGluZSArIChwcmVmaXggPyAxIDogMCkgKyAyLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoOiAwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBjcmVhdGVQcm92aWRlcih0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRNZXNzYWdlcyA9IGF3YWl0IHRoaXMucHJvY2Vzc01lc3NhZ2VzKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogdGhpcy5nZXRTeXN0ZW1NZXNzYWdlKCkgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ubWVzc2FnZXNcclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmZlcmVkQ2h1bmsgPSAnJzsgLy8gQWNjdW11bGF0ZSBjaHVua3NcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbHVzaEJ1ZmZlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkQ2h1bmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoYnVmZmVyZWRDaHVuaywgY3VycmVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IGVkaXRvci5vZmZzZXRUb1BvcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucG9zVG9PZmZzZXQoY3VycmVudFBvc2l0aW9uKSArIGJ1ZmZlcmVkQ2h1bmsubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyZWRDaHVuayA9ICcnOyAvLyBDbGVhciBidWZmZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByb3ZpZGVyLmdldENvbXBsZXRpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZE1lc3NhZ2VzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogdGhpcy5zZXR0aW5ncy50ZW1wZXJhdHVyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFRva2VuczogdGhpcy5zZXR0aW5ncy5tYXhUb2tlbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjazogKGNodW5rOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJlZENodW5rICs9IGNodW5rOyAvLyBBY2N1bXVsYXRlIHRoZSBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZsdXNoIGJ1ZmZlciBldmVyeSAxMDBtc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZmx1c2hCdWZmZXIsIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyOiB0aGlzLmFjdGl2ZVN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmluYWwgZmx1c2ggYWZ0ZXIgY29tcGxldGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoQnVmZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluc2VydCB0aGUgc2VwYXJhdG9yIGFmdGVyIHRoZSBBSSByZXNwb25zZSB3aXRoIGNvcnJlY3Qgc3BhY2luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZExpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUoY3VycmVudFBvc2l0aW9uLmxpbmUpID8/ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmRQcmVmaXggPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kTGluZUNvbnRlbnQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRQcmVmaXggPSAnXFxuJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShgJHtlbmRQcmVmaXh9XFxuJHt0aGlzLnNldHRpbmdzLmNoYXRTZXBhcmF0b3J9XFxuXFxuYCwgY3VycmVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDdXJzb3JQb3MgPSBlZGl0b3Iub2Zmc2V0VG9Qb3MoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5wb3NUb09mZnNldChjdXJyZW50UG9zaXRpb24pICsgKGVuZFByZWZpeCA/IDEgOiAwKSArIDEgKyB0aGlzLnNldHRpbmdzLmNoYXRTZXBhcmF0b3IubGVuZ3RoICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihuZXdDdXJzb3JQb3MpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluc2VydCBlcnJvciB3aXRoIGNvcnJlY3Qgc3BhY2luZ1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyckxpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUoY3VycmVudFBvc2l0aW9uLmxpbmUpID8/ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlcnJQcmVmaXggPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyTGluZUNvbnRlbnQudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJQcmVmaXggPSAnXFxuJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1cXG4ke2VyclByZWZpeH1cXG4ke3RoaXMuc2V0dGluZ3MuY2hhdFNlcGFyYXRvcn1cXG5cXG5gLCBjdXJyZW50UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdlbmQtYWktc3RyZWFtJyxcclxuICAgICAgICAgICAgbmFtZTogJ0VuZCBBSSBTdHJlYW0nLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlU3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdHJlYW0uYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQUkgc3RyZWFtIGVuZGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIGFjdGl2ZSBBSSBzdHJlYW0gdG8gZW5kJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdzaG93LWFpLXNldHRpbmdzJyxcclxuICAgICAgICAgICAgbmFtZTogJ1Nob3cgQUkgU2V0dGluZ3MnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ3Nob3ctYWktY2hhdCcsXHJcbiAgICAgICAgICAgIG5hbWU6ICdTaG93IEFJIENoYXQnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZUNoYXRWaWV3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdjb3B5LWFjdGl2ZS1ub3RlLW5hbWUnLFxyXG4gICAgICAgICAgICBuYW1lOiAnQ29weSBBY3RpdmUgTm90ZSBOYW1lJyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RlTmFtZSA9IGBbWyR7YWN0aXZlRmlsZS5iYXNlbmFtZX1dXWA7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQobm90ZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBDb3BpZWQgdG8gY2xpcGJvYXJkOiAke25vdGVOYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBjb3B5IHRvIGNsaXBib2FyZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDbGlwYm9hcmQgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gYWN0aXZlIG5vdGUgZm91bmQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ2luc2VydC1jaGF0LXN0YXJ0LXN0cmluZycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdJbnNlcnQgQ2hhdCBTdGFydCBTdHJpbmcnLFxyXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhdFN0YXJ0U3RyaW5nID0gdGhpcy5zZXR0aW5ncy5jaGF0U3RhcnRTdHJpbmcgPz8gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNoYXRTdGFydFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ2NoYXRTdGFydFN0cmluZyBpcyBub3Qgc2V0IGluIHNldHRpbmdzLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoY2hhdFN0YXJ0U3RyaW5nLCBjdXJzb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1vdmUgY3Vyc29yIHRvIHRoZSBlbmQgb2YgdGhlIGluc2VydGVkIGNoYXRTdGFydFN0cmluZ1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjaGF0U3RhcnRTdHJpbmcuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmdsZSBsaW5lIGluc2VydFxyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBjdXJzb3IubGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2g6IGN1cnNvci5jaCArIGNoYXRTdGFydFN0cmluZy5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTXVsdGktbGluZSBpbnNlcnRcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogY3Vyc29yLmxpbmUgKyBsaW5lcy5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaDogbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgTm90ZSBUaXRsZSBDb21tYW5kXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgICAgaWQ6ICdnZW5lcmF0ZS1ub3RlLXRpdGxlJyxcclxuICAgICAgICAgICAgbmFtZTogJ0dlbmVyYXRlIE5vdGUgVGl0bGUnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gSW1wb3J0IGhlcmUgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZXMgaWYgYW55XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGdlbmVyYXRlTm90ZVRpdGxlIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2ZpbGVjaGFuZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZ2VuZXJhdGVOb3RlVGl0bGUoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgICAgICAobWVzc2FnZXMpID0+IHRoaXMucHJvY2Vzc01lc3NhZ2VzKG1lc3NhZ2VzKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgIC8vICAgICBpZDogJ2dlbmVyYXRlLW5vdGUtc3VtbWFyeScsXHJcbiAgICAgICAgLy8gICAgIG5hbWU6ICdHZW5lcmF0ZSBOb3RlIFN1bW1hcnknLFxyXG4gICAgICAgIC8vICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc3QgeyBnZW5lcmF0ZU5vdGVTdW1tYXJ5IH0gPSBhd2FpdCBpbXBvcnQoXCIuL2ZpbGVjaGFuZ2VyXCIpO1xyXG4gICAgICAgIC8vICAgICAgICAgYXdhaXQgZ2VuZXJhdGVOb3RlU3VtbWFyeShcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIChtZXNzYWdlcykgPT4gdGhpcy5wcm9jZXNzTWVzc2FnZXMobWVzc2FnZXMpXHJcbiAgICAgICAgLy8gICAgICAgICApO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgIGlkOiAnbG9hZC1jaGF0LW5vdGUtaW50by1jaGF0JyxcclxuICAgICAgICAgICAgbmFtZTogJ0xvYWQgQ2hhdCBOb3RlIGludG8gQ2hhdCcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsZTogVEZpbGUgfCBudWxsID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgICAgIGlmICghZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIGFjdGl2ZSBub3RlIGZvdW5kLiBQbGVhc2Ugb3BlbiBhIG5vdGUgdG8gbG9hZCBhcyBjaGF0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcGFyc2VTZWxlY3Rpb24oY29udGVudCwgdGhpcy5zZXR0aW5ncy5jaGF0U2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gY2hhdCBtZXNzYWdlcyBmb3VuZCBpbiB0aGUgc2VsZWN0ZWQgbm90ZS4nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlQ2hhdFZpZXcoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX0NIQVQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsZWF2ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQ291bGQgbm90IGZpbmQgY2hhdCB2aWV3LicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXRWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgQ2hhdFZpZXc7XHJcbiAgICAgICAgICAgICAgICAvLyBDbGVhciBjaGF0IFVJIChhbmQgaGlzdG9yeSB3aWxsIGJlIHJlYnVpbHQgYXMgd2UgYWRkIG1lc3NhZ2VzKVxyXG4gICAgICAgICAgICAgICAgY2hhdFZpZXcubWVzc2FnZXNDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCBlYWNoIHBhcnNlZCBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1zZyBvZiBtZXNzYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cucm9sZSA9PT0gJ3VzZXInIHx8IG1zZy5yb2xlID09PSAnYXNzaXN0YW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjaGF0Vmlld1tcImFkZE1lc3NhZ2VcIl0obXNnLnJvbGUsIG1zZy5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjaGF0Vmlldy5tZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxUb3AgPSBjaGF0Vmlldy5tZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdMb2FkZWQgY2hhdCBub3RlIGludG8gY2hhdC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIC0tLSBSZWdpc3RlciBZQU1MIEF0dHJpYnV0ZSBHZW5lcmF0b3IgQ29tbWFuZHMgLS0tXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcllhbWxBdHRyaWJ1dGVDb21tYW5kcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgWUFNTCBhdHRyaWJ1dGUgZ2VuZXJhdG9yIGNvbW1hbmRzIGR5bmFtaWNhbGx5IGJhc2VkIG9uIHNldHRpbmdzLlxyXG4gICAgICogVW5yZWdpc3RlcnMgcHJldmlvdXMgY29tbWFuZHMgYmVmb3JlIHJlZ2lzdGVyaW5nIG5ldyBvbmVzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyWWFtbEF0dHJpYnV0ZUNvbW1hbmRzKCkge1xyXG4gICAgICAgIC8vIFVucmVnaXN0ZXIgcHJldmlvdXMgY29tbWFuZHNcclxuICAgICAgICBpZiAodGhpcy5feWFtbEF0dHJpYnV0ZUNvbW1hbmRJZHMgJiYgdGhpcy5feWFtbEF0dHJpYnV0ZUNvbW1hbmRJZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuX3lhbWxBdHRyaWJ1dGVDb21tYW5kSWRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiBPYnNpZGlhbiBQbHVnaW4gQVBJIGhhcyB1bmRvY3VtZW50ZWQgbWV0aG9kXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5jb21tYW5kcy5yZW1vdmVDb21tYW5kKGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl95YW1sQXR0cmlidXRlQ29tbWFuZElkcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnlhbWxBdHRyaWJ1dGVHZW5lcmF0b3JzICYmIEFycmF5LmlzQXJyYXkodGhpcy5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycykpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBnZW4gb2YgdGhpcy5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFnZW4uYXR0cmlidXRlTmFtZSB8fCAhZ2VuLnByb21wdCB8fCAhZ2VuLmNvbW1hbmROYW1lKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYGdlbmVyYXRlLXlhbWwtYXR0cmlidXRlLSR7Z2VuLmF0dHJpYnV0ZU5hbWV9YDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2VuLmNvbW1hbmROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZ2VuZXJhdGVZYW1sQXR0cmlidXRlIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2ZpbGVjaGFuZ2VyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBnZW5lcmF0ZVlhbWxBdHRyaWJ1dGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWVzc2FnZXMpID0+IHRoaXMucHJvY2Vzc01lc3NhZ2VzKG1lc3NhZ2VzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5hdHRyaWJ1dGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLnByb21wdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5vdXRwdXRNb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl95YW1sQXR0cmlidXRlQ29tbWFuZElkcy5wdXNoKGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3lzdGVtTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBnZXRTeXN0ZW1NZXNzYWdlKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFjdGl2YXRlVmlldyh2aWV3VHlwZTogc3RyaW5nID0gVklFV19UWVBFX01PREVMX1NFVFRJTkdTKSB7XHJcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZSh2aWV3VHlwZSk7XHJcblxyXG4gICAgICAgIGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSk7XHJcbiAgICAgICAgaWYgKGxlYWYpIHtcclxuICAgICAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogdmlld1R5cGUsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxlYWYuc2V0Vmlld1N0YXRlKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHZpZXdUeXBlLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYWN0aXZhdGVDaGF0VmlldygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlVmlldyhWSUVXX1RZUEVfQ0hBVCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJZYW1sQXR0cmlidXRlQ29tbWFuZHMoKTsgLy8gVXBkYXRlIGNvbW1hbmRzIGFmdGVyIHNhdmluZyBzZXR0aW5nc1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgcHJvY2Vzc01lc3NhZ2VzKG1lc3NhZ2VzOiBNZXNzYWdlW10pOiBQcm9taXNlPE1lc3NhZ2VbXT4ge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzTWVzc2FnZXMobWVzc2FnZXMsIHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0Q29udGV4dE5vdGVzQ29udGVudChjb250ZXh0Tm90ZXNUZXh0OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiBnZXRDb250ZXh0Tm90ZXNDb250ZW50KGNvbnRleHROb3Rlc1RleHQsIHRoaXMuYXBwKTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IE15UGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IE15UGx1Z2luIGZyb20gJy4vbWFpbic7XHJcblxyXG4vKipcclxuICogUGx1Z2luIFNldHRpbmdzIFRhYlxyXG4gKiBcclxuICogVGhpcyB0YWIgcHJvdmlkZXMgYSB1c2VyIGludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgdGhlIHBsdWdpbiBzZXR0aW5ncy5cclxuICogSXQgYXV0b21hdGljYWxseSBvcGVucyB0aGUgbW9kZWwgc2V0dGluZ3MgdmlldyB3aGVuIHNldHRpbmdzIGFyZSBjaGFuZ2VkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE15UGx1Z2luU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gICAgcGx1Z2luOiBNeVBsdWdpbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNeVBsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERpc3BsYXkgdGhlIHNldHRpbmdzIHRhYlxyXG4gICAgICogXHJcbiAgICAgKiBTaG93cyBvbmx5IHRoZSBhdXRvLW9wZW4gc2V0dGluZyBoZXJlIHNpbmNlIGFsbCBvdGhlciBzZXR0aW5nc1xyXG4gICAgICogYXJlIG1hbmFnZWQgaW4gdGhlIG1vZGVsIHNldHRpbmdzIHZpZXcgZm9yIGJldHRlciBvcmdhbml6YXRpb24uXHJcbiAgICAgKi9cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdBSSBBc3Npc3RhbnQgU2V0dGluZ3MnIH0pO1xyXG5cclxuICAgICAgICAvLyBBUEkgS2V5cyBTZWN0aW9uXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQVBJIEtleXMnIH0pO1xyXG5cclxuICAgICAgICAvLyBPcGVuQUkgQVBJIEtleVxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnT3BlbkFJIEFQSSBLZXknKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnRW50ZXIgeW91ciBPcGVuQUkgQVBJIGtleScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdFbnRlciB5b3VyIEFQSSBrZXknKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5haVNldHRpbmdzLmFwaUtleSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5hcGlLZXkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy8gQW50aHJvcGljIEFQSSBLZXlcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0FudGhyb3BpYyBBUEkgS2V5JylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0VudGVyIHlvdXIgQW50aHJvcGljIEFQSSBrZXknKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBBUEkga2V5JylcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbnRocm9waWNTZXR0aW5ncy5hcGlLZXkpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYW50aHJvcGljU2V0dGluZ3MuYXBpS2V5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIC8vIEdlbWluaSBBUEkgS2V5XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdHb29nbGUgQVBJIEtleScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbnRlciB5b3VyIEdvb2dsZSBBUEkga2V5JylcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgQVBJIGtleScpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MuYXBpS2V5KVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmdlbWluaVNldHRpbmdzLmFwaUtleSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBPbGxhbWEgU2VydmVyIFVSTFxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnT2xsYW1hIFNlcnZlciBVUkwnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnRW50ZXIgeW91ciBPbGxhbWEgc2VydmVyIFVSTCAoZGVmYXVsdDogaHR0cDovL2xvY2FsaG9zdDoxMTQzNCknKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignaHR0cDovL2xvY2FsaG9zdDoxMTQzNCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub2xsYW1hU2V0dGluZ3Muc2VydmVyVXJsKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNldHRpbmdzLnNlcnZlclVybCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBNb2RlbCBTZXR0aW5ncyBTZWN0aW9uXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnTW9kZWwgU2V0dGluZ3MnIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0F1dG8tb3BlbiBNb2RlbCBTZXR0aW5ncycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdBdXRvbWF0aWNhbGx5IG9wZW4gbW9kZWwgc2V0dGluZ3Mgd2hlbiBPYnNpZGlhbiBzdGFydHMnKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvT3Blbk1vZGVsU2V0dGluZ3MpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b09wZW5Nb2RlbFNldHRpbmdzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBhIGJ1dHRvbiB0byBvcGVuIG1vZGVsIHNldHRpbmdzXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdPcGVuIE1vZGVsIFNldHRpbmdzJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ09wZW4gdGhlIG1vZGVsIHNldHRpbmdzIHZpZXcnKVxyXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdPcGVuJylcclxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5hY3RpdmF0ZVZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdDaGF0IFNlcGFyYXRvcicpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgc3RyaW5nIHVzZWQgdG8gc2VwYXJhdGUgY2hhdCBtZXNzYWdlcy4nKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJy0tLS0nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0U2VwYXJhdG9yID8/ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0U2VwYXJhdG9yID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdDaGF0IFN0YXJ0IFN0cmluZycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgc3RyaW5nIHRoYXQgaW5kaWNhdGVzIHdoZXJlIHRvIHN0YXJ0IHRha2luZyB0aGUgbm90ZSBmb3IgY29udGV4dC4nKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJz09PVNUQVJUPT09JylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2hhdFN0YXJ0U3RyaW5nID8/ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0U3RhcnRTdHJpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0NoYXQgRW5kIFN0cmluZycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgc3RyaW5nIHRoYXQgaW5kaWNhdGVzIHdoZXJlIHRvIGVuZCB0YWtpbmcgdGhlIG5vdGUgZm9yIGNvbnRleHQuJylcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKCc9PT1FTkQ9PT0nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0RW5kU3RyaW5nID8/ICcnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0RW5kU3RyaW5nID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVGl0bGUgUHJvbXB0XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdUaXRsZSBQcm9tcHQnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnVGhlIHByb21wdCB1c2VkIGZvciBnZW5lcmF0aW5nIG5vdGUgdGl0bGVzLicpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJ1lvdSBhcmUgYSB0aXRsZSBnZW5lcmF0b3IuLi4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50aXRsZVByb21wdClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGl0bGVQcm9tcHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBSZXNldCBQcm9tcHRzIGFuZCBBbGwgU2V0dGluZ3MgKGV4Y2VwdCBBUEkga2V5cykgdG8gRGVmYXVsdFxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnUmVzZXQgQWxsIFNldHRpbmdzIHRvIERlZmF1bHQnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnUmVzZXQgYWxsIHBsdWdpbiBzZXR0aW5ncyAoZXhjZXB0IEFQSSBrZXlzKSB0byB0aGVpciBvcmlnaW5hbCBkZWZhdWx0IHZhbHVlcy4nKVxyXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdSZXNldCcpXHJcbiAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW1wb3J0IGRlZmF1bHRzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBERUZBVUxUX1RJVExFX1BST01QVCB9ID0gYXdhaXQgaW1wb3J0KCcuL3Byb21wdHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IERFRkFVTFRfU0VUVElOR1MgfSA9IGF3YWl0IGltcG9ydCgnLi90eXBlcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXNlcnZlIEFQSSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3BlbmFpS2V5ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MuYXBpS2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFudGhyb3BpY0tleSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmFwaUtleTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZW1pbmlLZXkgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5hcGlLZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgYWxsIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KERFRkFVTFRfU0VUVElOR1MpKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIEFQSSBrZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MuYXBpS2V5ID0gb3BlbmFpS2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmFwaUtleSA9IGFudGhyb3BpY0tleTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5hcGlLZXkgPSBnZW1pbmlLZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSB0aXRsZSBwcm9tcHQgZnJvbSBwcm9tcHRzLnRzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGl0bGVQcm9tcHQgPSBERUZBVUxUX1RJVExFX1BST01QVDtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmUtcmVuZGVyIHRoZSBzZXR0aW5ncyB0byBzaG93IHVwZGF0ZWQgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQWxsIHNldHRpbmdzIChleGNlcHQgQVBJIGtleXMpIHJlc2V0IHRvIGRlZmF1bHQuJyk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIC8vIFRpdGxlIE91dHB1dCBNb2RlXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdUaXRsZSBPdXRwdXQgTW9kZScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaG9vc2Ugd2hhdCB0byBkbyB3aXRoIHRoZSBnZW5lcmF0ZWQgbm90ZSB0aXRsZS4nKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wLmFkZE9wdGlvbignY2xpcGJvYXJkJywgJ0NvcHkgdG8gY2xpcGJvYXJkJyk7XHJcbiAgICAgICAgICAgICAgICBkcm9wLmFkZE9wdGlvbigncmVwbGFjZS1maWxlbmFtZScsICdSZXBsYWNlIG5vdGUgZmlsZW5hbWUnKTtcclxuICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKCdtZXRhZGF0YScsICdJbnNlcnQgaW50byBtZXRhZGF0YScpO1xyXG4gICAgICAgICAgICAgICAgZHJvcC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50aXRsZU91dHB1dE1vZGUgPz8gJ2NsaXBib2FyZCcpO1xyXG4gICAgICAgICAgICAgICAgZHJvcC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRpdGxlT3V0cHV0TW9kZSA9IHZhbHVlIGFzIGFueTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU3VtbWFyeSBPdXRwdXQgTW9kZVxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnU3VtbWFyeSBPdXRwdXQgTW9kZScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdDaG9vc2Ugd2hhdCB0byBkbyB3aXRoIHRoZSBnZW5lcmF0ZWQgbm90ZSBzdW1tYXJ5LicpXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKCdjbGlwYm9hcmQnLCAnQ29weSB0byBjbGlwYm9hcmQnKTtcclxuICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKCdtZXRhZGF0YScsICdJbnNlcnQgaW50byBtZXRhZGF0YScpO1xyXG4gICAgICAgICAgICAgICAgZHJvcC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdW1tYXJ5T3V0cHV0TW9kZSA/PyAnY2xpcGJvYXJkJyk7XHJcbiAgICAgICAgICAgICAgICBkcm9wLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc3VtbWFyeU91dHB1dE1vZGUgPSB2YWx1ZSBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnRXhwYW5kIExpbmtlZCBOb3RlcyBSZWN1cnNpdmVseScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdJZiBlbmFibGVkLCB3aGVuIGZldGNoaW5nIGEgbm90ZSwgYWxzbyBmZXRjaCBhbmQgZXhwYW5kIGxpbmtzIHdpdGhpbiB0aGF0IG5vdGUgcmVjdXJzaXZlbHkgKHByZXZlbnRzIGluZmluaXRlIGxvb3BzKS4nKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leHBhbmRMaW5rZWROb3Rlc1JlY3Vyc2l2ZWx5ID8/IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmV4cGFuZExpbmtlZE5vdGVzUmVjdXJzaXZlbHkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmUtcmVuZGVyIHRvIHNob3cvaGlkZSB0aGUgc2xpZGVyXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leHBhbmRMaW5rZWROb3Rlc1JlY3Vyc2l2ZWx5KSB7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoJ01heCBMaW5rIEV4cGFuc2lvbiBEZXB0aCcpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYygnTWF4aW11bSBkZXB0aCBmb3IgcmVjdXJzaXZlbHkgZXhwYW5kaW5nIGxpbmtlZCBub3RlcyAoMS0zKS4nKVxyXG4gICAgICAgICAgICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlci5zZXRMaW1pdHMoMSwgMywgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1heExpbmtFeHBhbnNpb25EZXB0aCA/PyAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1heExpbmtFeHBhbnNpb25EZXB0aCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0NoYXQgTm90ZSBGb2xkZXInKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnRm9sZGVyIHRvIHNhdmUgZXhwb3J0ZWQgY2hhdCBub3RlcyAocmVsYXRpdmUgdG8gdmF1bHQgcm9vdCwgbGVhdmUgYmxhbmsgZm9yIHJvb3QpJylcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKCdlLmcuIEFJIENoYXRzJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2hhdE5vdGVGb2xkZXIgPz8gJycpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNoYXROb3RlRm9sZGVyID0gdmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIC0tLSBZQU1MIEF0dHJpYnV0ZSBHZW5lcmF0b3JzIFNlY3Rpb24gLS0tXHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnWUFNTCBBdHRyaWJ1dGUgR2VuZXJhdG9ycycgfSk7XHJcbiAgICAgICAgY29uc3QgeWFtbEdlbkRlc2MgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnQ29uZmlndXJlIGN1c3RvbSBZQU1MIGF0dHJpYnV0ZSBnZW5lcmF0b3JzLiBFYWNoIGVudHJ5IHdpbGwgY3JlYXRlIGEgY29tbWFuZCB0byBnZW5lcmF0ZSBhbmQgaW5zZXJ0L3VwZGF0ZSBhIFlBTUwgZmllbGQgaW4geW91ciBub3Rlcy4nIH0pO1xyXG4gICAgICAgIHlhbWxHZW5EZXNjLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxZW0nO1xyXG5cclxuICAgICAgICAvLyBMaXN0IGFsbCBnZW5lcmF0b3JzXHJcbiAgICAgICAgY29uc3QgeWFtbEdlbnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycyA/PyBbXTtcclxuICAgICAgICB5YW1sR2Vucy5mb3JFYWNoKChnZW4sIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlIHRoZSBjb21tYW5kIG5hbWU6ICdHZW5lcmF0ZSBZQU1MOiA8YXR0cmlidXRlTmFtZT4nXHJcbiAgICAgICAgICAgIGNvbnN0IGF1dG9Db21tYW5kTmFtZSA9IGdlbi5hdHRyaWJ1dGVOYW1lID8gYEdlbmVyYXRlIFlBTUw6ICR7Z2VuLmF0dHJpYnV0ZU5hbWV9YCA6IGBZQU1MIEdlbmVyYXRvciAjJHtpZHggKyAxfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKGF1dG9Db21tYW5kTmFtZSlcclxuICAgICAgICAgICAgICAgIC5zZXREZXNjKGBZQU1MIGZpZWxkOiAke2dlbi5hdHRyaWJ1dGVOYW1lfWApXHJcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1lBTUwgQXR0cmlidXRlIE5hbWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShnZW4uYXR0cmlidXRlTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MueWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnNbaWR4XS5hdHRyaWJ1dGVOYW1lID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgY29tbWFuZCBuYW1lIGF1dG9tYXRpY2FsbHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnlhbWxBdHRyaWJ1dGVHZW5lcmF0b3JzW2lkeF0uY29tbWFuZE5hbWUgPSB2YWx1ZSA/IGBHZW5lcmF0ZSBZQU1MOiAke3ZhbHVlfWAgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7IC8vIFJlLXJlbmRlciB0byB1cGRhdGUgdGhlIGNvbW1hbmQgbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGV4dEFyZWEodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdQcm9tcHQgZm9yIExMTScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKGdlbi5wcm9tcHQpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MueWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnlhbWxBdHRyaWJ1dGVHZW5lcmF0b3JzW2lkeF0ucHJvbXB0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKCdjbGlwYm9hcmQnLCAnQ29weSB0byBjbGlwYm9hcmQnKTtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wLmFkZE9wdGlvbignbWV0YWRhdGEnLCAnSW5zZXJ0IGludG8gbWV0YWRhdGEnKTtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wLnNldFZhbHVlKGdlbi5vdXRwdXRNb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MueWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnlhbWxBdHRyaWJ1dGVHZW5lcmF0b3JzW2lkeF0ub3V0cHV0TW9kZSA9IHZhbHVlIGFzIGFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKGJ0biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLnNldEljb24oJ2Nyb3NzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoJ0RlbGV0ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnlhbWxBdHRyaWJ1dGVHZW5lcmF0b3JzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgbmV3IGdlbmVyYXRvciBidXR0b25cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgYnRuLnNldEJ1dHRvblRleHQoJ0FkZCBZQU1MIEF0dHJpYnV0ZSBHZW5lcmF0b3InKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy55YW1sQXR0cmlidXRlR2VuZXJhdG9ycykgdGhpcy5wbHVnaW4uc2V0dGluZ3MueWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MueWFtbEF0dHJpYnV0ZUdlbmVyYXRvcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRNb2RlOiAnbWV0YWRhdGEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6ICdOZXcgWUFNTCBHZW5lcmF0b3InXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgTm90aWNlLCBNYXJrZG93blJlbmRlcmVyLCBBcHAgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBNeVBsdWdpbiBmcm9tICcuLi9tYWluJztcclxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMnO1xyXG5pbXBvcnQgeyBDaGF0SGlzdG9yeU1hbmFnZXIsIENoYXRNZXNzYWdlIH0gZnJvbSAnLi9jaGF0L0NoYXRIaXN0b3J5TWFuYWdlcic7XHJcbmltcG9ydCB7IFNldHRpbmdzTW9kYWwgfSBmcm9tICcuL2NoYXQvU2V0dGluZ3NNb2RhbCc7XHJcbmltcG9ydCB7IENvbmZpcm1hdGlvbk1vZGFsIH0gZnJvbSAnLi9jaGF0L0NvbmZpcm1hdGlvbk1vZGFsJztcclxuaW1wb3J0IHsgY3JlYXRlTWVzc2FnZUVsZW1lbnQgfSBmcm9tICcuL2NoYXQvTWVzc2FnZSc7XHJcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbkJ1dHRvbiwgY29weVRvQ2xpcGJvYXJkIH0gZnJvbSAnLi9jaGF0L0J1dHRvbnMnO1xyXG5pbXBvcnQgeyBzYXZlQ2hhdEFzTm90ZSwgbG9hZENoYXRZYW1sQW5kQXBwbHlTZXR0aW5ncyB9IGZyb20gJy4vY2hhdC9jaGF0UGVyc2lzdGVuY2UnO1xyXG5pbXBvcnQgeyByZW5kZXJDaGF0SGlzdG9yeSB9IGZyb20gJy4vY2hhdC9jaGF0SGlzdG9yeVV0aWxzJztcclxuaW1wb3J0IHsgQ2hhdEhlbHBNb2RhbCB9IGZyb20gJy4vY2hhdC9DaGF0SGVscE1vZGFsJztcclxuXHJcbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfQ0hBVCA9ICdjaGF0LXZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoYXRWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG4gICAgcGx1Z2luOiBNeVBsdWdpbjtcclxuICAgIG1lc3NhZ2VzQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIGlucHV0Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIGFjdGl2ZVN0cmVhbTogQWJvcnRDb250cm9sbGVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIGNoYXRIaXN0b3J5TWFuYWdlcjogQ2hhdEhpc3RvcnlNYW5hZ2VyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogTXlQbHVnaW4pIHtcclxuICAgICAgICBzdXBlcihsZWFmKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLmNoYXRIaXN0b3J5TWFuYWdlciA9IG5ldyBDaGF0SGlzdG9yeU1hbmFnZXIodGhpcy5hcHAudmF1bHQsIHRoaXMucGx1Z2luLm1hbmlmZXN0LmlkLCBcImNoYXQtaGlzdG9yeS5qc29uXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9DSEFUO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdBSSBDaGF0JztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdtZXNzYWdlLXNxdWFyZSc7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICAvLyBMb2FkIHBlcnNpc3RlbnQgY2hhdCBoaXN0b3J5IGJlZm9yZSBVSSBzZXR1cFxyXG4gICAgICAgIGxldCBsb2FkZWRIaXN0b3J5OiBDaGF0TWVzc2FnZVtdID0gW107XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9hZGVkSGlzdG9yeSA9IGF3YWl0IHRoaXMuY2hhdEhpc3RvcnlNYW5hZ2VyLmdldEhpc3RvcnkoKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJGYWlsZWQgdG8gbG9hZCBjaGF0IGhpc3RvcnkuXCIpO1xyXG4gICAgICAgICAgICBsb2FkZWRIaXN0b3J5ID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgbWFpbiBjb250YWluZXIgd2l0aCBmbGV4IGxheW91dFxyXG4gICAgICAgIGNvbnRlbnRFbC5hZGRDbGFzcygnYWktY2hhdC12aWV3Jyk7XHJcblxyXG4gICAgICAgIC8vIC0tLSBGQURFRCBIRUxQIE1FU1NBR0UgTkVBUiBUT1AgLS0tXHJcbiAgICAgICAgY29uc3QgZmFkZWRIZWxwID0gY29udGVudEVsLmNyZWF0ZURpdigpO1xyXG4gICAgICAgIGZhZGVkSGVscC5zZXRUZXh0KCdUaXA6IFR5cGUgL2hlbHAgb3IgcHJlc3MgQ3RybCtTaGlmdCtIIGZvciBjaGF0IGNvbW1hbmRzIGFuZCBzaG9ydGN1dHMuJyk7XHJcbiAgICAgICAgZmFkZWRIZWxwLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgIGZhZGVkSGVscC5zdHlsZS5vcGFjaXR5ID0gJzAuNic7XHJcbiAgICAgICAgZmFkZWRIZWxwLnN0eWxlLmZvbnRTaXplID0gJzAuOTVlbSc7XHJcbiAgICAgICAgZmFkZWRIZWxwLnN0eWxlLm1hcmdpbiA9ICcwLjVlbSAwIDAuMmVtIDAnO1xyXG5cclxuICAgICAgICAvLyAtLS0gQlVUVE9OUyBBQk9WRSBDSEFUIFdJTkRPVyAtLS1cclxuICAgICAgICBjb25zdCB0b3BCdXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdhaS1jaGF0LWJ1dHRvbnMnKTtcclxuICAgICAgICAvLyBTZXR0aW5ncyBidXR0b25cclxuICAgICAgICBjb25zdCBzZXR0aW5nc0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHNldHRpbmdzQnV0dG9uLnNldFRleHQoJ1NldHRpbmdzJyk7XHJcbiAgICAgICAgc2V0dGluZ3NCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1RvZ2dsZSBtb2RlbCBzZXR0aW5ncycpO1xyXG4gICAgICAgIHRvcEJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzZXR0aW5nc0J1dHRvbik7XHJcbiAgICAgICAgLy8gQ29weSBBbGwgYnV0dG9uXHJcbiAgICAgICAgY29uc3QgY29weUFsbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGNvcHlBbGxCdXR0b24udGV4dENvbnRlbnQgPSAnQ29weSBBbGwnO1xyXG4gICAgICAgIHRvcEJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjb3B5QWxsQnV0dG9uKTtcclxuICAgICAgICAvLyBTYXZlIGFzIE5vdGUgYnV0dG9uXHJcbiAgICAgICAgY29uc3Qgc2F2ZU5vdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBzYXZlTm90ZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdTYXZlIGFzIE5vdGUnO1xyXG4gICAgICAgIHRvcEJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzYXZlTm90ZUJ1dHRvbik7XHJcbiAgICAgICAgLy8gQ2xlYXIgYnV0dG9uXHJcbiAgICAgICAgY29uc3QgY2xlYXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBjbGVhckJ1dHRvbi50ZXh0Q29udGVudCA9ICdDbGVhciBDaGF0JztcclxuICAgICAgICB0b3BCdXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoY2xlYXJCdXR0b24pO1xyXG5cclxuICAgICAgICAvLyBNZXNzYWdlcyBjb250YWluZXJcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdignYWktY2hhdC1tZXNzYWdlcycpO1xyXG4gICAgICAgIC8vIEFsbCBzdHlsaW5nIGZvciBtZXNzYWdlc0NvbnRhaW5lciBpcyBub3cgaGFuZGxlZCBieSAuYWktY2hhdC1tZXNzYWdlcyBpbiBzdHlsZXMuY3NzXHJcblxyXG4gICAgICAgIC8vIC0tLSBJTlBVVCBDT05UQUlORVIgQVQgQk9UVE9NIC0tLVxyXG4gICAgICAgIHRoaXMuaW5wdXRDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdhaS1jaGF0LWlucHV0LWNvbnRhaW5lcicpO1xyXG4gICAgICAgIC8vIFRleHRhcmVhIGZvciBpbnB1dFxyXG4gICAgICAgIGNvbnN0IHRleHRhcmVhID0gdGhpcy5pbnB1dENvbnRhaW5lci5jcmVhdGVFbCgndGV4dGFyZWEnLCB7XHJcbiAgICAgICAgICAgIGNsczogJ2FpLWNoYXQtaW5wdXQnLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1R5cGUgeW91ciBtZXNzYWdlLi4uJyxcclxuICAgICAgICAgICAgICAgIHJvd3M6ICczJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gQWxsIHN0eWxpbmcgZm9yIHRleHRhcmVhIGlzIG5vdyBoYW5kbGVkIGJ5IC5haS1jaGF0LWlucHV0IGluIHN0eWxlcy5jc3NcclxuXHJcbiAgICAgICAgLy8gU2VuZCBidXR0b24gKG5vdyBuZXh0IHRvIHRleHRhcmVhKVxyXG4gICAgICAgIGNvbnN0IHNlbmRCdXR0b24gPSB0aGlzLmlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgIHRleHQ6ICdTZW5kJyxcclxuICAgICAgICAgICAgY2xzOiAnbW9kLWN0YSdcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBTdG9wIGJ1dHRvbiAobm93IG5leHQgdG8gdGV4dGFyZWEsIGhpZGRlbiBpbml0aWFsbHkpXHJcbiAgICAgICAgY29uc3Qgc3RvcEJ1dHRvbiA9IHRoaXMuaW5wdXRDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHtcclxuICAgICAgICAgICAgdGV4dDogJ1N0b3AnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN0b3BCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgIC8vIC0tLSBUSU5ZIEhFTFAgQlVUVE9OIEFCT1ZFIFNFTkQgQlVUVE9OIC0tLVxyXG4gICAgICAgIGNvbnN0IGhlbHBCdXR0b24gPSB0aGlzLmlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgIHRleHQ6ICc/JyxcclxuICAgICAgICB9KTtcclxuICAgICAgICBoZWxwQnV0dG9uLnNldEF0dHIoJ2FyaWEtbGFiZWwnLCAnU2hvdyBjaGF0IGhlbHAnKTtcclxuICAgICAgICBoZWxwQnV0dG9uLnN0eWxlLmZvbnRTaXplID0gJzAuOWVtJztcclxuICAgICAgICBoZWxwQnV0dG9uLnN0eWxlLndpZHRoID0gJzEuOGVtJztcclxuICAgICAgICBoZWxwQnV0dG9uLnN0eWxlLmhlaWdodCA9ICcxLjhlbSc7XHJcbiAgICAgICAgaGVscEJ1dHRvbi5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMC4yZW0nO1xyXG4gICAgICAgIGhlbHBCdXR0b24uc3R5bGUub3BhY2l0eSA9ICcwLjcnO1xyXG4gICAgICAgIGhlbHBCdXR0b24uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIGhlbHBCdXR0b24uc3R5bGUucmlnaHQgPSAnMC41ZW0nO1xyXG4gICAgICAgIGhlbHBCdXR0b24uc3R5bGUudG9wID0gJy0yLjJlbSc7XHJcbiAgICAgICAgaGVscEJ1dHRvbi5zdHlsZS56SW5kZXggPSAnMic7XHJcbiAgICAgICAgaGVscEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgbmV3IENoYXRIZWxwTW9kYWwodGhpcy5hcHApLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmlucHV0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuXHJcbiAgICAgICAgLy8gLS0tIEhBTkRMRSBTRU5EIE1FU1NBR0UgLS0tXHJcbiAgICAgICAgY29uc3Qgc2VuZE1lc3NhZ2UgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZXh0YXJlYS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIGlmICghY29udGVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gRGlzYWJsZSBpbnB1dCBhbmQgc2hvdyBzdG9wIGJ1dHRvblxyXG4gICAgICAgICAgICB0ZXh0YXJlYS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbmRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIHN0b3BCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdXNlciBtZXNzYWdlXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJNZXNzYWdlRWwgPSBhd2FpdCBjcmVhdGVNZXNzYWdlRWxlbWVudCh0aGlzLmFwcCwgJ3VzZXInLCBjb250ZW50LCB0aGlzLmNoYXRIaXN0b3J5TWFuYWdlciwgdGhpcy5wbHVnaW4sIChlbCkgPT4gdGhpcy5yZWdlbmVyYXRlUmVzcG9uc2UoZWwpLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh1c2VyTWVzc2FnZUVsKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxUb3AgPSB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbEhlaWdodDtcclxuICAgICAgICAgICAgdGV4dGFyZWEudmFsdWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBCdWlsZCBjb250ZXh0IGFuZCBnZXQgY2hhdCBoaXN0b3J5XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IHRoaXMuYnVpbGRDb250ZXh0TWVzc2FnZXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgYWxsIGV4aXN0aW5nIG1lc3NhZ2VzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlRWxlbWVudHMgPSB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5haS1jaGF0LW1lc3NhZ2UnKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VFbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb2xlID0gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyJykgPyAndXNlcicgOiAnYXNzaXN0YW50JztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZWwucXVlcnlTZWxlY3RvcignLm1lc3NhZ2UtY29udGVudCcpPy50ZXh0Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZSwgY29udGVudCB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0ZW1wb3JhcnkgY29udGFpbmVyIGZvciBzdHJlYW1pbmcgZGlzcGxheVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgdGVtcENvbnRhaW5lci5hZGRDbGFzcygnYWktY2hhdC1tZXNzYWdlJywgJ2Fzc2lzdGFudCcpO1xyXG4gICAgICAgICAgICAgICAgdGVtcENvbnRhaW5lci5jcmVhdGVEaXYoJ21lc3NhZ2UtY29udGVudCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZW1wQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXNDb250YWluZXIuc2Nyb2xsVG9wID0gdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50ID0gYXdhaXQgdGhpcy5zdHJlYW1Bc3Npc3RhbnRSZXNwb25zZShtZXNzYWdlcywgdGVtcENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRlbXBvcmFyeSBjb250YWluZXIgYW5kIGNyZWF0ZSBwZXJtYW5lbnQgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgdGVtcENvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUNvbnRlbnQudHJpbSgpICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUVsID0gYXdhaXQgY3JlYXRlTWVzc2FnZUVsZW1lbnQodGhpcy5hcHAsICdhc3Npc3RhbnQnLCByZXNwb25zZUNvbnRlbnQsIHRoaXMuY2hhdEhpc3RvcnlNYW5hZ2VyLCB0aGlzLnBsdWdpbiwgKGVsKSA9PiB0aGlzLnJlZ2VuZXJhdGVSZXNwb25zZShlbCksIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobWVzc2FnZUVsKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNoYXRIaXN0b3J5TWFuYWdlci5hZGRNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBtZXNzYWdlRWwuZGF0YXNldC50aW1lc3RhbXAgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6ICdhc3Npc3RhbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZXNwb25zZUNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5uYW1lICE9PSAnQWJvcnRFcnJvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNyZWF0ZU1lc3NhZ2VFbGVtZW50KHRoaXMuYXBwLCAnYXNzaXN0YW50JywgYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCwgdGhpcy5jaGF0SGlzdG9yeU1hbmFnZXIsIHRoaXMucGx1Z2luLCAoZWwpID0+IHRoaXMucmVnZW5lcmF0ZVJlc3BvbnNlKGVsKSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZS1lbmFibGUgaW5wdXQgYW5kIGhpZGUgc3RvcCBidXR0b25cclxuICAgICAgICAgICAgICAgIHRleHRhcmVhLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgc3RvcEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIHNlbmRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyAtLS0gQlVUVE9OIEVWRU5UIExJU1RFTkVSUyAtLS1cclxuICAgICAgICBzZW5kQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2VuZE1lc3NhZ2UpO1xyXG4gICAgICAgIHN0b3BCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdHJlYW0uYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRleHRhcmVhLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgc3RvcEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIHNlbmRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb3B5QWxsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IHRoaXMubWVzc2FnZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLmFpLWNoYXQtbWVzc2FnZScpO1xyXG4gICAgICAgICAgICBsZXQgY2hhdENvbnRlbnQgPSAnJztcclxuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZWwucXVlcnlTZWxlY3RvcignLm1lc3NhZ2UtY29udGVudCcpPy50ZXh0Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgICAgIGNoYXRDb250ZW50ICs9IGNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBtZXNzYWdlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhdENvbnRlbnQgKz0gJ1xcblxcbicgKyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0U2VwYXJhdG9yICsgJ1xcblxcbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhd2FpdCBjb3B5VG9DbGlwYm9hcmQoY2hhdENvbnRlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNhdmVOb3RlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyO1xyXG4gICAgICAgICAgICBsZXQgbW9kZWwgPSAnJztcclxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyID09PSAnb3BlbmFpJykgbW9kZWwgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5tb2RlbDtcclxuICAgICAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgPT09ICdhbnRocm9waWMnKSBtb2RlbCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLm1vZGVsO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChwcm92aWRlciA9PT0gJ2dlbWluaScpIG1vZGVsID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MubW9kZWw7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByb3ZpZGVyID09PSAnb2xsYW1hJykgbW9kZWwgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5tb2RlbDtcclxuICAgICAgICAgICAgYXdhaXQgc2F2ZUNoYXRBc05vdGUoe1xyXG4gICAgICAgICAgICAgICAgYXBwOiB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5haS1jaGF0LW1lc3NhZ2UnKSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB0aGlzLnBsdWdpbi5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyLFxyXG4gICAgICAgICAgICAgICAgbW9kZWwsXHJcbiAgICAgICAgICAgICAgICBjaGF0U2VwYXJhdG9yOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0U2VwYXJhdG9yLFxyXG4gICAgICAgICAgICAgICAgY2hhdE5vdGVGb2xkZXI6IHRoaXMucGx1Z2luLnNldHRpbmdzLmNoYXROb3RlRm9sZGVyXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNsZWFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNoYXRIaXN0b3J5TWFuYWdlci5jbGVhckhpc3RvcnkoKTtcclxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBzaG93IGFueSBtZXNzYWdlIGFmdGVyIGNsZWFyaW5nLlxyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRmFpbGVkIHRvIGNsZWFyIGNoYXQgaGlzdG9yeS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBzZXR0aW5nc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NNb2RhbCA9IG5ldyBTZXR0aW5nc01vZGFsKHRoaXMuYXBwLCB0aGlzLnBsdWdpbik7XHJcbiAgICAgICAgICAgIHNldHRpbmdzTW9kYWwub3BlbigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyAtLS0gU0xBU0ggQ09NTUFORFMgQU5EIEtFWUJPQVJEIFNIT1JUQ1VUUyAtLS1cclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVTbGFzaENvbW1hbmQoY21kOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChjbWQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJy9jbGVhcic6XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2xlYXJCdXR0b24uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJy9jb3B5JzpcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb3B5QWxsQnV0dG9uLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcvc2F2ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2F2ZU5vdGVCdXR0b24uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJy9zZXR0aW5ncyc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3NCdXR0b24uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJy9oZWxwJzpcclxuICAgICAgICAgICAgICAgICAgICBuZXcgQ2hhdEhlbHBNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgLy8gS2V5Ym9hcmQgc2hvcnRjdXRzOiBDdHJsK1NoaWZ0K0MgKENsZWFyKSwgWSAoQ29weSksIFMgKFNhdmUpLCBPIChTZXR0aW5ncyksIEggKEhlbHApXHJcbiAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjJykgeyBlLnByZXZlbnREZWZhdWx0KCk7IGF3YWl0IGNsZWFyQnV0dG9uLmNsaWNrKCk7IHJldHVybjsgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUua2V5LnRvTG93ZXJDYXNlKCkgPT09ICd5JykgeyBlLnByZXZlbnREZWZhdWx0KCk7IGF3YWl0IGNvcHlBbGxCdXR0b24uY2xpY2soKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3MnKSB7IGUucHJldmVudERlZmF1bHQoKTsgYXdhaXQgc2F2ZU5vdGVCdXR0b24uY2xpY2soKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXkudG9Mb3dlckNhc2UoKSA9PT0gJ28nKSB7IGUucHJldmVudERlZmF1bHQoKTsgc2V0dGluZ3NCdXR0b24uY2xpY2soKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2gnKSB7IGUucHJldmVudERlZmF1bHQoKTsgbmV3IENoYXRIZWxwTW9kYWwodGhpcy5hcHApLm9wZW4oKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU2xhc2ggY29tbWFuZHNcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmICFlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB0ZXh0YXJlYS52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSAnL2NsZWFyJyB8fCB2YWwgPT09ICcvY29weScgfHwgdmFsID09PSAnL3NhdmUnIHx8IHZhbCA9PT0gJy9zZXR0aW5ncycgfHwgdmFsID09PSAnL2hlbHAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGhhbmRsZVNsYXNoQ29tbWFuZC5jYWxsKHRoaXMsIHZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNoaWZ0K0VudGVyIHdpbGwgZmFsbCB0aHJvdWdoIGFuZCBhY3QgYXMgYSBub3JtYWwgRW50ZXIgKG5ld2xpbmUpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlbmRlciBsb2FkZWQgY2hhdCBoaXN0b3J5XHJcbiAgICAgICAgaWYgKGxvYWRlZEhpc3RvcnkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIC8vIElmIGxvYWRpbmcgZnJvbSBhIG5vdGUsIGNoZWNrIGZvciBZQU1MIGZyb250bWF0dGVyIGFuZCB1cGRhdGUgc2V0dGluZ3NcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkQ2hhdFlhbWxBbmRBcHBseVNldHRpbmdzKHtcclxuICAgICAgICAgICAgICAgICAgICBhcHA6IHRoaXMuYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbjogdGhpcy5wbHVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHRoaXMucGx1Z2luLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHJlbmRlckNoYXRIaXN0b3J5KHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzQ29udGFpbmVyOiB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgbG9hZGVkSGlzdG9yeSxcclxuICAgICAgICAgICAgICAgIGNoYXRIaXN0b3J5TWFuYWdlcjogdGhpcy5jaGF0SGlzdG9yeU1hbmFnZXIsXHJcbiAgICAgICAgICAgICAgICBwbHVnaW46IHRoaXMucGx1Z2luLFxyXG4gICAgICAgICAgICAgICAgcmVnZW5lcmF0ZVJlc3BvbnNlOiAoZWwpID0+IHRoaXMucmVnZW5lcmF0ZVJlc3BvbnNlKGVsKSxcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvQm90dG9tOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGFkZE1lc3NhZ2Uocm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcsIGNvbnRlbnQ6IHN0cmluZywgaXNFcnJvcjogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUVsID0gYXdhaXQgY3JlYXRlTWVzc2FnZUVsZW1lbnQodGhpcy5hcHAsIHJvbGUsIGNvbnRlbnQsIHRoaXMuY2hhdEhpc3RvcnlNYW5hZ2VyLCB0aGlzLnBsdWdpbiwgKGVsKSA9PiB0aGlzLnJlZ2VuZXJhdGVSZXNwb25zZShlbCksIHRoaXMpO1xyXG4gICAgICAgIC8vIFRoZSB0aW1lc3RhbXAgZm9yIHRoZSBVSSBlbGVtZW50IGlzIHNldCB3aXRoaW4gY3JlYXRlTWVzc2FnZUVsZW1lbnRcclxuICAgICAgICBjb25zdCB1aVRpbWVzdGFtcCA9IG1lc3NhZ2VFbC5kYXRhc2V0LnRpbWVzdGFtcCB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7IC8vIEZhbGxiYWNrLCB0aG91Z2ggY3JlYXRlTWVzc2FnZUVsZW1lbnQgc2hvdWxkIHNldCBpdFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubWVzc2FnZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobWVzc2FnZUVsKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZXNDb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyBQZXJzaXN0IHRoZSBtZXNzYWdlLCB1c2luZyB0aGUgdGltZXN0YW1wIGZyb20gdGhlIFVJIGVsZW1lbnQgZm9yIGNvbnNpc3RlbmN5XHJcbiAgICAgICAgLy8gdW5sZXNzIGl0J3MgYW4gZXJyb3IgbWVzc2FnZSB0aGF0IHNob3VsZG4ndCBiZSBwZXJzaXN0ZWQgYXMgYSByZWd1bGFyIGNoYXQgZW50cnkuXHJcbiAgICAgICAgLy8gSG93ZXZlciwgdGhlIGN1cnJlbnQgcmVxdWlyZW1lbnQgaXMgdG8gcGVyc2lzdCBlcnJvciBtZXNzYWdlcyB0b28uXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGF0SGlzdG9yeU1hbmFnZXIuYWRkTWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHVpVGltZXN0YW1wLCBcclxuICAgICAgICAgICAgICAgIHNlbmRlcjogcm9sZSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiRmFpbGVkIHRvIHNhdmUgY2hhdCBtZXNzYWdlOiBcIiArIGUubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlU3RyZWFtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtLmFib3J0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZWdlbmVyYXRlUmVzcG9uc2UobWVzc2FnZUVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIC8vIERpc2FibGUgaW5wdXQgZHVyaW5nIHJlZ2VuZXJhdGlvblxyXG4gICAgICAgIGNvbnN0IHRleHRhcmVhID0gdGhpcy5pbnB1dENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpO1xyXG4gICAgICAgIGlmICh0ZXh0YXJlYSkgdGV4dGFyZWEuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBGaW5kIGFsbCBtZXNzYWdlIGVsZW1lbnRzXHJcbiAgICAgICAgY29uc3QgYWxsTWVzc2FnZXMgPSBBcnJheS5mcm9tKHRoaXMubWVzc2FnZXNDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLmFpLWNoYXQtbWVzc2FnZScpKTtcclxuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBhbGxNZXNzYWdlcy5pbmRleE9mKG1lc3NhZ2VFbCk7XHJcbiAgICAgICAgY29uc3QgaXNVc2VyQ2xpY2tlZCA9IG1lc3NhZ2VFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3VzZXInKTtcclxuXHJcbiAgICAgICAgLy8gRmluZCB0aGUgdGFyZ2V0IEFJIG1lc3NhZ2UgdG8gb3ZlcndyaXRlXHJcbiAgICAgICAgbGV0IHRhcmdldEluZGV4ID0gLTE7XHJcbiAgICAgICAgaWYgKGlzVXNlckNsaWNrZWQpIHtcclxuICAgICAgICAgICAgLy8gSWYgdXNlciBtZXNzYWdlOiBmaW5kIHRoZSBuZXh0IEFJIG1lc3NhZ2UgYWZ0ZXIgdGhpcyB1c2VyIG1lc3NhZ2VcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGN1cnJlbnRJbmRleCArIDE7IGkgPCBhbGxNZXNzYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbE1lc3NhZ2VzW2ldLmNsYXNzTGlzdC5jb250YWlucygnYXNzaXN0YW50JykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWxsTWVzc2FnZXNbaV0uY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gU3RvcCBpZiBhbm90aGVyIHVzZXIgbWVzc2FnZSBpcyBmb3VuZCBmaXJzdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgQUkgbWVzc2FnZTogdGFyZ2V0IGlzIHRoaXMgbWVzc2FnZVxyXG4gICAgICAgICAgICB0YXJnZXRJbmRleCA9IGN1cnJlbnRJbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdhdGhlciBjb250ZXh0IHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIHJlbGV2YW50IHVzZXIgbWVzc2FnZVxyXG4gICAgICAgIGxldCB1c2VyTXNnSW5kZXggPSBjdXJyZW50SW5kZXg7XHJcbiAgICAgICAgaWYgKCFpc1VzZXJDbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHVzZXJNc2dJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XHJcbiAgICAgICAgICAgIHdoaWxlICh1c2VyTXNnSW5kZXggPj0gMCAmJiAhYWxsTWVzc2FnZXNbdXNlck1zZ0luZGV4XS5jbGFzc0xpc3QuY29udGFpbnMoJ3VzZXInKSkge1xyXG4gICAgICAgICAgICAgICAgdXNlck1zZ0luZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJ1aWxkIGNvbnRleHQgbWVzc2FnZXMgYW5kIGluY2x1ZGUgcHJpb3IgY2hhdCBoaXN0b3J5XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCB0aGlzLmJ1aWxkQ29udGV4dE1lc3NhZ2VzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdXNlck1zZ0luZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSBhbGxNZXNzYWdlc1tpXTtcclxuICAgICAgICAgICAgY29uc3Qgcm9sZSA9IGVsLmNsYXNzTGlzdC5jb250YWlucygndXNlcicpID8gJ3VzZXInIDogJ2Fzc2lzdGFudCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSAoZWwgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQucmF3Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7IHJvbGUsIGNvbnRlbnQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgdGhlIG9sZCBBSSBtZXNzYWdlIGlmIG92ZXJ3cml0aW5nXHJcbiAgICAgICAgbGV0IG9yaWdpbmFsVGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIGxldCBvcmlnaW5hbENvbnRlbnQgPSAnJztcclxuICAgICAgICBsZXQgaW5zZXJ0QWZ0ZXJOb2RlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGlmICh0YXJnZXRJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0RWwgPSBhbGxNZXNzYWdlc1t0YXJnZXRJbmRleF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsVGltZXN0YW1wID0gdGFyZ2V0RWwuZGF0YXNldC50aW1lc3RhbXAgfHwgb3JpZ2luYWxUaW1lc3RhbXA7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsQ29udGVudCA9IHRhcmdldEVsLmRhdGFzZXQucmF3Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgaW5zZXJ0QWZ0ZXJOb2RlID0gdGFyZ2V0RWwucHJldmlvdXNFbGVtZW50U2libGluZyBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1VzZXJDbGlja2VkKSB7XHJcbiAgICAgICAgICAgIC8vIE5vIEFJIG1lc3NhZ2UgdG8gb3ZlcndyaXRlLCBpbnNlcnQgYWZ0ZXIgdXNlciBtZXNzYWdlXHJcbiAgICAgICAgICAgIGluc2VydEFmdGVyTm9kZSA9IG1lc3NhZ2VFbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBObyB1c2VyIG1lc3NhZ2UgZm91bmQsIGluc2VydCBhdCB0b3BcclxuICAgICAgICAgICAgaW5zZXJ0QWZ0ZXJOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgYXNzaXN0YW50IG1lc3NhZ2UgY29udGFpbmVyIGZvciBzdHJlYW1pbmdcclxuICAgICAgICBjb25zdCBhc3Npc3RhbnRDb250YWluZXIgPSBhd2FpdCBjcmVhdGVNZXNzYWdlRWxlbWVudCh0aGlzLmFwcCwgJ2Fzc2lzdGFudCcsICcnLCB0aGlzLmNoYXRIaXN0b3J5TWFuYWdlciwgdGhpcy5wbHVnaW4sIChlbCkgPT4gdGhpcy5yZWdlbmVyYXRlUmVzcG9uc2UoZWwpLCB0aGlzKTtcclxuICAgICAgICBhc3Npc3RhbnRDb250YWluZXIuZGF0YXNldC50aW1lc3RhbXAgPSBvcmlnaW5hbFRpbWVzdGFtcDtcclxuICAgICAgICBpZiAoaW5zZXJ0QWZ0ZXJOb2RlICYmIGluc2VydEFmdGVyTm9kZS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLmluc2VydEJlZm9yZShhc3Npc3RhbnRDb250YWluZXIsIGluc2VydEFmdGVyTm9kZS5uZXh0U2libGluZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhc3Npc3RhbnRDb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZXNDb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0cmVhbUFzc2lzdGFudFJlc3BvbnNlKG1lc3NhZ2VzLCBhc3Npc3RhbnRDb250YWluZXIsIG9yaWdpbmFsVGltZXN0YW1wLCBvcmlnaW5hbENvbnRlbnQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5uYW1lICE9PSAnQWJvcnRFcnJvcicpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgICAgICAgICBhc3Npc3RhbnRDb250YWluZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICBpZiAodGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgIHRleHRhcmVhLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYS5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBidWlsZENvbnRleHRNZXNzYWdlcygpOiBQcm9taXNlPE1lc3NhZ2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzOiBNZXNzYWdlW10gPSBbXHJcbiAgICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHRoaXMucGx1Z2luLmdldFN5c3RlbU1lc3NhZ2UoKSB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGNvbnRleHQgbm90ZXMgaWYgZW5hYmxlZFxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDb250ZXh0Tm90ZXMgJiYgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29udGV4dE5vdGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRDb250ZW50ID0gYXdhaXQgdGhpcy5wbHVnaW4uZ2V0Q29udGV4dE5vdGVzQ29udGVudCh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb250ZXh0Tm90ZXMpO1xyXG4gICAgICAgICAgICBtZXNzYWdlc1swXS5jb250ZW50ICs9IGBcXG5cXG5Db250ZXh0IE5vdGVzOlxcbiR7Y29udGV4dENvbnRlbnR9YDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBjdXJyZW50IG5vdGUgY29udGVudCBpZiBlbmFibGVkXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZmVyZW5jZUN1cnJlbnROb3RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Tm90ZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGN1cnJlbnRGaWxlKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGBIZXJlIGlzIHRoZSBjb250ZW50IG9mIHRoZSBjdXJyZW50IG5vdGU6XFxuXFxuJHtjdXJyZW50Tm90ZUNvbnRlbnR9YFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHN0cmVhbUFzc2lzdGFudFJlc3BvbnNlKFxyXG4gICAgICAgIG1lc3NhZ2VzOiBNZXNzYWdlW10sXHJcbiAgICAgICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuICAgICAgICBvcmlnaW5hbFRpbWVzdGFtcD86IHN0cmluZyxcclxuICAgICAgICBvcmlnaW5hbENvbnRlbnQ/OiBzdHJpbmdcclxuICAgICk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlQ29udGVudCA9ICcnO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlU3RyZWFtID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIuZ2V0Q29tcGxldGlvbihcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wZXJhdHVyZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IHRoaXMucGx1Z2luLnNldHRpbmdzLm1heFRva2VucyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1DYWxsYmFjazogYXN5bmMgKGNodW5rOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VDb250ZW50ICs9IGNodW5rO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50RWwgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLm1lc3NhZ2UtY29udGVudCcpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuZGF0YXNldC5yYXdDb250ZW50ID0gcmVzcG9uc2VDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBNYXJrZG93blJlbmRlcmVyLnJlbmRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZUNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VzQ29udGFpbmVyLnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZXNDb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXI6IHRoaXMuYWN0aXZlU3RyZWFtXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2hhdCBoaXN0b3J5IGlmIHdlIGhhdmUgYSB0aW1lc3RhbXBcclxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsVGltZXN0YW1wICYmIHJlc3BvbnNlQ29udGVudC50cmltKCkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hhdEhpc3RvcnlNYW5hZ2VyLnVwZGF0ZU1lc3NhZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxUaW1lc3RhbXAsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2Fzc2lzdGFudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxDb250ZW50IHx8ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29udGVudFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlQ29udGVudDtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSAhPT0gJ0Fib3J0RXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyAtLS0gSEVMUCBNT0RBTCAtLS0gLy8gVGhpcyBjbGFzcyBpcyBub3cgaW4gYSBzZXBhcmF0ZSBmaWxlOiBDaGF0SGVscE1vZGFsLnRzXHJcbiIsICJpbXBvcnQgeyBWYXVsdCwgVEZpbGUsIFRGb2xkZXIsIG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdE1lc3NhZ2Uge1xyXG4gIHRpbWVzdGFtcDogc3RyaW5nO1xyXG4gIHNlbmRlcjogc3RyaW5nO1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENoYXRIaXN0b3J5TWFuYWdlciB7XHJcbiAgcHJpdmF0ZSB2YXVsdDogVmF1bHQ7XHJcbiAgcHJpdmF0ZSBoaXN0b3J5RmlsZVBhdGg6IHN0cmluZztcclxuICBwcml2YXRlIGhpc3Rvcnk6IENoYXRNZXNzYWdlW10gPSBbXTtcclxuICBwcml2YXRlIGlzTG9hZGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZhdWx0OiBWYXVsdCwgcGx1Z2luSWQ/OiBzdHJpbmcsIGhpc3RvcnlGaWxlUGF0aD86IHN0cmluZykge1xyXG4gICAgdGhpcy52YXVsdCA9IHZhdWx0O1xyXG4gICAgbGV0IGVmZmVjdGl2ZVBsdWdpbklkID0gcGx1Z2luSWQ7XHJcbiAgICBpZiAoIXBsdWdpbklkKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkNSSVRJQ0FMOiBDaGF0SGlzdG9yeU1hbmFnZXIgaW5zdGFudGlhdGVkIHdpdGhvdXQgcGx1Z2luSWQhIFVzaW5nIHBsYWNlaG9sZGVyLiBUaGlzIHdpbGwgbGlrZWx5IGxlYWQgdG8gaW5jb3JyZWN0IGZpbGUgcGF0aHMuXCIpO1xyXG4gICAgICAgIGVmZmVjdGl2ZVBsdWdpbklkID0gXCJ1bmtub3duLXBsdWdpbi1pZC1lcnJvclwiOyAvLyBQbGFjZWhvbGRlclxyXG4gICAgfVxyXG4gICAgY29uc3QgZlBhdGggPSBoaXN0b3J5RmlsZVBhdGggfHwgXCJjaGF0LWhpc3RvcnkuanNvblwiO1xyXG4gICAgLy8gU3RvcmUgaW4gcGx1Z2luIGRhdGEgZGlyZWN0b3J5XHJcbiAgICB0aGlzLmhpc3RvcnlGaWxlUGF0aCA9IG5vcm1hbGl6ZVBhdGgoYC5vYnNpZGlhbi9wbHVnaW5zLyR7ZWZmZWN0aXZlUGx1Z2luSWR9LyR7ZlBhdGh9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIltDaGF0SGlzdG9yeU1hbmFnZXJdIFVzaW5nIGhpc3RvcnkgZmlsZSBwYXRoOlwiLCB0aGlzLmhpc3RvcnlGaWxlUGF0aCk7XHJcbiAgICAvLyBTaG93IGEgTm90aWNlIGluIE9ic2lkaWFuIHNvIHRoZSB1c2VyIGNhbiBzZWUgdGhlIHBhdGggZXZlbiBpZiBsb2dzIGFyZSBzdHJpcHBlZFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lk5vdGljZSkge1xyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGVuc3VyZURpcmVjdG9yeUV4aXN0cygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGRpclBhdGggPSB0aGlzLmhpc3RvcnlGaWxlUGF0aC5zdWJzdHJpbmcoMCwgdGhpcy5oaXN0b3J5RmlsZVBhdGgubGFzdEluZGV4T2YoJy8nKSk7XHJcbiAgICBpZiAoIWRpclBhdGgpIHJldHVybjsgLy8gU2hvdWxkIG5vdCBoYXBwZW4gd2l0aCB0aGUgY3VycmVudCBwYXRoIHN0cnVjdHVyZVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgYWJzdHJhY3RGaWxlID0gdGhpcy52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZGlyUGF0aCk7XHJcbiAgICAgICAgaWYgKGFic3RyYWN0RmlsZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBEaXJlY3RvcnkgZG9lcyBub3QgZXhpc3QsIGNyZWF0ZSBpdFxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZhdWx0LmNyZWF0ZUZvbGRlcihkaXJQYXRoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCEoYWJzdHJhY3RGaWxlIGluc3RhbmNlb2YgVEZvbGRlcikpIHtcclxuICAgICAgICAgICAgLy8gUGF0aCBleGlzdHMgYnV0IGlzIG5vdCBhIGZvbGRlciwgdGhpcyBpcyBhbiBlcnJvclxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBQYXRoICR7ZGlyUGF0aH0gZXhpc3RzIGJ1dCBpcyBub3QgYSBmb2xkZXIuYCk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0aCAke2RpclBhdGh9IGV4aXN0cyBidXQgaXMgbm90IGEgZm9sZGVyLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBhYnN0cmFjdEZpbGUgaXMgYSBURm9sZGVyLCBkaXJlY3RvcnkgYWxyZWFkeSBleGlzdHMsIGRvIG5vdGhpbmcuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gSWYgdGhlIGVycm9yIGlzIHNwZWNpZmljYWxseSBcImZvbGRlciBhbHJlYWR5IGV4aXN0c1wiLCB3ZSBjYW4gYXNzdW1lIGl0J3Mgc2FmZSB0byBpZ25vcmUuXHJcbiAgICAgICAgLy8gVGhpcyBoYW5kbGVzIGNhc2VzIHdoZXJlIGNyZWF0ZUZvbGRlciB0aHJvd3MgZXZlbiBpZiB0aGUgZm9sZGVyIGlzIGFscmVhZHkgdGhlcmUuXHJcbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImZvbGRlciBhbHJlYWR5IGV4aXN0c1wiKSkge1xyXG4gICAgICAgICAgICAvLyBBc3N1bWluZyB0aGUgQVBJIGlzIGNvcnJlY3QgdGhhdCB0aGUgZm9sZGVyIGV4aXN0cy5cclxuICAgICAgICAgICAgLy8gVGhlIHByZXZpb3VzIGNoZWNrIGB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkaXJQYXRoKSBpbnN0YW5jZW9mIFRGb2xkZXJgXHJcbiAgICAgICAgICAgIC8vIG1pZ2h0IGZhaWwgZHVlIHRvIGNhY2hpbmcgb3IgdGltaW5nIGlzc3VlcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgZXJyb3IuXHJcbiAgICAgICAgICAgIC8vIEJ5IHJldHVybmluZyBoZXJlLCB3ZSBhY2NlcHQgdGhhdCB0aGUgZm9sZGVyIGV4aXN0cyBhcyBwZXIgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgIHJldHVybjsgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBhbnkgb3RoZXIgZXJyb3JzLCBvciBpZiB0aGUgc3BlY2lmaWMgXCJmb2xkZXIgYWxyZWFkeSBleGlzdHNcIiBtZXNzYWdlIHdhc24ndCBmb3VuZC5cclxuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZW5zdXJlIGRpcmVjdG9yeSAke2RpclBhdGh9IGV4aXN0czpgLCBlKTtcclxuICAgICAgICB0aHJvdyBlOyAvLyBSZS10aHJvdyBvdGhlciBlcnJvcnNcclxuICAgIH1cclxufVxyXG5cclxuICBhc3luYyBsb2FkSGlzdG9yeSgpOiBQcm9taXNlPENoYXRNZXNzYWdlW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFVzZSBhZGFwdGVyLmV4aXN0cyBmb3IgcmVsaWFibGUgZmlsZSBleGlzdGVuY2UgY2hlY2tcclxuICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy52YXVsdC5hZGFwdGVyLmV4aXN0cyh0aGlzLmhpc3RvcnlGaWxlUGF0aCk7XHJcbiAgICAgIGlmIChleGlzdHMpIHtcclxuICAgICAgICAvLyBVc2UgYWRhcHRlci5yZWFkIGZvciBkaXJlY3QgZmlsZSBhY2Nlc3NcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy52YXVsdC5hZGFwdGVyLnJlYWQodGhpcy5oaXN0b3J5RmlsZVBhdGgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB0aGlzLmhpc3RvcnkgPSBKU09OLnBhcnNlKGRhdGEpIGFzIENoYXRNZXNzYWdlW107XHJcbiAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIGNoYXQgaGlzdG9yeTonLCBwYXJzZUVycm9yKTtcclxuICAgICAgICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbXTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBjaGF0IGhpc3Rvcnk6JywgZSk7XHJcbiAgICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGFkZE1lc3NhZ2UobWVzc2FnZTogQ2hhdE1lc3NhZ2UpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRIaXN0b3J5ID0gYXdhaXQgdGhpcy5sb2FkSGlzdG9yeSgpO1xyXG4gICAgY3VycmVudEhpc3RvcnkucHVzaChtZXNzYWdlKTtcclxuICAgIHRoaXMuaGlzdG9yeSA9IGN1cnJlbnRIaXN0b3J5O1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlSGlzdG9yeSgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0SGlzdG9yeSgpOiBQcm9taXNlPENoYXRNZXNzYWdlW10+IHtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLmxvYWRIaXN0b3J5KCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBjbGVhckhpc3RvcnkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLmhpc3RvcnkgPSBbXTtcclxuICAgIGF3YWl0IHRoaXMuc2F2ZUhpc3RvcnkoKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZU1lc3NhZ2UodGltZXN0YW1wOiBzdHJpbmcsIHNlbmRlcjogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMubG9hZEhpc3RvcnkoKTtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5oaXN0b3J5LmZpbmRJbmRleChtc2cgPT4gXHJcbiAgICAgIG1zZy50aW1lc3RhbXAgPT09IHRpbWVzdGFtcCAmJiBcclxuICAgICAgbXNnLnNlbmRlciA9PT0gc2VuZGVyICYmIFxyXG4gICAgICBtc2cuY29udGVudCA9PT0gY29udGVudFxyXG4gICAgKTtcclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgdGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZUhpc3RvcnkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZU1lc3NhZ2UodGltZXN0YW1wOiBzdHJpbmcsIHNlbmRlcjogc3RyaW5nLCBvbGRDb250ZW50OiBzdHJpbmcsIG5ld0NvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5sb2FkSGlzdG9yeSgpO1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuaGlzdG9yeS5maW5kKG1zZyA9PiBcclxuICAgICAgbXNnLnRpbWVzdGFtcCA9PT0gdGltZXN0YW1wICYmIFxyXG4gICAgICBtc2cuc2VuZGVyID09PSBzZW5kZXIgJiYgXHJcbiAgICAgIG1zZy5jb250ZW50ID09PSBvbGRDb250ZW50XHJcbiAgICApO1xyXG4gICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgbWVzc2FnZS5jb250ZW50ID0gbmV3Q29udGVudDtcclxuICAgICAgYXdhaXQgdGhpcy5zYXZlSGlzdG9yeSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS53YXJuKFwiQ2hhdEhpc3RvcnlNYW5hZ2VyOiB1cGRhdGVNZXNzYWdlIGRpZCBub3QgZmluZCBhIG1hdGNoaW5nIG1lc3NhZ2UgdG8gdXBkYXRlLlwiLCB7dGltZXN0YW1wLCBzZW5kZXIsIG9sZENvbnRlbnR9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2F2ZUhpc3RvcnkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeUV4aXN0cygpO1xyXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcy5oaXN0b3J5LCBudWxsLCAyKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHBhdGggZXhpc3RzIGFuZCBpcyBhIGZvbGRlciAod2hpY2ggd291bGQgYmUgYW4gZXJyb3IpXHJcbiAgICAgIGNvbnN0IGFic3RyYWN0VGFyZ2V0ID0gdGhpcy52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5oaXN0b3J5RmlsZVBhdGgpO1xyXG4gICAgICBpZiAoYWJzdHJhY3RUYXJnZXQgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXRoICR7dGhpcy5oaXN0b3J5RmlsZVBhdGh9IGlzIGEgZGlyZWN0b3J5LCBub3QgYSBmaWxlLmApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVc2UgYWRhcHRlci53cml0ZSB3aGljaCBoYW5kbGVzIGJvdGggY3JlYXRpb24gYW5kIG1vZGlmaWNhdGlvbiBhdG9taWNhbGx5XHJcbiAgICAgIGF3YWl0IHRoaXMudmF1bHQuYWRhcHRlci53cml0ZSh0aGlzLmhpc3RvcnlGaWxlUGF0aCwgZGF0YSk7XHJcblxyXG4gICAgICAvLyBBZnRlciBzdWNjZXNzZnVsIHdyaXRlLCB1cGRhdGUgdmF1bHQgY2FjaGUgaWYgbmVlZGVkXHJcbiAgICAgIGlmICghYWJzdHJhY3RUYXJnZXQgfHwgIShhYnN0cmFjdFRhcmdldCBpbnN0YW5jZW9mIFRGaWxlKSkge1xyXG4gICAgICAgIC8vIEZvcmNlIHZhdWx0IHRvIHJlY29nbml6ZSB0aGUgbmV3IGZpbGUgaW4gaXRzIGNhY2hlXHJcbiAgICAgICAgYXdhaXQgdGhpcy52YXVsdC5hZGFwdGVyLmV4aXN0cyh0aGlzLmhpc3RvcnlGaWxlUGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHNhdmUgaGlzdG9yeSB0byAke3RoaXMuaGlzdG9yeUZpbGVQYXRofTpgLCBlKTtcclxuICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IE15UGx1Z2luIGZyb20gJy4uLy4uL21haW4nO1xyXG5pbXBvcnQgeyBjcmVhdGVQcm92aWRlciB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycyc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHBsdWdpbjogTXlQbHVnaW47XHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNeVBsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoJ0FJIE1vZGVsIFNldHRpbmdzJyk7XHJcbiAgICB9XHJcbiAgICBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKCdhaS1zZXR0aW5ncy1tb2RhbCcpO1xyXG5cclxuICAgICAgICAvLyBTZXR0aW5ncyBTZWN0aW9uXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0FJIE1vZGVsIFNldHRpbmdzJyB9KTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2hyJyk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1N5c3RlbSBNZXNzYWdlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1NldCB0aGUgc3lzdGVtIG1lc3NhZ2UgZm9yIHRoZSBBSScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50LicpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc3lzdGVtTWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeXN0ZW1NZXNzYWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0VuYWJsZSBTdHJlYW1pbmcnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnRW5hYmxlIG9yIGRpc2FibGUgc3RyZWFtaW5nIGZvciBjb21wbGV0aW9ucycpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZVN0cmVhbWluZylcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVTdHJlYW1pbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGVtcGVyYXR1cmUnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnU2V0IHRoZSByYW5kb21uZXNzIG9mIHRoZSBtb2RlbFxcJ3Mgb3V0cHV0ICgwLTEpJylcclxuICAgICAgICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXHJcbiAgICAgICAgICAgICAgICAuc2V0TGltaXRzKDAsIDEsIDAuMSlcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wZXJhdHVyZSlcclxuICAgICAgICAgICAgICAgIC5zZXREeW5hbWljVG9vbHRpcCgpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudGVtcGVyYXR1cmUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdocicpO1xyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdEYXRlIFNldHRpbmdzJyB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnSW5jbHVkZSBEYXRlIHdpdGggU3lzdGVtIE1lc3NhZ2UnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnQWRkIHRoZSBjdXJyZW50IGRhdGUgdG8gdGhlIHN5c3RlbSBtZXNzYWdlJylcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZURhdGVXaXRoU3lzdGVtTWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlRGF0ZVdpdGhTeXN0ZW1NZXNzYWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0luY2x1ZGUgVGltZSB3aXRoIFN5c3RlbSBNZXNzYWdlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0FkZCB0aGUgY3VycmVudCB0aW1lIGFsb25nIHdpdGggdGhlIGRhdGUgdG8gdGhlIHN5c3RlbSBtZXNzYWdlJylcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZVRpbWVXaXRoU3lzdGVtTWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlVGltZVdpdGhTeXN0ZW1NZXNzYWdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaHInKTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnTm90ZSBSZWZlcmVuY2UgU2V0dGluZ3MnIH0pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0VuYWJsZSBPYnNpZGlhbiBMaW5rcycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdSZWFkIE9ic2lkaWFuIGxpbmtzIGluIG1lc3NhZ2VzIHVzaW5nIFtbZmlsZW5hbWVdXSBzeW50YXgnKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVPYnNpZGlhbkxpbmtzKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZU9ic2lkaWFuTGlua3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnRW5hYmxlIENvbnRleHQgTm90ZXMnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnQXR0YWNoIHNwZWNpZmllZCBub3RlIGNvbnRlbnQgdG8gY2hhdCBtZXNzYWdlcycpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUNvbnRleHROb3RlcylcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDb250ZXh0Tm90ZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dE5vdGVzQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdignY29udGV4dC1ub3Rlcy1jb250YWluZXInKTtcclxuICAgICAgICBjb250ZXh0Tm90ZXNDb250YWluZXIuc3R5bGUubWFyZ2luQm90dG9tID0gJzI0cHgnO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZXh0Tm90ZXNDb250YWluZXIpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdDb250ZXh0IE5vdGVzJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ05vdGVzIHRvIGF0dGFjaCBhcyBjb250ZXh0IChzdXBwb3J0cyBbW2ZpbGVuYW1lXV0gYW5kIFtbZmlsZW5hbWUjaGVhZGVyXV0gc3ludGF4KScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJ1tbTm90ZSBOYW1lXV1cXG5bW0Fub3RoZXIgTm90ZSNIZWFkZXJdXScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRleHROb3RlcyB8fCAnJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRleHROb3RlcyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5yb3dzID0gNDtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0V4cGFuZCBMaW5rZWQgTm90ZXMgUmVjdXJzaXZlbHknKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgZW5hYmxlZCwgd2hlbiBmZXRjaGluZyBhIG5vdGUsIGFsc28gZmV0Y2ggYW5kIGV4cGFuZCBsaW5rcyB3aXRoaW4gdGhhdCBub3RlIHJlY3Vyc2l2ZWx5IChwcmV2ZW50cyBpbmZpbml0ZSBsb29wcykuJylcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwYW5kTGlua2VkTm90ZXNSZWN1cnNpdmVseSA/PyBmYWxzZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leHBhbmRMaW5rZWROb3Rlc1JlY3Vyc2l2ZWx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaHInKTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnUHJvdmlkZXIgU2V0dGluZ3MnIH0pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0FJIFByb3ZpZGVyJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSB3aGljaCBBSSBwcm92aWRlciB0byB1c2UnKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdvcGVuYWknLCAnT3BlbkFJIChDaGF0R1BUKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignYW50aHJvcGljJywgJ0FudGhyb3BpYyAoQ2xhdWRlKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignZ2VtaW5pJywgJ0dvb2dsZSAoR2VtaW5pKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignb2xsYW1hJywgJ09sbGFtYSAoTG9jYWwgQUkpJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogJ29wZW5haScgfCAnYW50aHJvcGljJyB8ICdnZW1pbmknIHwgJ29sbGFtYScpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25PcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFByb3ZpZGVyLXNwZWNpZmljIHNldHRpbmdzIGFuZCB0ZXN0IGNvbm5lY3Rpb25cclxuICAgICAgICBzd2l0Y2ggKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29wZW5haSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGVudEVsLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncywgJ09wZW5BSScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm92aWRlci50ZXN0Q29ubmVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQubW9kZWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5haVNldHRpbmdzLmF2YWlsYWJsZU1vZGVscyA9IHJlc3VsdC5tb2RlbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKHJlc3VsdC5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYW50aHJvcGljJzpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUHJvdmlkZXJTZXR0aW5ncyhjb250ZW50RWwsIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLCAnQW50aHJvcGljJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gY3JlYXRlUHJvdmlkZXIodGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyLnRlc3RDb25uZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzICYmIHJlc3VsdC5tb2RlbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYW50aHJvcGljU2V0dGluZ3MuYXZhaWxhYmxlTW9kZWxzID0gcmVzdWx0Lm1vZGVscztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmxhc3RUZXN0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmxhc3RUZXN0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKHJlc3VsdC5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdnZW1pbmknOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQcm92aWRlclNldHRpbmdzKGNvbnRlbnRFbCwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MsICdHZW1pbmknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBjcmVhdGVQcm92aWRlcih0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIudGVzdENvbm5lY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MgJiYgcmVzdWx0Lm1vZGVscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5hdmFpbGFibGVNb2RlbHMgPSByZXN1bHQubW9kZWxzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MubGFzdFRlc3RSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25PcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MubGFzdFRlc3RSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29sbGFtYSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGVudEVsLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncywgJ09sbGFtYScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm92aWRlci50ZXN0Q29ubmVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQubW9kZWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNldHRpbmdzLmF2YWlsYWJsZU1vZGVscyA9IHJlc3VsdC5tb2RlbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKHJlc3VsdC5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgaGVscCB0ZXh0IGZvciBPbGxhbWEgc2V0dXBcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsczogJ3NldHRpbmctaXRlbS1kZXNjcmlwdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1RvIHVzZSBPbGxhbWE6J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGVwcyA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnb2wnKTtcclxuICAgICAgICAgICAgICAgIHN0ZXBzLmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogJ0luc3RhbGwgT2xsYW1hIGZyb20gaHR0cHM6Ly9vbGxhbWEuYWknIH0pO1xyXG4gICAgICAgICAgICAgICAgc3RlcHMuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiAnU3RhcnQgdGhlIE9sbGFtYSBzZXJ2ZXInIH0pO1xyXG4gICAgICAgICAgICAgICAgc3RlcHMuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiAnUHVsbCBtb2RlbHMgdXNpbmcgXCJvbGxhbWEgcHVsbCBtb2RlbC1uYW1lXCInIH0pO1xyXG4gICAgICAgICAgICAgICAgc3RlcHMuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiAnVGVzdCBjb25uZWN0aW9uIHRvIHNlZSBhdmFpbGFibGUgbW9kZWxzJyB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBzZXR0aW5nczogYW55LCBwcm92aWRlck5hbWU6IHN0cmluZywgdGVzdENvbm5lY3Rpb25DYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPikge1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGVzdCBDb25uZWN0aW9uJylcclxuICAgICAgICAgICAgLnNldERlc2MoYFZlcmlmeSB5b3VyIEFQSSBrZXkgYW5kIGZldGNoIGF2YWlsYWJsZSBtb2RlbHMgZm9yICR7cHJvdmlkZXJOYW1lfWApXHJcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1Rlc3QnKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0aW5nLi4uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRlc3RDb25uZWN0aW9uQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXREaXNhYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MubGFzdFRlc3RSZXN1bHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHNldHRpbmdzLmxhc3RUZXN0UmVzdWx0LnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBgTGFzdCB0ZXN0OiAke2RhdGUudG9Mb2NhbGVTdHJpbmcoKX0gLSAke3NldHRpbmdzLmxhc3RUZXN0UmVzdWx0Lm1lc3NhZ2V9YCxcclxuICAgICAgICAgICAgICAgIGNsczogc2V0dGluZ3MubGFzdFRlc3RSZXN1bHQuc3VjY2VzcyA/ICdzdWNjZXNzJyA6ICdlcnJvcidcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ01vZGVsJylcclxuICAgICAgICAgICAgLnNldERlc2MoYENob29zZSB0aGUgJHtwcm92aWRlck5hbWV9IG1vZGVsIHRvIHVzZWApXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIHNldHRpbmdzLmF2YWlsYWJsZU1vZGVscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihtb2RlbCwgbW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUoc2V0dGluZ3MubW9kZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5tb2RlbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IEFwcCwgTWFya2Rvd25SZW5kZXJlciwgTm90aWNlLCBDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IE1lc3NhZ2UgYXMgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCB7IGNyZWF0ZUFjdGlvbkJ1dHRvbiwgY29weVRvQ2xpcGJvYXJkIH0gZnJvbSAnLi9CdXR0b25zJztcclxuaW1wb3J0IHsgQ29uZmlybWF0aW9uTW9kYWwgfSBmcm9tICcuL0NvbmZpcm1hdGlvbk1vZGFsJztcclxuXHJcbi8qKlxyXG4gKiBCYXNlIE1lc3NhZ2UgaW50ZXJmYWNlIGZvciBjaGF0IG1lc3NhZ2VzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlIHtcclxuICAgIHJvbGU6IE1lc3NhZ2VUeXBlWydyb2xlJ107XHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcbiAgICByZW5kZXIoKTogUHJvbWlzZTx2b2lkPjtcclxuICAgIHNldENvbnRlbnQoY29udGVudDogc3RyaW5nKTogdm9pZDtcclxuICAgIGdldENvbnRlbnQoKTogc3RyaW5nO1xyXG4gICAgZGVsZXRlKCk6IHZvaWQ7XHJcbiAgICBlZGl0KCk6IHZvaWQ7XHJcbiAgICBjb3B5KCk6IFByb21pc2U8dm9pZD47XHJcbiAgICByZWdlbmVyYXRlKCk6IFByb21pc2U8dm9pZD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNlIE1lc3NhZ2UgY2xhc3MgaW1wbGVtZW50aW5nIHNoYXJlZCBmdW5jdGlvbmFsaXR5XHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTWVzc2FnZSBleHRlbmRzIENvbXBvbmVudCBpbXBsZW1lbnRzIElNZXNzYWdlIHtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgYWN0aW9uc0VsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIHJhd0NvbnRlbnQ6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBhcHA6IEFwcDtcclxuICAgIHB1YmxpYyByb2xlOiBNZXNzYWdlVHlwZVsncm9sZSddO1xyXG4gICAgcHVibGljIGNvbnRlbnQ6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBhcHA6IEFwcCxcclxuICAgICAgICByb2xlOiBNZXNzYWdlVHlwZVsncm9sZSddLFxyXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZ1xyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLnJvbGUgPSByb2xlO1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5yYXdDb250ZW50ID0gY29udGVudDtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDcmVhdGUgYmFzZSBtZXNzYWdlIHN0cnVjdHVyZVxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcygnYWktY2hhdC1tZXNzYWdlJywgcm9sZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lciBmb3IgY29udGVudCBhbmQgYWN0aW9uc1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZWxlbWVudC5jcmVhdGVEaXYoJ21lc3NhZ2UtY29udGFpbmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRlbnQgZWxlbWVudFxyXG4gICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQgPSBjb250YWluZXIuY3JlYXRlRGl2KCdtZXNzYWdlLWNvbnRlbnQnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDcmVhdGUgYWN0aW9ucyBjb250YWluZXJcclxuICAgICAgICB0aGlzLmFjdGlvbnNFbGVtZW50ID0gY29udGFpbmVyLmNyZWF0ZURpdignbWVzc2FnZS1hY3Rpb25zJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQWRkIGhvdmVyIGJlaGF2aW9yXHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc0VsZW1lbnQucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNFbGVtZW50LmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc0VsZW1lbnQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zRWxlbWVudC5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgcmVnZW5lcmF0ZSgpOiBQcm9taXNlPHZvaWQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBET00gZWxlbWVudCBmb3IgdGhpcyBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIGdldEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHJhdyBjb250ZW50IG9mIHRoZSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIGdldENvbnRlbnQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yYXdDb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBtZXNzYWdlIGNvbnRlbnRcclxuICAgICAqL1xyXG4gICAgc2V0Q29udGVudChjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJhd0NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgdGhlIG1lc3NhZ2UgY29udGVudCB3aXRoIE1hcmtkb3duXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHJlbmRlcigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50LmVtcHR5KCk7XHJcbiAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIoXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICB0aGlzLnJhd0NvbnRlbnQsXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQsXHJcbiAgICAgICAgICAgICcnLFxyXG4gICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgKS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTWFya2Rvd24gcmVuZGVyaW5nIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMucmF3Q29udGVudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSB0aGlzIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZGVsZXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSBlZGl0aW5nIG9mIHRoZSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIGVkaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEVsZW1lbnQuaGFzQ2xhc3MoJ2VkaXRpbmcnKSkge1xyXG4gICAgICAgICAgICAvLyBTYXZlIGVkaXRzXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gdGhpcy5jb250ZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpO1xyXG4gICAgICAgICAgICBpZiAodGV4dGFyZWEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGVudCh0ZXh0YXJlYS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50LnJlbW92ZUNsYXNzKCdlZGl0aW5nJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTd2l0Y2ggdG8gZWRpdCBtb2RlXHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICAgICAgdGV4dGFyZWEudmFsdWUgPSB0aGlzLnJhd0NvbnRlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQuZW1wdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQuYWRkQ2xhc3MoJ2VkaXRpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IG1lc3NhZ2UgY29udGVudCB0byBjbGlwYm9hcmRcclxuICAgICAqL1xyXG4gICAgYXN5bmMgY29weSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAodGhpcy5yYXdDb250ZW50LnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gY29udGVudCB0byBjb3B5Jyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGhpcy5yYXdDb250ZW50KTtcclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnQ29waWVkIHRvIGNsaXBib2FyZCcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBjb3B5IHRvIGNsaXBib2FyZCcpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDbGlwYm9hcmQgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG1lc3NhZ2UgZWxlbWVudCBmb3IgdGhlIGNoYXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlRWxlbWVudChcclxuICAgIGFwcDogQXBwLFxyXG4gICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcsXHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICBjaGF0SGlzdG9yeU1hbmFnZXI6IGFueSxcclxuICAgIHBsdWdpbjogYW55LFxyXG4gICAgcmVnZW5lcmF0ZUNhbGxiYWNrOiAobWVzc2FnZUVsOiBIVE1MRWxlbWVudCkgPT4gdm9pZCxcclxuICAgIHBhcmVudENvbXBvbmVudDogQ29tcG9uZW50XHJcbik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IG1lc3NhZ2VFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbWVzc2FnZUVsLmFkZENsYXNzKCdhaS1jaGF0LW1lc3NhZ2UnLCByb2xlKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VDb250YWluZXIgPSBtZXNzYWdlRWwuY3JlYXRlRGl2KCdtZXNzYWdlLWNvbnRhaW5lcicpO1xyXG4gICAgY29uc3QgY29udGVudEVsID0gbWVzc2FnZUNvbnRhaW5lci5jcmVhdGVEaXYoJ21lc3NhZ2UtY29udGVudCcpO1xyXG4gICAgbWVzc2FnZUVsLmRhdGFzZXQucmF3Q29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICBtZXNzYWdlRWwuZGF0YXNldC50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICBNYXJrZG93blJlbmRlcmVyLnJlbmRlcihhcHAsIGNvbnRlbnQsIGNvbnRlbnRFbCwgJycsIHBhcmVudENvbXBvbmVudCkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29udGVudEVsLnRleHRDb250ZW50ID0gY29udGVudDtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYWN0aW9uc0VsID0gbWVzc2FnZUNvbnRhaW5lci5jcmVhdGVEaXYoJ21lc3NhZ2UtYWN0aW9ucycpO1xyXG4gICAgYWN0aW9uc0VsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgbWVzc2FnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XHJcbiAgICAgICAgYWN0aW9uc0VsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgIGFjdGlvbnNFbC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgICB9KTtcclxuICAgIG1lc3NhZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgIGFjdGlvbnNFbC5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgYWN0aW9uc0VsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBDb3B5IGJ1dHRvblxyXG4gICAgYWN0aW9uc0VsLmFwcGVuZENoaWxkKGNyZWF0ZUFjdGlvbkJ1dHRvbignQ29weScsICdDb3B5IG1lc3NhZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvbnRlbnQgPSBtZXNzYWdlRWwuZGF0YXNldC5yYXdDb250ZW50IHx8ICcnO1xyXG4gICAgICAgIGlmIChjdXJyZW50Q29udGVudC50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ05vIGNvbnRlbnQgdG8gY29weScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvcHlUb0NsaXBib2FyZChjdXJyZW50Q29udGVudCk7XHJcbiAgICB9KSk7XHJcbiAgICAvLyBFZGl0IGJ1dHRvblxyXG4gICAgYWN0aW9uc0VsLmFwcGVuZENoaWxkKGNyZWF0ZUFjdGlvbkJ1dHRvbignRWRpdCcsICdFZGl0IG1lc3NhZ2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFjb250ZW50RWwuaGFzQ2xhc3MoJ2VkaXRpbmcnKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLnZhbHVlID0gbWVzc2FnZUVsLmRhdGFzZXQucmF3Q29udGVudCB8fCAnJztcclxuICAgICAgICAgICAgdGV4dGFyZWEuY2xhc3NOYW1lID0gJ21lc3NhZ2UtY29udGVudCBlZGl0aW5nJztcclxuICAgICAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRFbC5hcHBlbmRDaGlsZCh0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgIHRleHRhcmVhLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRFbC5hZGRDbGFzcygnZWRpdGluZycpO1xyXG4gICAgICAgICAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAhZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0YXJlYS5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkQ29udGVudCA9IG1lc3NhZ2VFbC5kYXRhc2V0LnJhd0NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb250ZW50ID0gdGV4dGFyZWEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNoYXRIaXN0b3J5TWFuYWdlci51cGRhdGVNZXNzYWdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRWwuZGF0YXNldC50aW1lc3RhbXAgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyJykgPyAndXNlcicgOiAnYXNzaXN0YW50JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ29udGVudCB8fCAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUVsLmRhdGFzZXQucmF3Q29udGVudCA9IG5ld0NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIoYXBwLCBuZXdDb250ZW50LCBjb250ZW50RWwsICcnLCBwYXJlbnRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbC5yZW1vdmVDbGFzcygnZWRpdGluZycpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBzYXZlIGVkaXRlZCBtZXNzYWdlLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VFbC5kYXRhc2V0LnJhd0NvbnRlbnQgPSBvbGRDb250ZW50IHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKGFwcCwgb2xkQ29udGVudCB8fCAnJywgY29udGVudEVsLCAnJywgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50RWwucmVtb3ZlQ2xhc3MoJ2VkaXRpbmcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG4gICAgLy8gRGVsZXRlIGJ1dHRvblxyXG4gICAgYWN0aW9uc0VsLmFwcGVuZENoaWxkKGNyZWF0ZUFjdGlvbkJ1dHRvbignRGVsZXRlJywgJ0RlbGV0ZSBtZXNzYWdlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENvbmZpcm1hdGlvbk1vZGFsKGFwcCwgJ0RlbGV0ZSBtZXNzYWdlJywgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBtZXNzYWdlPycsIChjb25maXJtZWQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICAgICAgY2hhdEhpc3RvcnlNYW5hZ2VyLmRlbGV0ZU1lc3NhZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUVsLmRhdGFzZXQudGltZXN0YW1wIHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd1c2VyJykgPyAndXNlcicgOiAnYXNzaXN0YW50JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRWwuZGF0YXNldC5yYXdDb250ZW50IHx8ICcnXHJcbiAgICAgICAgICAgICAgICApLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VFbC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdGYWlsZWQgdG8gZGVsZXRlIG1lc3NhZ2UgZnJvbSBoaXN0b3J5LicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBtb2RhbC5vcGVuKCk7XHJcbiAgICB9KSk7XHJcbiAgICAvLyBSZWdlbmVyYXRlIGJ1dHRvblxyXG4gICAgYWN0aW9uc0VsLmFwcGVuZENoaWxkKGNyZWF0ZUFjdGlvbkJ1dHRvbignUmVnZW5lcmF0ZScsICdSZWdlbmVyYXRlIHRoaXMgcmVzcG9uc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgcmVnZW5lcmF0ZUNhbGxiYWNrKG1lc3NhZ2VFbCk7XHJcbiAgICB9KSk7XHJcbiAgICBcclxuICAgIG1lc3NhZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoYWN0aW9uc0VsKTtcclxuICAgIHJldHVybiBtZXNzYWdlRWw7XHJcbn1cclxuIiwgImltcG9ydCB7IENvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQnV0dG9uQ29uZmlnIHtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB0b29sdGlwOiBzdHJpbmc7XHJcbiAgICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgaXNIaWRkZW4/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQnV0dG9ucyBjb21wb25lbnQgZm9yIGhhbmRsaW5nIGFsbCBidXR0b24gY3JlYXRpb24gYW5kIHN0eWxpbmdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdXR0b25zIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgc2VuZEJ1dHRvbjogQnV0dG9uQ29tcG9uZW50O1xyXG4gICAgcHJpdmF0ZSBzdG9wQnV0dG9uOiBCdXR0b25Db21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGNsZWFyQnV0dG9uOiBCdXR0b25Db21wb25lbnQ7XHJcbiAgICBwcml2YXRlIHNldHRpbmdzQnV0dG9uOiBCdXR0b25Db21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdhaS1jaGF0LWJ1dHRvbnMnKTtcclxuICAgICAgICB0aGlzLnNlbmRCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGFpbmVyKVxyXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnU2VuZCcpXHJcbiAgICAgICAgICAgIC5zZXRDbGFzcygnbW9kLWN0YScpO1xyXG4gICAgICAgIHRoaXMuc2VuZEJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG5cclxuICAgICAgICB0aGlzLnN0b3BCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGFpbmVyKVxyXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnU3RvcCcpO1xyXG4gICAgICAgIHRoaXMuc3RvcEJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLmNvbnRhaW5lcilcclxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ0NsZWFyJyk7XHJcbiAgICAgICAgdGhpcy5jbGVhckJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHRpbmdzQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLmNvbnRhaW5lcilcclxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1NldHRpbmdzJyk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0J1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBidXR0b24gY29udGFpbmVyIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgZ2V0Q29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VuZEJ1dHRvbigpOiBCdXR0b25Db21wb25lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRCdXR0b247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RvcEJ1dHRvbigpOiBCdXR0b25Db21wb25lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3BCdXR0b247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2xlYXJCdXR0b24oKTogQnV0dG9uQ29tcG9uZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGVhckJ1dHRvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZXR0aW5nc0J1dHRvbigpOiBCdXR0b25Db21wb25lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzQnV0dG9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dTZW5kQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2VuZEJ1dHRvbi5idXR0b25FbC5yZW1vdmVDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVTZW5kQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2VuZEJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dTdG9wQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RvcEJ1dHRvbi5idXR0b25FbC5yZW1vdmVDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVTdG9wQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RvcEJ1dHRvbi5idXR0b25FbC5hZGRDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dDbGVhckJ1dHRvbigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNsZWFyQnV0dG9uLmJ1dHRvbkVsLnJlbW92ZUNsYXNzKCdoaWRkZW4tYnV0dG9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZUNsZWFyQnV0dG9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2xlYXJCdXR0b24uYnV0dG9uRWwuYWRkQ2xhc3MoJ2hpZGRlbi1idXR0b24nKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93U2V0dGluZ3NCdXR0b24oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0J1dHRvbi5idXR0b25FbC5yZW1vdmVDbGFzcygnaGlkZGVuLWJ1dHRvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVTZXR0aW5nc0J1dHRvbigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzQnV0dG9uLmJ1dHRvbkVsLmFkZENsYXNzKCdoaWRkZW4tYnV0dG9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYWN0aW9uIGJ1dHRvbnMgZm9yIG1lc3NhZ2VzIChjb3B5LCBlZGl0LCBkZWxldGUsIHJlZ2VuZXJhdGUpXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU1lc3NhZ2VBY3Rpb25zKGJ1dHRvbnM6IElCdXR0b25Db25maWdbXSk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBhY3Rpb25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYWN0aW9uc0NvbnRhaW5lci5hZGRDbGFzcygnbWVzc2FnZS1hY3Rpb25zJyk7XHJcbiAgICAgICAgLy8gUmVseSBvbiBDU1MgZm9yIGRpc3BsYXkgYW5kIGhvdmVyIGJlaGF2aW9yXHJcblxyXG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaChjb25maWcgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmNyZWF0ZUJ1dHRvbihjb25maWcpO1xyXG4gICAgICAgICAgICBhY3Rpb25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhY3Rpb25zQ29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIHRoZSBtYWluIGNoYXQgY29udHJvbCBidXR0b25zIChzZW5kLCBzdG9wLCBjb3B5IGFsbCwgY2xlYXIsIHNldHRpbmdzKVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVDaGF0Q29udHJvbHMoYnV0dG9uczogSUJ1dHRvbkNvbmZpZ1tdKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29udHJvbHNDb250YWluZXIuYWRkQ2xhc3MoJ2FpLWNoYXQtYnV0dG9ucycpO1xyXG5cclxuICAgICAgICBidXR0b25zLmZvckVhY2goY29uZmlnID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5jcmVhdGVCdXR0b24oY29uZmlnKTtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0hpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZENsYXNzKCdoaWRkZW4tYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udHJvbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xzQ29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgc2luZ2xlIGJ1dHRvbiB3aXRoIHRoZSBnaXZlbiBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlQnV0dG9uKGNvbmZpZzogSUJ1dHRvbkNvbmZpZyk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBidXR0b24uYWRkQ2xhc3MoJ2FpLWNoYXQtYWN0aW9uLWJ1dHRvbicpO1xyXG4gICAgICAgIGlmIChjb25maWcuY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRDbGFzcyhjb25maWcuY2xhc3NOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy50b29sdGlwKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBsYWJlbEVsLnRleHRDb250ZW50ID0gY29uZmlnLmxhYmVsO1xyXG4gICAgICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChsYWJlbEVsKTtcclxuXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29uZmlnLm9uQ2xpY2spO1xyXG4gICAgICAgIHJldHVybiBidXR0b247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IG9yIGhpZGUgYSBzcGVjaWZpYyBidXR0b24gaW4gYSBjb250YWluZXJcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlQnV0dG9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGxhYmVsOiBzdHJpbmcsIHNob3c6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2FyaWEtbGFiZWw9XCIke2xhYmVsfVwiXWApO1xyXG4gICAgICAgIGlmIChidXR0b24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICBzaG93ID8gYnV0dG9uLnJlbW92ZUNsYXNzKCdoaWRkZW4tYnV0dG9uJykgOiBidXR0b24uYWRkQ2xhc3MoJ2hpZGRlbi1idXR0b24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFV0aWxpdHkgZm9yIGNyZWF0aW5nIGFjdGlvbiBidXR0b25zIGFuZCBjb3B5aW5nIHRvIGNsaXBib2FyZFxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uQnV0dG9uKGxhYmVsOiBzdHJpbmcsIHRvb2x0aXA6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5hZGRDbGFzcygnYWktY2hhdC1hY3Rpb24tYnV0dG9uJyk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdG9vbHRpcCk7XHJcbiAgICBjb25zdCBsYWJlbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgbGFiZWxFbC50ZXh0Q29udGVudCA9IGxhYmVsO1xyXG4gICAgYnV0dG9uLmFwcGVuZENoaWxkKGxhYmVsRWwpO1xyXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIGJ1dHRvbjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZCh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIC8vIE9wdGlvbmFsbHkgaGFuZGxlIGVycm9yXHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZmlybWF0aW9uTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwcml2YXRlIG9uQ29uZmlybTogKGNvbmZpcm1lZDogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHRpdGxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgb25Db25maXJtOiAoY29uZmlybWVkOiBib29sZWFuKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dCh0aXRsZSk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICB0aGlzLm9uQ29uZmlybSA9IG9uQ29uZmlybTtcclxuICAgIH1cclxuICAgIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHRoaXMubWVzc2FnZSB9KTtcclxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdtb2RhbC1idXR0b24tY29udGFpbmVyJyk7XHJcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdDYW5jZWwnIH0pXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Db25maXJtKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICB0ZXh0OiAnRGVsZXRlJyxcclxuICAgICAgICAgICAgY2xzOiAnbW9kLXdhcm5pbmcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbmZpcm0odHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxufVxyXG4iLCAiLy8gSGFuZGxlcyBjaGF0IFlBTUwgbG9hZC9zYXZlIGZvciBjaGF0IG5vdGVzXHJcbmltcG9ydCB7IE15UGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuLi8uLi90eXBlcyc7XHJcbmltcG9ydCB7IE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0ICogYXMgeWFtbCBmcm9tICdqcy15YW1sJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZENoYXRZYW1sKHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzLCBwcm92aWRlcjogc3RyaW5nLCBtb2RlbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHlhbWxPYmogPSB7XHJcbiAgICAgICAgcHJvdmlkZXIsXHJcbiAgICAgICAgbW9kZWwsXHJcbiAgICAgICAgc3lzdGVtX21lc3NhZ2U6IHNldHRpbmdzLnN5c3RlbU1lc3NhZ2UsXHJcbiAgICAgICAgdGVtcGVyYXR1cmU6IHNldHRpbmdzLnRlbXBlcmF0dXJlXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGAtLS1cXG4ke3lhbWwuZHVtcCh5YW1sT2JqKX0tLS1cXG5gO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUNoYXRBc05vdGUoe1xyXG4gICAgYXBwLFxyXG4gICAgbWVzc2FnZXMsXHJcbiAgICBzZXR0aW5ncyxcclxuICAgIHByb3ZpZGVyLFxyXG4gICAgbW9kZWwsXHJcbiAgICBjaGF0U2VwYXJhdG9yLFxyXG4gICAgY2hhdE5vdGVGb2xkZXJcclxufToge1xyXG4gICAgYXBwOiBhbnksXHJcbiAgICBtZXNzYWdlczogTm9kZUxpc3RPZjxFbGVtZW50PixcclxuICAgIHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzLFxyXG4gICAgcHJvdmlkZXI6IHN0cmluZyxcclxuICAgIG1vZGVsOiBzdHJpbmcsXHJcbiAgICBjaGF0U2VwYXJhdG9yOiBzdHJpbmcsXHJcbiAgICBjaGF0Tm90ZUZvbGRlcj86IHN0cmluZ1xyXG59KSB7XHJcbiAgICBsZXQgY2hhdENvbnRlbnQgPSAnJztcclxuICAgIG1lc3NhZ2VzLmZvckVhY2goKGVsOiBFbGVtZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgLy8gUHJlZmVyIHJhdyBtYXJrZG93biBjb250ZW50IGlmIGF2YWlsYWJsZVxyXG4gICAgICAgIGNvbnN0IHJhd0NvbnRlbnQgPSAoZWwgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQucmF3Q29udGVudDtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gcmF3Q29udGVudCAhPT0gdW5kZWZpbmVkID8gcmF3Q29udGVudCA6IGVsLnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlLWNvbnRlbnQnKT8udGV4dENvbnRlbnQgfHwgJyc7XHJcbiAgICAgICAgY2hhdENvbnRlbnQgKz0gY29udGVudDtcclxuICAgICAgICBpZiAoaW5kZXggPCBtZXNzYWdlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGNoYXRDb250ZW50ICs9ICdcXG5cXG4nICsgY2hhdFNlcGFyYXRvciArICdcXG5cXG4nO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgeWFtbCA9IGJ1aWxkQ2hhdFlhbWwoc2V0dGluZ3MsIHByb3ZpZGVyLCBtb2RlbCk7XHJcbiAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIFlBTUwgZnJvbnRtYXR0ZXIgZnJvbSBjaGF0Q29udGVudFxyXG4gICAgY2hhdENvbnRlbnQgPSBjaGF0Q29udGVudC5yZXBsYWNlKC9eLS0tW1xcc1xcU10qPy0tLVxcbj8vLCAnJyk7XHJcbiAgICBjb25zdCBub3RlQ29udGVudCA9IHlhbWwgKyAnXFxuJyArIGNoYXRDb250ZW50LnRyaW1TdGFydCgpO1xyXG4gICAgLy8gR2VuZXJhdGUgZmlsZW5hbWUgd2l0aCB0aW1lc3RhbXBcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBwYWQgPSAobjogbnVtYmVyKSA9PiBuLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgIGNvbnN0IGZpbGVOYW1lID0gYENoYXQgRXhwb3J0ICR7bm93LmdldEZ1bGxZZWFyKCl9LSR7cGFkKG5vdy5nZXRNb250aCgpKzEpfS0ke3BhZChub3cuZ2V0RGF0ZSgpKX0gJHtwYWQobm93LmdldEhvdXJzKCkpfS0ke3BhZChub3cuZ2V0TWludXRlcygpKX0ubWRgO1xyXG4gICAgbGV0IGZpbGVQYXRoID0gZmlsZU5hbWU7XHJcbiAgICBjb25zdCBmb2xkZXIgPSBjaGF0Tm90ZUZvbGRlcj8udHJpbSgpO1xyXG4gICAgaWYgKGZvbGRlcikge1xyXG4gICAgICAgIGZpbGVQYXRoID0gZm9sZGVyLnJlcGxhY2UoL1svXFxcXF0rJC8sICcnKSArICcvJyArIGZpbGVOYW1lO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBhcHAudmF1bHQuY3JlYXRlKGZpbGVQYXRoLCBub3RlQ29udGVudCk7XHJcbiAgICAgICAgbmV3IE5vdGljZShgQ2hhdCBzYXZlZCBhcyBub3RlOiAke2ZpbGVQYXRofWApO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBzYXZlIGNoYXQgYXMgbm90ZS4nKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQWRkIGEgZnVuY3Rpb24gZm9yIGxvYWRpbmcgWUFNTCBhbmQgYXBwbHlpbmcgc2V0dGluZ3MgKHNlZSBwcmV2aW91cyBsb2dpYylcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDaGF0WWFtbEFuZEFwcGx5U2V0dGluZ3Moe1xyXG4gICAgYXBwLFxyXG4gICAgcGx1Z2luLFxyXG4gICAgc2V0dGluZ3MsXHJcbiAgICBmaWxlXHJcbn06IHtcclxuICAgIGFwcDogYW55LFxyXG4gICAgcGx1Z2luOiBhbnksXHJcbiAgICBzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncyxcclxuICAgIGZpbGU6IGFueVxyXG59KSB7XHJcbiAgICAvLyBSZWFkIGZpbGUgY29udGVudHNcclxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcbiAgICAvLyBFeHRyYWN0IFlBTUwgZnJvbnRtYXR0ZXJcclxuICAgIGNvbnN0IHlhbWxNYXRjaCA9IGNvbnRlbnQubWF0Y2goL14tLS1cXG4oW1xcc1xcU10qPylcXG4tLS0vKTtcclxuICAgIGxldCB5YW1sT2JqOiBhbnkgPSB7fTtcclxuICAgIGlmICh5YW1sTWF0Y2gpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB5YW1sT2JqID0geWFtbC5sb2FkKHlhbWxNYXRjaFsxXSkgfHwge307XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB5YW1sT2JqID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gSW1wcm92ZWQgcHJvdmlkZXIvbW9kZWwgc2VsZWN0aW9uIGxvZ2ljOiBwcmlvcml0aXplIG1vZGVsXHJcbiAgICBsZXQgbmV3UHJvdmlkZXIgPSBzZXR0aW5ncy5wcm92aWRlcjtcclxuICAgIGxldCBuZXdNb2RlbCA9IHNldHRpbmdzLm9wZW5haVNldHRpbmdzPy5tb2RlbCB8fCBzZXR0aW5ncy5hbnRocm9waWNTZXR0aW5ncz8ubW9kZWwgfHwgc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3M/Lm1vZGVsIHx8IHNldHRpbmdzLm9sbGFtYVNldHRpbmdzPy5tb2RlbDtcclxuICAgIGNvbnN0IGF2YWlsYWJsZVByb3ZpZGVycyA9IHBsdWdpbi5nZXRBdmFpbGFibGVQcm92aWRlcnMgPyBwbHVnaW4uZ2V0QXZhaWxhYmxlUHJvdmlkZXJzKCkgOiBbXTtcclxuICAgIC8vIDEuIElmIGEgbW9kZWwgaXMgc3BlY2lmaWVkLCBmaW5kIGEgcHJvdmlkZXIgdGhhdCBzdXBwb3J0cyBpdFxyXG4gICAgaWYgKHlhbWxPYmoubW9kZWwpIHtcclxuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IHByb3Ygb2YgYXZhaWxhYmxlUHJvdmlkZXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVscyA9IHBsdWdpbi5nZXRNb2RlbHNGb3JQcm92aWRlciA/IHBsdWdpbi5nZXRNb2RlbHNGb3JQcm92aWRlcihwcm92KSA6IFtdO1xyXG4gICAgICAgICAgICBpZiAobW9kZWxzLmluY2x1ZGVzKHlhbWxPYmoubW9kZWwpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdQcm92aWRlciA9IHByb3Y7XHJcbiAgICAgICAgICAgICAgICBuZXdNb2RlbCA9IHlhbWxPYmoubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBub3QgZm91bmQsIGtlZXAgcHJldmlvdXMgcHJvdmlkZXIvbW9kZWxcclxuICAgIH0gZWxzZSBpZiAoeWFtbE9iai5wcm92aWRlciAmJiBhdmFpbGFibGVQcm92aWRlcnMuaW5jbHVkZXMoeWFtbE9iai5wcm92aWRlcikpIHtcclxuICAgICAgICAvLyAyLiBJZiBvbmx5IHByb3ZpZGVyIGlzIHNwZWNpZmllZCwgdXNlIHByZXZpb3VzIG1vZGVsIGZvciB0aGF0IHByb3ZpZGVyXHJcbiAgICAgICAgbmV3UHJvdmlkZXIgPSB5YW1sT2JqLnByb3ZpZGVyO1xyXG4gICAgICAgIHN3aXRjaCAobmV3UHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAnb3BlbmFpJzpcclxuICAgICAgICAgICAgICAgIG5ld01vZGVsID0gc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYW50aHJvcGljJzpcclxuICAgICAgICAgICAgICAgIG5ld01vZGVsID0gc2V0dGluZ3MuYW50aHJvcGljU2V0dGluZ3MubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ2VtaW5pJzpcclxuICAgICAgICAgICAgICAgIG5ld01vZGVsID0gc2V0dGluZ3MuZ2VtaW5pU2V0dGluZ3MubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnb2xsYW1hJzpcclxuICAgICAgICAgICAgICAgIG5ld01vZGVsID0gc2V0dGluZ3Mub2xsYW1hU2V0dGluZ3MubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBTeXN0ZW0gbWVzc2FnZVxyXG4gICAgbGV0IG5ld1N5c3RlbU1lc3NhZ2UgPSB5YW1sT2JqLnN5c3RlbV9tZXNzYWdlIHx8IHNldHRpbmdzLnN5c3RlbU1lc3NhZ2U7XHJcbiAgICAvLyBUZW1wZXJhdHVyZVxyXG4gICAgbGV0IG5ld1RlbXBlcmF0dXJlID0gc2V0dGluZ3MudGVtcGVyYXR1cmU7XHJcbiAgICBpZiAoeWFtbE9iai50ZW1wZXJhdHVyZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcE51bSA9IHBhcnNlRmxvYXQoeWFtbE9iai50ZW1wZXJhdHVyZSk7XHJcbiAgICAgICAgaWYgKCFpc05hTih0ZW1wTnVtKSkgbmV3VGVtcGVyYXR1cmUgPSB0ZW1wTnVtO1xyXG4gICAgfVxyXG4gICAgLy8gQXBwbHkgc2V0dGluZ3NcclxuICAgIHNldHRpbmdzLnByb3ZpZGVyID0gbmV3UHJvdmlkZXI7XHJcbiAgICBpZiAobmV3TW9kZWwpIHtcclxuICAgICAgICBzd2l0Y2ggKG5ld1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29wZW5haSc6XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcGVuYWlTZXR0aW5ncy5tb2RlbCA9IG5ld01vZGVsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FudGhyb3BpYyc6XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5hbnRocm9waWNTZXR0aW5ncy5tb2RlbCA9IG5ld01vZGVsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2dlbWluaSc6XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5tb2RlbCA9IG5ld01vZGVsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ29sbGFtYSc6XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5tb2RlbCA9IG5ld01vZGVsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0dGluZ3Muc3lzdGVtTWVzc2FnZSA9IG5ld1N5c3RlbU1lc3NhZ2U7XHJcbiAgICBzZXR0aW5ncy50ZW1wZXJhdHVyZSA9IG5ld1RlbXBlcmF0dXJlO1xyXG4gICAgaWYgKHBsdWdpbi5vblNldHRpbmdzTG9hZGVkRnJvbU5vdGUpIHtcclxuICAgICAgICBwbHVnaW4ub25TZXR0aW5nc0xvYWRlZEZyb21Ob3RlKHNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJvdmlkZXI6IG5ld1Byb3ZpZGVyLFxyXG4gICAgICAgIG1vZGVsOiBuZXdNb2RlbCxcclxuICAgICAgICBzeXN0ZW1NZXNzYWdlOiBuZXdTeXN0ZW1NZXNzYWdlLFxyXG4gICAgICAgIHRlbXBlcmF0dXJlOiBuZXdUZW1wZXJhdHVyZVxyXG4gICAgfTtcclxufVxyXG4iLCAiLy8gSGFuZGxlcyBjaGF0IGhpc3RvcnkgcmVuZGVyaW5nIGFuZCBwZXJzaXN0ZW5jZVxyXG4vLyBpbXBvcnQgeyBDaGF0TWVzc2FnZSB9IGZyb20gJy4uLy4uL3R5cGVzJzsgLy8gUmVtb3ZlIHRoaXMgbGluZSwgbm90IGV4cG9ydGVkXHJcbmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2VFbGVtZW50IH0gZnJvbSAnLi9NZXNzYWdlJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJDaGF0SGlzdG9yeSh7XHJcbiAgICBtZXNzYWdlc0NvbnRhaW5lcixcclxuICAgIGxvYWRlZEhpc3RvcnksXHJcbiAgICBjaGF0SGlzdG9yeU1hbmFnZXIsXHJcbiAgICBwbHVnaW4sXHJcbiAgICByZWdlbmVyYXRlUmVzcG9uc2UsXHJcbiAgICBzY3JvbGxUb0JvdHRvbSA9IHRydWVcclxufToge1xyXG4gICAgbWVzc2FnZXNDb250YWluZXI6IEhUTUxFbGVtZW50LFxyXG4gICAgbG9hZGVkSGlzdG9yeTogYW55W10sIC8vIFVzZSBhbnlbXSBpZiBDaGF0TWVzc2FnZSBpcyBub3QgZXhwb3J0ZWRcclxuICAgIGNoYXRIaXN0b3J5TWFuYWdlcjogYW55LFxyXG4gICAgcGx1Z2luOiBhbnksXHJcbiAgICByZWdlbmVyYXRlUmVzcG9uc2U6IChlbDogSFRNTEVsZW1lbnQpID0+IHZvaWQsXHJcbiAgICBzY3JvbGxUb0JvdHRvbT86IGJvb2xlYW5cclxufSkge1xyXG4gICAgbWVzc2FnZXNDb250YWluZXIuZW1wdHkoKTtcclxuICAgIGZvciAoY29uc3QgbXNnIG9mIGxvYWRlZEhpc3RvcnkpIHtcclxuICAgICAgICBpZiAobXNnLnNlbmRlciA9PT0gJ3VzZXInIHx8IG1zZy5zZW5kZXIgPT09ICdhc3Npc3RhbnQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VFbCA9IGF3YWl0IGNyZWF0ZU1lc3NhZ2VFbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgcGx1Z2luLmFwcCxcclxuICAgICAgICAgICAgICAgIG1zZy5zZW5kZXIgYXMgJ3VzZXInIHwgJ2Fzc2lzdGFudCcsXHJcbiAgICAgICAgICAgICAgICBtc2cuY29udGVudCxcclxuICAgICAgICAgICAgICAgIGNoYXRIaXN0b3J5TWFuYWdlcixcclxuICAgICAgICAgICAgICAgIHBsdWdpbixcclxuICAgICAgICAgICAgICAgIHJlZ2VuZXJhdGVSZXNwb25zZSxcclxuICAgICAgICAgICAgICAgIHBsdWdpbiAvLyBwYXJlbnRDb21wb25lbnRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbWVzc2FnZUVsLmRhdGFzZXQudGltZXN0YW1wID0gbXNnLnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgbWVzc2FnZXNDb250YWluZXIuYXBwZW5kQ2hpbGQobWVzc2FnZUVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc2Nyb2xsVG9Cb3R0b20pIHtcclxuICAgICAgICBtZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxUb3AgPSBtZXNzYWdlc0NvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IE1vZGFsLCBBcHAgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hhdEhlbHBNb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgIH1cclxuICAgIG9uT3BlbigpIHtcclxuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dCgnQUkgQ2hhdCBIZWxwJyk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwibGluZS1oZWlnaHQ6MS43O2ZvbnQtc2l6ZToxZW07XCI+XHJcbiAgICAgICAgICAgICAgICA8Yj5TbGFzaCBDb21tYW5kczo8L2I+PGJyPlxyXG4gICAgICAgICAgICAgICAgPGNvZGU+L2NsZWFyPC9jb2RlPiBcdTIwMTMgQ2xlYXIgdGhlIGNoYXQ8YnI+XHJcbiAgICAgICAgICAgICAgICA8Y29kZT4vY29weTwvY29kZT4gXHUyMDEzIENvcHkgYWxsIGNoYXQ8YnI+XHJcbiAgICAgICAgICAgICAgICA8Y29kZT4vc2F2ZTwvY29kZT4gXHUyMDEzIFNhdmUgY2hhdCBhcyBub3RlPGJyPlxyXG4gICAgICAgICAgICAgICAgPGNvZGU+L3NldHRpbmdzPC9jb2RlPiBcdTIwMTMgT3BlbiBzZXR0aW5nczxicj5cclxuICAgICAgICAgICAgICAgIDxjb2RlPi9oZWxwPC9jb2RlPiBcdTIwMTMgU2hvdyB0aGlzIGhlbHA8YnI+XHJcbiAgICAgICAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICAgICAgICA8Yj5LZXlib2FyZCBTaG9ydGN1dHMgKHdoZW4gaW5wdXQgaXMgZm9jdXNlZCk6PC9iPjxicj5cclxuICAgICAgICAgICAgICAgIDxjb2RlPkN0cmwrU2hpZnQrQzwvY29kZT4gXHUyMDEzIENsZWFyIGNoYXQ8YnI+XHJcbiAgICAgICAgICAgICAgICA8Y29kZT5DdHJsK1NoaWZ0K1k8L2NvZGU+IFx1MjAxMyBDb3B5IGFsbCBjaGF0PGJyPlxyXG4gICAgICAgICAgICAgICAgPGNvZGU+Q3RybCtTaGlmdCtTPC9jb2RlPiBcdTIwMTMgU2F2ZSBhcyBub3RlPGJyPlxyXG4gICAgICAgICAgICAgICAgPGNvZGU+Q3RybCtTaGlmdCtPPC9jb2RlPiBcdTIwMTMgT3BlbiBzZXR0aW5nczxicj5cclxuICAgICAgICAgICAgICAgIDxjb2RlPkN0cmwrU2hpZnQrSDwvY29kZT4gXHUyMDEzIFNob3cgdGhpcyBoZWxwPGJyPlxyXG4gICAgICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICAgICAgPGI+T3RoZXI6PC9iPjxicj5cclxuICAgICAgICAgICAgICAgIDxjb2RlPkVudGVyPC9jb2RlPiBcdTIwMTMgU2VuZCBtZXNzYWdlPGJyPlxyXG4gICAgICAgICAgICAgICAgPGNvZGU+U2hpZnQrRW50ZXI8L2NvZGU+IFx1MjAxMyBOZXdsaW5lPGJyPlxyXG4gICAgICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICAgICAgWW91IGNhbiBhbHNvIHVzZSB0aGUgYnV0dG9ucyBhdCB0aGUgdG9wIG9mIHRoZSBjaGF0IHdpbmRvdy5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBnaXZlbiB0ZXh0IHNlbGVjdGlvbiBpbnRvIGFuIGFycmF5IG9mIG1lc3NhZ2Ugb2JqZWN0c1xyXG4gKiBcclxuICogVGhlIGZ1bmN0aW9uIGludGVycHJldHMgbGluZXMgb2YgdGV4dCBzZXBhcmF0ZWQgYnkgY2hhdEJvdW5kYXJ5U3RyaW5nIChkZWZhdWx0cyB0byAnLS0tLScpIGFzIGJvdW5kYXJpZXNcclxuICogYmV0d2VlbiB1c2VyIGFuZCBhc3Npc3RhbnQgbWVzc2FnZXMuXHJcbiAqIFxyXG4gKiBAcGFyYW0gc2VsZWN0aW9uIC0gVGhlIHRleHQgc2VsZWN0aW9uIHRvIHBhcnNlXHJcbiAqIEBwYXJhbSBjaGF0U2VwYXJhdG9yIC0gVGhlIHN0cmluZyB0aGF0IHNlcGFyYXRlcyB1c2VyIGFuZCBhc3Npc3RhbnQgbWVzc2FnZXNcclxuICogQHBhcmFtIGNoYXRCb3VuZGFyeVN0cmluZyAtIFRoZSBzdHJpbmcgdGhhdCBpbmRpY2F0ZXMgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIGNoYXRcclxuICogQHJldHVybnMgQXJyYXkgb2YgbWVzc2FnZSBvYmplY3RzIHdpdGggcm9sZXMgYW5kIGNvbnRlbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlbGVjdGlvbihcclxuICAgIHNlbGVjdGlvbjogc3RyaW5nLFxyXG4gICAgY2hhdFNlcGFyYXRvcjogc3RyaW5nLFxyXG4gICAgY2hhdEJvdW5kYXJ5U3RyaW5nPzogc3RyaW5nXHJcbik6IE1lc3NhZ2VbXSB7XHJcbiAgICAvLyBJZiBubyBjaGF0Qm91bmRhcnlTdHJpbmcgaXMgcHJvdmlkZWQsIHN0YXJ0IHBhcnNpbmcgcmlnaHQgYXdheVxyXG4gICAgbGV0IGluc2lkZUNoYXQgPSAhY2hhdEJvdW5kYXJ5U3RyaW5nO1xyXG5cclxuICAgIGNvbnN0IGxpbmVzID0gc2VsZWN0aW9uLnNwbGl0KCdcXG4nKTtcclxuICAgIGxldCBtZXNzYWdlczogTWVzc2FnZVtdID0gW107XHJcbiAgICBsZXQgY3VycmVudFJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnID0gJ3VzZXInO1xyXG4gICAgbGV0IGN1cnJlbnRDb250ZW50ID0gJyc7XHJcblxyXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICAgaWYgKGNoYXRCb3VuZGFyeVN0cmluZyAmJiBsaW5lLnRyaW0oKSA9PT0gY2hhdEJvdW5kYXJ5U3RyaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHN0YXJ0IGFuZCBlbmQgYm91bmRhcmllcyBhcmUgdGhlIHNhbWUsIHRvZ2dsZSBvbmx5IG9uY2VcclxuICAgICAgICAgICAgaWYgKCFpbnNpZGVDaGF0ICYmIGN1cnJlbnRDb250ZW50LnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7IHJvbGU6IGN1cnJlbnRSb2xlLCBjb250ZW50OiBjdXJyZW50Q29udGVudC50cmltKCkgfSk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluc2lkZUNoYXQgPSAhaW5zaWRlQ2hhdDtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWluc2lkZUNoYXQpIGNvbnRpbnVlOyAvLyBJZ25vcmUgbGluZXMgb3V0c2lkZSBvZiBhIGNoYXRcclxuXHJcbiAgICAgICAgaWYgKGxpbmUudHJpbSgpID09PSBjaGF0U2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhpdCBhIHNlcGFyYXRvciwgc2F2ZSB0aGUgY3VycmVudCBtZXNzYWdlIGFuZCBzd2l0Y2ggcm9sZXNcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb250ZW50LnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7IHJvbGU6IGN1cnJlbnRSb2xlLCBjb250ZW50OiBjdXJyZW50Q29udGVudC50cmltKCkgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudFJvbGUgPSBjdXJyZW50Um9sZSA9PT0gJ3VzZXInID8gJ2Fzc2lzdGFudCcgOiAndXNlcic7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudENvbnRlbnQgKz0gbGluZSArICdcXG4nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTYXZlIGFueSByZW1haW5pbmcgY29udGVudFxyXG4gICAgaWYgKGN1cnJlbnRDb250ZW50LnRyaW0oKSkge1xyXG4gICAgICAgIG1lc3NhZ2VzLnB1c2goeyByb2xlOiBjdXJyZW50Um9sZSwgY29udGVudDogY3VycmVudENvbnRlbnQudHJpbSgpIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtZXNzYWdlcztcclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBXb3Jrc3BhY2VMZWFmLCBJdGVtVmlldywgU2V0dGluZywgTm90aWNlLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IE15UGx1Z2luIGZyb20gJy4uL21haW4nOyAvLyBJbXBvcnQgTXlQbHVnaW5cclxuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMnO1xyXG5cclxuY29uc3QgVklFV19UWVBFX01PREVMX1NFVFRJTkdTID0gJ21vZGVsLXNldHRpbmdzLXZpZXcnO1xyXG5cclxuLyoqXHJcbiAqIEFJIE1vZGVsIFNldHRpbmdzIFZpZXdcclxuICpcclxuICogVGhpcyB2aWV3IHByb3ZpZGVzIGEgdXNlciBpbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIEFJIG1vZGVsIHNldHRpbmdzLlxyXG4gKiBJdCBhbGxvd3MgdXNlcnMgdG86XHJcbiAqIC0gU2VsZWN0IHRoZWlyIHByZWZlcnJlZCBBSSBwcm92aWRlciAoT3BlbkFJLCBBbnRocm9waWMsIEdlbWluaSwgT2xsYW1hKVxyXG4gKiAtIENvbmZpZ3VyZSBwcm92aWRlci1zcGVjaWZpYyBzZXR0aW5ncyBsaWtlIEFQSSBrZXlzIGFuZCBtb2RlbHNcclxuICogLSBBZGp1c3QgY29tbW9uIHNldHRpbmdzIGxpa2UgdGVtcGVyYXR1cmUgYW5kIHRva2VuIGxpbWl0c1xyXG4gKiAtIFRlc3QgQVBJIGNvbm5lY3Rpb25zIGFuZCByZWZyZXNoIGF2YWlsYWJsZSBtb2RlbHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb2RlbFNldHRpbmdzVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIHBsdWdpbjogTXlQbHVnaW47XHJcblxyXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBNeVBsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9NT0RFTF9TRVRUSU5HUztcclxuICAgIH1cclxuXHJcbiAgICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAnQUkgTW9kZWwgU2V0dGluZ3MnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEljb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ2ZpbGUtc2xpZGVycyc7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICAvLyBTZXR0aW5ncyBTZWN0aW9uXHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0FJIE1vZGVsIFNldHRpbmdzJyB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnU3lzdGVtIE1lc3NhZ2UnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnU2V0IHRoZSBzeXN0ZW0gbWVzc2FnZSBmb3IgdGhlIEFJJylcclxuICAgICAgICAgICAgLmFkZFRleHRBcmVhKHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQuJylcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zeXN0ZW1NZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN5c3RlbU1lc3NhZ2UgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnRW5hYmxlIFN0cmVhbWluZycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbmFibGUgb3IgZGlzYWJsZSBzdHJlYW1pbmcgZm9yIGNvbXBsZXRpb25zJylcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlU3RyZWFtaW5nKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZVN0cmVhbWluZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdUZW1wZXJhdHVyZScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdTZXQgdGhlIHJhbmRvbW5lc3Mgb2YgdGhlIG1vZGVsXFwncyBvdXRwdXQgKDAtMSknKVxyXG4gICAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcclxuICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMCwgMSwgMC4xKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRlbXBlcmF0dXJlKVxyXG4gICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZW1wZXJhdHVyZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBEYXRlIFNldHRpbmdzIFNlY3Rpb25cclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnRGF0ZSBTZXR0aW5ncycgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0luY2x1ZGUgRGF0ZSB3aXRoIFN5c3RlbSBNZXNzYWdlJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0FkZCB0aGUgY3VycmVudCBkYXRlIHRvIHRoZSBzeXN0ZW0gbWVzc2FnZScpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVEYXRlV2l0aFN5c3RlbU1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZURhdGVXaXRoU3lzdGVtTWVzc2FnZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdJbmNsdWRlIFRpbWUgd2l0aCBTeXN0ZW0gTWVzc2FnZScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdBZGQgdGhlIGN1cnJlbnQgdGltZSBhbG9uZyB3aXRoIHRoZSBkYXRlIHRvIHRoZSBzeXN0ZW0gbWVzc2FnZScpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVUaW1lV2l0aFN5c3RlbU1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZVRpbWVXaXRoU3lzdGVtTWVzc2FnZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIC8vIE5vdGUgUmVmZXJlbmNlIFNldHRpbmdzIFNlY3Rpb25cclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnTm90ZSBSZWZlcmVuY2UgU2V0dGluZ3MnIH0pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0VuYWJsZSBPYnNpZGlhbiBMaW5rcycpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdSZWFkIE9ic2lkaWFuIGxpbmtzIGluIG1lc3NhZ2VzIHVzaW5nIFtbZmlsZW5hbWVdXSBzeW50YXgnKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVPYnNpZGlhbkxpbmtzKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZU9ic2lkaWFuTGlua3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnRW5hYmxlIENvbnRleHQgTm90ZXMnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnQXR0YWNoIHNwZWNpZmllZCBub3RlIGNvbnRlbnQgdG8gY2hhdCBtZXNzYWdlcycpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUNvbnRleHROb3RlcylcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDb250ZXh0Tm90ZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dE5vdGVzQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdignY29udGV4dC1ub3Rlcy1jb250YWluZXInKTtcclxuICAgICAgICBjb250ZXh0Tm90ZXNDb250YWluZXIuc3R5bGUubWFyZ2luQm90dG9tID0gJzI0cHgnO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZXh0Tm90ZXNDb250YWluZXIpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdDb250ZXh0IE5vdGVzJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ05vdGVzIHRvIGF0dGFjaCBhcyBjb250ZXh0IChzdXBwb3J0cyBbW2ZpbGVuYW1lXV0gYW5kIFtbZmlsZW5hbWUjaGVhZGVyXV0gc3ludGF4KScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJ1tbTm90ZSBOYW1lXV1cXG5bW0Fub3RoZXIgTm90ZSNIZWFkZXJdXScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRleHROb3RlcyB8fCAnJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbnRleHROb3RlcyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFbmFibGUgbGFyZ2VyIHRleHQgYXJlYVxyXG4gICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnJvd3MgPSA0O1xyXG4gICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnN0eWxlLndpZHRoID0gJzEwMCUnO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0V4cGFuZCBMaW5rZWQgTm90ZXMgUmVjdXJzaXZlbHknKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnSWYgZW5hYmxlZCwgd2hlbiBmZXRjaGluZyBhIG5vdGUsIGFsc28gZmV0Y2ggYW5kIGV4cGFuZCBsaW5rcyB3aXRoaW4gdGhhdCBub3RlIHJlY3Vyc2l2ZWx5IChwcmV2ZW50cyBpbmZpbml0ZSBsb29wcykuJylcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwYW5kTGlua2VkTm90ZXNSZWN1cnNpdmVseSA/PyBmYWxzZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5leHBhbmRMaW5rZWROb3Rlc1JlY3Vyc2l2ZWx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIC8vIFByb3ZpZGVyLXNwZWNpZmljIHNldHRpbmdzIHNlY3Rpb25cclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnUHJvdmlkZXIgU2V0dGluZ3MnIH0pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ0FJIFByb3ZpZGVyJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSB3aGljaCBBSSBwcm92aWRlciB0byB1c2UnKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdvcGVuYWknLCAnT3BlbkFJIChDaGF0R1BUKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignYW50aHJvcGljJywgJ0FudGhyb3BpYyAoQ2xhdWRlKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignZ2VtaW5pJywgJ0dvb2dsZSAoR2VtaW5pKScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignb2xsYW1hJywgJ09sbGFtYSAoTG9jYWwgQUkpJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogJ29wZW5haScgfCAnYW50aHJvcGljJyB8ICdnZW1pbmknIHwgJ29sbGFtYScpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdmlldyB0byBzaG93IHByb3ZpZGVyLXNwZWNpZmljIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25PcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAnb3BlbmFpJzpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyT3BlbkFJU2V0dGluZ3MoY29udGVudEVsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhbnRocm9waWMnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJBbnRocm9waWNTZXR0aW5ncyhjb250ZW50RWwpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2dlbWluaSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckdlbWluaVNldHRpbmdzKGNvbnRlbnRFbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnb2xsYW1hJzpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyT2xsYW1hU2V0dGluZ3MoY29udGVudEVsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBzZXR0aW5nczogYW55LCBwcm92aWRlck5hbWU6IHN0cmluZywgdGVzdENvbm5lY3Rpb25DYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPikge1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGVzdCBDb25uZWN0aW9uJylcclxuICAgICAgICAgICAgLnNldERlc2MoYFZlcmlmeSB5b3VyIEFQSSBrZXkgYW5kIGZldGNoIGF2YWlsYWJsZSBtb2RlbHMgZm9yICR7cHJvdmlkZXJOYW1lfWApXHJcbiAgICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1Rlc3QnKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0aW5nLi4uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0ZXN0Q29ubmVjdGlvbkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dCgnVGVzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0RGlzYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmxhc3RUZXN0UmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShzZXR0aW5ncy5sYXN0VGVzdFJlc3VsdC50aW1lc3RhbXApO1xyXG4gICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogYExhc3QgdGVzdDogJHtkYXRlLnRvTG9jYWxlU3RyaW5nKCl9IC0gJHtzZXR0aW5ncy5sYXN0VGVzdFJlc3VsdC5tZXNzYWdlfWAsXHJcbiAgICAgICAgICAgICAgICBjbHM6IHNldHRpbmdzLmxhc3RUZXN0UmVzdWx0LnN1Y2Nlc3MgPyAnc3VjY2VzcycgOiAnZXJyb3InXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdNb2RlbCcpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKGBDaG9vc2UgdGhlICR7cHJvdmlkZXJOYW1lfSBtb2RlbCB0byB1c2VgKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtb2RlbCBvZiBzZXR0aW5ncy5hdmFpbGFibGVNb2RlbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24obW9kZWwsIG1vZGVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHNldHRpbmdzLm1vZGVsKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MubW9kZWwgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyT3BlbkFJU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJQcm92aWRlclNldHRpbmdzKGNvbnRhaW5lckVsLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlTZXR0aW5ncywgJ09wZW5BSScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBjcmVhdGVQcm92aWRlcih0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb3ZpZGVyLnRlc3RDb25uZWN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MgJiYgcmVzdWx0Lm1vZGVscykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MuYXZhaWxhYmxlTW9kZWxzID0gcmVzdWx0Lm1vZGVscztcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MubGFzdFRlc3RSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKHJlc3VsdC5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25PcGVuKCk7IC8vIFJlZnJlc2ggdmlld1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpU2V0dGluZ3MubGFzdFRlc3RSZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckFudGhyb3BpY1NldHRpbmdzKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyUHJvdmlkZXJTZXR0aW5ncyhjb250YWluZXJFbCwgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYW50aHJvcGljU2V0dGluZ3MsICdBbnRocm9waWMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gY3JlYXRlUHJvdmlkZXIodGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm92aWRlci50ZXN0Q29ubmVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzICYmIHJlc3VsdC5tb2RlbHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmF2YWlsYWJsZU1vZGVscyA9IHJlc3VsdC5tb2RlbHM7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmxhc3RUZXN0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5tZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShyZXN1bHQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3BlbigpOyAvLyBSZWZyZXNoIHZpZXdcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFudGhyb3BpY1NldHRpbmdzLmxhc3RUZXN0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJHZW1pbmlTZXR0aW5ncyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLnJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGFpbmVyRWwsIHRoaXMucGx1Z2luLnNldHRpbmdzLmdlbWluaVNldHRpbmdzLCAnR2VtaW5pJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIudGVzdENvbm5lY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQubW9kZWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5hdmFpbGFibGVNb2RlbHMgPSByZXN1bHQubW9kZWxzO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW1pbmlTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTsgLy8gUmVmcmVzaCB2aWV3IHRvIHJlbG9hZCBtb2RlbHNcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmdlbWluaVNldHRpbmdzLmxhc3RUZXN0UmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJPbGxhbWFTZXR0aW5ncyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLnJlbmRlclByb3ZpZGVyU2V0dGluZ3MoY29udGFpbmVyRWwsIHRoaXMucGx1Z2luLnNldHRpbmdzLm9sbGFtYVNldHRpbmdzLCAnT2xsYW1hJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGNyZWF0ZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIudGVzdENvbm5lY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcyAmJiByZXN1bHQubW9kZWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5hdmFpbGFibGVNb2RlbHMgPSByZXN1bHQubW9kZWxzO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UocmVzdWx0Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTsgLy8gUmVmcmVzaCB2aWV3XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vbGxhbWFTZXR0aW5ncy5sYXN0VGVzdFJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKHJlc3VsdC5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgaGVscCB0ZXh0IGZvciBPbGxhbWEgc2V0dXBcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2Jywge1xyXG4gICAgICAgICAgICBjbHM6ICdzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb24nLFxyXG4gICAgICAgICAgICB0ZXh0OiAnVG8gdXNlIE9sbGFtYTonXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgc3RlcHMgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnb2wnKTtcclxuICAgICAgICBzdGVwcy5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdJbnN0YWxsIE9sbGFtYSBmcm9tIGh0dHBzOi8vb2xsYW1hLmFpJyB9KTtcclxuICAgICAgICBzdGVwcy5jcmVhdGVFbCgnbGknLCB7IHRleHQ6ICdTdGFydCB0aGUgT2xsYW1hIHNlcnZlcicgfSk7XHJcbiAgICAgICAgc3RlcHMuY3JlYXRlRWwoJ2xpJywgeyB0ZXh0OiAnUHVsbCBtb2RlbHMgdXNpbmcgXCJvbGxhbWEgcHVsbCBtb2RlbC1uYW1lXCInIH0pO1xyXG4gICAgICAgIHN0ZXBzLmNyZWF0ZUVsKCdsaScsIHsgdGV4dDogJ1Rlc3QgY29ubmVjdGlvbiB0byBzZWUgYXZhaWxhYmxlIG1vZGVscycgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25DbG9zZSgpIHtcclxuICAgICAgICAvLyBDbGVhbiB1cCBhbnkgcmVzb3VyY2VzIGlmIG5lZWRlZFxyXG4gICAgfVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgTm90aWNlLCBURmlsZSwgQXBwIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNeVBsdWdpblNldHRpbmdzIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEV4dHJhY3QgY29udGVudCB1bmRlciBhIHNwZWNpZmljIGhlYWRlciBpbiBhIG5vdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Q29udGVudFVuZGVySGVhZGVyKGNvbnRlbnQ6IHN0cmluZywgaGVhZGVyVGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XHJcbiAgICBsZXQgZm91bmRIZWFkZXIgPSBmYWxzZTtcclxuICAgIGxldCBleHRyYWN0ZWRDb250ZW50ID0gW107XHJcbiAgICBsZXQgaGVhZGVyTGV2ZWwgPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XHJcbiAgICAgICAgY29uc3QgaGVhZGVyTWF0Y2ggPSBsaW5lLm1hdGNoKC9eKCMrKVxccysoLio/KSQvKTtcclxuICAgICAgICBpZiAoaGVhZGVyTWF0Y2gpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEhlYWRlckxldmVsID0gaGVhZGVyTWF0Y2hbMV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SGVhZGVyVGV4dCA9IGhlYWRlck1hdGNoWzJdLnRyaW0oKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kSGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEhlYWRlckxldmVsIDw9IGhlYWRlckxldmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEhlYWRlclRleHQudG9Mb3dlckNhc2UoKSA9PT0gaGVhZGVyVGV4dC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3VuZEhlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJMZXZlbCA9IGN1cnJlbnRIZWFkZXJMZXZlbDtcclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZENvbnRlbnQucHVzaChsaW5lKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmb3VuZEhlYWRlcikge1xyXG4gICAgICAgICAgICBleHRyYWN0ZWRDb250ZW50LnB1c2gobGluZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4dHJhY3RlZENvbnRlbnQuam9pbignXFxuJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcm9jZXNzIGEgc2luZ2xlIG1lc3NhZ2UgY29udGVudCB0byBpbmNsdWRlIE9ic2lkaWFuIG5vdGUgY29udGVudHMsIHJlY3Vyc2l2ZWx5IGlmIGVuYWJsZWRcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzT2JzaWRpYW5MaW5rcyhcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIGFwcDogQXBwLFxyXG4gICAgc2V0dGluZ3M6IE15UGx1Z2luU2V0dGluZ3MsXHJcbiAgICB2aXNpdGVkTm90ZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpLFxyXG4gICAgY3VycmVudERlcHRoOiBudW1iZXIgPSAwXHJcbik6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBpZiAoIXNldHRpbmdzLmVuYWJsZU9ic2lkaWFuTGlua3MpIHJldHVybiBjb250ZW50O1xyXG4gICAgY29uc3QgbGlua1JlZ2V4ID0gL1xcW1xcWyguKj8pXFxdXFxdL2c7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgcHJvY2Vzc2VkQ29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB3aGlsZSAoKG1hdGNoID0gbGlua1JlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzBdICYmIG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gbWF0Y2hbMV0uc3BsaXQoJ3wnKTtcclxuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSBwYXJ0c1swXS50cmltKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYXlUZXh0ID0gcGFydHMubGVuZ3RoID4gMSA/IHBhcnRzWzFdLnRyaW0oKSA6IGZpbGVQYXRoO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKSB8fCBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2ZpbGVQYXRofS5tZGApO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsRmlsZXMgPSBhcHAudmF1bHQuZ2V0RmlsZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlID0gYWxsRmlsZXMuZmluZChmID0+IGYubmFtZSA9PT0gZmlsZVBhdGggfHwgZi5uYW1lID09PSBgJHtmaWxlUGF0aH0ubWRgIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYuYmFzZW5hbWUudG9Mb3dlckNhc2UoKSA9PT0gZmlsZVBhdGgudG9Mb3dlckNhc2UoKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmLnBhdGggPT09IGZpbGVQYXRoIHx8IGYucGF0aCA9PT0gYCR7ZmlsZVBhdGh9Lm1kYCkgfHwgbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlck1hdGNoID0gZmlsZVBhdGgubWF0Y2goLyguKj8pIyguKikvKTtcclxuICAgICAgICAgICAgICAgIGxldCBleHRyYWN0ZWRDb250ZW50ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlICYmIGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWROb3Rlcy5oYXMoZmlsZS5wYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0ZWRDb250ZW50ID0gJ1tSZWN1cnNpdmUgbGluayBvbWl0dGVkOiBhbHJlYWR5IGluY2x1ZGVkXSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRlZE5vdGVzLmFkZChmaWxlLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RlQ29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyTWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZENvbnRlbnQgPSBleHRyYWN0Q29udGVudFVuZGVySGVhZGVyKG5vdGVDb250ZW50LCBoZWFkZXJNYXRjaFsyXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGVkQ29udGVudCA9IG5vdGVDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGV4cGFuZCBsaW5rcyBpZiBlbmFibGVkIGFuZCBkZXB0aCBub3QgZXhjZWVkZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmV4cGFuZExpbmtlZE5vdGVzUmVjdXJzaXZlbHkgJiYgY3VycmVudERlcHRoIDwgKHNldHRpbmdzLm1heExpbmtFeHBhbnNpb25EZXB0aCA/PyAyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGVkQ29udGVudCA9IGF3YWl0IHByb2Nlc3NPYnNpZGlhbkxpbmtzKGV4dHJhY3RlZENvbnRlbnQsIGFwcCwgc2V0dGluZ3MsIHZpc2l0ZWROb3RlcywgY3VycmVudERlcHRoICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkQ29udGVudCA9IHByb2Nlc3NlZENvbnRlbnQucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke21hdGNoWzBdfVxcblxcbi0tLVxcbk5vdGUgTmFtZTogJHtmaWxlUGF0aH1cXG5Db250ZW50OlxcbiR7ZXh0cmFjdGVkQ29udGVudH1cXG4tLS1cXG5gXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRmlsZSBub3QgZm91bmQ6ICR7ZmlsZVBhdGh9LiBFbnN1cmUgdGhlIGZpbGUgbmFtZSBhbmQgcGF0aCBhcmUgY29ycmVjdC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEVycm9yIHByb2Nlc3NpbmcgbGluayBmb3IgJHtmaWxlUGF0aH06ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwcm9jZXNzZWRDb250ZW50O1xyXG59XHJcblxyXG4vKipcclxuICogUHJvY2VzcyBjb250ZXh0IG5vdGVzIHNwZWNpZmllZCBpbiB0aGUgc2V0dGluZ3NcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzQ29udGV4dE5vdGVzKGNvbnRleHROb3Rlc1RleHQ6IHN0cmluZywgYXBwOiBBcHApOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgbGlua1JlZ2V4ID0gL1xcW1xcWyguKj8pXFxdXFxdL2c7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgY29udGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgd2hpbGUgKChtYXRjaCA9IGxpbmtSZWdleC5leGVjKGNvbnRleHROb3Rlc1RleHQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IG1hdGNoWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlck1hdGNoID0gZmlsZU5hbWUubWF0Y2goLyguKj8pIyguKikvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VGaWxlTmFtZSA9IGhlYWRlck1hdGNoID8gaGVhZGVyTWF0Y2hbMV0udHJpbSgpIDogZmlsZU5hbWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJOYW1lID0gaGVhZGVyTWF0Y2ggPyBoZWFkZXJNYXRjaFsyXS50cmltKCkgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGJhc2VGaWxlTmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2Jhc2VGaWxlTmFtZX0ubWRgKTtcclxuICAgICAgICAgICAgICAgIGlmICghZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEZpbGVzID0gYXBwLnZhdWx0LmdldEZpbGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGFsbEZpbGVzLmZpbmQoZiA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmLmJhc2VuYW1lLnRvTG93ZXJDYXNlKCkgPT09IGJhc2VGaWxlTmFtZS50b0xvd2VyQ2FzZSgpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYubmFtZS50b0xvd2VyQ2FzZSgpID09PSBgJHtiYXNlRmlsZU5hbWUudG9Mb3dlckNhc2UoKX0ubWRgXHJcbiAgICAgICAgICAgICAgICAgICAgKSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgJiYgZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZUNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Q29udGVudCArPSBgLS0tXFxuRnJvbSBub3RlOiAke2ZpbGUuYmFzZW5hbWV9XFxuXFxuYDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJDb250ZW50ID0gZXh0cmFjdENvbnRlbnRVbmRlckhlYWRlcihub3RlQ29udGVudCwgaGVhZGVyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRDb250ZW50ICs9IGhlYWRlckNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dENvbnRlbnQgKz0gbm90ZUNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRDb250ZW50ICs9ICdcXG5cXG4nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Q29udGVudCArPSBgTm90ZSBub3QgZm91bmQ6ICR7ZmlsZU5hbWV9XFxuXFxuYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRDb250ZW50ICs9IGBFcnJvciBwcm9jZXNzaW5nIG5vdGUgJHtmaWxlTmFtZX06ICR7ZXJyb3IubWVzc2FnZX1cXG5cXG5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRleHRDb250ZW50O1xyXG59XHJcblxyXG4vKipcclxuICogUHJvY2VzcyBhbiBhcnJheSBvZiBtZXNzYWdlcyB0byBpbmNsdWRlIE9ic2lkaWFuIG5vdGUgY29udGVudHNcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZXMobWVzc2FnZXM6IE1lc3NhZ2VbXSwgYXBwOiBBcHAsIHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzKTogUHJvbWlzZTxNZXNzYWdlW10+IHtcclxuICAgIGNvbnN0IHByb2Nlc3NlZE1lc3NhZ2VzOiBNZXNzYWdlW10gPSBbXTtcclxuICAgIGlmIChzZXR0aW5ncy5lbmFibGVDb250ZXh0Tm90ZXMgJiYgc2V0dGluZ3MuY29udGV4dE5vdGVzKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dENvbnRlbnQgPSBhd2FpdCBwcm9jZXNzQ29udGV4dE5vdGVzKHNldHRpbmdzLmNvbnRleHROb3RlcywgYXBwKTtcclxuICAgICAgICBpZiAoY29udGV4dENvbnRlbnQpIHtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDAgJiYgbWVzc2FnZXNbMF0ucm9sZSA9PT0gJ3N5c3RlbScpIHtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NlZE1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGAke21lc3NhZ2VzWzBdLmNvbnRlbnR9XFxuXFxuSGVyZSBpcyBhZGRpdGlvbmFsIGNvbnRleHQ6XFxuJHtjb250ZXh0Q29udGVudH1gXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzID0gbWVzc2FnZXMuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRNZXNzYWdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBgSGVyZSBpcyBjb250ZXh0IGZvciBvdXIgY29udmVyc2F0aW9uOlxcbiR7Y29udGV4dENvbnRlbnR9YFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzZWRDb250ZW50ID0gYXdhaXQgcHJvY2Vzc09ic2lkaWFuTGlua3MobWVzc2FnZS5jb250ZW50LCBhcHAsIHNldHRpbmdzLCBuZXcgU2V0KCkpO1xyXG4gICAgICAgIHByb2Nlc3NlZE1lc3NhZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICByb2xlOiBtZXNzYWdlLnJvbGUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHByb2Nlc3NlZENvbnRlbnRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm9jZXNzZWRNZXNzYWdlcztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbnRleHROb3Rlc0NvbnRlbnQoY29udGV4dE5vdGVzVGV4dDogc3RyaW5nLCBhcHA6IEFwcCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gcHJvY2Vzc0NvbnRleHROb3Rlcyhjb250ZXh0Tm90ZXNUZXh0LCBhcHApO1xyXG59XHJcbiIsICJpbXBvcnQgeyBNeVBsdWdpblNldHRpbmdzIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIHRoZSBzeXN0ZW0gbWVzc2FnZSB3aXRoIG9wdGlvbmFsIGRhdGUgYW5kIHRpbWUgaW5mb3JtYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeXN0ZW1NZXNzYWdlKHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzKTogc3RyaW5nIHtcclxuICAgIGxldCBzeXN0ZW1NZXNzYWdlID0gc2V0dGluZ3Muc3lzdGVtTWVzc2FnZTtcclxuXHJcbiAgICBpZiAoc2V0dGluZ3MuaW5jbHVkZURhdGVXaXRoU3lzdGVtTWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcbiAgICAgICAgc3lzdGVtTWVzc2FnZSA9IGAke3N5c3RlbU1lc3NhZ2V9XFxuXFxuVGhlIGN1cnJlbnQgZGF0ZSBpcyAke2N1cnJlbnREYXRlfS5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZXR0aW5ncy5pbmNsdWRlVGltZVdpdGhTeXN0ZW1NZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCB0aW1lWm9uZU9mZnNldCA9IG5vdy5nZXRUaW1lem9uZU9mZnNldCgpO1xyXG4gICAgICAgIGNvbnN0IG9mZnNldEhvdXJzID0gTWF0aC5hYnModGltZVpvbmVPZmZzZXQpIC8gNjA7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0TWludXRlcyA9IE1hdGguYWJzKHRpbWVab25lT2Zmc2V0KSAlIDYwO1xyXG4gICAgICAgIGNvbnN0IHNpZ24gPSB0aW1lWm9uZU9mZnNldCA+IDAgPyAnLScgOiAnKyc7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gbm93LnRvTG9jYWxlVGltZVN0cmluZygpO1xyXG4gICAgICAgIGNvbnN0IHRpbWVab25lU3RyaW5nID0gYFVUQyR7c2lnbn0ke29mZnNldEhvdXJzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX06JHtvZmZzZXRNaW51dGVzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gO1xyXG4gICAgICAgIHN5c3RlbU1lc3NhZ2UgPSBgJHtzeXN0ZW1NZXNzYWdlfVxcblxcblRoZSBjdXJyZW50IHRpbWUgaXMgJHtjdXJyZW50VGltZX0gJHt0aW1lWm9uZVN0cmluZ30uYDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3lzdGVtTWVzc2FnZTtcclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBYSxzQkFJQSx3QkFHQSwrQkFHQTtBQVZiO0FBQUE7QUFBTyxJQUFNLHVCQUF1QjtBQUk3QixJQUFNLHlCQUF5QjtBQUcvQixJQUFNLGdDQUFnQztBQUd0QyxJQUFNLDhCQUNUO0FBQUE7QUFBQTs7O0FDWEo7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQTRNYTtBQTVNYjtBQUFBO0FBQUE7QUE0TU8sSUFBTSxtQkFBcUM7QUFB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SyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUM3RTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUNqQyxTQUFLLDhCQUE4QjtBQUFBLEVBQ3ZDO0FBQUEsRUFFQSxNQUFjLGdCQUFnQixVQUF5QztBQUNuRSxXQUFPLGdCQUFnQixVQUFVLEtBQUssS0FBSyxLQUFLLFFBQVE7QUFBQSxFQUM1RDtBQUFBLEVBRUEsTUFBYSx1QkFBdUIsa0JBQTJDO0FBQzNFLFdBQU8sdUJBQXVCLGtCQUFrQixLQUFLLEdBQUc7QUFBQSxFQUM1RDtBQUNKOyIsCiAgIm5hbWVzIjogWyJ0eXBlIiwgInN0YXR1cyIsICJmZXRjaCIsICJSZXF1ZXN0IiwgIlJlc3BvbnNlIiwgIkhlYWRlcnMiLCAiRm9ybURhdGEiLCAiQmxvYiIsICJGaWxlIiwgIlJlYWRhYmxlU3RyZWFtIiwgIl9hIiwgInN0ciIsICJSZWFkYWJsZVN0cmVhbSIsICJfYSIsICJfYSIsICJGaWxlIiwgInR5cGUiLCAianNvbiIsICJfYSIsICJmZXRjaCIsICJvcHRzIiwgIlBhZ2UiLCAicmV0cnlNZXNzYWdlIiwgIl9hIiwgIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCAiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsICJfYSIsICJfQmV0YU1lc3NhZ2VTdHJlYW1fZ2V0RmluYWxNZXNzYWdlIiwgIl9CZXRhTWVzc2FnZVN0cmVhbV9nZXRGaW5hbFRleHQiLCAiX0JldGFNZXNzYWdlU3RyZWFtX2JlZ2luUmVxdWVzdCIsICJfQmV0YU1lc3NhZ2VTdHJlYW1fYWRkU3RyZWFtRXZlbnQiLCAiX0JldGFNZXNzYWdlU3RyZWFtX2VuZFJlcXVlc3QiLCAiX0JldGFNZXNzYWdlU3RyZWFtX2FjY3VtdWxhdGVNZXNzYWdlIiwgImNodW5rIiwgIl9hIiwgIl9hIiwgIkJhdGNoZXMiLCAiaW5pdF9iYXRjaGVzIiwgImNoZWNrTmV2ZXIiLCAiSlNPTl9CVUZfUFJPUEVSVFkiLCAiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwgIl9hIiwgIl9NZXNzYWdlU3RyZWFtX2dldEZpbmFsTWVzc2FnZSIsICJfTWVzc2FnZVN0cmVhbV9nZXRGaW5hbFRleHQiLCAiX01lc3NhZ2VTdHJlYW1fYmVnaW5SZXF1ZXN0IiwgIl9NZXNzYWdlU3RyZWFtX2FkZFN0cmVhbUV2ZW50IiwgIl9NZXNzYWdlU3RyZWFtX2VuZFJlcXVlc3QiLCAiX01lc3NhZ2VTdHJlYW1fYWNjdW11bGF0ZU1lc3NhZ2UiLCAiY2h1bmsiLCAiTWVzc2FnZXMiLCAiREVQUkVDQVRFRF9NT0RFTFMiLCAiaW5pdF9tZXNzYWdlcyIsICJCYXRjaGVzIiwgIl9hIiwgIk1vZGVscyIsICJpbml0X21vZGVscyIsICJfYSIsICJNZXNzYWdlcyIsICJNb2RlbHMiLCAiX2EiLCAiX2EiLCAiX2EiLCAiX2EiLCAiZXhjZXB0aW9uIiwgIm1hcCIsICJzY2hlbWEiLCAidHlwZSIsICJzdHIiLCAic3RyaW5nIiwgImV4dGVuZCIsICJkZWJ1ZyIsICJwcm9jZXNzTWVzc2FnZXMiLCAiX2EiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJERUZBVUxUX1RJVExFX1BST01QVCIsICJERUZBVUxUX1NFVFRJTkdTIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAidGltZXN0YW1wIiwgImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiX2EiLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgImNvbnRlbnQiLCAiaW1wb3J0X29ic2lkaWFuIiwgIl9hIiwgImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJWSUVXX1RZUEVfTU9ERUxfU0VUVElOR1MiLCAiX2EiLCAiZ2VuZXJhdGVOb3RlVGl0bGUiLCAiZ2VuZXJhdGVZYW1sQXR0cmlidXRlIl0KfQo=
