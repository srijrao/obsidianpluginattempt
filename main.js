/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/promptConstants.ts
var promptConstants_exports = {};
__export(promptConstants_exports, {
  AGENT_SYSTEM_PROMPT: () => AGENT_SYSTEM_PROMPT,
  DEFAULT_GENERAL_SYSTEM_PROMPT: () => DEFAULT_GENERAL_SYSTEM_PROMPT,
  DEFAULT_SUMMARY_PROMPT: () => DEFAULT_SUMMARY_PROMPT,
  DEFAULT_TITLE_PROMPT: () => DEFAULT_TITLE_PROMPT,
  DEFAULT_YAML_SYSTEM_MESSAGE: () => DEFAULT_YAML_SYSTEM_MESSAGE
});
var DEFAULT_TITLE_PROMPT, DEFAULT_SUMMARY_PROMPT, DEFAULT_GENERAL_SYSTEM_PROMPT, AGENT_SYSTEM_PROMPT, DEFAULT_YAML_SYSTEM_MESSAGE;
var init_promptConstants = __esm({
  "src/promptConstants.ts"() {
    DEFAULT_TITLE_PROMPT = "You are a title generator. You will give succinct titles that do not contain backslashes, forward slashes, or colons. Only generate a title as your response.";
    DEFAULT_SUMMARY_PROMPT = "Summarize the note content in 1-2 sentences, focusing on the main ideas and purpose.";
    DEFAULT_GENERAL_SYSTEM_PROMPT = "You are a helpful assistant.";
    AGENT_SYSTEM_PROMPT = `
You are an AI assistant with access to tools. Use tools immediately without asking permission.

When you need to use a tool, respond ONLY with a JSON command in this format:

{
  "action": "tool_name",
  "parameters": { /* tool-specific parameters */ },
  "requestId": "unique_id"
}

Available tools:
1. file_write - Write/modify file contents (use "filename" parameter for the file path). Usually md files unless otherwise specified.
2. file_read - Read file contents (use "filePath" parameter)  
3. file_select - Search for files programmatically (use "query" parameter to search by filename/content)
4. file_diff - Compare and suggest changes to files

Context awareness:
- Remember files mentioned/created in this conversation
- When user refers to "the file", "that note", or similar, use file_select to find it
- Use descriptive keywords from the conversation for searches

Examples:
- "create a note about X" \u2192 file_write immediately
- "delete the note about X" \u2192 file_select with query="X" to find the file first
- "read that file" \u2192 file_select to find the referenced file, then file_read
`;
    DEFAULT_YAML_SYSTEM_MESSAGE = "You are an assistant that generates YAML attribute values for Obsidian notes. Read the note and generate a value for the specified YAML field. Only output the value, not the key or extra text.";
  }
});

// src/types.ts
var types_exports = {};
__export(types_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS
});
var DEFAULT_SETTINGS;
var init_types = __esm({
  "src/types.ts"() {
    init_promptConstants();
    DEFAULT_SETTINGS = {
      referenceCurrentNote: false,
      provider: "openai",
      selectedModel: void 0,
      availableModels: [],
      openaiSettings: {
        apiKey: "",
        model: "gpt-4.1",
        availableModels: []
      },
      anthropicSettings: {
        apiKey: "",
        model: "claude-3-5-sonnet-latest",
        availableModels: []
      },
      geminiSettings: {
        apiKey: "",
        model: "gemini-2.5-flash-preview-05-20",
        availableModels: []
      },
      ollamaSettings: {
        serverUrl: "http://localhost:11434",
        model: "llama2",
        availableModels: []
      },
      systemMessage: DEFAULT_GENERAL_SYSTEM_PROMPT,
      temperature: 0.7,
      maxTokens: 1e3,
      includeDateWithSystemMessage: false,
      includeTimeWithSystemMessage: false,
      enableStreaming: true,
      autoOpenModelSettings: true,
      enableObsidianLinks: true,
      titleOutputMode: "clipboard",
      summaryOutputMode: "clipboard",
      chatSeparator: "----",
      chatStartString: void 0,
      chatEndString: void 0,
      enableContextNotes: false,
      contextNotes: "",
      titlePrompt: DEFAULT_TITLE_PROMPT,
      summaryPrompt: DEFAULT_SUMMARY_PROMPT,
      maxSessions: 10,
      autoSaveSessions: true,
      sessions: [],
      activeSessionId: void 0,
      expandLinkedNotesRecursively: false,
      maxLinkExpansionDepth: 2,
      chatNoteFolder: "",
      // Default to vault root
      yamlAttributeGenerators: [
        {
          attributeName: "summary",
          prompt: DEFAULT_SUMMARY_PROMPT,
          outputMode: "metadata",
          commandName: "Generate YAML: summary"
        }
      ],
      providerConfigExpanded: {
        openai: false,
        anthropic: false,
        gemini: false,
        ollama: false
      },
      generalSectionsExpanded: {
        "AI Model Settings": true,
        "Date Settings": true,
        "Note Reference Settings": true,
        "Provider Configuration": true,
        // For the main group of provider configs
        "AI Model Configuration": true
      },
      modelSettingPresets: [
        {
          name: "Default",
          selectedModel: void 0,
          systemMessage: DEFAULT_GENERAL_SYSTEM_PROMPT,
          temperature: 0.7,
          maxTokens: 1e3,
          enableStreaming: true
        }
      ],
      agentMode: {
        enabled: false,
        maxToolCalls: 5,
        timeoutMs: 3e4
      }
    };
  }
});

// providers/base.ts
var ProviderError, BaseProvider;
var init_base = __esm({
  "providers/base.ts"() {
    ProviderError = class extends Error {
      constructor(type2, message, statusCode) {
        super(message);
        __publicField(this, "type");
        __publicField(this, "statusCode");
        this.type = type2;
        this.statusCode = statusCode;
        this.name = "ProviderError";
      }
    };
    BaseProvider = class {
      /**
       * Handle common HTTP errors
       */
      handleHttpError(error) {
        if (error instanceof Response) {
          const status2 = error.status;
          switch (status2) {
            case 401:
              throw new ProviderError(
                "invalid_api_key" /* InvalidApiKey */,
                "Invalid API key",
                status2
              );
            case 429:
              throw new ProviderError(
                "rate_limit" /* RateLimit */,
                "Rate limit exceeded",
                status2
              );
            case 400:
              throw new ProviderError(
                "invalid_request" /* InvalidRequest */,
                "Invalid request",
                status2
              );
            case 500:
            case 502:
            case 503:
            case 504:
              throw new ProviderError(
                "server_error" /* ServerError */,
                "Server error occurred",
                status2
              );
            default:
              throw new ProviderError(
                "server_error" /* ServerError */,
                `Unknown error occurred: ${status2}`,
                status2
              );
          }
        }
        if (!error.response) {
          throw new ProviderError(
            "network_error" /* NetworkError */,
            "Network error occurred"
          );
        }
        const status = error.response.status;
        switch (status) {
          case 401:
            throw new ProviderError(
              "invalid_api_key" /* InvalidApiKey */,
              "Invalid API key",
              status
            );
          case 429:
            throw new ProviderError(
              "rate_limit" /* RateLimit */,
              "Rate limit exceeded",
              status
            );
          case 400:
            throw new ProviderError(
              "invalid_request" /* InvalidRequest */,
              "Invalid request",
              status
            );
          case 500:
          case 502:
          case 503:
          case 504:
            throw new ProviderError(
              "server_error" /* ServerError */,
              "Server error occurred",
              status
            );
          default:
            throw new ProviderError(
              "server_error" /* ServerError */,
              `Unknown error occurred: ${status}`,
              status
            );
        }
      }
      /**
       * Format error message for connection test results
       */
      formatErrorMessage(error) {
        if (error instanceof ProviderError) {
          switch (error.type) {
            case "invalid_api_key" /* InvalidApiKey */:
              return "Invalid API key. Please check your credentials.";
            case "rate_limit" /* RateLimit */:
              return "Rate limit exceeded. Please try again later.";
            case "network_error" /* NetworkError */:
              return "Network error. Please check your internet connection.";
            default:
              return error.message;
          }
        }
        return error.message || "An unknown error occurred";
      }
      /**
       * Create a standard error response for connection tests
       */
      createErrorResponse(error) {
        return {
          success: false,
          message: this.formatErrorMessage(error)
        };
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/version.mjs
var VERSION;
var init_version = __esm({
  "node_modules/@anthropic-ai/sdk/version.mjs"() {
    VERSION = "0.36.3";
  }
});

// node_modules/@anthropic-ai/sdk/_shims/registry.mjs
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(`you must \`import '@anthropic-ai/sdk/shims/${shims.kind}'\` before importing anything else from @anthropic-ai/sdk`);
  }
  if (kind) {
    throw new Error(`can't \`import '@anthropic-ai/sdk/shims/${shims.kind}'\` after \`import '@anthropic-ai/sdk/shims/${kind}'\``);
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}
var auto, kind, fetch2, Request2, Response2, Headers2, FormData2, Blob2, File2, ReadableStream2, getMultipartRequestOptions, getDefaultAgent, fileFromPath, isFsReadStream;
var init_registry = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/registry.mjs"() {
    auto = false;
    kind = void 0;
    fetch2 = void 0;
    Request2 = void 0;
    Response2 = void 0;
    Headers2 = void 0;
    FormData2 = void 0;
    Blob2 = void 0;
    File2 = void 0;
    ReadableStream2 = void 0;
    getMultipartRequestOptions = void 0;
    getDefaultAgent = void 0;
    fileFromPath = void 0;
    isFsReadStream = void 0;
  }
});

// node_modules/@anthropic-ai/sdk/_shims/MultipartBody.mjs
var MultipartBody;
var init_MultipartBody = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/MultipartBody.mjs"() {
    MultipartBody = class {
      constructor(body) {
        this.body = body;
      }
      get [Symbol.toStringTag]() {
        return "MultipartBody";
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \`import \u2026 from '@anthropic-ai/sdk'\`:
- \`import '@anthropic-ai/sdk/shims/node'\` (if you're running on Node)
- \`import '@anthropic-ai/sdk/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData: (
      // @ts-ignore
      typeof FormData !== "undefined" ? FormData : class FormData {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);
        }
      }
    ),
    Blob: typeof Blob !== "undefined" ? Blob : class Blob {
      constructor() {
        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);
      }
    },
    File: (
      // @ts-ignore
      typeof File !== "undefined" ? File : class File {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);
        }
      }
    ),
    ReadableStream: (
      // @ts-ignore
      typeof ReadableStream !== "undefined" ? ReadableStream : class ReadableStream {
        // @ts-ignore
        constructor() {
          throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);
        }
      }
    ),
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form)
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/anthropics/anthropic-sdk-typescript#file-uploads");
    },
    isFsReadStream: (value) => false
  };
}
var init_web_runtime = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/web-runtime.mjs"() {
    init_MultipartBody();
  }
});

// node_modules/@anthropic-ai/sdk/_shims/auto/runtime.mjs
var init_runtime = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/auto/runtime.mjs"() {
    init_web_runtime();
  }
});

// node_modules/@anthropic-ai/sdk/_shims/index.mjs
var init_shims = __esm({
  "node_modules/@anthropic-ai/sdk/_shims/index.mjs"() {
    init_registry();
    init_runtime();
    init_registry();
    if (!kind) setShims(getRuntime(), { auto: true });
  }
});

// node_modules/@anthropic-ai/sdk/error.mjs
var AnthropicError, APIError, APIUserAbortError, APIConnectionError, APIConnectionTimeoutError, BadRequestError, AuthenticationError, PermissionDeniedError, NotFoundError, ConflictError, UnprocessableEntityError, RateLimitError, InternalServerError;
var init_error = __esm({
  "node_modules/@anthropic-ai/sdk/error.mjs"() {
    init_core();
    AnthropicError = class extends Error {
    };
    APIError = class _APIError extends AnthropicError {
      constructor(status, error, message, headers) {
        super(`${_APIError.makeMessage(status, error, message)}`);
        this.status = status;
        this.headers = headers;
        this.request_id = headers == null ? void 0 : headers["request-id"];
        this.error = error;
      }
      static makeMessage(status, error, message) {
        const msg = (error == null ? void 0 : error.message) ? typeof error.message === "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
        if (status && msg) {
          return `${status} ${msg}`;
        }
        if (status) {
          return `${status} status code (no body)`;
        }
        if (msg) {
          return msg;
        }
        return "(no status code or body)";
      }
      static generate(status, errorResponse, message, headers) {
        if (!status || !headers) {
          return new APIConnectionError({ message, cause: castToError(errorResponse) });
        }
        const error = errorResponse;
        if (status === 400) {
          return new BadRequestError(status, error, message, headers);
        }
        if (status === 401) {
          return new AuthenticationError(status, error, message, headers);
        }
        if (status === 403) {
          return new PermissionDeniedError(status, error, message, headers);
        }
        if (status === 404) {
          return new NotFoundError(status, error, message, headers);
        }
        if (status === 409) {
          return new ConflictError(status, error, message, headers);
        }
        if (status === 422) {
          return new UnprocessableEntityError(status, error, message, headers);
        }
        if (status === 429) {
          return new RateLimitError(status, error, message, headers);
        }
        if (status >= 500) {
          return new InternalServerError(status, error, message, headers);
        }
        return new _APIError(status, error, message, headers);
      }
    };
    APIUserAbortError = class extends APIError {
      constructor({ message } = {}) {
        super(void 0, void 0, message || "Request was aborted.", void 0);
      }
    };
    APIConnectionError = class extends APIError {
      constructor({ message, cause }) {
        super(void 0, void 0, message || "Connection error.", void 0);
        if (cause)
          this.cause = cause;
      }
    };
    APIConnectionTimeoutError = class extends APIConnectionError {
      constructor({ message } = {}) {
        super({ message: message != null ? message : "Request timed out." });
      }
    };
    BadRequestError = class extends APIError {
    };
    AuthenticationError = class extends APIError {
    };
    PermissionDeniedError = class extends APIError {
    };
    NotFoundError = class extends APIError {
    };
    ConflictError = class extends APIError {
    };
    UnprocessableEntityError = class extends APIError {
    };
    RateLimitError = class extends APIError {
    };
    InternalServerError = class extends APIError {
    };
  }
});

// node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs
var LineDecoder;
var init_line = __esm({
  "node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs"() {
    init_error();
    LineDecoder = class _LineDecoder {
      constructor() {
        this.buffer = [];
        this.trailingCR = false;
      }
      decode(chunk) {
        let text = this.decodeText(chunk);
        if (this.trailingCR) {
          text = "\r" + text;
          this.trailingCR = false;
        }
        if (text.endsWith("\r")) {
          this.trailingCR = true;
          text = text.slice(0, -1);
        }
        if (!text) {
          return [];
        }
        const trailingNewline = _LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
        let lines = text.split(_LineDecoder.NEWLINE_REGEXP);
        if (trailingNewline) {
          lines.pop();
        }
        if (lines.length === 1 && !trailingNewline) {
          this.buffer.push(lines[0]);
          return [];
        }
        if (this.buffer.length > 0) {
          lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
          this.buffer = [];
        }
        if (!trailingNewline) {
          this.buffer = [lines.pop() || ""];
        }
        return lines;
      }
      decodeText(bytes) {
        var _a2;
        if (bytes == null)
          return "";
        if (typeof bytes === "string")
          return bytes;
        if (typeof Buffer !== "undefined") {
          if (bytes instanceof Buffer) {
            return bytes.toString();
          }
          if (bytes instanceof Uint8Array) {
            return Buffer.from(bytes).toString();
          }
          throw new AnthropicError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
        }
        if (typeof TextDecoder !== "undefined") {
          if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
            (_a2 = this.textDecoder) != null ? _a2 : this.textDecoder = new TextDecoder("utf8");
            return this.textDecoder.decode(bytes);
          }
          throw new AnthropicError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
        }
        throw new AnthropicError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
      }
      flush() {
        if (!this.buffer.length && !this.trailingCR) {
          return [];
        }
        const lines = [this.buffer.join("")];
        this.buffer = [];
        this.trailingCR = false;
        return lines;
      }
    };
    LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
    LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
  }
});

// node_modules/@anthropic-ai/sdk/internal/stream-utils.mjs
function ReadableStreamToAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator])
    return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done)
          reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
var init_stream_utils = __esm({
  "node_modules/@anthropic-ai/sdk/internal/stream-utils.mjs"() {
  }
});

// node_modules/@anthropic-ai/sdk/streaming.mjs
async function* _iterSSEMessages(response, controller) {
  if (!response.body) {
    controller.abort();
    throw new AnthropicError(`Attempted to iterate over a response with no body`);
  }
  const sseDecoder = new SSEDecoder();
  const lineDecoder = new LineDecoder();
  const iter = ReadableStreamToAsyncIterable(response.body);
  for await (const sseChunk of iterSSEChunks(iter)) {
    for (const line of lineDecoder.decode(sseChunk)) {
      const sse = sseDecoder.decode(line);
      if (sse)
        yield sse;
    }
  }
  for (const line of lineDecoder.flush()) {
    const sse = sseDecoder.decode(line);
    if (sse)
      yield sse;
  }
}
async function* iterSSEChunks(iterator) {
  let data = new Uint8Array();
  for await (const chunk of iterator) {
    if (chunk == null) {
      continue;
    }
    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
    let newData = new Uint8Array(data.length + binaryChunk.length);
    newData.set(data);
    newData.set(binaryChunk, data.length);
    data = newData;
    let patternIndex;
    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {
      yield data.slice(0, patternIndex);
      data = data.slice(patternIndex);
    }
  }
  if (data.length > 0) {
    yield data;
  }
}
function findDoubleNewlineIndex(buffer) {
  const newline = 10;
  const carriage = 13;
  for (let i = 0; i < buffer.length - 2; i++) {
    if (buffer[i] === newline && buffer[i + 1] === newline) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === carriage) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {
      return i + 4;
    }
  }
  return -1;
}
function partition(str2, delimiter) {
  const index = str2.indexOf(delimiter);
  if (index !== -1) {
    return [str2.substring(0, index), delimiter, str2.substring(index + delimiter.length)];
  }
  return [str2, "", ""];
}
var Stream, SSEDecoder;
var init_streaming = __esm({
  "node_modules/@anthropic-ai/sdk/streaming.mjs"() {
    init_shims();
    init_error();
    init_line();
    init_stream_utils();
    init_core();
    init_error();
    Stream = class _Stream {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      static fromSSEResponse(response, controller) {
        let consumed = false;
        async function* iterator() {
          if (consumed) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed = true;
          let done = false;
          try {
            for await (const sse of _iterSSEMessages(response, controller)) {
              if (sse.event === "completion") {
                try {
                  yield JSON.parse(sse.data);
                } catch (e) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e;
                }
              }
              if (sse.event === "message_start" || sse.event === "message_delta" || sse.event === "message_stop" || sse.event === "content_block_start" || sse.event === "content_block_delta" || sse.event === "content_block_stop") {
                try {
                  yield JSON.parse(sse.data);
                } catch (e) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e;
                }
              }
              if (sse.event === "ping") {
                continue;
              }
              if (sse.event === "error") {
                throw APIError.generate(void 0, `SSE Error: ${sse.data}`, sse.data, createResponseHeaders(response.headers));
              }
            }
            done = true;
          } catch (e) {
            if (e instanceof Error && e.name === "AbortError")
              return;
            throw e;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      /**
       * Generates a Stream from a newline-separated ReadableStream
       * where each item is a JSON value.
       */
      static fromReadableStream(readableStream, controller) {
        let consumed = false;
        async function* iterLines() {
          const lineDecoder = new LineDecoder();
          const iter = ReadableStreamToAsyncIterable(readableStream);
          for await (const chunk of iter) {
            for (const line of lineDecoder.decode(chunk)) {
              yield line;
            }
          }
          for (const line of lineDecoder.flush()) {
            yield line;
          }
        }
        async function* iterator() {
          if (consumed) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed = true;
          let done = false;
          try {
            for await (const line of iterLines()) {
              if (done)
                continue;
              if (line)
                yield JSON.parse(line);
            }
            done = true;
          } catch (e) {
            if (e instanceof Error && e.name === "AbortError")
              return;
            throw e;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      [Symbol.asyncIterator]() {
        return this.iterator();
      }
      /**
       * Splits the stream into two streams which can be
       * independently read from at different speeds.
       */
      tee() {
        const left = [];
        const right = [];
        const iterator = this.iterator();
        const teeIterator = (queue) => {
          return {
            next: () => {
              if (queue.length === 0) {
                const result = iterator.next();
                left.push(result);
                right.push(result);
              }
              return queue.shift();
            }
          };
        };
        return [
          new _Stream(() => teeIterator(left), this.controller),
          new _Stream(() => teeIterator(right), this.controller)
        ];
      }
      /**
       * Converts this stream to a newline-separated ReadableStream of
       * JSON stringified values in the stream
       * which can be turned back into a Stream with `Stream.fromReadableStream()`.
       */
      toReadableStream() {
        const self = this;
        let iter;
        const encoder = new TextEncoder();
        return new ReadableStream2({
          async start() {
            iter = self[Symbol.asyncIterator]();
          },
          async pull(ctrl) {
            try {
              const { value, done } = await iter.next();
              if (done)
                return ctrl.close();
              const bytes = encoder.encode(JSON.stringify(value) + "\n");
              ctrl.enqueue(bytes);
            } catch (err) {
              ctrl.error(err);
            }
          },
          async cancel() {
            var _a2;
            await ((_a2 = iter.return) == null ? void 0 : _a2.call(iter));
          }
        });
      }
    };
    SSEDecoder = class {
      constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
      }
      decode(line) {
        if (line.endsWith("\r")) {
          line = line.substring(0, line.length - 1);
        }
        if (!line) {
          if (!this.event && !this.data.length)
            return null;
          const sse = {
            event: this.event,
            data: this.data.join("\n"),
            raw: this.chunks
          };
          this.event = null;
          this.data = [];
          this.chunks = [];
          return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(":")) {
          return null;
        }
        let [fieldname, _, value] = partition(line, ":");
        if (value.startsWith(" ")) {
          value = value.substring(1);
        }
        if (fieldname === "event") {
          this.event = value;
        } else if (fieldname === "data") {
          this.data.push(value);
        }
        return null;
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/uploads.mjs
async function toFile(value, name, options) {
  var _a2, _b, _c;
  value = await value;
  if (isFileLike(value)) {
    return value;
  }
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name || (name = (_a2 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null ? _a2 : "unknown_file");
    const data = isBlobLike(blob) ? [await blob.arrayBuffer()] : [blob];
    return new File2(data, name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!(options == null ? void 0 : options.type)) {
    const type2 = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type2 === "string") {
      options = { ...options, type: type2 };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a2;
  let parts = [];
  if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
  value instanceof ArrayBuffer) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a2 = value == null ? void 0 : value.constructor) == null ? void 0 : _a2.name}; props: ${propsForError(value)}`);
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a2;
  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
  ((_a2 = getStringFromMaybeBuffer(value.path)) == null ? void 0 : _a2.split(/[\\/]/).pop());
}
var isResponseLike, isFileLike, isBlobLike, getStringFromMaybeBuffer, isAsyncIterableIterator, isMultipartBody;
var init_uploads = __esm({
  "node_modules/@anthropic-ai/sdk/uploads.mjs"() {
    init_shims();
    init_shims();
    isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
    isFileLike = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && isBlobLike(value);
    isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
    getStringFromMaybeBuffer = (x) => {
      if (typeof x === "string")
        return x;
      if (typeof Buffer !== "undefined" && x instanceof Buffer)
        return String(x);
      return void 0;
    };
    isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
    isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
  }
});

// node_modules/@anthropic-ai/sdk/core.mjs
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug("response", response.status, response.url, response.headers, response.body);
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(response, props.controller);
    }
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON = (contentType == null ? void 0 : contentType.includes("application/json")) || (contentType == null ? void 0 : contentType.includes("application/vnd.api+json"));
  if (isJSON) {
    const json2 = await response.json();
    debug("response", response.status, response.url, response.headers, json2);
    return _addRequestID(json2, response);
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
function _addRequestID(value, response) {
  if (!value || typeof value !== "object" || Array.isArray(value)) {
    return value;
  }
  return Object.defineProperty(value, "_request_id", {
    value: response.headers.get("request-id"),
    enumerable: false
  });
}
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn(newHeaders, k))
      continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey)
      continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
function debug(action, ...args) {
  var _a2;
  if (typeof process !== "undefined" && ((_a2 = process == null ? void 0 : process.env) == null ? void 0 : _a2["DEBUG"]) === "true") {
    console.log(`Anthropic:DEBUG:${action}`, ...args);
  }
}
var __classPrivateFieldSet, __classPrivateFieldGet, _AbstractPage_client, APIPromise, APIClient, AbstractPage, PagePromise, createResponseHeaders, requestOptionsKeys, isRequestOptions, getPlatformProperties, normalizeArch, normalizePlatform, _platformHeaders, getPlatformHeaders, safeJSON, startsWithSchemeRegexp, isAbsoluteURL, sleep, validatePositiveInteger, castToError, readEnv, uuid4, isRunningInBrowser, isHeadersProtocol, getHeader;
var init_core = __esm({
  "node_modules/@anthropic-ai/sdk/core.mjs"() {
    init_version();
    init_streaming();
    init_error();
    init_shims();
    init_uploads();
    __classPrivateFieldSet = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    APIPromise = class _APIPromise extends Promise {
      constructor(responsePromise, parseResponse = defaultParseResponse) {
        super((resolve) => {
          resolve(null);
        });
        this.responsePromise = responsePromise;
        this.parseResponse = parseResponse;
      }
      _thenUnwrap(transform) {
        return new _APIPromise(this.responsePromise, async (props) => _addRequestID(transform(await this.parseResponse(props), props), props.response));
      }
      /**
       * Gets the raw `Response` instance instead of parsing the response
       * data.
       *
       * If you want to parse the response body but still get the `Response`
       * instance, you can use {@link withResponse()}.
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:
       * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)
       * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)
       */
      asResponse() {
        return this.responsePromise.then((p) => p.response);
      }
      /**
       * Gets the parsed response data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * If you just want to get the raw `Response` instance without parsing it,
       * you can use {@link asResponse()}.
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from '@anthropic-ai/sdk'`:
       * - `import '@anthropic-ai/sdk/shims/node'` (if you're running on Node)
       * - `import '@anthropic-ai/sdk/shims/web'` (otherwise)
       */
      async withResponse() {
        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
        return { data, response, request_id: response.headers.get("request-id") };
      }
      parse() {
        if (!this.parsedPromise) {
          this.parsedPromise = this.responsePromise.then(this.parseResponse);
        }
        return this.parsedPromise;
      }
      then(onfulfilled, onrejected) {
        return this.parse().then(onfulfilled, onrejected);
      }
      catch(onrejected) {
        return this.parse().catch(onrejected);
      }
      finally(onfinally) {
        return this.parse().finally(onfinally);
      }
    };
    APIClient = class {
      constructor({
        baseURL,
        maxRetries = 2,
        timeout = 6e5,
        // 10 minutes
        httpAgent,
        fetch: overriddenFetch
      }) {
        this.baseURL = baseURL;
        this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
        this.timeout = validatePositiveInteger("timeout", timeout);
        this.httpAgent = httpAgent;
        this.fetch = overriddenFetch != null ? overriddenFetch : fetch2;
      }
      authHeaders(opts) {
        return {};
      }
      /**
       * Override this to add your own default headers, for example:
       *
       *  {
       *    ...super.defaultHeaders(),
       *    Authorization: 'Bearer 123',
       *  }
       */
      defaultHeaders(opts) {
        return {
          Accept: "application/json",
          "Content-Type": "application/json",
          "User-Agent": this.getUserAgent(),
          ...getPlatformHeaders(),
          ...this.authHeaders(opts)
        };
      }
      /**
       * Override this to add your own headers validation:
       */
      validateHeaders(headers, customHeaders) {
      }
      defaultIdempotencyKey() {
        return `stainless-node-retry-${uuid4()}`;
      }
      get(path, opts) {
        return this.methodRequest("get", path, opts);
      }
      post(path, opts) {
        return this.methodRequest("post", path, opts);
      }
      patch(path, opts) {
        return this.methodRequest("patch", path, opts);
      }
      put(path, opts) {
        return this.methodRequest("put", path, opts);
      }
      delete(path, opts) {
        return this.methodRequest("delete", path, opts);
      }
      methodRequest(method, path, opts) {
        return this.request(Promise.resolve(opts).then(async (opts2) => {
          const body = opts2 && isBlobLike(opts2 == null ? void 0 : opts2.body) ? new DataView(await opts2.body.arrayBuffer()) : (opts2 == null ? void 0 : opts2.body) instanceof DataView ? opts2.body : (opts2 == null ? void 0 : opts2.body) instanceof ArrayBuffer ? new DataView(opts2.body) : opts2 && ArrayBuffer.isView(opts2 == null ? void 0 : opts2.body) ? new DataView(opts2.body.buffer) : opts2 == null ? void 0 : opts2.body;
          return { method, path, ...opts2, body };
        }));
      }
      getAPIList(path, Page2, opts) {
        return this.requestAPIList(Page2, { method: "get", path, ...opts });
      }
      calculateContentLength(body) {
        if (typeof body === "string") {
          if (typeof Buffer !== "undefined") {
            return Buffer.byteLength(body, "utf8").toString();
          }
          if (typeof TextEncoder !== "undefined") {
            const encoder = new TextEncoder();
            const encoded = encoder.encode(body);
            return encoded.length.toString();
          }
        } else if (ArrayBuffer.isView(body)) {
          return body.byteLength.toString();
        }
        return null;
      }
      buildRequest(options, { retryCount = 0 } = {}) {
        var _a2, _b, _c, _d, _e, _f;
        const { method, path, query, headers = {} } = options;
        const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === "string" ? options.body : isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
        const contentLength = this.calculateContentLength(body);
        const url = this.buildURL(path, query);
        if ("timeout" in options)
          validatePositiveInteger("timeout", options.timeout);
        const timeout = (_a2 = options.timeout) != null ? _a2 : this.timeout;
        const httpAgent = (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null ? _c : getDefaultAgent(url);
        const minAgentTimeout = timeout + 1e3;
        if (typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null ? void 0 : _d.timeout) === "number" && minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)) {
          httpAgent.options.timeout = minAgentTimeout;
        }
        if (this.idempotencyHeader && method !== "get") {
          if (!options.idempotencyKey)
            options.idempotencyKey = this.defaultIdempotencyKey();
          headers[this.idempotencyHeader] = options.idempotencyKey;
        }
        const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });
        const req = {
          method,
          ...body && { body },
          headers: reqHeaders,
          ...httpAgent && { agent: httpAgent },
          // @ts-ignore node-fetch uses a custom AbortSignal type that is
          // not compatible with standard web types
          signal: (_f = options.signal) != null ? _f : null
        };
        return { req, url, timeout };
      }
      buildHeaders({ options, headers, contentLength, retryCount }) {
        const reqHeaders = {};
        if (contentLength) {
          reqHeaders["content-length"] = contentLength;
        }
        const defaultHeaders = this.defaultHeaders(options);
        applyHeadersMut(reqHeaders, defaultHeaders);
        applyHeadersMut(reqHeaders, headers);
        if (isMultipartBody(options.body) && kind !== "node") {
          delete reqHeaders["content-type"];
        }
        if (getHeader(defaultHeaders, "x-stainless-retry-count") === void 0 && getHeader(headers, "x-stainless-retry-count") === void 0) {
          reqHeaders["x-stainless-retry-count"] = String(retryCount);
        }
        this.validateHeaders(reqHeaders, headers);
        return reqHeaders;
      }
      /**
       * Used as a callback for mutating the given `FinalRequestOptions` object.
       */
      async prepareOptions(options) {
      }
      /**
       * Used as a callback for mutating the given `RequestInit` object.
       *
       * This is useful for cases where you want to add certain headers based off of
       * the request properties, e.g. `method` or `url`.
       */
      async prepareRequest(request, { url, options }) {
      }
      parseHeaders(headers) {
        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
      }
      makeStatusError(status, error, message, headers) {
        return APIError.generate(status, error, message, headers);
      }
      request(options, remainingRetries = null) {
        return new APIPromise(this.makeRequest(options, remainingRetries));
      }
      async makeRequest(optionsInput, retriesRemaining) {
        var _a2, _b, _c;
        const options = await optionsInput;
        const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
        if (retriesRemaining == null) {
          retriesRemaining = maxRetries;
        }
        await this.prepareOptions(options);
        const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });
        await this.prepareRequest(req, { url, options });
        debug("request", url, options, req.headers);
        if ((_b = options.signal) == null ? void 0 : _b.aborted) {
          throw new APIUserAbortError();
        }
        const controller = new AbortController();
        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
        if (response instanceof Error) {
          if ((_c = options.signal) == null ? void 0 : _c.aborted) {
            throw new APIUserAbortError();
          }
          if (retriesRemaining) {
            return this.retryRequest(options, retriesRemaining);
          }
          if (response.name === "AbortError") {
            throw new APIConnectionTimeoutError();
          }
          throw new APIConnectionError({ cause: response });
        }
        const responseHeaders = createResponseHeaders(response.headers);
        if (!response.ok) {
          if (retriesRemaining && this.shouldRetry(response)) {
            const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
            debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
            return this.retryRequest(options, retriesRemaining, responseHeaders);
          }
          const errText = await response.text().catch((e) => castToError(e).message);
          const errJSON = safeJSON(errText);
          const errMessage = errJSON ? void 0 : errText;
          const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
          debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
          const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
          throw err;
        }
        return { response, options, controller };
      }
      requestAPIList(Page2, options) {
        const request = this.makeRequest(options, null);
        return new PagePromise(this, request, Page2);
      }
      buildURL(path, query) {
        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
        const defaultQuery = this.defaultQuery();
        if (!isEmptyObj(defaultQuery)) {
          query = { ...defaultQuery, ...query };
        }
        if (typeof query === "object" && query && !Array.isArray(query)) {
          url.search = this.stringifyQuery(query);
        }
        return url.toString();
      }
      stringifyQuery(query) {
        return Object.entries(query).filter(([_, value]) => typeof value !== "undefined").map(([key, value]) => {
          if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
            return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
          }
          if (value === null) {
            return `${encodeURIComponent(key)}=`;
          }
          throw new AnthropicError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
        }).join("&");
      }
      async fetchWithTimeout(url, init, ms, controller) {
        const { signal, ...options } = init || {};
        if (signal)
          signal.addEventListener("abort", () => controller.abort());
        const timeout = setTimeout(() => controller.abort(), ms);
        const fetchOptions = {
          signal: controller.signal,
          ...options
        };
        if (fetchOptions.method) {
          fetchOptions.method = fetchOptions.method.toUpperCase();
        }
        return (
          // use undefined this binding; fetch errors if bound to something else in browser/cloudflare
          this.fetch.call(void 0, url, fetchOptions).finally(() => {
            clearTimeout(timeout);
          })
        );
      }
      shouldRetry(response) {
        const shouldRetryHeader = response.headers.get("x-should-retry");
        if (shouldRetryHeader === "true")
          return true;
        if (shouldRetryHeader === "false")
          return false;
        if (response.status === 408)
          return true;
        if (response.status === 409)
          return true;
        if (response.status === 429)
          return true;
        if (response.status >= 500)
          return true;
        return false;
      }
      async retryRequest(options, retriesRemaining, responseHeaders) {
        var _a2;
        let timeoutMillis;
        const retryAfterMillisHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
        if (retryAfterMillisHeader) {
          const timeoutMs = parseFloat(retryAfterMillisHeader);
          if (!Number.isNaN(timeoutMs)) {
            timeoutMillis = timeoutMs;
          }
        }
        const retryAfterHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after"];
        if (retryAfterHeader && !timeoutMillis) {
          const timeoutSeconds = parseFloat(retryAfterHeader);
          if (!Number.isNaN(timeoutSeconds)) {
            timeoutMillis = timeoutSeconds * 1e3;
          } else {
            timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
          }
        }
        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
          const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
          timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
        }
        await sleep(timeoutMillis);
        return this.makeRequest(options, retriesRemaining - 1);
      }
      calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
        const initialRetryDelay = 0.5;
        const maxRetryDelay = 8;
        const numRetries = maxRetries - retriesRemaining;
        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
        const jitter = 1 - Math.random() * 0.25;
        return sleepSeconds * jitter * 1e3;
      }
      getUserAgent() {
        return `${this.constructor.name}/JS ${VERSION}`;
      }
    };
    AbstractPage = class {
      constructor(client, response, body, options) {
        _AbstractPage_client.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
        this.options = options;
        this.response = response;
        this.body = body;
      }
      hasNextPage() {
        const items = this.getPaginatedItems();
        if (!items.length)
          return false;
        return this.nextPageInfo() != null;
      }
      async getNextPage() {
        const nextInfo = this.nextPageInfo();
        if (!nextInfo) {
          throw new AnthropicError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
        }
        const nextOptions = { ...this.options };
        if ("params" in nextInfo && typeof nextOptions.query === "object") {
          nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
        } else if ("url" in nextInfo) {
          const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
          for (const [key, value] of params) {
            nextInfo.url.searchParams.set(key, value);
          }
          nextOptions.query = void 0;
          nextOptions.path = nextInfo.url.toString();
        }
        return await __classPrivateFieldGet(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
      }
      async *iterPages() {
        let page = this;
        yield page;
        while (page.hasNextPage()) {
          page = await page.getNextPage();
          yield page;
        }
      }
      async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
        for await (const page of this.iterPages()) {
          for (const item of page.getPaginatedItems()) {
            yield item;
          }
        }
      }
    };
    PagePromise = class extends APIPromise {
      constructor(client, request, Page2) {
        super(request, async (props) => new Page2(client, props.response, await defaultParseResponse(props), props.options));
      }
      /**
       * Allow auto-paginating iteration on an unawaited list call, eg:
       *
       *    for await (const item of client.items.list()) {
       *      console.log(item)
       *    }
       */
      async *[Symbol.asyncIterator]() {
        const page = await this;
        for await (const item of page) {
          yield item;
        }
      }
    };
    createResponseHeaders = (headers) => {
      return new Proxy(Object.fromEntries(
        // @ts-ignore
        headers.entries()
      ), {
        get(target, name) {
          const key = name.toString();
          return target[key.toLowerCase()] || target[key];
        }
      });
    };
    requestOptionsKeys = {
      method: true,
      path: true,
      query: true,
      body: true,
      headers: true,
      maxRetries: true,
      stream: true,
      timeout: true,
      httpAgent: true,
      signal: true,
      idempotencyKey: true,
      __binaryRequest: true,
      __binaryResponse: true,
      __streamClass: true
    };
    isRequestOptions = (obj) => {
      return typeof obj === "object" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k));
    };
    getPlatformProperties = () => {
      var _a2, _b;
      if (typeof Deno !== "undefined" && Deno.build != null) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(Deno.build.os),
          "X-Stainless-Arch": normalizeArch(Deno.build.arch),
          "X-Stainless-Runtime": "deno",
          "X-Stainless-Runtime-Version": typeof Deno.version === "string" ? Deno.version : (_b = (_a2 = Deno.version) == null ? void 0 : _a2.deno) != null ? _b : "unknown"
        };
      }
      if (typeof EdgeRuntime !== "undefined") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": `other:${EdgeRuntime}`,
          "X-Stainless-Runtime": "edge",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(process.platform),
          "X-Stainless-Arch": normalizeArch(process.arch),
          "X-Stainless-Runtime": "node",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      const browserInfo = getBrowserInfo();
      if (browserInfo) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": "unknown",
          "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
          "X-Stainless-Runtime-Version": browserInfo.version
        };
      }
      return {
        "X-Stainless-Lang": "js",
        "X-Stainless-Package-Version": VERSION,
        "X-Stainless-OS": "Unknown",
        "X-Stainless-Arch": "unknown",
        "X-Stainless-Runtime": "unknown",
        "X-Stainless-Runtime-Version": "unknown"
      };
    };
    normalizeArch = (arch) => {
      if (arch === "x32")
        return "x32";
      if (arch === "x86_64" || arch === "x64")
        return "x64";
      if (arch === "arm")
        return "arm";
      if (arch === "aarch64" || arch === "arm64")
        return "arm64";
      if (arch)
        return `other:${arch}`;
      return "unknown";
    };
    normalizePlatform = (platform) => {
      platform = platform.toLowerCase();
      if (platform.includes("ios"))
        return "iOS";
      if (platform === "android")
        return "Android";
      if (platform === "darwin")
        return "MacOS";
      if (platform === "win32")
        return "Windows";
      if (platform === "freebsd")
        return "FreeBSD";
      if (platform === "openbsd")
        return "OpenBSD";
      if (platform === "linux")
        return "Linux";
      if (platform)
        return `Other:${platform}`;
      return "Unknown";
    };
    getPlatformHeaders = () => {
      return _platformHeaders != null ? _platformHeaders : _platformHeaders = getPlatformProperties();
    };
    safeJSON = (text) => {
      try {
        return JSON.parse(text);
      } catch (err) {
        return void 0;
      }
    };
    startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;
    isAbsoluteURL = (url) => {
      return startsWithSchemeRegexp.test(url);
    };
    sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    validatePositiveInteger = (name, n) => {
      if (typeof n !== "number" || !Number.isInteger(n)) {
        throw new AnthropicError(`${name} must be an integer`);
      }
      if (n < 0) {
        throw new AnthropicError(`${name} must be a positive integer`);
      }
      return n;
    };
    castToError = (err) => {
      if (err instanceof Error)
        return err;
      if (typeof err === "object" && err !== null) {
        try {
          return new Error(JSON.stringify(err));
        } catch (e) {
        }
      }
      return new Error(String(err));
    };
    readEnv = (env) => {
      var _a2, _b, _c, _d, _e, _f;
      if (typeof process !== "undefined") {
        return (_c = (_b = (_a2 = process.env) == null ? void 0 : _a2[env]) == null ? void 0 : _b.trim()) != null ? _c : void 0;
      }
      if (typeof Deno !== "undefined") {
        return (_f = (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null ? void 0 : _e.call(_d, env)) == null ? void 0 : _f.trim();
      }
      return void 0;
    };
    uuid4 = () => {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = Math.random() * 16 | 0;
        const v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    };
    isRunningInBrowser = () => {
      return (
        // @ts-ignore
        typeof window !== "undefined" && // @ts-ignore
        typeof window.document !== "undefined" && // @ts-ignore
        typeof navigator !== "undefined"
      );
    };
    isHeadersProtocol = (headers) => {
      return typeof (headers == null ? void 0 : headers.get) === "function";
    };
    getHeader = (headers, header) => {
      var _a2;
      const lowerCasedHeader = header.toLowerCase();
      if (isHeadersProtocol(headers)) {
        const intercapsHeader = ((_a2 = header[0]) == null ? void 0 : _a2.toUpperCase()) + header.substring(1).replace(/([^\w])(\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());
        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {
          const value = headers.get(key);
          if (value) {
            return value;
          }
        }
      }
      for (const [key, value] of Object.entries(headers)) {
        if (key.toLowerCase() === lowerCasedHeader) {
          if (Array.isArray(value)) {
            if (value.length <= 1)
              return value[0];
            console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);
            return value[0];
          }
          return value;
        }
      }
      return void 0;
    };
  }
});

// node_modules/@anthropic-ai/sdk/pagination.mjs
var Page;
var init_pagination = __esm({
  "node_modules/@anthropic-ai/sdk/pagination.mjs"() {
    init_core();
    Page = class extends AbstractPage {
      constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
        this.has_more = body.has_more || false;
        this.first_id = body.first_id || null;
        this.last_id = body.last_id || null;
      }
      getPaginatedItems() {
        var _a2;
        return (_a2 = this.data) != null ? _a2 : [];
      }
      // @deprecated Please use `nextPageInfo()` instead
      nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
          return null;
        if ("params" in info)
          return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
          return null;
        return params;
      }
      nextPageInfo() {
        var _a2;
        if ((_a2 = this.options.query) == null ? void 0 : _a2["before_id"]) {
          const firstId = this.first_id;
          if (!firstId) {
            return null;
          }
          return {
            params: {
              before_id: firstId
            }
          };
        }
        const cursor = this.last_id;
        if (!cursor) {
          return null;
        }
        return {
          params: {
            after_id: cursor
          }
        };
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/shared.mjs
var init_shared = __esm({
  "node_modules/@anthropic-ai/sdk/resources/shared.mjs"() {
  }
});

// node_modules/@anthropic-ai/sdk/resource.mjs
var APIResource;
var init_resource = __esm({
  "node_modules/@anthropic-ai/sdk/resource.mjs"() {
    APIResource = class {
      constructor(client) {
        this._client = client;
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/models.mjs
var Models, BetaModelInfosPage;
var init_models = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/models.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    Models = class extends APIResource {
      /**
       * Get a specific model.
       *
       * The Models API response can be used to determine information about a specific
       * model or resolve a model alias to a model ID.
       */
      retrieve(modelId, options) {
        return this._client.get(`/v1/models/${modelId}?beta=true`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/models?beta=true", BetaModelInfosPage, { query, ...options });
      }
    };
    BetaModelInfosPage = class extends Page {
    };
    Models.BetaModelInfosPage = BetaModelInfosPage;
  }
});

// node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs
var JSONLDecoder;
var init_jsonl = __esm({
  "node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs"() {
    init_error();
    init_stream_utils();
    init_line();
    JSONLDecoder = class _JSONLDecoder {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      async *decoder() {
        const lineDecoder = new LineDecoder();
        for await (const chunk of this.iterator) {
          for (const line of lineDecoder.decode(chunk)) {
            yield JSON.parse(line);
          }
        }
        for (const line of lineDecoder.flush()) {
          yield JSON.parse(line);
        }
      }
      [Symbol.asyncIterator]() {
        return this.decoder();
      }
      static fromResponse(response, controller) {
        if (!response.body) {
          controller.abort();
          throw new AnthropicError(`Attempted to iterate over a response with no body`);
        }
        return new _JSONLDecoder(ReadableStreamToAsyncIterable(response.body), controller);
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs
var Batches, BetaMessageBatchesPage;
var init_batches = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    init_jsonl();
    init_error();
    Batches = class extends APIResource {
      /**
       * Send a batch of Message creation requests.
       *
       * The Message Batches API can be used to process multiple Messages API requests at
       * once. Once a Message Batch is created, it begins processing immediately. Batches
       * can take up to 24 hours to complete.
       */
      create(params, options) {
        const { betas, ...body } = params;
        return this._client.post("/v1/messages/batches?beta=true", {
          body,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      retrieve(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.retrieve(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.get(`/v1/messages/batches/${messageBatchId}?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      list(params = {}, options) {
        if (isRequestOptions(params)) {
          return this.list({}, params);
        }
        const { betas, ...query } = params;
        return this._client.getAPIList("/v1/messages/batches?beta=true", BetaMessageBatchesPage, {
          query,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      delete(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.delete(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.delete(`/v1/messages/batches/${messageBatchId}?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      cancel(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.cancel(messageBatchId, {}, params);
        }
        const { betas } = params;
        return this._client.post(`/v1/messages/batches/${messageBatchId}/cancel?beta=true`, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
      async results(messageBatchId, params = {}, options) {
        if (isRequestOptions(params)) {
          return this.results(messageBatchId, {}, params);
        }
        const batch = await this.retrieve(messageBatchId);
        if (!batch.results_url) {
          throw new AnthropicError(`No batch \`results_url\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);
        }
        const { betas } = params;
        return this._client.get(batch.results_url, {
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "message-batches-2024-09-24"].toString(),
            Accept: "application/binary",
            ...options == null ? void 0 : options.headers
          },
          __binaryResponse: true
        })._thenUnwrap((_, props) => JSONLDecoder.fromResponse(props.response, props.controller));
      }
    };
    BetaMessageBatchesPage = class extends Page {
    };
    Batches.BetaMessageBatchesPage = BetaMessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs
var tokenize, strip, unstrip, generate, partialParse;
var init_parser = __esm({
  "node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs"() {
    tokenize = (input) => {
      let current = 0;
      let tokens = [];
      while (current < input.length) {
        let char = input[current];
        if (char === "\\") {
          current++;
          continue;
        }
        if (char === "{") {
          tokens.push({
            type: "brace",
            value: "{"
          });
          current++;
          continue;
        }
        if (char === "}") {
          tokens.push({
            type: "brace",
            value: "}"
          });
          current++;
          continue;
        }
        if (char === "[") {
          tokens.push({
            type: "paren",
            value: "["
          });
          current++;
          continue;
        }
        if (char === "]") {
          tokens.push({
            type: "paren",
            value: "]"
          });
          current++;
          continue;
        }
        if (char === ":") {
          tokens.push({
            type: "separator",
            value: ":"
          });
          current++;
          continue;
        }
        if (char === ",") {
          tokens.push({
            type: "delimiter",
            value: ","
          });
          current++;
          continue;
        }
        if (char === '"') {
          let value = "";
          let danglingQuote = false;
          char = input[++current];
          while (char !== '"') {
            if (current === input.length) {
              danglingQuote = true;
              break;
            }
            if (char === "\\") {
              current++;
              if (current === input.length) {
                danglingQuote = true;
                break;
              }
              value += char + input[current];
              char = input[++current];
            } else {
              value += char;
              char = input[++current];
            }
          }
          char = input[++current];
          if (!danglingQuote) {
            tokens.push({
              type: "string",
              value
            });
          }
          continue;
        }
        let WHITESPACE = /\s/;
        if (char && WHITESPACE.test(char)) {
          current++;
          continue;
        }
        let NUMBERS = /[0-9]/;
        if (char && NUMBERS.test(char) || char === "-" || char === ".") {
          let value = "";
          if (char === "-") {
            value += char;
            char = input[++current];
          }
          while (char && NUMBERS.test(char) || char === ".") {
            value += char;
            char = input[++current];
          }
          tokens.push({
            type: "number",
            value
          });
          continue;
        }
        let LETTERS = /[a-z]/i;
        if (char && LETTERS.test(char)) {
          let value = "";
          while (char && LETTERS.test(char)) {
            if (current === input.length) {
              break;
            }
            value += char;
            char = input[++current];
          }
          if (value == "true" || value == "false" || value === "null") {
            tokens.push({
              type: "name",
              value
            });
          } else {
            current++;
            continue;
          }
          continue;
        }
        current++;
      }
      return tokens;
    };
    strip = (tokens) => {
      if (tokens.length === 0) {
        return tokens;
      }
      let lastToken = tokens[tokens.length - 1];
      switch (lastToken.type) {
        case "separator":
          tokens = tokens.slice(0, tokens.length - 1);
          return strip(tokens);
          break;
        case "number":
          let lastCharacterOfLastToken = lastToken.value[lastToken.value.length - 1];
          if (lastCharacterOfLastToken === "." || lastCharacterOfLastToken === "-") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          }
        case "string":
          let tokenBeforeTheLastToken = tokens[tokens.length - 2];
          if ((tokenBeforeTheLastToken == null ? void 0 : tokenBeforeTheLastToken.type) === "delimiter") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          } else if ((tokenBeforeTheLastToken == null ? void 0 : tokenBeforeTheLastToken.type) === "brace" && tokenBeforeTheLastToken.value === "{") {
            tokens = tokens.slice(0, tokens.length - 1);
            return strip(tokens);
          }
          break;
        case "delimiter":
          tokens = tokens.slice(0, tokens.length - 1);
          return strip(tokens);
          break;
      }
      return tokens;
    };
    unstrip = (tokens) => {
      let tail = [];
      tokens.map((token) => {
        if (token.type === "brace") {
          if (token.value === "{") {
            tail.push("}");
          } else {
            tail.splice(tail.lastIndexOf("}"), 1);
          }
        }
        if (token.type === "paren") {
          if (token.value === "[") {
            tail.push("]");
          } else {
            tail.splice(tail.lastIndexOf("]"), 1);
          }
        }
      });
      if (tail.length > 0) {
        tail.reverse().map((item) => {
          if (item === "}") {
            tokens.push({
              type: "brace",
              value: "}"
            });
          } else if (item === "]") {
            tokens.push({
              type: "paren",
              value: "]"
            });
          }
        });
      }
      return tokens;
    };
    generate = (tokens) => {
      let output = "";
      tokens.map((token) => {
        switch (token.type) {
          case "string":
            output += '"' + token.value + '"';
            break;
          default:
            output += token.value;
            break;
        }
      });
      return output;
    };
    partialParse = (input) => JSON.parse(generate(unstrip(strip(tokenize(input)))));
  }
});

// node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs
function checkNever(x) {
}
var __classPrivateFieldSet2, __classPrivateFieldGet2, _BetaMessageStream_instances, _BetaMessageStream_currentMessageSnapshot, _BetaMessageStream_connectedPromise, _BetaMessageStream_resolveConnectedPromise, _BetaMessageStream_rejectConnectedPromise, _BetaMessageStream_endPromise, _BetaMessageStream_resolveEndPromise, _BetaMessageStream_rejectEndPromise, _BetaMessageStream_listeners, _BetaMessageStream_ended, _BetaMessageStream_errored, _BetaMessageStream_aborted, _BetaMessageStream_catchingPromiseCreated, _BetaMessageStream_response, _BetaMessageStream_request_id, _BetaMessageStream_getFinalMessage, _BetaMessageStream_getFinalText, _BetaMessageStream_handleError, _BetaMessageStream_beginRequest, _BetaMessageStream_addStreamEvent, _BetaMessageStream_endRequest, _BetaMessageStream_accumulateMessage, JSON_BUF_PROPERTY, BetaMessageStream;
var init_BetaMessageStream = __esm({
  "node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs"() {
    init_error();
    init_streaming();
    init_parser();
    __classPrivateFieldSet2 = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet2 = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    JSON_BUF_PROPERTY = "__json_buf";
    BetaMessageStream = class _BetaMessageStream {
      constructor() {
        _BetaMessageStream_instances.add(this);
        this.messages = [];
        this.receivedMessages = [];
        _BetaMessageStream_currentMessageSnapshot.set(this, void 0);
        this.controller = new AbortController();
        _BetaMessageStream_connectedPromise.set(this, void 0);
        _BetaMessageStream_resolveConnectedPromise.set(this, () => {
        });
        _BetaMessageStream_rejectConnectedPromise.set(this, () => {
        });
        _BetaMessageStream_endPromise.set(this, void 0);
        _BetaMessageStream_resolveEndPromise.set(this, () => {
        });
        _BetaMessageStream_rejectEndPromise.set(this, () => {
        });
        _BetaMessageStream_listeners.set(this, {});
        _BetaMessageStream_ended.set(this, false);
        _BetaMessageStream_errored.set(this, false);
        _BetaMessageStream_aborted.set(this, false);
        _BetaMessageStream_catchingPromiseCreated.set(this, false);
        _BetaMessageStream_response.set(this, void 0);
        _BetaMessageStream_request_id.set(this, void 0);
        _BetaMessageStream_handleError.set(this, (error) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_errored, true, "f");
          if (error instanceof Error && error.name === "AbortError") {
            error = new APIUserAbortError();
          }
          if (error instanceof APIUserAbortError) {
            __classPrivateFieldSet2(this, _BetaMessageStream_aborted, true, "f");
            return this._emit("abort", error);
          }
          if (error instanceof AnthropicError) {
            return this._emit("error", error);
          }
          if (error instanceof Error) {
            const anthropicError = new AnthropicError(error.message);
            anthropicError.cause = error;
            return this._emit("error", anthropicError);
          }
          return this._emit("error", new AnthropicError(String(error)));
        });
        __classPrivateFieldSet2(this, _BetaMessageStream_connectedPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_resolveConnectedPromise, resolve, "f");
          __classPrivateFieldSet2(this, _BetaMessageStream_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet2(this, _BetaMessageStream_endPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_resolveEndPromise, resolve, "f");
          __classPrivateFieldSet2(this, _BetaMessageStream_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet2(this, _BetaMessageStream_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet2(this, _BetaMessageStream_endPromise, "f").catch(() => {
        });
      }
      get response() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_response, "f");
      }
      get request_id() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_request_id, "f");
      }
      /**
       * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * This is the same as the `APIPromise.withResponse()` method.
       *
       * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`
       * as no `Response` is available.
       */
      async withResponse() {
        const response = await __classPrivateFieldGet2(this, _BetaMessageStream_connectedPromise, "f");
        if (!response) {
          throw new Error("Could not resolve a `Response` object");
        }
        return {
          data: this,
          response,
          request_id: response.headers.get("request-id")
        };
      }
      /**
       * Intended for use on the frontend, consuming a stream produced with
       * `.toReadableStream()` on the backend.
       *
       * Note that messages sent to the model do not appear in `.on('message')`
       * in this context.
       */
      static fromReadableStream(stream) {
        const runner = new _BetaMessageStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      static createMessage(messages, params, options) {
        const runner = new _BetaMessageStream();
        for (const message of params.messages) {
          runner._addMessageParam(message);
        }
        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" } }));
        return runner;
      }
      _run(executor) {
        executor().then(() => {
          this._emitFinal();
          this._emit("end");
        }, __classPrivateFieldGet2(this, _BetaMessageStream_handleError, "f"));
      }
      _addMessageParam(message) {
        this.messages.push(message);
      }
      _addMessage(message, emit = true) {
        this.receivedMessages.push(message);
        if (emit) {
          this._emit("message", message);
        }
      }
      async _createMessage(messages, params, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_beginRequest).call(this);
        const { response, data: stream } = await messages.create({ ...params, stream: true }, { ...options, signal: this.controller.signal }).withResponse();
        this._connected(response);
        for await (const event of stream) {
          __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_endRequest).call(this);
      }
      _connected(response) {
        if (this.ended)
          return;
        __classPrivateFieldSet2(this, _BetaMessageStream_response, response, "f");
        __classPrivateFieldSet2(this, _BetaMessageStream_request_id, response == null ? void 0 : response.headers.get("request-id"), "f");
        __classPrivateFieldGet2(this, _BetaMessageStream_resolveConnectedPromise, "f").call(this, response);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this MessageStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] || (__classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this MessageStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event];
        if (!listeners)
          return this;
        const index = listeners.findIndex((l) => l.listener === listener);
        if (index >= 0)
          listeners.splice(index, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this MessageStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] || (__classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve, reject) => {
          __classPrivateFieldSet2(this, _BetaMessageStream_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve);
        });
      }
      async done() {
        __classPrivateFieldSet2(this, _BetaMessageStream_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet2(this, _BetaMessageStream_endPromise, "f");
      }
      get currentMessage() {
        return __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
      }
      /**
       * @returns a promise that resolves with the the final assistant Message response,
       * or rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalMessage() {
        await this.done();
        return __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalMessage).call(this);
      }
      /**
       * @returns a promise that resolves with the the final assistant Message's text response, concatenated
       * together if there are more than one text blocks.
       * Rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalText() {
        await this.done();
        return __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalText).call(this);
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet2(this, _BetaMessageStream_ended, "f"))
          return;
        if (event === "end") {
          __classPrivateFieldSet2(this, _BetaMessageStream_ended, true, "f");
          __classPrivateFieldGet2(this, _BetaMessageStream_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet2(this, _BetaMessageStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error = args[0];
          if (!__classPrivateFieldGet2(this, _BetaMessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error = args[0];
          if (!__classPrivateFieldGet2(this, _BetaMessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet2(this, _BetaMessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
        }
      }
      _emitFinal() {
        const finalMessage = this.receivedMessages.at(-1);
        if (finalMessage) {
          this._emit("finalMessage", __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_getFinalMessage).call(this));
        }
      }
      async _fromReadableStream(readableStream, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_beginRequest).call(this);
        this._connected(null);
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
          __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_endRequest).call(this);
      }
      [(_BetaMessageStream_currentMessageSnapshot = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_endPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_listeners = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_ended = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_errored = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_aborted = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_response = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_request_id = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_handleError = /* @__PURE__ */ new WeakMap(), _BetaMessageStream_instances = /* @__PURE__ */ new WeakSet(), _BetaMessageStream_getFinalMessage = function _BetaMessageStream_getFinalMessage2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        return this.receivedMessages.at(-1);
      }, _BetaMessageStream_getFinalText = function _BetaMessageStream_getFinalText2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        const textBlocks = this.receivedMessages.at(-1).content.filter((block) => block.type === "text").map((block) => block.text);
        if (textBlocks.length === 0) {
          throw new AnthropicError("stream ended without producing a content block with type=text");
        }
        return textBlocks.join(" ");
      }, _BetaMessageStream_beginRequest = function _BetaMessageStream_beginRequest2() {
        if (this.ended)
          return;
        __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, void 0, "f");
      }, _BetaMessageStream_addStreamEvent = function _BetaMessageStream_addStreamEvent2(event) {
        var _a2;
        if (this.ended)
          return;
        const messageSnapshot = __classPrivateFieldGet2(this, _BetaMessageStream_instances, "m", _BetaMessageStream_accumulateMessage).call(this, event);
        this._emit("streamEvent", event, messageSnapshot);
        switch (event.type) {
          case "content_block_delta": {
            const content = messageSnapshot.content.at(-1);
            switch (event.delta.type) {
              case "text_delta": {
                if (content.type === "text") {
                  this._emit("text", event.delta.text, content.text || "");
                }
                break;
              }
              case "citations_delta": {
                if (content.type === "text") {
                  this._emit("citation", event.delta.citation, (_a2 = content.citations) != null ? _a2 : []);
                }
                break;
              }
              case "input_json_delta": {
                if (content.type === "tool_use" && content.input) {
                  this._emit("inputJson", event.delta.partial_json, content.input);
                }
                break;
              }
              default:
                checkNever(event.delta);
            }
            break;
          }
          case "message_stop": {
            this._addMessageParam(messageSnapshot);
            this._addMessage(messageSnapshot, true);
            break;
          }
          case "content_block_stop": {
            this._emit("contentBlock", messageSnapshot.content.at(-1));
            break;
          }
          case "message_start": {
            __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, messageSnapshot, "f");
            break;
          }
          case "content_block_start":
          case "message_delta":
            break;
        }
      }, _BetaMessageStream_endRequest = function _BetaMessageStream_endRequest2() {
        if (this.ended) {
          throw new AnthropicError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
        if (!snapshot) {
          throw new AnthropicError(`request ended without sending any chunks`);
        }
        __classPrivateFieldSet2(this, _BetaMessageStream_currentMessageSnapshot, void 0, "f");
        return snapshot;
      }, _BetaMessageStream_accumulateMessage = function _BetaMessageStream_accumulateMessage2(event) {
        var _a2;
        let snapshot = __classPrivateFieldGet2(this, _BetaMessageStream_currentMessageSnapshot, "f");
        if (event.type === "message_start") {
          if (snapshot) {
            throw new AnthropicError(`Unexpected event order, got ${event.type} before receiving "message_stop"`);
          }
          return event.message;
        }
        if (!snapshot) {
          throw new AnthropicError(`Unexpected event order, got ${event.type} before "message_start"`);
        }
        switch (event.type) {
          case "message_stop":
            return snapshot;
          case "message_delta":
            snapshot.stop_reason = event.delta.stop_reason;
            snapshot.stop_sequence = event.delta.stop_sequence;
            snapshot.usage.output_tokens = event.usage.output_tokens;
            return snapshot;
          case "content_block_start":
            snapshot.content.push(event.content_block);
            return snapshot;
          case "content_block_delta": {
            const snapshotContent = snapshot.content.at(event.index);
            switch (event.delta.type) {
              case "text_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  snapshotContent.text += event.delta.text;
                }
                break;
              }
              case "citations_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  (_a2 = snapshotContent.citations) != null ? _a2 : snapshotContent.citations = [];
                  snapshotContent.citations.push(event.delta.citation);
                }
                break;
              }
              case "input_json_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "tool_use") {
                  let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || "";
                  jsonBuf += event.delta.partial_json;
                  Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY, {
                    value: jsonBuf,
                    enumerable: false,
                    writable: true
                  });
                  if (jsonBuf) {
                    snapshotContent.input = partialParse(jsonBuf);
                  }
                }
                break;
              }
              default:
                checkNever(event.delta);
            }
            return snapshot;
          }
          case "content_block_stop":
            return snapshot;
        }
      }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("streamEvent", (event) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(event);
          } else {
            pushQueue.push(event);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs
var DEPRECATED_MODELS, Messages;
var init_messages = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs"() {
    init_resource();
    init_batches();
    init_batches();
    init_BetaMessageStream();
    DEPRECATED_MODELS = {
      "claude-1.3": "November 6th, 2024",
      "claude-1.3-100k": "November 6th, 2024",
      "claude-instant-1.1": "November 6th, 2024",
      "claude-instant-1.1-100k": "November 6th, 2024",
      "claude-instant-1.2": "November 6th, 2024",
      "claude-3-sonnet-20240229": "July 21st, 2025",
      "claude-2.1": "July 21st, 2025",
      "claude-2.0": "July 21st, 2025"
    };
    Messages = class extends APIResource {
      constructor() {
        super(...arguments);
        this.batches = new Batches(this._client);
      }
      create(params, options) {
        var _a2, _b;
        const { betas, ...body } = params;
        if (body.model in DEPRECATED_MODELS) {
          console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}
Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);
        }
        return this._client.post("/v1/messages?beta=true", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          headers: {
            ...(betas == null ? void 0 : betas.toString()) != null ? { "anthropic-beta": betas == null ? void 0 : betas.toString() } : void 0,
            ...options == null ? void 0 : options.headers
          },
          stream: (_b = params.stream) != null ? _b : false
        });
      }
      /**
       * Create a Message stream
       */
      stream(body, options) {
        return BetaMessageStream.createMessage(this, body, options);
      }
      /**
       * Count the number of tokens in a Message.
       *
       * The Token Count API can be used to count the number of tokens in a Message,
       * including tools, images, and documents, without creating it.
       */
      countTokens(params, options) {
        const { betas, ...body } = params;
        return this._client.post("/v1/messages/count_tokens?beta=true", {
          body,
          ...options,
          headers: {
            "anthropic-beta": [...betas != null ? betas : [], "token-counting-2024-11-01"].toString(),
            ...options == null ? void 0 : options.headers
          }
        });
      }
    };
    Messages.Batches = Batches;
    Messages.BetaMessageBatchesPage = BetaMessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs
var Beta;
var init_beta = __esm({
  "node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs"() {
    init_resource();
    init_models();
    init_models();
    init_messages();
    init_messages();
    Beta = class extends APIResource {
      constructor() {
        super(...arguments);
        this.models = new Models(this._client);
        this.messages = new Messages(this._client);
      }
    };
    Beta.Models = Models;
    Beta.BetaModelInfosPage = BetaModelInfosPage;
    Beta.Messages = Messages;
  }
});

// node_modules/@anthropic-ai/sdk/resources/completions.mjs
var Completions;
var init_completions = __esm({
  "node_modules/@anthropic-ai/sdk/resources/completions.mjs"() {
    init_resource();
    Completions = class extends APIResource {
      create(body, options) {
        var _a2, _b;
        return this._client.post("/v1/complete", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          stream: (_b = body.stream) != null ? _b : false
        });
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs
var Batches2, MessageBatchesPage;
var init_batches2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    init_jsonl();
    init_error();
    Batches2 = class extends APIResource {
      /**
       * Send a batch of Message creation requests.
       *
       * The Message Batches API can be used to process multiple Messages API requests at
       * once. Once a Message Batch is created, it begins processing immediately. Batches
       * can take up to 24 hours to complete.
       */
      create(body, options) {
        return this._client.post("/v1/messages/batches", { body, ...options });
      }
      /**
       * This endpoint is idempotent and can be used to poll for Message Batch
       * completion. To access the results of a Message Batch, make a request to the
       * `results_url` field in the response.
       */
      retrieve(messageBatchId, options) {
        return this._client.get(`/v1/messages/batches/${messageBatchId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/messages/batches", MessageBatchesPage, { query, ...options });
      }
      /**
       * Delete a Message Batch.
       *
       * Message Batches can only be deleted once they've finished processing. If you'd
       * like to delete an in-progress batch, you must first cancel it.
       */
      delete(messageBatchId, options) {
        return this._client.delete(`/v1/messages/batches/${messageBatchId}`, options);
      }
      /**
       * Batches may be canceled any time before processing ends. Once cancellation is
       * initiated, the batch enters a `canceling` state, at which time the system may
       * complete any in-progress, non-interruptible requests before finalizing
       * cancellation.
       *
       * The number of canceled requests is specified in `request_counts`. To determine
       * which requests were canceled, check the individual results within the batch.
       * Note that cancellation may not result in any canceled requests if they were
       * non-interruptible.
       */
      cancel(messageBatchId, options) {
        return this._client.post(`/v1/messages/batches/${messageBatchId}/cancel`, options);
      }
      /**
       * Streams the results of a Message Batch as a `.jsonl` file.
       *
       * Each line in the file is a JSON object containing the result of a single request
       * in the Message Batch. Results are not guaranteed to be in the same order as
       * requests. Use the `custom_id` field to match results to requests.
       */
      async results(messageBatchId, options) {
        const batch = await this.retrieve(messageBatchId);
        if (!batch.results_url) {
          throw new AnthropicError(`No batch \`results_url\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);
        }
        return this._client.get(batch.results_url, {
          ...options,
          headers: {
            Accept: "application/binary",
            ...options == null ? void 0 : options.headers
          },
          __binaryResponse: true
        })._thenUnwrap((_, props) => JSONLDecoder.fromResponse(props.response, props.controller));
      }
    };
    MessageBatchesPage = class extends Page {
    };
    Batches2.MessageBatchesPage = MessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs
function checkNever2(x) {
}
var __classPrivateFieldSet3, __classPrivateFieldGet3, _MessageStream_instances, _MessageStream_currentMessageSnapshot, _MessageStream_connectedPromise, _MessageStream_resolveConnectedPromise, _MessageStream_rejectConnectedPromise, _MessageStream_endPromise, _MessageStream_resolveEndPromise, _MessageStream_rejectEndPromise, _MessageStream_listeners, _MessageStream_ended, _MessageStream_errored, _MessageStream_aborted, _MessageStream_catchingPromiseCreated, _MessageStream_response, _MessageStream_request_id, _MessageStream_getFinalMessage, _MessageStream_getFinalText, _MessageStream_handleError, _MessageStream_beginRequest, _MessageStream_addStreamEvent, _MessageStream_endRequest, _MessageStream_accumulateMessage, JSON_BUF_PROPERTY2, MessageStream;
var init_MessageStream = __esm({
  "node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs"() {
    init_error();
    init_streaming();
    init_parser();
    __classPrivateFieldSet3 = function(receiver, state, value, kind2, f) {
      if (kind2 === "m") throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet3 = function(receiver, state, kind2, f) {
      if (kind2 === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    JSON_BUF_PROPERTY2 = "__json_buf";
    MessageStream = class _MessageStream {
      constructor() {
        _MessageStream_instances.add(this);
        this.messages = [];
        this.receivedMessages = [];
        _MessageStream_currentMessageSnapshot.set(this, void 0);
        this.controller = new AbortController();
        _MessageStream_connectedPromise.set(this, void 0);
        _MessageStream_resolveConnectedPromise.set(this, () => {
        });
        _MessageStream_rejectConnectedPromise.set(this, () => {
        });
        _MessageStream_endPromise.set(this, void 0);
        _MessageStream_resolveEndPromise.set(this, () => {
        });
        _MessageStream_rejectEndPromise.set(this, () => {
        });
        _MessageStream_listeners.set(this, {});
        _MessageStream_ended.set(this, false);
        _MessageStream_errored.set(this, false);
        _MessageStream_aborted.set(this, false);
        _MessageStream_catchingPromiseCreated.set(this, false);
        _MessageStream_response.set(this, void 0);
        _MessageStream_request_id.set(this, void 0);
        _MessageStream_handleError.set(this, (error) => {
          __classPrivateFieldSet3(this, _MessageStream_errored, true, "f");
          if (error instanceof Error && error.name === "AbortError") {
            error = new APIUserAbortError();
          }
          if (error instanceof APIUserAbortError) {
            __classPrivateFieldSet3(this, _MessageStream_aborted, true, "f");
            return this._emit("abort", error);
          }
          if (error instanceof AnthropicError) {
            return this._emit("error", error);
          }
          if (error instanceof Error) {
            const anthropicError = new AnthropicError(error.message);
            anthropicError.cause = error;
            return this._emit("error", anthropicError);
          }
          return this._emit("error", new AnthropicError(String(error)));
        });
        __classPrivateFieldSet3(this, _MessageStream_connectedPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_resolveConnectedPromise, resolve, "f");
          __classPrivateFieldSet3(this, _MessageStream_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet3(this, _MessageStream_endPromise, new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_resolveEndPromise, resolve, "f");
          __classPrivateFieldSet3(this, _MessageStream_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet3(this, _MessageStream_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet3(this, _MessageStream_endPromise, "f").catch(() => {
        });
      }
      get response() {
        return __classPrivateFieldGet3(this, _MessageStream_response, "f");
      }
      get request_id() {
        return __classPrivateFieldGet3(this, _MessageStream_request_id, "f");
      }
      /**
       * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,
       * returned vie the `request-id` header which is useful for debugging requests and resporting
       * issues to Anthropic.
       *
       * This is the same as the `APIPromise.withResponse()` method.
       *
       * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`
       * as no `Response` is available.
       */
      async withResponse() {
        const response = await __classPrivateFieldGet3(this, _MessageStream_connectedPromise, "f");
        if (!response) {
          throw new Error("Could not resolve a `Response` object");
        }
        return {
          data: this,
          response,
          request_id: response.headers.get("request-id")
        };
      }
      /**
       * Intended for use on the frontend, consuming a stream produced with
       * `.toReadableStream()` on the backend.
       *
       * Note that messages sent to the model do not appear in `.on('message')`
       * in this context.
       */
      static fromReadableStream(stream) {
        const runner = new _MessageStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      static createMessage(messages, params, options) {
        const runner = new _MessageStream();
        for (const message of params.messages) {
          runner._addMessageParam(message);
        }
        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" } }));
        return runner;
      }
      _run(executor) {
        executor().then(() => {
          this._emitFinal();
          this._emit("end");
        }, __classPrivateFieldGet3(this, _MessageStream_handleError, "f"));
      }
      _addMessageParam(message) {
        this.messages.push(message);
      }
      _addMessage(message, emit = true) {
        this.receivedMessages.push(message);
        if (emit) {
          this._emit("message", message);
        }
      }
      async _createMessage(messages, params, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_beginRequest).call(this);
        const { response, data: stream } = await messages.create({ ...params, stream: true }, { ...options, signal: this.controller.signal }).withResponse();
        this._connected(response);
        for await (const event of stream) {
          __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_endRequest).call(this);
      }
      _connected(response) {
        if (this.ended)
          return;
        __classPrivateFieldSet3(this, _MessageStream_response, response, "f");
        __classPrivateFieldSet3(this, _MessageStream_request_id, response == null ? void 0 : response.headers.get("request-id"), "f");
        __classPrivateFieldGet3(this, _MessageStream_resolveConnectedPromise, "f").call(this, response);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet3(this, _MessageStream_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet3(this, _MessageStream_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet3(this, _MessageStream_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this MessageStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this MessageStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event];
        if (!listeners)
          return this;
        const index = listeners.findIndex((l) => l.listener === listener);
        if (index >= 0)
          listeners.splice(index, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this MessageStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve, reject) => {
          __classPrivateFieldSet3(this, _MessageStream_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve);
        });
      }
      async done() {
        __classPrivateFieldSet3(this, _MessageStream_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet3(this, _MessageStream_endPromise, "f");
      }
      get currentMessage() {
        return __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
      }
      /**
       * @returns a promise that resolves with the the final assistant Message response,
       * or rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalMessage() {
        await this.done();
        return __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalMessage).call(this);
      }
      /**
       * @returns a promise that resolves with the the final assistant Message's text response, concatenated
       * together if there are more than one text blocks.
       * Rejects if an error occurred or the stream ended prematurely without producing a Message.
       */
      async finalText() {
        await this.done();
        return __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalText).call(this);
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet3(this, _MessageStream_ended, "f"))
          return;
        if (event === "end") {
          __classPrivateFieldSet3(this, _MessageStream_ended, true, "f");
          __classPrivateFieldGet3(this, _MessageStream_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet3(this, _MessageStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error = args[0];
          if (!__classPrivateFieldGet3(this, _MessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet3(this, _MessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet3(this, _MessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error = args[0];
          if (!__classPrivateFieldGet3(this, _MessageStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
            Promise.reject(error);
          }
          __classPrivateFieldGet3(this, _MessageStream_rejectConnectedPromise, "f").call(this, error);
          __classPrivateFieldGet3(this, _MessageStream_rejectEndPromise, "f").call(this, error);
          this._emit("end");
        }
      }
      _emitFinal() {
        const finalMessage = this.receivedMessages.at(-1);
        if (finalMessage) {
          this._emit("finalMessage", __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_getFinalMessage).call(this));
        }
      }
      async _fromReadableStream(readableStream, options) {
        var _a2;
        const signal = options == null ? void 0 : options.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_beginRequest).call(this);
        this._connected(null);
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
          __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_addStreamEvent).call(this, event);
        }
        if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
          throw new APIUserAbortError();
        }
        __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_endRequest).call(this);
      }
      [(_MessageStream_currentMessageSnapshot = /* @__PURE__ */ new WeakMap(), _MessageStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_endPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _MessageStream_listeners = /* @__PURE__ */ new WeakMap(), _MessageStream_ended = /* @__PURE__ */ new WeakMap(), _MessageStream_errored = /* @__PURE__ */ new WeakMap(), _MessageStream_aborted = /* @__PURE__ */ new WeakMap(), _MessageStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _MessageStream_response = /* @__PURE__ */ new WeakMap(), _MessageStream_request_id = /* @__PURE__ */ new WeakMap(), _MessageStream_handleError = /* @__PURE__ */ new WeakMap(), _MessageStream_instances = /* @__PURE__ */ new WeakSet(), _MessageStream_getFinalMessage = function _MessageStream_getFinalMessage2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        return this.receivedMessages.at(-1);
      }, _MessageStream_getFinalText = function _MessageStream_getFinalText2() {
        if (this.receivedMessages.length === 0) {
          throw new AnthropicError("stream ended without producing a Message with role=assistant");
        }
        const textBlocks = this.receivedMessages.at(-1).content.filter((block) => block.type === "text").map((block) => block.text);
        if (textBlocks.length === 0) {
          throw new AnthropicError("stream ended without producing a content block with type=text");
        }
        return textBlocks.join(" ");
      }, _MessageStream_beginRequest = function _MessageStream_beginRequest2() {
        if (this.ended)
          return;
        __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, void 0, "f");
      }, _MessageStream_addStreamEvent = function _MessageStream_addStreamEvent2(event) {
        var _a2;
        if (this.ended)
          return;
        const messageSnapshot = __classPrivateFieldGet3(this, _MessageStream_instances, "m", _MessageStream_accumulateMessage).call(this, event);
        this._emit("streamEvent", event, messageSnapshot);
        switch (event.type) {
          case "content_block_delta": {
            const content = messageSnapshot.content.at(-1);
            switch (event.delta.type) {
              case "text_delta": {
                if (content.type === "text") {
                  this._emit("text", event.delta.text, content.text || "");
                }
                break;
              }
              case "citations_delta": {
                if (content.type === "text") {
                  this._emit("citation", event.delta.citation, (_a2 = content.citations) != null ? _a2 : []);
                }
                break;
              }
              case "input_json_delta": {
                if (content.type === "tool_use" && content.input) {
                  this._emit("inputJson", event.delta.partial_json, content.input);
                }
                break;
              }
              default:
                checkNever2(event.delta);
            }
            break;
          }
          case "message_stop": {
            this._addMessageParam(messageSnapshot);
            this._addMessage(messageSnapshot, true);
            break;
          }
          case "content_block_stop": {
            this._emit("contentBlock", messageSnapshot.content.at(-1));
            break;
          }
          case "message_start": {
            __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, messageSnapshot, "f");
            break;
          }
          case "content_block_start":
          case "message_delta":
            break;
        }
      }, _MessageStream_endRequest = function _MessageStream_endRequest2() {
        if (this.ended) {
          throw new AnthropicError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
        if (!snapshot) {
          throw new AnthropicError(`request ended without sending any chunks`);
        }
        __classPrivateFieldSet3(this, _MessageStream_currentMessageSnapshot, void 0, "f");
        return snapshot;
      }, _MessageStream_accumulateMessage = function _MessageStream_accumulateMessage2(event) {
        var _a2;
        let snapshot = __classPrivateFieldGet3(this, _MessageStream_currentMessageSnapshot, "f");
        if (event.type === "message_start") {
          if (snapshot) {
            throw new AnthropicError(`Unexpected event order, got ${event.type} before receiving "message_stop"`);
          }
          return event.message;
        }
        if (!snapshot) {
          throw new AnthropicError(`Unexpected event order, got ${event.type} before "message_start"`);
        }
        switch (event.type) {
          case "message_stop":
            return snapshot;
          case "message_delta":
            snapshot.stop_reason = event.delta.stop_reason;
            snapshot.stop_sequence = event.delta.stop_sequence;
            snapshot.usage.output_tokens = event.usage.output_tokens;
            return snapshot;
          case "content_block_start":
            snapshot.content.push(event.content_block);
            return snapshot;
          case "content_block_delta": {
            const snapshotContent = snapshot.content.at(event.index);
            switch (event.delta.type) {
              case "text_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  snapshotContent.text += event.delta.text;
                }
                break;
              }
              case "citations_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "text") {
                  (_a2 = snapshotContent.citations) != null ? _a2 : snapshotContent.citations = [];
                  snapshotContent.citations.push(event.delta.citation);
                }
                break;
              }
              case "input_json_delta": {
                if ((snapshotContent == null ? void 0 : snapshotContent.type) === "tool_use") {
                  let jsonBuf = snapshotContent[JSON_BUF_PROPERTY2] || "";
                  jsonBuf += event.delta.partial_json;
                  Object.defineProperty(snapshotContent, JSON_BUF_PROPERTY2, {
                    value: jsonBuf,
                    enumerable: false,
                    writable: true
                  });
                  if (jsonBuf) {
                    snapshotContent.input = partialParse(jsonBuf);
                  }
                }
                break;
              }
              default:
                checkNever2(event.delta);
            }
            return snapshot;
          }
          case "content_block_stop":
            return snapshot;
        }
      }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("streamEvent", (event) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(event);
          } else {
            pushQueue.push(event);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
    };
  }
});

// node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs
var Messages2, DEPRECATED_MODELS2;
var init_messages2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs"() {
    init_resource();
    init_batches2();
    init_batches2();
    init_MessageStream();
    Messages2 = class extends APIResource {
      constructor() {
        super(...arguments);
        this.batches = new Batches2(this._client);
      }
      create(body, options) {
        var _a2, _b;
        if (body.model in DEPRECATED_MODELS2) {
          console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS2[body.model]}
Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);
        }
        return this._client.post("/v1/messages", {
          body,
          timeout: (_a2 = this._client._options.timeout) != null ? _a2 : 6e5,
          ...options,
          stream: (_b = body.stream) != null ? _b : false
        });
      }
      /**
       * Create a Message stream
       */
      stream(body, options) {
        return MessageStream.createMessage(this, body, options);
      }
      /**
       * Count the number of tokens in a Message.
       *
       * The Token Count API can be used to count the number of tokens in a Message,
       * including tools, images, and documents, without creating it.
       */
      countTokens(body, options) {
        return this._client.post("/v1/messages/count_tokens", { body, ...options });
      }
    };
    DEPRECATED_MODELS2 = {
      "claude-1.3": "November 6th, 2024",
      "claude-1.3-100k": "November 6th, 2024",
      "claude-instant-1.1": "November 6th, 2024",
      "claude-instant-1.1-100k": "November 6th, 2024",
      "claude-instant-1.2": "November 6th, 2024",
      "claude-3-sonnet-20240229": "July 21st, 2025",
      "claude-2.1": "July 21st, 2025",
      "claude-2.0": "July 21st, 2025"
    };
    Messages2.Batches = Batches2;
    Messages2.MessageBatchesPage = MessageBatchesPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/models.mjs
var Models2, ModelInfosPage;
var init_models2 = __esm({
  "node_modules/@anthropic-ai/sdk/resources/models.mjs"() {
    init_resource();
    init_core();
    init_pagination();
    Models2 = class extends APIResource {
      /**
       * Get a specific model.
       *
       * The Models API response can be used to determine information about a specific
       * model or resolve a model alias to a model ID.
       */
      retrieve(modelId, options) {
        return this._client.get(`/v1/models/${modelId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/v1/models", ModelInfosPage, { query, ...options });
      }
    };
    ModelInfosPage = class extends Page {
    };
    Models2.ModelInfosPage = ModelInfosPage;
  }
});

// node_modules/@anthropic-ai/sdk/resources/index.mjs
var init_resources = __esm({
  "node_modules/@anthropic-ai/sdk/resources/index.mjs"() {
    init_shared();
    init_beta();
    init_completions();
    init_messages2();
    init_models2();
  }
});

// node_modules/@anthropic-ai/sdk/index.mjs
var _a, Anthropic, HUMAN_PROMPT, AI_PROMPT, sdk_default;
var init_sdk = __esm({
  "node_modules/@anthropic-ai/sdk/index.mjs"() {
    init_core();
    init_error();
    init_uploads();
    init_resources();
    init_completions();
    init_models2();
    init_beta();
    init_messages2();
    Anthropic = class extends APIClient {
      /**
       * API Client for interfacing with the Anthropic API.
       *
       * @param {string | null | undefined} [opts.apiKey=process.env['ANTHROPIC_API_KEY'] ?? null]
       * @param {string | null | undefined} [opts.authToken=process.env['ANTHROPIC_AUTH_TOKEN'] ?? null]
       * @param {string} [opts.baseURL=process.env['ANTHROPIC_BASE_URL'] ?? https://api.anthropic.com] - Override the default base URL for the API.
       * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
       * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
       * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
       * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
       * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
       * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
       * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
       */
      constructor({ baseURL = readEnv("ANTHROPIC_BASE_URL"), apiKey = ((_a2) => (_a2 = readEnv("ANTHROPIC_API_KEY")) != null ? _a2 : null)(), authToken = ((_b) => (_b = readEnv("ANTHROPIC_AUTH_TOKEN")) != null ? _b : null)(), ...opts } = {}) {
        var _a3;
        const options = {
          apiKey,
          authToken,
          ...opts,
          baseURL: baseURL || `https://api.anthropic.com`
        };
        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
          throw new AnthropicError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew Anthropic({ apiKey, dangerouslyAllowBrowser: true });\n");
        }
        super({
          baseURL: options.baseURL,
          timeout: (_a3 = options.timeout) != null ? _a3 : 6e5,
          httpAgent: options.httpAgent,
          maxRetries: options.maxRetries,
          fetch: options.fetch
        });
        this.completions = new Completions(this);
        this.messages = new Messages2(this);
        this.models = new Models2(this);
        this.beta = new Beta(this);
        this._options = options;
        this.apiKey = apiKey;
        this.authToken = authToken;
      }
      defaultQuery() {
        return this._options.defaultQuery;
      }
      defaultHeaders(opts) {
        return {
          ...super.defaultHeaders(opts),
          ...this._options.dangerouslyAllowBrowser ? { "anthropic-dangerous-direct-browser-access": "true" } : void 0,
          "anthropic-version": "2023-06-01",
          ...this._options.defaultHeaders
        };
      }
      validateHeaders(headers, customHeaders) {
        if (this.apiKey && headers["x-api-key"]) {
          return;
        }
        if (customHeaders["x-api-key"] === null) {
          return;
        }
        if (this.authToken && headers["authorization"]) {
          return;
        }
        if (customHeaders["authorization"] === null) {
          return;
        }
        throw new Error('Could not resolve authentication method. Expected either apiKey or authToken to be set. Or for one of the "X-Api-Key" or "Authorization" headers to be explicitly omitted');
      }
      authHeaders(opts) {
        const apiKeyAuth = this.apiKeyAuth(opts);
        const bearerAuth = this.bearerAuth(opts);
        if (apiKeyAuth != null && !isEmptyObj(apiKeyAuth)) {
          return apiKeyAuth;
        }
        if (bearerAuth != null && !isEmptyObj(bearerAuth)) {
          return bearerAuth;
        }
        return {};
      }
      apiKeyAuth(opts) {
        if (this.apiKey == null) {
          return {};
        }
        return { "X-Api-Key": this.apiKey };
      }
      bearerAuth(opts) {
        if (this.authToken == null) {
          return {};
        }
        return { Authorization: `Bearer ${this.authToken}` };
      }
    };
    _a = Anthropic;
    Anthropic.Anthropic = _a;
    Anthropic.HUMAN_PROMPT = "\n\nHuman:";
    Anthropic.AI_PROMPT = "\n\nAssistant:";
    Anthropic.DEFAULT_TIMEOUT = 6e5;
    Anthropic.AnthropicError = AnthropicError;
    Anthropic.APIError = APIError;
    Anthropic.APIConnectionError = APIConnectionError;
    Anthropic.APIConnectionTimeoutError = APIConnectionTimeoutError;
    Anthropic.APIUserAbortError = APIUserAbortError;
    Anthropic.NotFoundError = NotFoundError;
    Anthropic.ConflictError = ConflictError;
    Anthropic.RateLimitError = RateLimitError;
    Anthropic.BadRequestError = BadRequestError;
    Anthropic.AuthenticationError = AuthenticationError;
    Anthropic.InternalServerError = InternalServerError;
    Anthropic.PermissionDeniedError = PermissionDeniedError;
    Anthropic.UnprocessableEntityError = UnprocessableEntityError;
    Anthropic.toFile = toFile;
    Anthropic.fileFromPath = fileFromPath;
    Anthropic.Completions = Completions;
    Anthropic.Messages = Messages2;
    Anthropic.Models = Models2;
    Anthropic.ModelInfosPage = ModelInfosPage;
    Anthropic.Beta = Beta;
    ({ HUMAN_PROMPT, AI_PROMPT } = Anthropic);
    sdk_default = Anthropic;
  }
});

// providers/anthropic.ts
function estimateTokenCount(messages) {
  const CHARS_PER_TOKEN = 4;
  const totalChars = messages.reduce((total, msg) => {
    return total + msg.content.length;
  }, 0);
  return Math.ceil(totalChars / CHARS_PER_TOKEN);
}
var MODEL_CONTEXT_WINDOWS, MODEL_OUTPUT_TOKEN_LIMITS, AnthropicProvider;
var init_anthropic = __esm({
  "providers/anthropic.ts"() {
    init_base();
    init_sdk();
    MODEL_CONTEXT_WINDOWS = {
      "claude-3-opus-20240229": 2e5,
      "claude-3-sonnet-20240229": 2e5,
      "claude-3-haiku-20240307": 2e5,
      "claude-3-7-sonnet-20250219": 2e5,
      "claude-3-5-sonnet-20241022": 2e5,
      "claude-3-5-sonnet-20240620": 2e5,
      "claude-3-5-haiku-20241022": 2e5
    };
    MODEL_OUTPUT_TOKEN_LIMITS = {
      "claude-3-7-sonnet-20250219": 64e3,
      "claude-3-5-sonnet-20241022": 8192,
      "claude-3-5-sonnet-20240620": 8192,
      "claude-3-5-haiku-20241022": 8192,
      "claude-3-opus-20240229": 4096,
      "claude-3-sonnet-20240229": 8192,
      // fallback for older sonnet
      "claude-3-haiku-20240307": 4096
      // fallback for older haiku
    };
    AnthropicProvider = class extends BaseProvider {
      constructor(apiKey, model = "claude-3-sonnet-20240229") {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl", "https://api.anthropic.com/v1");
        __publicField(this, "model");
        __publicField(this, "client");
        this.apiKey = apiKey;
        this.model = model;
        this.client = new sdk_default({
          apiKey: this.apiKey,
          dangerouslyAllowBrowser: true
          // Required for browser environments
        });
      }
      /**
       * Get a completion from Anthropic
       * 
       * Sends the conversation to Anthropic and streams back the response
       * using the official SDK's streaming support.
       * 
       * Automatically adjusts max_tokens if the request would exceed the model's context window.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d;
        try {
          const contextWindow = (_a2 = MODEL_CONTEXT_WINDOWS[this.model]) != null ? _a2 : 2e5;
          const outputTokenLimit = MODEL_OUTPUT_TOKEN_LIMITS[this.model];
          const inputTokens = estimateTokenCount(messages);
          let maxTokens = (_b = options.maxTokens) != null ? _b : 1e3;
          if (inputTokens + maxTokens > contextWindow) {
            const adjustedMaxTokens = contextWindow - inputTokens;
            if (adjustedMaxTokens <= 0) {
              throw new ProviderError(
                "invalid_request" /* InvalidRequest */,
                `Input is too long for ${this.model}'s context window. Estimated input tokens: ${inputTokens}, context window: ${contextWindow}`
              );
            }
            console.log(
              `Adjusting max_tokens from ${maxTokens} to ${adjustedMaxTokens} to fit within ${this.model}'s context window`
            );
            maxTokens = adjustedMaxTokens;
          }
          if (outputTokenLimit && maxTokens > outputTokenLimit) {
            console.log(
              `Capping max_tokens from ${maxTokens} to model output limit ${outputTokenLimit} for ${this.model}`
            );
            maxTokens = outputTokenLimit;
          }
          const { systemPrompt, anthropicMessages } = this.formatMessages(messages);
          const requestParams = {
            model: this.model,
            messages: anthropicMessages,
            temperature: (_c = options.temperature) != null ? _c : 0.7,
            max_tokens: maxTokens,
            stream: true
          };
          if (systemPrompt) {
            requestParams.system = systemPrompt;
          }
          const stream = await this.client.messages.create(requestParams);
          try {
            if (stream && typeof stream === "object") {
              if (stream.on && typeof stream.on === "function") {
                await new Promise((resolve, reject) => {
                  stream.on("content_block_delta", (chunk) => {
                    var _a3;
                    if (((_a3 = chunk.delta) == null ? void 0 : _a3.type) === "text_delta" && options.streamCallback) {
                      options.streamCallback(chunk.delta.text);
                    }
                  });
                  stream.on("end", resolve);
                  stream.on("error", reject);
                });
              } else if (Symbol.asyncIterator in stream) {
                for await (const chunk of stream) {
                  if (chunk.type === "content_block_delta" && ((_d = chunk.delta) == null ? void 0 : _d.type) === "text_delta" && options.streamCallback) {
                    options.streamCallback(chunk.delta.text);
                  }
                }
              } else if (options.streamCallback) {
                console.warn("Anthropic response is not a stream, handling as regular response");
                if ("content" in stream && typeof stream.content === "string") {
                  options.streamCallback(stream.content);
                }
              }
            }
          } catch (streamError) {
            console.error("Error processing Anthropic stream:", streamError);
            throw streamError;
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Anthropic stream was aborted");
          } else {
            console.error("Error calling Anthropic:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Anthropic models
       * 
       * Returns the list of supported Claude models.
       * Note: Anthropic doesn't have a models endpoint, so we return known models.
       * This list is based on the models defined in MODEL_CONTEXT_WINDOWS.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          return Object.keys(MODEL_CONTEXT_WINDOWS);
        } catch (error) {
          console.error("Error getting Anthropic models:", error);
          throw error;
        }
      }
      /**
       * Format messages for Anthropic API
       * 
       * Converts from the plugin's Message format to Anthropic's expected format.
       * Handles system messages specially as Anthropic has a different format.
       * 
       * @param messages - Array of messages to format
       * @returns Formatted messages and system prompt for Anthropic API
       */
      formatMessages(messages) {
        const systemMessages = messages.filter((msg) => msg.role === "system");
        const nonSystemMessages = messages.filter((msg) => msg.role !== "system");
        const systemPrompt = systemMessages.length > 0 ? systemMessages.map((msg) => msg.content).join("\n\n") : void 0;
        const anthropicMessages = nonSystemMessages.map((msg) => {
          const role = msg.role === "user" || msg.role === "assistant" ? msg.role : "user";
          return { role, content: msg.content };
        });
        return { systemPrompt, anthropicMessages };
      }
      /**
       * Test connection to Anthropic
       * 
       * Verifies the API key works by attempting a simple completion.
       * 
       * @returns Test results including success/failure
       */
      async testConnection() {
        try {
          await this.client.messages.create({
            model: this.model,
            messages: [{ role: "user", content: "Hi" }],
            max_tokens: 1
          });
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: "Successfully connected to Anthropic!",
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/openai.ts
var OpenAIProvider;
var init_openai = __esm({
  "providers/openai.ts"() {
    init_base();
    OpenAIProvider = class extends BaseProvider {
      constructor(apiKey, model = "gpt-4", baseUrl) {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl");
        __publicField(this, "model");
        this.apiKey = apiKey;
        this.model = model;
        this.baseUrl = baseUrl || "https://api.openai.com/v1";
      }
      /**
       * Get a completion from OpenAI
       * 
       * Sends the conversation to OpenAI and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d, _e, _f;
        try {
          const response = await fetch(`${this.baseUrl}/chat/completions`, {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${this.apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: this.model,
              messages,
              temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
              max_tokens: (_b = options.maxTokens) != null ? _b : 1e3,
              stream: true
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const reader = (_d = response.body) == null ? void 0 : _d.getReader();
          const decoder = new TextDecoder("utf-8");
          let buffer = "";
          while (true) {
            const { done, value } = await (reader == null ? void 0 : reader.read()) || { done: true, value: void 0 };
            if (done) break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split("\n");
            buffer = lines.pop() || "";
            for (const line of lines) {
              if (line.startsWith("data: ") && line !== "data: [DONE]") {
                try {
                  const data = JSON.parse(line.slice(6));
                  const content = (_f = (_e = data.choices[0]) == null ? void 0 : _e.delta) == null ? void 0 : _f.content;
                  if (content && options.streamCallback) {
                    options.streamCallback(content);
                  }
                } catch (e) {
                  console.warn("Error parsing OpenAI response chunk:", e);
                }
              }
            }
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("OpenAI stream was aborted");
          } else {
            console.error("Error calling OpenAI:", error);
            throw error;
          }
        }
      }
      /**
       * Get available OpenAI models
       * 
       * Fetches the list of models from OpenAI's API.
       * Filters to only include chat models (GPT-3.5, GPT-4, etc.)
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          const response = await fetch(`${this.baseUrl}/models`, {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${this.apiKey}`,
              "Content-Type": "application/json"
            }
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return data.data.map((model) => model.id).filter((id) => id.startsWith("gpt-"));
        } catch (error) {
          console.error("Error fetching OpenAI models:", error);
          throw error;
        }
      }
      /**
       * Test connection to OpenAI
       * 
       * Verifies the API key works by attempting to list models.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: `Successfully connected to OpenAI! Found ${models.length} available models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/gemini.ts
var GeminiProvider;
var init_gemini = __esm({
  "providers/gemini.ts"() {
    init_base();
    GeminiProvider = class extends BaseProvider {
      constructor(apiKey, model = "gemini-pro") {
        super();
        __publicField(this, "apiKey");
        __publicField(this, "baseUrl", "https://generativelanguage.googleapis.com/v1");
        __publicField(this, "model");
        this.apiKey = apiKey;
        this.model = model;
      }
      /**
       * Get a completion from Google Gemini
       * 
       * Sends the conversation to Gemini and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d, _e, _f, _g, _h;
        try {
          const formattedMessages = this.formatMessages(messages);
          const url = `${this.baseUrl}/models/${this.model}:generateContent?key=${this.apiKey}`;
          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              contents: formattedMessages,
              generationConfig: {
                temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
                maxOutputTokens: (_b = options.maxTokens) != null ? _b : 1e3
              }
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          console.log("Gemini response:", JSON.stringify(data));
          const text = (_h = (_g = (_f = (_e = (_d = data.candidates) == null ? void 0 : _d[0]) == null ? void 0 : _e.content) == null ? void 0 : _f.parts) == null ? void 0 : _g[0]) == null ? void 0 : _h.text;
          if (text && options.streamCallback) {
            options.streamCallback(text);
          } else {
            console.warn("No text found in Gemini response:", JSON.stringify(data));
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Gemini request was aborted");
          } else {
            console.error("Error calling Gemini:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Gemini models
       * 
       * Fetches the list of available models from Google's API.
       * Filters to only include Gemini models.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        try {
          const response = await fetch(`${this.baseUrl}/models?key=${this.apiKey}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json"
            }
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return data.models.map((model) => model.name.split("/").pop()).filter((id) => id.startsWith("gemini-"));
        } catch (error) {
          console.error("Error fetching Gemini models:", error);
          throw error;
        }
      }
      /**
       * Test connection to Gemini
       * 
       * Verifies the API key works by attempting to list models.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          return {
            success: true,
            message: `Successfully connected to Google Gemini! Found ${models.length} available models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
      /**
       * Format messages for Gemini API
       * 
       * Converts from the plugin's Message format to Gemini's expected format.
       * 
       * @param messages - Array of messages to format
       * @returns Formatted messages for Gemini API
       */
      formatMessages(messages) {
        const geminiMessages = [];
        const systemMessages = messages.filter((msg) => msg.role === "system");
        const nonSystemMessages = messages.filter((msg) => msg.role !== "system");
        for (const message of systemMessages) {
          geminiMessages.push({
            role: "user",
            parts: [{ text: message.content }]
          });
        }
        for (const message of nonSystemMessages) {
          const role = message.role === "assistant" ? "model" : "user";
          geminiMessages.push({
            role,
            parts: [{ text: message.content }]
          });
        }
        return geminiMessages;
      }
    };
  }
});

// providers/ollama.ts
var OllamaProvider;
var init_ollama = __esm({
  "providers/ollama.ts"() {
    init_base();
    OllamaProvider = class extends BaseProvider {
      constructor(serverUrl = "http://localhost:11434", model = "llama2") {
        super();
        __publicField(this, "apiKey", "");
        // Not used for Ollama
        __publicField(this, "baseUrl");
        __publicField(this, "model");
        this.baseUrl = serverUrl.replace(/\/$/, "");
        this.model = model;
      }
      /**
       * Convert messages to Ollama format
       * 
       * @param messages - Standard message format
       * @returns Prompt string in Ollama format
       */
      convertToOllamaFormat(messages) {
        return messages.map((msg) => {
          if (msg.role === "system") {
            return `System: ${msg.content}

`;
          }
          return `${msg.role === "user" ? "Human" : "Assistant"}: ${msg.content}

`;
        }).join("") + "Assistant:";
      }
      /**
       * Get a completion from Ollama
       * 
       * Sends the conversation to the local Ollama server and streams back the response.
       * 
       * @param messages - The conversation history
       * @param options - Settings for this completion
       */
      async getCompletion(messages, options) {
        var _a2, _b, _c, _d;
        try {
          const prompt = this.convertToOllamaFormat(messages);
          const response = await fetch(`${this.baseUrl}/api/generate`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: this.model,
              prompt,
              stream: true,
              options: {
                temperature: (_a2 = options.temperature) != null ? _a2 : 0.7,
                num_predict: (_b = options.maxTokens) != null ? _b : 1e3
              }
            }),
            signal: (_c = options.abortController) == null ? void 0 : _c.signal
          });
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const reader = (_d = response.body) == null ? void 0 : _d.getReader();
          const decoder = new TextDecoder("utf-8");
          let buffer = "";
          while (true) {
            const { done, value } = await (reader == null ? void 0 : reader.read()) || { done: true, value: void 0 };
            if (done) break;
            buffer += decoder.decode(value, { stream: true });
            const lines = buffer.split("\n");
            buffer = lines.pop() || "";
            for (const line of lines) {
              if (line.trim()) {
                try {
                  const data = JSON.parse(line);
                  if (data.response && options.streamCallback) {
                    options.streamCallback(data.response);
                  }
                } catch (e) {
                  console.warn("Error parsing Ollama response chunk:", e);
                }
              }
            }
          }
        } catch (error) {
          if (error instanceof ProviderError) {
            throw error;
          }
          if (error.name === "AbortError") {
            console.log("Ollama stream was aborted");
          } else {
            console.error("Error calling Ollama:", error);
            throw error;
          }
        }
      }
      /**
       * Get available Ollama models
       * 
       * Fetches the list of models installed on the local Ollama server.
       * 
       * @returns List of available model names
       */
      async getAvailableModels() {
        var _a2;
        try {
          const response = await fetch(`${this.baseUrl}/api/tags`);
          if (!response.ok) {
            throw this.handleHttpError(response);
          }
          const data = await response.json();
          return ((_a2 = data.models) == null ? void 0 : _a2.map((model) => model.name)) || [];
        } catch (error) {
          console.error("Error fetching Ollama models:", error);
          throw error;
        }
      }
      /**
       * Test connection to Ollama
       * 
       * Verifies the Ollama server is running and accessible.
       * Also checks if any models are installed.
       * 
       * @returns Test results including success/failure and available models
       */
      async testConnection() {
        try {
          const models = await this.getAvailableModels();
          if (models.length === 0) {
            return {
              success: false,
              message: 'Connected to Ollama server, but no models are installed. Use "ollama pull model-name" to install models.',
              models: []
            };
          }
          return {
            success: true,
            message: `Successfully connected to Ollama! Found ${models.length} installed models.`,
            models
          };
        } catch (error) {
          return this.createErrorResponse(error);
        }
      }
    };
  }
});

// providers/index.ts
function createProvider(settings) {
  switch (settings.provider) {
    case "openai":
      return new OpenAIProvider(
        settings.openaiSettings.apiKey,
        settings.openaiSettings.model,
        settings.openaiSettings.baseUrl
      );
    case "anthropic":
      return new AnthropicProvider(
        settings.anthropicSettings.apiKey,
        settings.anthropicSettings.model
      );
    case "gemini":
      return new GeminiProvider(
        settings.geminiSettings.apiKey,
        settings.geminiSettings.model
      );
    case "ollama":
      return new OllamaProvider(
        settings.ollamaSettings.serverUrl,
        settings.ollamaSettings.model
      );
    default:
      throw new Error(`Invalid provider type: ${settings.provider}`);
  }
}
function createProviderFromUnifiedModel(settings, unifiedModelId) {
  const [providerType, modelId] = unifiedModelId.split(":", 2);
  switch (providerType) {
    case "openai":
      return new OpenAIProvider(settings.openaiSettings.apiKey, modelId, settings.openaiSettings.baseUrl);
    case "anthropic":
      return new AnthropicProvider(settings.anthropicSettings.apiKey, modelId);
    case "gemini":
      return new GeminiProvider(settings.geminiSettings.apiKey, modelId);
    case "ollama":
      return new OllamaProvider(settings.ollamaSettings.serverUrl, modelId);
    default:
      throw new Error(`Invalid provider type: ${providerType}`);
  }
}
async function getAllAvailableModels(settings) {
  const allModels = [];
  const getProviderDisplayName = (provider) => {
    switch (provider) {
      case "openai":
        return "OpenAI";
      case "anthropic":
        return "Anthropic";
      case "gemini":
        return "Google";
      case "ollama":
        return "Ollama";
      default:
        return provider;
    }
  };
  if (settings.openaiSettings.apiKey && settings.openaiSettings.availableModels.length > 0) {
    settings.openaiSettings.availableModels.forEach((model) => {
      allModels.push({
        id: `openai:${model}`,
        name: `${model} (${getProviderDisplayName("openai")})`,
        provider: "openai",
        modelId: model
      });
    });
  }
  if (settings.anthropicSettings.apiKey && settings.anthropicSettings.availableModels.length > 0) {
    settings.anthropicSettings.availableModels.forEach((model) => {
      allModels.push({
        id: `anthropic:${model}`,
        name: `${model} (${getProviderDisplayName("anthropic")})`,
        provider: "anthropic",
        modelId: model
      });
    });
  }
  if (settings.geminiSettings.apiKey && settings.geminiSettings.availableModels.length > 0) {
    settings.geminiSettings.availableModels.forEach((model) => {
      allModels.push({
        id: `gemini:${model}`,
        name: `${model} (${getProviderDisplayName("gemini")})`,
        provider: "gemini",
        modelId: model
      });
    });
  }
  if (settings.ollamaSettings.serverUrl && settings.ollamaSettings.availableModels.length > 0) {
    settings.ollamaSettings.availableModels.forEach((model) => {
      allModels.push({
        id: `ollama:${model}`,
        name: `${model} (${getProviderDisplayName("ollama")})`,
        provider: "ollama",
        modelId: model
      });
    });
  }
  return allModels;
}
function getProviderFromUnifiedModel(unifiedModelId) {
  const [providerType] = unifiedModelId.split(":", 2);
  return providerType;
}
function getModelIdFromUnifiedModel(unifiedModelId) {
  const [, modelId] = unifiedModelId.split(":", 2);
  return modelId;
}
var init_providers = __esm({
  "providers/index.ts"() {
    init_base();
    init_anthropic();
    init_openai();
    init_gemini();
    init_ollama();
  }
});

// src/components/chat/SettingsSections.ts
var SettingsSections_exports = {};
__export(SettingsSections_exports, {
  SettingsSections: () => SettingsSections
});
var import_obsidian, SettingsSections;
var init_SettingsSections = __esm({
  "src/components/chat/SettingsSections.ts"() {
    import_obsidian = require("obsidian");
    init_providers();
    SettingsSections = class {
      constructor(plugin) {
        __publicField(this, "plugin");
        this.plugin = plugin;
      }
      /**
       * AI Model Settings Section
       */
      async renderAIModelSettings(containerEl, onRefresh) {
        while (containerEl.firstChild) containerEl.removeChild(containerEl.firstChild);
        if (this.plugin.settings.modelSettingPresets && this.plugin.settings.modelSettingPresets.length > 0) {
          const presetContainer = containerEl.createDiv();
          presetContainer.addClass("model-preset-buttons");
          presetContainer.createEl("div", { text: "Presets:", cls: "setting-item-name" });
          this.plugin.settings.modelSettingPresets.forEach((preset, idx) => {
            const btn = presetContainer.createEl("button", { text: preset.name });
            btn.style.marginRight = "0.5em";
            btn.onclick = async () => {
              if (preset.selectedModel !== void 0) this.plugin.settings.selectedModel = preset.selectedModel;
              if (preset.systemMessage !== void 0) this.plugin.settings.systemMessage = preset.systemMessage;
              if (preset.temperature !== void 0) this.plugin.settings.temperature = preset.temperature;
              if (preset.maxTokens !== void 0) this.plugin.settings.maxTokens = preset.maxTokens;
              if (preset.enableStreaming !== void 0) this.plugin.settings.enableStreaming = preset.enableStreaming;
              await this.plugin.saveSettings();
              if (onRefresh) {
                if (window._aiModelSettingsRefreshTimeout) {
                  clearTimeout(window._aiModelSettingsRefreshTimeout);
                }
                window._aiModelSettingsRefreshTimeout = setTimeout(() => {
                  onRefresh();
                  window._aiModelSettingsRefreshTimeout = null;
                }, 50);
              }
              new import_obsidian.Notice(`Applied preset: ${preset.name}`);
            };
          });
        }
        new import_obsidian.Setting(containerEl).setName("System Message").setDesc("Set the system message for the AI").addTextArea((text) => text.setPlaceholder("You are a helpful assistant.").setValue(this.plugin.settings.systemMessage).onChange(async (value) => {
          this.plugin.settings.systemMessage = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName("Enable Streaming").setDesc("Enable or disable streaming for completions").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableStreaming).onChange(async (value) => {
          this.plugin.settings.enableStreaming = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName("Temperature").setDesc("Set the randomness of the model's output (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.temperature).setDynamicTooltip().onChange(async (value) => {
          this.plugin.settings.temperature = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName("Refresh Available Models").setDesc("Test connections to all configured providers and refresh available models").addButton((button) => button.setButtonText("Refresh Models").onClick(async () => {
          button.setButtonText("Refreshing...");
          button.setDisabled(true);
          try {
            await this.refreshAllAvailableModels();
            new import_obsidian.Notice("Successfully refreshed available models");
            if (onRefresh) onRefresh();
          } catch (error) {
            new import_obsidian.Notice(`Error refreshing models: ${error.message}`);
          } finally {
            button.setButtonText("Refresh Models");
            button.setDisabled(false);
          }
        }));
        await this.renderUnifiedModelDropdown(containerEl);
      }
      /**
       * Date Settings Section
       */
      renderDateSettings(containerEl) {
        new import_obsidian.Setting(containerEl).setName("Include Date with System Message").setDesc("Add the current date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeDateWithSystemMessage).onChange(async (value) => {
          this.plugin.settings.includeDateWithSystemMessage = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName("Include Time with System Message").setDesc("Add the current time along with the date to the system message").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTimeWithSystemMessage).onChange(async (value) => {
          this.plugin.settings.includeTimeWithSystemMessage = value;
          await this.plugin.saveSettings();
        }));
      }
      /**
       * Note Reference Settings Section
       */
      renderNoteReferenceSettings(containerEl) {
        new import_obsidian.Setting(containerEl).setName("Enable Obsidian Links").setDesc("Read Obsidian links in messages using [[filename]] syntax").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableObsidianLinks).onChange(async (value) => {
          this.plugin.settings.enableObsidianLinks = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName("Enable Context Notes").setDesc("Attach specified note content to chat messages").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableContextNotes).onChange(async (value) => {
          this.plugin.settings.enableContextNotes = value;
          await this.plugin.saveSettings();
        }));
        const contextNotesContainer = containerEl.createDiv("context-notes-container");
        contextNotesContainer.style.marginBottom = "24px";
        new import_obsidian.Setting(contextNotesContainer).setName("Context Notes").setDesc("Notes to attach as context (supports [[filename]] and [[filename#header]] syntax)").addTextArea((text) => {
          text.setPlaceholder("[[Note Name]]\n[[Another Note#Header]]").setValue(this.plugin.settings.contextNotes || "").onChange(async (value) => {
            this.plugin.settings.contextNotes = value;
            await this.plugin.saveSettings();
          });
          text.inputEl.rows = 4;
          text.inputEl.style.width = "100%";
        });
        new import_obsidian.Setting(containerEl).setName("Expand Linked Notes Recursively").setDesc("If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).").addToggle((toggle) => {
          var _a2;
          return toggle.setValue((_a2 = this.plugin.settings.expandLinkedNotesRecursively) != null ? _a2 : false).onChange(async (value) => {
            this.plugin.settings.expandLinkedNotesRecursively = value;
            await this.plugin.saveSettings();
          });
        });
      }
      /**
       * Provider Configuration Section
       */
      renderProviderConfiguration(containerEl) {
        containerEl.createEl("p", {
          text: "API keys are configured in the main plugin settings. Use the test buttons below to verify connections and refresh available models.",
          cls: "setting-item-description"
        });
        this.renderOpenAIConfig(containerEl);
        this.renderAnthropicConfig(containerEl);
        this.renderGeminiConfig(containerEl);
        this.renderOllamaConfig(containerEl);
      }
      /**
       * Renders the unified model selection dropdown
       */
      async renderUnifiedModelDropdown(containerEl) {
        if (!this.plugin.settings.availableModels || this.plugin.settings.availableModels.length === 0) {
          this.plugin.settings.availableModels = await getAllAvailableModels(this.plugin.settings);
          await this.plugin.saveSettings();
        }
        new import_obsidian.Setting(containerEl).setName("Selected Model").setDesc("Choose from all available models across all configured providers").addDropdown((dropdown) => {
          if (!this.plugin.settings.availableModels || this.plugin.settings.availableModels.length === 0) {
            dropdown.addOption("", "No models available - configure providers below");
          } else {
            dropdown.addOption("", "Select a model...");
            const modelsByProvider = {};
            this.plugin.settings.availableModels.forEach((model) => {
              if (!modelsByProvider[model.provider]) {
                modelsByProvider[model.provider] = [];
              }
              modelsByProvider[model.provider].push(model);
            });
            Object.entries(modelsByProvider).forEach(([provider, models]) => {
              models.forEach((model) => {
                dropdown.addOption(model.id, model.name);
              });
            });
          }
          dropdown.setValue(this.plugin.settings.selectedModel || "").onChange(async (value) => {
            this.plugin.settings.selectedModel = value;
            if (value) {
              const provider = getProviderFromUnifiedModel(value);
              this.plugin.settings.provider = provider;
            }
            await this.plugin.saveSettings();
          });
        });
        if (this.plugin.settings.selectedModel && this.plugin.settings.availableModels) {
          const selectedModel = this.plugin.settings.availableModels.find(
            (model) => model.id === this.plugin.settings.selectedModel
          );
          if (selectedModel) {
            const infoEl = containerEl.createEl("div", { cls: "setting-item-description" });
            infoEl.setText(`Currently using: ${selectedModel.name}`);
          }
        }
      }
      /**
       * Refreshes available models from all configured providers
       */
      async refreshAllAvailableModels() {
        const providers = ["openai", "anthropic", "gemini", "ollama"];
        for (const providerType of providers) {
          try {
            const originalProvider = this.plugin.settings.provider;
            this.plugin.settings.provider = providerType;
            const providerInstance = createProvider(this.plugin.settings);
            const result = await providerInstance.testConnection();
            this.plugin.settings.provider = originalProvider;
            const providerSettings = this.plugin.settings[`${providerType}Settings`];
            if (result.success && result.models) {
              providerSettings.availableModels = result.models;
              providerSettings.lastTestResult = {
                timestamp: Date.now(),
                success: true,
                message: result.message
              };
            } else {
              providerSettings.lastTestResult = {
                timestamp: Date.now(),
                success: false,
                message: result.message
              };
            }
          } catch (error) {
            console.error(`Error testing ${providerType}:`, error);
          }
        }
        this.plugin.settings.availableModels = await getAllAvailableModels(this.plugin.settings);
        await this.plugin.saveSettings();
      }
      /**
       * Renders a collapsible section for provider configuration.
       * @param containerEl The HTML element to render the section into.
       * @param providerType The type of the provider (e.g., 'openai', 'anthropic').
       * @param displayName The display name of the provider (e.g., 'OpenAI', 'Anthropic').
       * @param renderSpecificSettings A callback function to render provider-specific settings.
       */
      _renderCollapsibleProviderConfig(containerEl, providerType, displayName, renderSpecificSettings) {
        const collapsibleContainer = containerEl.createDiv({ cls: "provider-collapsible" });
        const headerEl = collapsibleContainer.createEl("div", {
          cls: "provider-header",
          text: `\u25B6 ${displayName} Configuration`
        });
        Object.assign(headerEl.style, {
          cursor: "pointer",
          userSelect: "none",
          padding: "8px 0",
          fontWeight: "bold"
        });
        const contentEl = collapsibleContainer.createDiv({ cls: "provider-content" });
        contentEl.style.display = "none";
        contentEl.style.paddingLeft = "16px";
        let isExpanded = false;
        headerEl.addEventListener("click", () => {
          isExpanded = !isExpanded;
          contentEl.style.display = isExpanded ? "block" : "none";
          headerEl.textContent = `${isExpanded ? "\u25BC" : "\u25B6"} ${displayName} Configuration`;
        });
        const settings = this.plugin.settings[`${providerType}Settings`];
        const apiKeyStatus = settings.apiKey ? `API Key: ${settings.apiKey.substring(0, 8)}...` : "No API Key configured";
        const serverUrlStatus = settings.serverUrl ? `Server URL: ${settings.serverUrl}` : "No Server URL configured";
        contentEl.createEl("div", {
          cls: "setting-item-description",
          text: `${settings.apiKey ? apiKeyStatus : serverUrlStatus} (Configure in main plugin settings)`
        });
        if (renderSpecificSettings) {
          renderSpecificSettings(contentEl);
        }
        this.renderProviderTestSection(contentEl, providerType, displayName);
      }
      /**
       * Renders the OpenAI configuration section.
       * @param containerEl The HTML element to render the section into.
       */
      renderOpenAIConfig(containerEl) {
        this._renderCollapsibleProviderConfig(containerEl, "openai", "OpenAI", (contentEl) => {
          new import_obsidian.Setting(contentEl).setName("OpenAI Base URL").setDesc("Custom base URL for OpenAI API (optional)").addText((text) => text.setPlaceholder("https://api.openai.com/v1").setValue(this.plugin.settings.openaiSettings.baseUrl || "").onChange(async (value) => {
            this.plugin.settings.openaiSettings.baseUrl = value;
            await this.plugin.saveSettings();
          }));
        });
      }
      /**
       * Renders the Anthropic configuration section.
       * @param containerEl The HTML element to render the section into.
       */
      renderAnthropicConfig(containerEl) {
        this._renderCollapsibleProviderConfig(containerEl, "anthropic", "Anthropic");
      }
      /**
       * Renders the Gemini configuration section.
       * @param containerEl The HTML element to render the section into.
       */
      renderGeminiConfig(containerEl) {
        this._renderCollapsibleProviderConfig(containerEl, "gemini", "Gemini");
      }
      /**
       * Renders the Ollama configuration section.
       * @param containerEl The HTML element to render the section into.
       */
      renderOllamaConfig(containerEl) {
        this._renderCollapsibleProviderConfig(containerEl, "ollama", "Ollama", (contentEl) => {
          contentEl.createEl("div", {
            cls: "setting-item-description",
            text: "To use Ollama:"
          });
          const steps = contentEl.createEl("ol");
          steps.createEl("li", { text: "Install Ollama from https://ollama.ai" });
          steps.createEl("li", { text: "Start the Ollama server" });
          steps.createEl("li", { text: 'Pull models using "ollama pull model-name"' });
          steps.createEl("li", { text: "Test connection to see available models" });
        });
      }
      /**
       * Renders the provider connection test section.
       * @param containerEl The HTML element to render the section into.
       * @param provider The internal identifier for the provider (e.g., 'openai').
       * @param displayName The user-friendly name of the provider (e.g., 'OpenAI').
       */
      renderProviderTestSection(containerEl, provider, displayName) {
        const settings = this.plugin.settings[`${provider}Settings`];
        new import_obsidian.Setting(containerEl).setName("Test Connection").setDesc(`Verify your API key and fetch available models for ${displayName}`).addButton((button) => button.setButtonText("Test").onClick(async () => {
          button.setButtonText("Testing...");
          button.setDisabled(true);
          try {
            const originalProvider = this.plugin.settings.provider;
            this.plugin.settings.provider = provider;
            const providerInstance = createProvider(this.plugin.settings);
            const result = await providerInstance.testConnection();
            this.plugin.settings.provider = originalProvider;
            if (result.success && result.models) {
              settings.availableModels = result.models;
              settings.lastTestResult = {
                timestamp: Date.now(),
                success: true,
                message: result.message
              };
              await this.plugin.saveSettings();
              this.plugin.settings.availableModels = await getAllAvailableModels(this.plugin.settings);
              await this.plugin.saveSettings();
              new import_obsidian.Notice(result.message);
            } else {
              settings.lastTestResult = {
                timestamp: Date.now(),
                success: false,
                message: result.message
              };
              new import_obsidian.Notice(result.message);
            }
          } catch (error) {
            new import_obsidian.Notice(`Error: ${error.message}`);
          } finally {
            button.setButtonText("Test");
            button.setDisabled(false);
          }
        }));
        if (settings.lastTestResult) {
          const date = new Date(settings.lastTestResult.timestamp);
          containerEl.createEl("div", {
            text: `Last test: ${date.toLocaleString()} - ${settings.lastTestResult.message}`,
            cls: settings.lastTestResult.success ? "success" : "error"
          });
        }
        if (settings.availableModels && settings.availableModels.length > 0) {
          containerEl.createEl("div", {
            text: `Available models: ${settings.availableModels.map((m) => m.name || m.id).join(", ")}`,
            cls: "setting-item-description"
          });
        }
      }
      /**
       * Renders all settings sections in order for a modal or view.
       * @param containerEl The HTML element to render the sections into.
       * @param options Optional settings, e.g., onRefresh callback.
       */
      async renderAllSettings(containerEl, options) {
        await this.renderAIModelSettings(containerEl, options == null ? void 0 : options.onRefresh);
        this.renderDateSettings(containerEl);
        this.renderNoteReferenceSettings(containerEl);
        this.renderProviderConfiguration(containerEl);
      }
    };
  }
});

// src/components/chat/Buttons.ts
function createActionButton(label, tooltip, callback) {
  const button = document.createElement("button");
  button.addClass("ai-chat-action-button");
  button.setAttribute("aria-label", tooltip);
  const labelEl = document.createElement("span");
  labelEl.textContent = label;
  button.appendChild(labelEl);
  button.addEventListener("click", callback);
  return button;
}
async function copyToClipboard(text) {
  try {
    await navigator.clipboard.writeText(text);
  } catch (error) {
  }
}
var import_obsidian4;
var init_Buttons = __esm({
  "src/components/chat/Buttons.ts"() {
    import_obsidian4 = require("obsidian");
  }
});

// node_modules/js-yaml/dist/js-yaml.mjs
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark) return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
    // relative position
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer) return null;
  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent !== "number") options.indent = 1;
  if (typeof options.linesBefore !== "number") options.linesBefore = 3;
  if (typeof options.linesAfter !== "number") options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max) return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max) return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (ch !== "0" && ch !== "1") return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_") return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_") continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_") return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-") sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0") return 0;
  if (ch === "0") {
    if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x") return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o") return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
function resolveYamlFloat(data) {
  if (data === null) return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-") delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
function resolveYamlBinary(data) {
  if (data === null) return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64) continue;
    if (code < 0) return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]") return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }
    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
function resolveYamlPairs(data) {
  if (data === null) return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]") return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null) return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
function resolveYamlSet(data) {
  if (data === null) return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33) return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38) return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch)) break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0) readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null) return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n") result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(
      string,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ") return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "") _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "") pairBuffer += ", ";
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024) pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true)) return state.dump + "\n";
  return "";
}
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var isNothing_1, isObject_1, toArray_1, repeat_1, isNegativeZero_1, extend_1, common, exception, snippet, TYPE_CONSTRUCTOR_OPTIONS, YAML_NODE_KINDS, type, schema, str, seq, map, failsafe, _null, bool, int, YAML_FLOAT_PATTERN, SCIENTIFIC_WITHOUT_DOT, float, json, core, YAML_DATE_REGEXP, YAML_TIMESTAMP_REGEXP, timestamp, merge, BASE64_MAP, binary, _hasOwnProperty$3, _toString$2, omap, _toString$1, pairs, _hasOwnProperty$2, set, _default, _hasOwnProperty$1, CONTEXT_FLOW_IN, CONTEXT_FLOW_OUT, CONTEXT_BLOCK_IN, CONTEXT_BLOCK_OUT, CHOMPING_CLIP, CHOMPING_STRIP, CHOMPING_KEEP, PATTERN_NON_PRINTABLE, PATTERN_NON_ASCII_LINE_BREAKS, PATTERN_FLOW_INDICATORS, PATTERN_TAG_HANDLE, PATTERN_TAG_URI, simpleEscapeCheck, simpleEscapeMap, i, directiveHandlers, loadAll_1, load_1, loader, _toString, _hasOwnProperty, CHAR_BOM, CHAR_TAB, CHAR_LINE_FEED, CHAR_CARRIAGE_RETURN, CHAR_SPACE, CHAR_EXCLAMATION, CHAR_DOUBLE_QUOTE, CHAR_SHARP, CHAR_PERCENT, CHAR_AMPERSAND, CHAR_SINGLE_QUOTE, CHAR_ASTERISK, CHAR_COMMA, CHAR_MINUS, CHAR_COLON, CHAR_EQUALS, CHAR_GREATER_THAN, CHAR_QUESTION, CHAR_COMMERCIAL_AT, CHAR_LEFT_SQUARE_BRACKET, CHAR_RIGHT_SQUARE_BRACKET, CHAR_GRAVE_ACCENT, CHAR_LEFT_CURLY_BRACKET, CHAR_VERTICAL_LINE, CHAR_RIGHT_CURLY_BRACKET, ESCAPE_SEQUENCES, DEPRECATED_BOOLEANS_SYNTAX, DEPRECATED_BASE60_SYNTAX, QUOTING_TYPE_SINGLE, QUOTING_TYPE_DOUBLE, STYLE_PLAIN, STYLE_SINGLE, STYLE_LITERAL, STYLE_FOLDED, STYLE_DOUBLE, dump_1, dumper, load, loadAll, dump, safeLoad, safeLoadAll, safeDump;
var init_js_yaml = __esm({
  "node_modules/js-yaml/dist/js-yaml.mjs"() {
    isNothing_1 = isNothing;
    isObject_1 = isObject;
    toArray_1 = toArray;
    repeat_1 = repeat;
    isNegativeZero_1 = isNegativeZero;
    extend_1 = extend;
    common = {
      isNothing: isNothing_1,
      isObject: isObject_1,
      toArray: toArray_1,
      repeat: repeat_1,
      isNegativeZero: isNegativeZero_1,
      extend: extend_1
    };
    YAMLException$1.prototype = Object.create(Error.prototype);
    YAMLException$1.prototype.constructor = YAMLException$1;
    YAMLException$1.prototype.toString = function toString(compact) {
      return this.name + ": " + formatError(this, compact);
    };
    exception = YAMLException$1;
    snippet = makeSnippet;
    TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "multi",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "representName",
      "defaultStyle",
      "styleAliases"
    ];
    YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    type = Type$1;
    Schema$1.prototype.extend = function extend2(definition) {
      var implicit = [];
      var explicit = [];
      if (definition instanceof type) {
        explicit.push(definition);
      } else if (Array.isArray(definition)) {
        explicit = explicit.concat(definition);
      } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
        if (definition.implicit) implicit = implicit.concat(definition.implicit);
        if (definition.explicit) explicit = explicit.concat(definition.explicit);
      } else {
        throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
      }
      implicit.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        if (type$1.loadKind && type$1.loadKind !== "scalar") {
          throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
        if (type$1.multi) {
          throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
        }
      });
      explicit.forEach(function(type$1) {
        if (!(type$1 instanceof type)) {
          throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
      });
      var result = Object.create(Schema$1.prototype);
      result.implicit = (this.implicit || []).concat(implicit);
      result.explicit = (this.explicit || []).concat(explicit);
      result.compiledImplicit = compileList(result, "implicit");
      result.compiledExplicit = compileList(result, "explicit");
      result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
      return result;
    };
    schema = Schema$1;
    str = new type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
    seq = new type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
    map = new type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
    failsafe = new schema({
      explicit: [
        str,
        seq,
        map
      ]
    });
    _null = new type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        },
        empty: function() {
          return "";
        }
      },
      defaultStyle: "lowercase"
    });
    bool = new type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
    int = new type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
    YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    float = new type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
    json = failsafe.extend({
      implicit: [
        _null,
        bool,
        int,
        float
      ]
    });
    core = json;
    YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    timestamp = new type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
    merge = new type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
    BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    binary = new type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
    _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
    _toString$2 = Object.prototype.toString;
    omap = new type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
    _toString$1 = Object.prototype.toString;
    pairs = new type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
    _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    set = new type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
    _default = core.extend({
      implicit: [
        timestamp,
        merge
      ],
      explicit: [
        binary,
        omap,
        pairs,
        set
      ]
    });
    _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    CONTEXT_FLOW_IN = 1;
    CONTEXT_FLOW_OUT = 2;
    CONTEXT_BLOCK_IN = 3;
    CONTEXT_BLOCK_OUT = 4;
    CHOMPING_CLIP = 1;
    CHOMPING_STRIP = 2;
    CHOMPING_KEEP = 3;
    PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    simpleEscapeCheck = new Array(256);
    simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty$1.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        try {
          prefix = decodeURIComponent(prefix);
        } catch (err) {
          throwError(state, "tag prefix is malformed: " + prefix);
        }
        state.tagMap[handle] = prefix;
      }
    };
    loadAll_1 = loadAll$1;
    load_1 = load$1;
    loader = {
      loadAll: loadAll_1,
      load: load_1
    };
    _toString = Object.prototype.toString;
    _hasOwnProperty = Object.prototype.hasOwnProperty;
    CHAR_BOM = 65279;
    CHAR_TAB = 9;
    CHAR_LINE_FEED = 10;
    CHAR_CARRIAGE_RETURN = 13;
    CHAR_SPACE = 32;
    CHAR_EXCLAMATION = 33;
    CHAR_DOUBLE_QUOTE = 34;
    CHAR_SHARP = 35;
    CHAR_PERCENT = 37;
    CHAR_AMPERSAND = 38;
    CHAR_SINGLE_QUOTE = 39;
    CHAR_ASTERISK = 42;
    CHAR_COMMA = 44;
    CHAR_MINUS = 45;
    CHAR_COLON = 58;
    CHAR_EQUALS = 61;
    CHAR_GREATER_THAN = 62;
    CHAR_QUESTION = 63;
    CHAR_COMMERCIAL_AT = 64;
    CHAR_LEFT_SQUARE_BRACKET = 91;
    CHAR_RIGHT_SQUARE_BRACKET = 93;
    CHAR_GRAVE_ACCENT = 96;
    CHAR_LEFT_CURLY_BRACKET = 123;
    CHAR_VERTICAL_LINE = 124;
    CHAR_RIGHT_CURLY_BRACKET = 125;
    ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
    QUOTING_TYPE_SINGLE = 1;
    QUOTING_TYPE_DOUBLE = 2;
    STYLE_PLAIN = 1;
    STYLE_SINGLE = 2;
    STYLE_LITERAL = 3;
    STYLE_FOLDED = 4;
    STYLE_DOUBLE = 5;
    dump_1 = dump$1;
    dumper = {
      dump: dump_1
    };
    load = loader.load;
    loadAll = loader.loadAll;
    dump = dumper.dump;
    safeLoad = renamed("safeLoad", "load");
    safeLoadAll = renamed("safeLoadAll", "loadAll");
    safeDump = renamed("safeDump", "dump");
  }
});

// src/components/chat/chatPersistence.ts
function buildChatYaml(settings, provider, model) {
  if (settings.selectedModel) {
    const providerType = getProviderFromUnifiedModel(settings.selectedModel);
    const modelId = getModelIdFromUnifiedModel(settings.selectedModel);
    const yamlObj = {
      provider: providerType,
      model: modelId,
      unified_model: settings.selectedModel,
      // Add unified model ID for future compatibility
      system_message: settings.systemMessage,
      temperature: settings.temperature
    };
    return `---
${dump(yamlObj)}---
`;
  } else {
    const yamlObj = {
      provider: provider || settings.provider,
      model: model || getCurrentModelForProvider(settings),
      system_message: settings.systemMessage,
      temperature: settings.temperature
    };
    return `---
${dump(yamlObj)}---
`;
  }
}
function getCurrentModelForProvider(settings) {
  switch (settings.provider) {
    case "openai":
      return settings.openaiSettings.model;
    case "anthropic":
      return settings.anthropicSettings.model;
    case "gemini":
      return settings.geminiSettings.model;
    case "ollama":
      return settings.ollamaSettings.model;
    default:
      return "";
  }
}
async function saveChatAsNote({
  app,
  messages,
  settings,
  provider,
  model,
  chatSeparator,
  chatNoteFolder
}) {
  let chatContent = "";
  messages.forEach((el, index) => {
    var _a2;
    const rawContent = el.dataset.rawContent;
    const content = rawContent !== void 0 ? rawContent : ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
    chatContent += content;
    if (index < messages.length - 1) {
      chatContent += "\n\n" + chatSeparator + "\n\n";
    }
  });
  const yaml = buildChatYaml(settings, provider, model);
  chatContent = chatContent.replace(/^---[\s\S]*?---\n?/, "");
  const noteContent = yaml + "\n" + chatContent.trimStart();
  const now = /* @__PURE__ */ new Date();
  const pad = (n) => n.toString().padStart(2, "0");
  const fileName = `Chat Export ${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ${pad(now.getHours())}-${pad(now.getMinutes())}.md`;
  let filePath = fileName;
  const folder = chatNoteFolder == null ? void 0 : chatNoteFolder.trim();
  if (folder) {
    filePath = folder.replace(/[/\\]+$/, "") + "/" + fileName;
  }
  try {
    await app.vault.create(filePath, noteContent);
    new import_obsidian7.Notice(`Chat saved as note: ${filePath}`);
  } catch (e) {
    new import_obsidian7.Notice("Failed to save chat as note.");
  }
}
async function loadChatYamlAndApplySettings({
  app,
  plugin,
  settings,
  file
}) {
  let content = await app.vault.read(file);
  const yamlMatch = content.match(/^---\n([\s\S]*?)\n---/);
  let yamlObj = {};
  if (yamlMatch) {
    try {
      yamlObj = load(yamlMatch[1]) || {};
    } catch (e) {
      yamlObj = {};
    }
  }
  if (yamlObj.unified_model) {
    settings.selectedModel = yamlObj.unified_model;
  } else if (yamlObj.provider && yamlObj.model) {
    const unifiedModelId = `${yamlObj.provider}:${yamlObj.model}`;
    settings.selectedModel = unifiedModelId;
    settings.provider = yamlObj.provider;
    switch (yamlObj.provider) {
      case "openai":
        settings.openaiSettings.model = yamlObj.model;
        break;
      case "anthropic":
        settings.anthropicSettings.model = yamlObj.model;
        break;
      case "gemini":
        settings.geminiSettings.model = yamlObj.model;
        break;
      case "ollama":
        settings.ollamaSettings.model = yamlObj.model;
        break;
    }
  }
  let newSystemMessage = yamlObj.system_message || settings.systemMessage;
  let newTemperature = settings.temperature;
  if (yamlObj.temperature !== void 0) {
    const tempNum = parseFloat(yamlObj.temperature);
    if (!isNaN(tempNum)) newTemperature = tempNum;
  }
  settings.systemMessage = newSystemMessage;
  settings.temperature = newTemperature;
  if (plugin.onSettingsLoadedFromNote) {
    plugin.onSettingsLoadedFromNote(settings);
  }
  return {
    provider: yamlObj.provider,
    model: yamlObj.model,
    unifiedModel: settings.selectedModel,
    systemMessage: newSystemMessage,
    temperature: newTemperature
  };
}
var import_obsidian7;
var init_chatPersistence = __esm({
  "src/components/chat/chatPersistence.ts"() {
    import_obsidian7 = require("obsidian");
    init_js_yaml();
    init_providers();
  }
});

// src/components/chat/ChatHelpModal.ts
var import_obsidian8, ChatHelpModal;
var init_ChatHelpModal = __esm({
  "src/components/chat/ChatHelpModal.ts"() {
    import_obsidian8 = require("obsidian");
    ChatHelpModal = class extends import_obsidian8.Modal {
      constructor(app) {
        super(app);
      }
      createCollapsibleSection(title, contentCallback, expanded = true) {
        const sectionContainer = createDiv();
        sectionContainer.addClass("ai-collapsible-section");
        const header = createDiv();
        header.addClass("ai-collapsible-header");
        const arrow = createSpan();
        arrow.addClass("ai-collapsible-arrow");
        arrow.textContent = expanded ? "\u25BC" : "\u25B6";
        const titleSpan = createSpan();
        titleSpan.textContent = title;
        header.appendChild(arrow);
        header.appendChild(titleSpan);
        const content = createDiv();
        content.addClass("ai-collapsible-content");
        content.style.display = expanded ? "block" : "none";
        header.addEventListener("click", () => {
          const isExpanded = content.style.display !== "none";
          content.style.display = isExpanded ? "none" : "block";
          arrow.textContent = isExpanded ? "\u25B6" : "\u25BC";
        });
        sectionContainer.appendChild(header);
        sectionContainer.appendChild(content);
        const originalContent = this.contentEl;
        this.contentEl = content;
        contentCallback();
        this.contentEl = originalContent;
        return sectionContainer;
      }
      onOpen() {
        this.titleEl.setText("AI Chat Help");
        this.contentEl.empty();
        this.contentEl.appendChild(this.createCollapsibleSection("Slash Commands", () => {
          this.contentEl.innerHTML = `
                <code>/clear</code> \u2013 Clear the chat<br>
                <code>/copy</code> \u2013 Copy all chat<br>
                <code>/save</code> \u2013 Save chat as note<br>
                <code>/settings</code> \u2013 Open settings<br>
                <code>/help</code> \u2013 Show this help<br>
                <br>
            `;
        }));
        this.contentEl.appendChild(this.createCollapsibleSection("Keyboard Shortcuts (when input is focused)", () => {
          this.contentEl.innerHTML = `
                <code>Ctrl+Shift+C</code> \u2013 Clear chat<br>
                <code>Ctrl+Shift+Y</code> \u2013 Copy all chat<br>
                <code>Ctrl+Shift+S</code> \u2013 Save as note<br>
                <code>Ctrl+Shift+O</code> \u2013 Open settings<br>
                <code>Ctrl+Shift+H</code> \u2013 Show this help<br>
                <br>
            `;
        }));
        this.contentEl.appendChild(this.createCollapsibleSection("Other", () => {
          this.contentEl.innerHTML = `
                <code>Enter</code> \u2013 Send message<br>
                <code>Shift+Enter</code> \u2013 Newline<br>
                <br>
                You can also use the buttons at the top of the chat window.
            `;
        }));
        this.contentEl.appendChild(this.createCollapsibleSection("Reference Current Note", () => {
          this.contentEl.innerHTML = `
                <strong>What is it?</strong><br>
                When enabled, the AI can see the content of your currently active note during chat. This helps the AI give more relevant, context-aware responses.<br><br>

                <strong>How to use:</strong><br>
                <ul style="margin-top:0;margin-bottom:0.5em;">
                  <li>Click the <code>\u{1F4DD}</code> button at the top of the chat window to toggle referencing the current note.</li>
                  <li>Or use the slash command <code>/ref</code> or keyboard shortcut <code>Ctrl+Shift+R</code>.</li>
                  <li>The name of the referenced note will appear in faded small text below the buttons when enabled.</li>
                </ul>

                <strong>Notes:</strong><br>
                - When referencing is enabled, the AI receives:<br>
                <ul style="margin-top:0;margin-bottom:0.5em;">
                  <li>The system prompt (always)</li>
                  <li>Context notes (if enabled in settings)</li>
                  <li>The content of the currently active note</li>
                  <li>The chat history (all previous user/assistant messages)</li>
                </ul>
                - Only the currently active note is shared in addition to the above context.<br>
                - You can turn this on or off at any time.<br>
                - No other notes or personal data are accessed.<br>
                - The <code>\u{1F4DD}</code> button will show "On" or "Off" to indicate the current state.
            `;
        }));
      }
    };
  }
});

// src/components/chat/SettingsModal.ts
var SettingsModal_exports = {};
__export(SettingsModal_exports, {
  SettingsModal: () => SettingsModal
});
var import_obsidian9, SettingsModal;
var init_SettingsModal = __esm({
  "src/components/chat/SettingsModal.ts"() {
    import_obsidian9 = require("obsidian");
    init_SettingsSections();
    SettingsModal = class extends import_obsidian9.Modal {
      constructor(app, plugin) {
        super(app);
        __publicField(this, "plugin");
        __publicField(this, "settingsSections");
        __publicField(this, "_onSettingsChange", () => {
          this.onOpen();
        });
        this.plugin = plugin;
        this.settingsSections = new SettingsSections(plugin);
        this.titleEl.setText("AI Model Settings");
        this.plugin.onSettingsChange(this._onSettingsChange);
      }
      async onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass("ai-settings-modal");
        await this.settingsSections.renderAllSettings(contentEl, { onRefresh: () => this.onOpen() });
      }
      onClose() {
        this.plugin.offSettingsChange(this._onSettingsChange);
        this.contentEl.empty();
      }
    };
  }
});

// src/components/chat/eventHandlers.ts
function handleCopyAll(messagesContainer, plugin) {
  return async () => {
    const messages = messagesContainer.querySelectorAll(".ai-chat-message");
    let chatContent = "";
    messages.forEach((el, index) => {
      var _a2;
      const content = ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
      chatContent += content;
      if (index < messages.length - 1) {
        chatContent += "\n\n" + plugin.settings.chatSeparator + "\n\n";
      }
    });
    await copyToClipboard(chatContent);
  };
}
function handleSaveNote(messagesContainer, plugin, app) {
  return async () => {
    await saveChatAsNote({
      app,
      messages: messagesContainer.querySelectorAll(".ai-chat-message"),
      settings: plugin.settings,
      chatSeparator: plugin.settings.chatSeparator,
      chatNoteFolder: plugin.settings.chatNoteFolder
    });
  };
}
function handleClearChat(messagesContainer, chatHistoryManager) {
  return async () => {
    messagesContainer.empty();
    try {
      await chatHistoryManager.clearHistory();
    } catch (e) {
      new import_obsidian10.Notice("Failed to clear chat history.");
    }
  };
}
function handleSettings(app, plugin) {
  return () => {
    const { SettingsModal: SettingsModal2 } = (init_SettingsModal(), __toCommonJS(SettingsModal_exports));
    const settingsModal = new SettingsModal2(app, plugin);
    settingsModal.open();
  };
}
function handleHelp(app) {
  return () => {
    new ChatHelpModal(app).open();
  };
}
var import_obsidian10;
var init_eventHandlers = __esm({
  "src/components/chat/eventHandlers.ts"() {
    init_Buttons();
    init_chatPersistence();
    init_ChatHelpModal();
    import_obsidian10 = require("obsidian");
  }
});

// src/components/chat/inputHandler.ts
var inputHandler_exports = {};
__export(inputHandler_exports, {
  setupInputHandler: () => setupInputHandler
});
function setupInputHandler(textarea, sendMessage, handleSlashCommand, app, plugin, sendButton, stopButton) {
  textarea.addEventListener("keydown", async (e) => {
    if (e.ctrlKey && e.shiftKey) {
      if (e.key.toLowerCase() === "c") {
        e.preventDefault();
        await handleSlashCommand("/clear");
        return;
      }
      if (e.key.toLowerCase() === "y") {
        e.preventDefault();
        await handleSlashCommand("/copy");
        return;
      }
      if (e.key.toLowerCase() === "s") {
        e.preventDefault();
        await handleSlashCommand("/save");
        return;
      }
      if (e.key.toLowerCase() === "o") {
        e.preventDefault();
        await handleSlashCommand("/settings");
        return;
      }
      if (e.key.toLowerCase() === "h") {
        e.preventDefault();
        handleHelp(app)();
        return;
      }
      if (e.key.toLowerCase() === "r") {
        e.preventDefault();
        await handleSlashCommand("/ref");
        return;
      }
    }
    if (e.key === "Enter" && !e.shiftKey) {
      const val = textarea.value.trim();
      if (val === "/clear" || val === "/copy" || val === "/save" || val === "/settings" || val === "/help" || val === "/ref") {
        e.preventDefault();
        await handleSlashCommand(val);
        textarea.value = "";
        return;
      }
      await sendMessage();
      e.preventDefault();
    }
  });
}
var init_inputHandler = __esm({
  "src/components/chat/inputHandler.ts"() {
    init_eventHandlers();
  }
});

// src/filechanger.ts
var filechanger_exports = {};
__export(filechanger_exports, {
  generateNoteTitle: () => generateNoteTitle,
  generateYamlAttribute: () => generateYamlAttribute,
  upsertYamlField: () => upsertYamlField
});
function generateTableOfContents(noteContent) {
  const headerLines = noteContent.split("\n").filter((line) => /^#{1,6}\s+.+/.test(line));
  if (headerLines.length === 0) return "";
  return headerLines.map((line) => {
    const match = line.match(/^(#{1,6})\s+(.+)/);
    if (!match) return "";
    const level = match[1].length;
    const title = match[2].trim();
    return `${"  ".repeat(level - 1)}- ${title}`;
  }).join("\n");
}
function debug2(...args) {
  if (DEBUG) {
    console.log("[DEBUG]", ...args);
  }
}
async function generateNoteTitle(app, settings, processMessages2) {
  var _a2, _b;
  debug2("Starting generateNoteTitle");
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian20.Notice("No active note found.");
    return;
  }
  let noteContent = await app.vault.cachedRead(activeFile);
  noteContent = noteContent.slice(0, 15e3);
  const toc = generateTableOfContents(noteContent);
  const prompt = DEFAULT_TITLE_PROMPT;
  const userContent = (toc && toc.trim().length > 0 ? "Table of Contents:\n" + toc + "\n\n" : "") + noteContent;
  try {
    debug2("Provider:", settings.provider);
    const provider = settings.selectedModel ? createProviderFromUnifiedModel(settings, settings.selectedModel) : createProvider(settings);
    const messages = [
      { role: "system", content: prompt },
      { role: "user", content: userContent }
    ];
    debug2("Original messages:", JSON.stringify(messages));
    const originalEnableContextNotes = settings.enableContextNotes;
    debug2("Original enableContextNotes:", originalEnableContextNotes);
    settings.enableContextNotes = false;
    try {
      const processedMessages = await processMessages2(messages);
      debug2("Processed messages:", JSON.stringify(processedMessages));
      settings.enableContextNotes = originalEnableContextNotes;
      if (!processedMessages || processedMessages.length === 0) {
        debug2("No processed messages!");
        new import_obsidian20.Notice("No valid messages to send to the model. Please check your note content.");
        return;
      }
      debug2("Calling provider.getCompletion");
      let resultBuffer = "";
      await provider.getCompletion(processedMessages, {
        temperature: 0,
        streamCallback: (chunk) => {
          resultBuffer += chunk;
        }
      });
      debug2("Result from provider (buffered):", resultBuffer);
      let title = resultBuffer.trim();
      debug2("Extracted title before sanitization:", title);
      title = title.replace(/[\\/:]/g, "").trim();
      debug2("Sanitized title:", title);
      if (title && typeof title === "string" && title.length > 0) {
        const outputMode = (_a2 = settings.titleOutputMode) != null ? _a2 : "clipboard";
        debug2("Output mode:", outputMode);
        if (outputMode === "replace-filename") {
          const file = app.workspace.getActiveFile();
          if (file) {
            const ext = file.extension ? "." + file.extension : "";
            const sanitized = title;
            const parentPath = file.parent ? file.parent.path : "";
            const newPath = parentPath ? parentPath + "/" + sanitized + ext : sanitized + ext;
            if (file.path !== newPath) {
              await app.fileManager.renameFile(file, newPath);
              new import_obsidian20.Notice(`Note renamed to: ${sanitized}${ext}`);
            } else {
              new import_obsidian20.Notice(`Note title is already: ${sanitized}${ext}`);
            }
          }
        } else if (outputMode === "metadata") {
          const file = app.workspace.getActiveFile();
          if (file) {
            await upsertYamlField(app, file, "title", title);
            new import_obsidian20.Notice(`Inserted title into metadata: ${title}`);
          }
        } else {
          try {
            await navigator.clipboard.writeText(title);
            new import_obsidian20.Notice(`Generated title (copied): ${title}`);
          } catch (e) {
            new import_obsidian20.Notice(`Generated title: ${title}`);
          }
        }
      } else {
        debug2("No title generated after sanitization.");
        new import_obsidian20.Notice("No title generated.");
      }
    } catch (processError) {
      debug2("Error in processMessages or provider.getCompletion:", processError);
      settings.enableContextNotes = originalEnableContextNotes;
      throw processError;
    }
  } catch (err) {
    new import_obsidian20.Notice("Error generating title: " + ((_b = err == null ? void 0 : err.message) != null ? _b : err));
  }
}
async function generateYamlAttribute(app, settings, processMessages2, attributeName, prompt, outputMode = "metadata") {
  debug2(`Starting generateYamlAttribute for ${attributeName}`);
  const activeFile = app.workspace.getActiveFile();
  if (!activeFile) {
    new import_obsidian20.Notice("No active note found.");
    return;
  }
  let noteContent = await app.vault.cachedRead(activeFile);
  noteContent = noteContent.slice(0, 15e3);
  const messages = [
    { role: "system", content: DEFAULT_YAML_SYSTEM_MESSAGE },
    { role: "user", content: prompt + "\n\n" + noteContent }
  ];
  debug2("Original messages:", JSON.stringify(messages));
  const originalEnableContextNotes = settings.enableContextNotes;
  debug2("Original enableContextNotes:", originalEnableContextNotes);
  settings.enableContextNotes = false;
  try {
    const processedMessages = await processMessages2(messages);
    debug2("Processed messages:", JSON.stringify(processedMessages));
    settings.enableContextNotes = originalEnableContextNotes;
    if (!processedMessages || processedMessages.length === 0) {
      debug2("No processed messages!");
      new import_obsidian20.Notice("No valid messages to send to the model. Please check your note content.");
      return;
    }
    debug2("Calling provider.getCompletion");
    const provider = settings.selectedModel ? createProviderFromUnifiedModel(settings, settings.selectedModel) : createProvider(settings);
    let resultBuffer = "";
    await provider.getCompletion(processedMessages, {
      temperature: 0,
      streamCallback: (chunk) => {
        resultBuffer += chunk;
      }
    });
    debug2("Result from provider (buffered):", resultBuffer);
    let value = resultBuffer.trim();
    debug2("Extracted value before sanitization:", value);
    value = value.replace(/[\\/]/g, "").trim();
    debug2("Sanitized value:", value);
    if (value && typeof value === "string" && value.length > 0) {
      debug2("Output mode:", outputMode);
      if (outputMode === "metadata") {
        await upsertYamlField(app, activeFile, attributeName, value);
        new import_obsidian20.Notice(`Inserted ${attributeName} into metadata: ${value}`);
      } else {
        try {
          await navigator.clipboard.writeText(value);
          new import_obsidian20.Notice(`Generated ${attributeName} (copied): ${value}`);
        } catch (e) {
          new import_obsidian20.Notice(`Generated ${attributeName}: ${value}`);
        }
      }
    } else {
      debug2(`No value generated for ${attributeName} after sanitization.`);
      new import_obsidian20.Notice(`No value generated for ${attributeName}.`);
    }
  } catch (processError) {
    debug2("Error in processMessages or provider.getCompletion:", processError);
    settings.enableContextNotes = originalEnableContextNotes;
    throw processError;
  }
}
async function upsertYamlField(app, file, field, value) {
  let content = await app.vault.read(file);
  let newContent = content;
  const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
  const match = content.match(frontmatterRegex);
  if (match) {
    let yamlObj = {};
    try {
      yamlObj = load(match[1]) || {};
    } catch (e) {
      yamlObj = {};
    }
    yamlObj[field] = value;
    const newYaml = dump(yamlObj, { lineWidth: -1 }).trim();
    newContent = content.replace(frontmatterRegex, `---
${newYaml}
---`);
  } else {
    const newYaml = dump({ [field]: value }, { lineWidth: -1 }).trim();
    newContent = `---
${newYaml}
---
` + content;
  }
  await app.vault.modify(file, newContent);
}
var import_obsidian20, DEBUG;
var init_filechanger = __esm({
  "src/filechanger.ts"() {
    import_obsidian20 = require("obsidian");
    init_providers();
    init_promptConstants();
    init_js_yaml();
    DEBUG = true;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  VIEW_TYPE_MODEL_SETTINGS: () => VIEW_TYPE_MODEL_SETTINGS,
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian21 = require("obsidian");
init_types();
init_providers();

// src/settings.ts
var import_obsidian2 = require("obsidian");
init_SettingsSections();

// src/components/chat/CollapsibleSection.ts
var CollapsibleSectionRenderer = class {
  /**
   * Creates a collapsible section with a header that can be toggled
   */
  static createCollapsibleSection(containerEl, title, contentCallback, plugin, settingsType) {
    var _a2;
    plugin.settings[settingsType] = plugin.settings[settingsType] || {};
    let isExpanded = (_a2 = plugin.settings[settingsType][title]) != null ? _a2 : false;
    const collapsibleContainer = containerEl.createEl("div");
    collapsibleContainer.addClass("ai-collapsible-section");
    const headerEl = collapsibleContainer.createEl("div");
    headerEl.addClass("ai-collapsible-header");
    const arrow = headerEl.createEl("span");
    arrow.addClass("ai-collapsible-arrow");
    arrow.textContent = isExpanded ? "\u25BC" : "\u25B6";
    const titleSpan = headerEl.createEl("span");
    titleSpan.textContent = title;
    const contentEl = collapsibleContainer.createEl("div");
    contentEl.addClass("ai-collapsible-content");
    contentEl.style.display = isExpanded ? "block" : "none";
    headerEl.addEventListener("click", async () => {
      isExpanded = !isExpanded;
      contentEl.style.display = isExpanded ? "block" : "none";
      arrow.textContent = isExpanded ? "\u25BC" : "\u25B6";
      plugin.settings[settingsType][title] = isExpanded;
      await plugin.saveSettings();
    });
    const result = contentCallback(contentEl);
    if (result instanceof Promise) {
      result.catch((error) => console.error("Error in collapsible section:", error));
    }
  }
};

// src/settings.ts
var MyPluginSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    __publicField(this, "settingsSections");
    this.plugin = plugin;
    this.settingsSections = new SettingsSections(this.plugin);
  }
  /**
   * Creates a text input setting.
   * @param containerEl The HTML element to append the setting to.
   * @param name The name of the setting.
   * @param desc The description of the setting.
   * @param placeholder The placeholder text for the input.
   * @param getValue A function to get the current value of the setting.
   * @param setValue A function to set the new value of the setting.
   * @param options Additional options for the text input (e.g., trim, undefinedIfEmpty, isTextArea).
   */
  createTextSetting(containerEl, name, desc, placeholder, getValue, setValue, options) {
    new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).then((setting) => {
      const textInputOptions = {
        trim: options == null ? void 0 : options.trim,
        undefinedIfEmpty: options == null ? void 0 : options.undefinedIfEmpty
      };
      if (options == null ? void 0 : options.isTextArea) {
        setting.addTextArea((text) => this.configureTextInput(text, placeholder, getValue, setValue, textInputOptions));
      } else {
        setting.addText((text) => this.configureTextInput(text, placeholder, getValue, setValue, textInputOptions));
      }
    });
  }
  /**
   * Configures a text input (either single-line or multi-line).
   * @param textComponent The TextComponent or TextAreaComponent to configure.
   * @param placeholder The placeholder text.
   * @param getValue A function to get the current value.
   * @param setValue A function to set the new value.
   * @param options Additional options for processing the input value (e.g., trim, undefinedIfEmpty).
   */
  configureTextInput(textComponent, placeholder, getValue, setValue, options) {
    var _a2;
    textComponent.setPlaceholder(placeholder).setValue((_a2 = getValue()) != null ? _a2 : "").onChange(async (value) => {
      let processedValue = value;
      if (options == null ? void 0 : options.trim) {
        processedValue = processedValue.trim();
      }
      if ((options == null ? void 0 : options.undefinedIfEmpty) && processedValue === "") {
        processedValue = void 0;
      }
      await setValue(processedValue);
    });
  }
  /**
   * Creates a dropdown setting.
   * @param containerEl The HTML element to append the setting to.
   * @param name The name of the setting.
   * @param desc The description of the setting.
   * @param options A record of option values to display names.
   * @param getValue A function to get the current value of the setting.
   * @param setValue A function to set the new value of the setting.
   */
  createDropdownSetting(containerEl, name, desc, options, getValue, setValue) {
    new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addDropdown((drop) => {
      Object.entries(options).forEach(([key, display]) => drop.addOption(key, display));
      drop.setValue(getValue());
      drop.onChange(async (value) => {
        await setValue(value);
      });
    });
  }
  /**
   * Creates a toggle (checkbox) setting.
   * @param containerEl The HTML element to append the setting to.
   * @param name The name of the setting.
   * @param desc The description of the setting.
   * @param getValue A function to get the current boolean value.
   * @param setValue A function to set the new boolean value.
   * @param onChangeCallback An optional callback to run after the value changes and settings are saved.
   */
  createToggleSetting(containerEl, name, desc, getValue, setValue, onChangeCallback) {
    new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addToggle((toggle) => toggle.setValue(getValue()).onChange(async (value) => {
      await setValue(value);
      if (onChangeCallback) {
        onChangeCallback();
      }
    }));
  }
  /**
   * Creates a slider setting.
   * @param containerEl The HTML element to append the setting to.
   * @param name The name of the setting.
   * @param desc The description of the setting.
   * @param limits An object defining min, max, and step for the slider.
   * @param getValue A function to get the current numeric value.
   * @param setValue A function to set the new numeric value.
   */
  createSliderSetting(containerEl, name, desc, limits, getValue, setValue) {
    new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addSlider((slider) => {
      slider.setLimits(limits.min, limits.max, limits.step).setValue(getValue()).setDynamicTooltip().onChange(async (value) => {
        await setValue(value);
      });
    });
  }
  /**
   * Renders the YAML Attribute Generators section.
   * @param containerEl The HTML element to append the section to.
   */
  renderYamlAttributeGenerators(containerEl) {
    var _a2;
    containerEl.createEl("h3", { text: "YAML Attribute Generators" });
    containerEl.createEl("div", { text: "Configure custom YAML attribute generators. Each entry will create a command to generate and insert/update a YAML field in your notes." }).style.marginBottom = "1em";
    const yamlGens = (_a2 = this.plugin.settings.yamlAttributeGenerators) != null ? _a2 : [];
    yamlGens.forEach((gen, idx) => {
      const autoCommandName = gen.attributeName ? `Generate YAML: ${gen.attributeName}` : `YAML Generator #${idx + 1}`;
      new import_obsidian2.Setting(containerEl).setName(autoCommandName).setDesc(`YAML field: ${gen.attributeName}`).addText((text) => this.configureTextInput(text, "YAML Attribute Name", () => gen.attributeName, async (value) => {
        if (this.plugin.settings.yamlAttributeGenerators) {
          this.plugin.settings.yamlAttributeGenerators[idx].attributeName = value != null ? value : "";
          this.plugin.settings.yamlAttributeGenerators[idx].commandName = value ? `Generate YAML: ${value}` : "";
          await this.plugin.saveSettings();
          this.display();
        }
      })).addTextArea((text) => this.configureTextInput(text, "Prompt for LLM", () => gen.prompt, async (value) => {
        if (this.plugin.settings.yamlAttributeGenerators) {
          this.plugin.settings.yamlAttributeGenerators[idx].prompt = value != null ? value : "";
          await this.plugin.saveSettings();
        }
      })).addDropdown((drop) => {
        drop.addOption("clipboard", "Copy to clipboard");
        drop.addOption("metadata", "Insert into metadata");
        drop.setValue(gen.outputMode);
        drop.onChange(async (value) => {
          if (this.plugin.settings.yamlAttributeGenerators) {
            this.plugin.settings.yamlAttributeGenerators[idx].outputMode = value;
            await this.plugin.saveSettings();
          }
        });
      }).addExtraButton((btn) => {
        btn.setIcon("cross").setTooltip("Delete").onClick(async () => {
          if (this.plugin.settings.yamlAttributeGenerators) {
            this.plugin.settings.yamlAttributeGenerators.splice(idx, 1);
            await this.plugin.saveSettings();
            this.display();
          }
        });
      });
    });
    new import_obsidian2.Setting(containerEl).addButton((btn) => {
      btn.setButtonText("Add YAML Attribute Generator").setCta().onClick(async () => {
        if (!this.plugin.settings.yamlAttributeGenerators) this.plugin.settings.yamlAttributeGenerators = [];
        this.plugin.settings.yamlAttributeGenerators.push({
          attributeName: "",
          prompt: "",
          outputMode: "metadata",
          commandName: "New YAML Generator"
        });
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  /**
   * Renders the Model Setting Presets section.
   * @param containerEl The HTML element to append the section to.
   */
  renderModelSettingPresets(containerEl) {
    containerEl.createEl("h3", { text: "Model Setting Presets" });
    containerEl.createEl("div", {
      text: "Presets let you save and quickly apply common model settings (model, temperature, system message, etc). You can add, edit, or remove presets here. In the AI Model Settings panel, you will see buttons for each preset above the model selection. Clicking a preset button will instantly apply those settings. This is useful for switching between different model configurations with one click.",
      cls: "setting-item-description",
      attr: { style: "margin-bottom: 0.5em;" }
    });
    const presetList = this.plugin.settings.modelSettingPresets || [];
    presetList.forEach((preset, idx) => {
      const setting = new import_obsidian2.Setting(containerEl).setName(preset.name).setDesc("Edit or remove this preset");
      this.configureTextInput(setting.addText((text) => text), "Preset Name", () => preset.name, async (value) => {
        preset.name = value != null ? value : "";
        await this.plugin.saveSettings();
        this.display();
      });
      this.configureTextInput(setting.addText((text) => text), "Model ID (provider:model)", () => preset.selectedModel || "", async (value) => {
        preset.selectedModel = value != null ? value : "";
        await this.plugin.saveSettings();
      });
      this.configureTextInput(setting.addTextArea((text) => text), "System message", () => preset.systemMessage || "", async (value) => {
        preset.systemMessage = value != null ? value : "";
        await this.plugin.saveSettings();
      });
      this.createSliderSetting(setting.controlEl, "Temperature", "", { min: 0, max: 1, step: 0.1 }, () => {
        var _a2;
        return (_a2 = preset.temperature) != null ? _a2 : 0.7;
      }, async (value) => {
        preset.temperature = value;
        await this.plugin.saveSettings();
      });
      this.configureTextInput(setting.addText((text) => text), "Max tokens", () => {
        var _a2;
        return ((_a2 = preset.maxTokens) == null ? void 0 : _a2.toString()) || "";
      }, async (value) => {
        const num = parseInt(value != null ? value : "", 10);
        preset.maxTokens = isNaN(num) ? void 0 : num;
        await this.plugin.saveSettings();
      });
      this.createToggleSetting(setting.controlEl, "Enable Streaming", "", () => {
        var _a2;
        return (_a2 = preset.enableStreaming) != null ? _a2 : true;
      }, async (value) => {
        preset.enableStreaming = value;
        await this.plugin.saveSettings();
      });
      setting.addExtraButton(
        (btn) => btn.setIcon("cross").setTooltip("Delete").onClick(async () => {
          var _a2;
          (_a2 = this.plugin.settings.modelSettingPresets) == null ? void 0 : _a2.splice(idx, 1);
          await this.plugin.saveSettings();
          this.display();
        })
      );
    });
    new import_obsidian2.Setting(containerEl).addButton(
      (btn) => btn.setButtonText("Add Preset").setCta().onClick(async () => {
        if (!this.plugin.settings.modelSettingPresets) this.plugin.settings.modelSettingPresets = [];
        this.plugin.settings.modelSettingPresets.push(JSON.parse(JSON.stringify({
          name: `Preset ${this.plugin.settings.modelSettingPresets.length + 1}`,
          selectedModel: this.plugin.settings.selectedModel,
          systemMessage: this.plugin.settings.systemMessage,
          temperature: this.plugin.settings.temperature,
          maxTokens: this.plugin.settings.maxTokens,
          enableStreaming: this.plugin.settings.enableStreaming
        })));
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
  /**
   * Display the settings tab.
   * This method orchestrates the rendering of all setting sections.
   */
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "AI Assistant Settings" });
    containerEl.createEl("h3", { text: "API Keys" });
    this.createTextSetting(
      containerEl,
      "OpenAI API Key",
      "Enter your OpenAI API key",
      "Enter your API key",
      () => this.plugin.settings.openaiSettings.apiKey,
      async (value) => {
        this.plugin.settings.openaiSettings.apiKey = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "OpenAI Base URL",
      "Custom base URL for OpenAI API (optional, leave empty for default)",
      "https://api.openai.com/v1",
      () => this.plugin.settings.openaiSettings.baseUrl || "",
      async (value) => {
        this.plugin.settings.openaiSettings.baseUrl = value;
        await this.plugin.saveSettings();
      },
      { trim: true, undefinedIfEmpty: true }
    );
    this.createTextSetting(
      containerEl,
      "Anthropic API Key",
      "Enter your Anthropic API key",
      "Enter your API key",
      () => this.plugin.settings.anthropicSettings.apiKey,
      async (value) => {
        this.plugin.settings.anthropicSettings.apiKey = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "Google API Key",
      "Enter your Google API key",
      "Enter your API key",
      () => this.plugin.settings.geminiSettings.apiKey,
      async (value) => {
        this.plugin.settings.geminiSettings.apiKey = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "Ollama Server URL",
      "Enter your Ollama server URL (default: http://localhost:11434)",
      "http://localhost:11434",
      () => this.plugin.settings.ollamaSettings.serverUrl,
      async (value) => {
        this.plugin.settings.ollamaSettings.serverUrl = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    CollapsibleSectionRenderer.createCollapsibleSection(
      containerEl,
      "AI Model Settings",
      async (sectionEl) => {
        await this.settingsSections.renderAIModelSettings(sectionEl, () => this.display());
      },
      this.plugin,
      "generalSectionsExpanded"
    );
    this.createTextSetting(
      containerEl,
      "Chat Separator",
      "The string used to separate chat messages.",
      "----",
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.chatSeparator) != null ? _a2 : "";
      },
      async (value) => {
        this.plugin.settings.chatSeparator = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "Chat Start String",
      "The string that indicates where to start taking the note for context.",
      "===START===",
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.chatStartString) != null ? _a2 : "";
      },
      async (value) => {
        this.plugin.settings.chatStartString = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "Chat End String",
      "The string that indicates where to end taking the note for context.",
      "===END===",
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.chatEndString) != null ? _a2 : "";
      },
      async (value) => {
        this.plugin.settings.chatEndString = value != null ? value : "";
        await this.plugin.saveSettings();
      }
    );
    this.createTextSetting(
      containerEl,
      "Title Prompt",
      "The prompt used for generating note titles.",
      "You are a title generator...",
      () => this.plugin.settings.titlePrompt,
      async (value) => {
        this.plugin.settings.titlePrompt = value != null ? value : "";
        await this.plugin.saveSettings();
      },
      { isTextArea: true }
    );
    new import_obsidian2.Setting(containerEl).setName("Reset All Settings to Default").setDesc("Reset all plugin settings (except API keys) to their original default values.").addButton((button) => button.setButtonText("Reset").onClick(async () => {
      const { DEFAULT_SETTINGS: DEFAULT_SETTINGS2 } = await Promise.resolve().then(() => (init_types(), types_exports));
      const { DEFAULT_TITLE_PROMPT: DEFAULT_TITLE_PROMPT2 } = await Promise.resolve().then(() => (init_promptConstants(), promptConstants_exports));
      const preservedApiKeys = {
        openai: this.plugin.settings.openaiSettings.apiKey,
        anthropic: this.plugin.settings.anthropicSettings.apiKey,
        gemini: this.plugin.settings.geminiSettings.apiKey
      };
      this.plugin.settings = JSON.parse(JSON.stringify(DEFAULT_SETTINGS2));
      this.plugin.settings.openaiSettings.apiKey = preservedApiKeys.openai;
      this.plugin.settings.anthropicSettings.apiKey = preservedApiKeys.anthropic;
      this.plugin.settings.geminiSettings.apiKey = preservedApiKeys.gemini;
      this.plugin.settings.titlePrompt = DEFAULT_TITLE_PROMPT2;
      await this.plugin.saveSettings();
      this.display();
      if (typeof this.plugin.activateView === "function") {
        setTimeout(() => {
          this.plugin.activateView(VIEW_TYPE_MODEL_SETTINGS);
        }, 100);
      }
      new import_obsidian2.Notice("All settings (except API keys) reset to default.");
    }));
    this.createDropdownSetting(
      containerEl,
      "Title Output Mode",
      "Choose what to do with the generated note title.",
      { "clipboard": "Copy to clipboard", "replace-filename": "Replace note filename", "metadata": "Insert into metadata" },
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.titleOutputMode) != null ? _a2 : "clipboard";
      },
      async (value) => {
        this.plugin.settings.titleOutputMode = value;
        await this.plugin.saveSettings();
      }
    );
    this.createDropdownSetting(
      containerEl,
      "Summary Output Mode",
      "Choose what to do with the generated note summary.",
      { "clipboard": "Copy to clipboard", "metadata": "Insert into metadata" },
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.summaryOutputMode) != null ? _a2 : "clipboard";
      },
      async (value) => {
        this.plugin.settings.summaryOutputMode = value;
        await this.plugin.saveSettings();
      }
    );
    this.createToggleSetting(
      containerEl,
      "Expand Linked Notes Recursively",
      "If enabled, when fetching a note, also fetch and expand links within that note recursively (prevents infinite loops).",
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.expandLinkedNotesRecursively) != null ? _a2 : false;
      },
      async (value) => {
        this.plugin.settings.expandLinkedNotesRecursively = value;
        await this.plugin.saveSettings();
      },
      () => this.display()
    );
    if (this.plugin.settings.expandLinkedNotesRecursively) {
      this.createSliderSetting(
        containerEl,
        "Max Link Expansion Depth",
        "Maximum depth for recursively expanding linked notes (1-3).",
        { min: 1, max: 3, step: 1 },
        () => {
          var _a2;
          return (_a2 = this.plugin.settings.maxLinkExpansionDepth) != null ? _a2 : 2;
        },
        async (value) => {
          this.plugin.settings.maxLinkExpansionDepth = value;
          await this.plugin.saveSettings();
        }
      );
    }
    this.createTextSetting(
      containerEl,
      "Chat Note Folder",
      "Folder to save exported chat notes (relative to vault root, leave blank for root)",
      "e.g. AI Chats",
      () => {
        var _a2;
        return (_a2 = this.plugin.settings.chatNoteFolder) != null ? _a2 : "";
      },
      async (value) => {
        this.plugin.settings.chatNoteFolder = value != null ? value : "";
        await this.plugin.saveSettings();
      },
      { trim: true }
    );
    this.renderYamlAttributeGenerators(containerEl);
    this.renderModelSettingPresets(containerEl);
  }
};

// src/components/chat.ts
var import_obsidian17 = require("obsidian");
init_providers();

// src/components/chat/ChatHistoryManager.ts
var import_obsidian3 = require("obsidian");
var ChatHistoryManager = class {
  constructor(vault, pluginId, historyFilePath) {
    __publicField(this, "vault");
    __publicField(this, "historyFilePath");
    __publicField(this, "history", []);
    __publicField(this, "isLoaded", false);
    this.vault = vault;
    let effectivePluginId = pluginId;
    if (!pluginId) {
      console.error("CRITICAL: ChatHistoryManager instantiated without pluginId! Using placeholder. This will likely lead to incorrect file paths.");
      effectivePluginId = "unknown-plugin-id-error";
    }
    const fPath = historyFilePath || "chat-history.json";
    this.historyFilePath = (0, import_obsidian3.normalizePath)(`.obsidian/plugins/${effectivePluginId}/${fPath}`);
    console.log("[ChatHistoryManager] Using history file path:", this.historyFilePath);
    if (typeof window !== "undefined" && window.Notice) {
    }
  }
  async ensureDirectoryExists() {
    const dirPath = this.historyFilePath.substring(0, this.historyFilePath.lastIndexOf("/"));
    if (!dirPath) return;
    try {
      const abstractFile = this.vault.getAbstractFileByPath(dirPath);
      if (abstractFile === null) {
        await this.vault.createFolder(dirPath);
      } else if (!(abstractFile instanceof import_obsidian3.TFolder)) {
        console.error(`Path ${dirPath} exists but is not a folder.`);
        throw new Error(`Path ${dirPath} exists but is not a folder.`);
      }
    } catch (e) {
      if (e.message && e.message.toLowerCase().includes("folder already exists")) {
        return;
      }
      console.error(`Failed to ensure directory ${dirPath} exists:`, e);
      throw e;
    }
  }
  async loadHistory() {
    try {
      const exists = await this.vault.adapter.exists(this.historyFilePath);
      if (exists) {
        const data = await this.vault.adapter.read(this.historyFilePath);
        try {
          this.history = JSON.parse(data);
        } catch (parseError) {
          console.error("Failed to parse chat history:", parseError);
          this.history = [];
        }
      } else {
        this.history = [];
      }
    } catch (e) {
      console.error("Failed to load chat history:", e);
      this.history = [];
    }
    return this.history;
  }
  async addMessage(message) {
    const currentHistory = await this.loadHistory();
    currentHistory.push(message);
    this.history = currentHistory;
    await this.saveHistory();
  }
  async getHistory() {
    return await this.loadHistory();
  }
  async clearHistory() {
    this.history = [];
    await this.saveHistory();
  }
  async deleteMessage(timestamp2, sender, content) {
    await this.loadHistory();
    const index = this.history.findIndex(
      (msg) => msg.timestamp === timestamp2 && msg.sender === sender && msg.content === content
    );
    if (index !== -1) {
      this.history.splice(index, 1);
      await this.saveHistory();
    }
  }
  async updateMessage(timestamp2, sender, oldContent, newContent) {
    await this.loadHistory();
    const message = this.history.find(
      (msg) => msg.timestamp === timestamp2 && msg.sender === sender && msg.content === oldContent
    );
    if (message) {
      message.content = newContent;
      await this.saveHistory();
    } else {
      console.warn("ChatHistoryManager: updateMessage did not find a matching message to update.", { timestamp: timestamp2, sender, oldContent });
    }
  }
  async saveHistory() {
    try {
      await this.ensureDirectoryExists();
      const data = JSON.stringify(this.history, null, 2);
      const abstractTarget = this.vault.getAbstractFileByPath(this.historyFilePath);
      if (abstractTarget instanceof import_obsidian3.TFolder) {
        throw new Error(`Path ${this.historyFilePath} is a directory, not a file.`);
      }
      await this.vault.adapter.write(this.historyFilePath, data);
      if (!abstractTarget || !(abstractTarget instanceof import_obsidian3.TFile)) {
        await this.vault.adapter.exists(this.historyFilePath);
      }
    } catch (e) {
      console.error(`Failed to save history to ${this.historyFilePath}:`, e);
      throw e;
    }
  }
};

// src/components/chat/Message.ts
var import_obsidian6 = require("obsidian");
init_Buttons();

// src/components/chat/ConfirmationModal.ts
var import_obsidian5 = require("obsidian");
var ConfirmationModal = class extends import_obsidian5.Modal {
  constructor(app, title, message, onConfirm) {
    super(app);
    __publicField(this, "onConfirm");
    __publicField(this, "message");
    this.titleEl.setText(title);
    this.message = message;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("modal-button-container");
    buttonContainer.createEl("button", { text: "Cancel" }).addEventListener("click", () => {
      this.onConfirm(false);
      this.close();
    });
    const confirmButton = buttonContainer.createEl("button", {
      text: "Delete",
      cls: "mod-warning"
    });
    confirmButton.addEventListener("click", () => {
      this.onConfirm(true);
      this.close();
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/components/chat/Message.ts
function createMessageElement(app, role, content, chatHistoryManager, plugin, regenerateCallback, parentComponent) {
  const messageEl = document.createElement("div");
  messageEl.addClass("ai-chat-message", role);
  const messageContainer = messageEl.createDiv("message-container");
  const contentEl = messageContainer.createDiv("message-content");
  messageEl.dataset.rawContent = content;
  messageEl.dataset.timestamp = (/* @__PURE__ */ new Date()).toISOString();
  import_obsidian6.MarkdownRenderer.render(app, content, contentEl, "", parentComponent).catch((error) => {
    contentEl.textContent = content;
  });
  const actionsEl = messageContainer.createDiv("message-actions");
  actionsEl.classList.add("hidden");
  messageEl.addEventListener("mouseenter", () => {
    actionsEl.classList.remove("hidden");
    actionsEl.classList.add("visible");
  });
  messageEl.addEventListener("mouseleave", () => {
    actionsEl.classList.remove("visible");
    actionsEl.classList.add("hidden");
  });
  actionsEl.appendChild(createActionButton("Copy", "Copy message", () => {
    const currentContent = messageEl.dataset.rawContent || "";
    if (currentContent.trim() === "") {
      new import_obsidian6.Notice("No content to copy");
      return;
    }
    copyToClipboard(currentContent);
  }));
  actionsEl.appendChild(createActionButton("Edit", "Edit message", async () => {
    if (!contentEl.hasClass("editing")) {
      const textarea = document.createElement("textarea");
      textarea.value = messageEl.dataset.rawContent || "";
      textarea.className = "message-content editing";
      contentEl.empty();
      contentEl.appendChild(textarea);
      textarea.focus();
      contentEl.addClass("editing");
      textarea.addEventListener("keydown", async (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          textarea.blur();
        }
      });
      textarea.addEventListener("blur", async () => {
        const oldContent = messageEl.dataset.rawContent;
        const newContent = textarea.value;
        try {
          await chatHistoryManager.updateMessage(
            messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
            messageEl.classList.contains("user") ? "user" : "assistant",
            oldContent || "",
            newContent
          );
          messageEl.dataset.rawContent = newContent;
          contentEl.empty();
          await import_obsidian6.MarkdownRenderer.render(app, newContent, contentEl, "", parentComponent);
          contentEl.removeClass("editing");
        } catch (e) {
          new import_obsidian6.Notice("Failed to save edited message.");
          messageEl.dataset.rawContent = oldContent || "";
          contentEl.empty();
          await import_obsidian6.MarkdownRenderer.render(app, oldContent || "", contentEl, "", parentComponent);
          contentEl.removeClass("editing");
        }
      });
    }
  }));
  actionsEl.appendChild(createActionButton("Delete", "Delete message", () => {
    const modal = new ConfirmationModal(app, "Delete message", "Are you sure you want to delete this message?", (confirmed) => {
      if (confirmed) {
        chatHistoryManager.deleteMessage(
          messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
          messageEl.classList.contains("user") ? "user" : "assistant",
          messageEl.dataset.rawContent || ""
        ).then(() => {
          messageEl.remove();
        }).catch(() => {
          new import_obsidian6.Notice("Failed to delete message from history.");
        });
      }
    });
    modal.open();
  }));
  actionsEl.appendChild(createActionButton("Regenerate", "Regenerate this response", () => {
    regenerateCallback(messageEl);
  }));
  messageContainer.appendChild(actionsEl);
  return messageEl;
}

// src/components/chat/ui.ts
function createChatUI(app, contentEl) {
  const fadedHelp = contentEl.createDiv();
  fadedHelp.setText("Tip: Type /help or press Ctrl+Shift+H for chat commands and shortcuts.");
  fadedHelp.style.textAlign = "center";
  fadedHelp.style.opacity = "0.6";
  fadedHelp.style.fontSize = "0.95em";
  fadedHelp.style.margin = "0.5em 0 0.2em 0";
  const topButtonContainer = contentEl.createDiv("ai-chat-buttons");
  const settingsButton = document.createElement("button");
  settingsButton.setText("Settings");
  settingsButton.setAttribute("aria-label", "Toggle model settings");
  topButtonContainer.appendChild(settingsButton);
  const copyAllButton = document.createElement("button");
  copyAllButton.textContent = "Copy All";
  topButtonContainer.appendChild(copyAllButton);
  const saveNoteButton = document.createElement("button");
  saveNoteButton.textContent = "Save as Note";
  topButtonContainer.appendChild(saveNoteButton);
  const clearButton = document.createElement("button");
  clearButton.textContent = "Clear Chat";
  topButtonContainer.appendChild(clearButton);
  const referenceNoteButton = document.createElement("button");
  referenceNoteButton.setText("\u{1F4DD}");
  referenceNoteButton.setAttribute("aria-label", "Toggle referencing current note");
  referenceNoteButton.addClass("ai-chat-reference-button");
  referenceNoteButton.style.fontSize = "0.85em";
  referenceNoteButton.style.fontFamily = "inherit";
  referenceNoteButton.style.width = "1.8em";
  referenceNoteButton.style.height = "1.8em";
  referenceNoteButton.style.marginBottom = "0.2em";
  referenceNoteButton.style.opacity = "0.7";
  topButtonContainer.appendChild(referenceNoteButton);
  const referenceNoteIndicator = document.createElement("div");
  referenceNoteIndicator.className = "ai-reference-note-indicator";
  referenceNoteIndicator.style.textAlign = "center";
  referenceNoteIndicator.style.opacity = "0.5";
  referenceNoteIndicator.style.fontSize = "0.85em";
  referenceNoteIndicator.style.margin = "0.1em 0 0.2em 0";
  referenceNoteIndicator.style.display = "none";
  topButtonContainer.appendChild(referenceNoteIndicator);
  const messagesContainer = contentEl.createDiv("ai-chat-messages");
  const inputContainer = contentEl.createDiv("ai-chat-input-container");
  const textarea = inputContainer.createEl("textarea", {
    cls: "ai-chat-input",
    attr: {
      placeholder: "Type your message...",
      rows: "3"
    }
  });
  const sendButton = inputContainer.createEl("button", {
    text: "Send",
    cls: "mod-cta"
  });
  const stopButton = inputContainer.createEl("button", {
    text: "Stop"
  });
  stopButton.classList.add("hidden");
  const helpButton = inputContainer.createEl("button", {
    text: "?"
  });
  helpButton.setAttr("aria-label", "Show chat help");
  helpButton.style.fontSize = "0.9em";
  helpButton.style.width = "1.8em";
  helpButton.style.height = "1.8em";
  helpButton.style.marginBottom = "0.2em";
  helpButton.style.opacity = "0.7";
  helpButton.style.position = "absolute";
  helpButton.style.right = "0.5em";
  helpButton.style.top = "-2.2em";
  helpButton.style.zIndex = "2";
  const agentModeButton = inputContainer.createEl("button", {
    text: "\u{1F916}"
  });
  agentModeButton.setAttr("aria-label", "Toggle Agent Mode");
  agentModeButton.style.fontSize = "0.9em";
  agentModeButton.style.width = "1.8em";
  agentModeButton.style.height = "1.8em";
  agentModeButton.style.marginBottom = "0.2em";
  agentModeButton.style.opacity = "0.7";
  agentModeButton.style.position = "absolute";
  agentModeButton.style.right = "2.8em";
  agentModeButton.style.top = "-2.2em";
  agentModeButton.style.zIndex = "2";
  inputContainer.appendChild(agentModeButton);
  inputContainer.style.position = "relative";
  [topButtonContainer.querySelectorAll("button")].forEach((btns) => {
    btns.forEach((btn) => {
      btn.style.fontSize = "0.85em";
      btn.style.fontFamily = "inherit";
    });
  });
  return {
    contentEl,
    fadedHelp,
    topButtonContainer,
    settingsButton,
    copyAllButton,
    saveNoteButton,
    clearButton,
    messagesContainer,
    inputContainer,
    textarea,
    sendButton,
    stopButton,
    helpButton,
    agentModeButton,
    // <-- add to return object
    referenceNoteButton,
    referenceNoteIndicator
  };
}

// src/components/chat.ts
init_eventHandlers();
init_chatPersistence();

// src/components/chat/chatHistoryUtils.ts
async function renderChatHistory({
  messagesContainer,
  loadedHistory,
  chatHistoryManager,
  plugin,
  regenerateResponse,
  scrollToBottom = true
}) {
  messagesContainer.empty();
  for (const msg of loadedHistory) {
    if (msg.sender === "user" || msg.sender === "assistant") {
      const messageEl = await createMessageElement(
        plugin.app,
        msg.sender,
        msg.content,
        chatHistoryManager,
        plugin,
        regenerateResponse,
        plugin
        // parentComponent
      );
      messageEl.dataset.timestamp = msg.timestamp;
      messagesContainer.appendChild(messageEl);
    }
  }
  if (scrollToBottom) {
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }
}

// src/components/chat/AgentResponseHandler.ts
var import_obsidian16 = require("obsidian");

// src/components/chat/CommandParser.ts
var CommandParser = class {
  /**
   * Parse AI response to extract tool commands and regular text
   * @param response The AI response string
   * @returns Object containing separated text and commands
   */
  parseResponse(response) {
    const commands = [];
    let cleanText = response;
    console.log("CommandParser: Parsing response:", response);
    const extractedCommands = this.extractCommands(response);
    console.log("CommandParser: Extracted commands:", extractedCommands);
    for (const command of extractedCommands) {
      if (this.validateCommand(command.command)) {
        console.log("CommandParser: Valid command found:", command.command);
        commands.push(command.command);
        cleanText = cleanText.replace(command.originalText, "").trim();
      } else {
        console.log("CommandParser: Invalid command:", command.command);
      }
    }
    console.log("CommandParser: Final result - text:", cleanText, "commands:", commands);
    return {
      text: cleanText,
      commands
    };
  }
  /**
   * Validate that a command has the required structure
   * @param command The command to validate
   * @returns True if command is valid
   */
  validateCommand(command) {
    if (!command || typeof command !== "object") {
      return false;
    }
    if (!command.action || typeof command.action !== "string") {
      return false;
    }
    if (!command.parameters || typeof command.parameters !== "object") {
      return false;
    }
    const validActions = ["file_select", "file_diff", "file_read", "file_write", "thought"];
    if (!validActions.includes(command.action)) {
      return false;
    }
    return true;
  }
  /**
   * Extract JSON commands from text
   * @param text The text to extract commands from
   * @returns Array of extracted commands with their original text
   */
  extractCommands(text) {
    const commands = [];
    try {
      const parsed = JSON.parse(text.trim());
      if (parsed.action) {
        let parameters = parsed.parameters;
        if (!parameters) {
          parameters = { ...parsed };
          delete parameters.action;
          delete parameters.requestId;
        }
        commands.push({
          command: {
            action: parsed.action,
            parameters,
            requestId: parsed.requestId || this.generateRequestId()
          },
          originalText: text.trim()
        });
        return commands;
      }
    } catch (error) {
    }
    const patterns = [
      /```json\s*(\{[\s\S]*?\})\s*```/g,
      // JSON in code blocks
      /```\s*(\{[\s\S]*?\})\s*```/g,
      // JSON in generic code blocks
      /(\{[\s\S]*?\})/g
      // Any JSON-like objects
    ];
    for (const pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        const jsonText = match[1];
        const originalText = match[0];
        try {
          const parsed = JSON.parse(jsonText);
          if (parsed.action) {
            let parameters = parsed.parameters;
            if (!parameters) {
              parameters = { ...parsed };
              delete parameters.action;
              delete parameters.requestId;
            }
            commands.push({
              command: {
                action: parsed.action,
                parameters,
                requestId: parsed.requestId || this.generateRequestId()
              },
              originalText
            });
          }
        } catch (error) {
          continue;
        }
      }
      pattern.lastIndex = 0;
    }
    return commands;
  }
  /**
   * Generate a unique request ID
   * @returns A unique request ID string
   */
  generateRequestId() {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
};

// src/components/chat/ToolRegistry.ts
var ToolRegistry = class {
  constructor() {
    __publicField(this, "tools", /* @__PURE__ */ new Map());
  }
  register(tool) {
    this.tools.set(tool.name, tool);
  }
  async execute(command) {
    const tool = this.tools.get(command.action);
    if (!tool) {
      return {
        success: false,
        error: `Tool not found: ${command.action}`,
        requestId: command.requestId
      };
    }
    try {
      const result = await tool.execute(command.parameters, {});
      return {
        ...result,
        requestId: command.requestId
      };
    } catch (error) {
      return {
        success: false,
        error: error.message || String(error),
        requestId: command.requestId
      };
    }
  }
  getAvailableTools() {
    return Array.from(this.tools.values());
  }
};

// src/components/chat/tools/FileSelectTool.ts
var FileSelectTool = class {
  constructor(app) {
    this.app = app;
    __publicField(this, "name", "file_select");
    __publicField(this, "description", "Search and select files from the vault programmatically");
    __publicField(this, "parameters", {
      query: {
        type: "string",
        description: "Search query to find files (searches filename and path)",
        required: false
      },
      filterType: {
        type: "string",
        enum: ["markdown", "image", "all"],
        description: "Type of files to show",
        default: "markdown"
      },
      maxResults: {
        type: "number",
        description: "Maximum number of results to return",
        default: 10
      }
    });
  }
  async execute(params, context) {
    const { query = "", filterType = "markdown", maxResults = 10 } = params;
    try {
      const allFiles = filterType === "markdown" ? this.app.vault.getMarkdownFiles() : filterType === "image" ? this.app.vault.getFiles().filter((f) => {
        var _a2;
        return ["png", "jpg", "jpeg", "gif", "svg", "webp"].includes((_a2 = f.extension) == null ? void 0 : _a2.toLowerCase());
      }) : this.app.vault.getFiles();
      let matchingFiles = allFiles;
      if (query.trim()) {
        const normalizedQuery = query.toLowerCase();
        const queryWords = normalizedQuery.split(/\s+/).filter((word) => word.length > 0);
        matchingFiles = [];
        for (const file of allFiles) {
          const searchText = `${file.path} ${file.basename}`.toLowerCase();
          const searchTextNormalized = searchText.replace(/_/g, " ");
          if (queryWords.every(
            (word) => searchText.includes(word) || searchTextNormalized.includes(word)
          )) {
            matchingFiles.push(file);
            if (matchingFiles.length >= maxResults) {
              break;
            }
          }
        }
      }
      if (matchingFiles.length === 0) {
        return {
          success: false,
          error: `No files found matching query: "${query}"`
        };
      }
      const limitedFiles = matchingFiles.sort((a, b) => {
        var _a2, _b;
        return (((_a2 = b.stat) == null ? void 0 : _a2.mtime) || 0) - (((_b = a.stat) == null ? void 0 : _b.mtime) || 0);
      }).slice(0, maxResults);
      const files = limitedFiles.map((file) => {
        var _a2, _b, _c;
        return {
          path: file.path,
          name: file.name,
          basename: file.basename,
          extension: file.extension,
          size: ((_a2 = file.stat) == null ? void 0 : _a2.size) || 0,
          created: ((_b = file.stat) == null ? void 0 : _b.ctime) || 0,
          modified: ((_c = file.stat) == null ? void 0 : _c.mtime) || 0
        };
      });
      return {
        success: true,
        data: {
          files,
          count: files.length,
          query: query || "all files"
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to search files: ${error.message}`
      };
    }
  }
  getFileFilter(filterType) {
    switch (filterType) {
      case "markdown":
        return (file) => file.extension === "md";
      case "image":
        return (file) => {
          var _a2;
          return ["png", "jpg", "jpeg", "gif", "svg", "webp"].includes((_a2 = file.extension) == null ? void 0 : _a2.toLowerCase());
        };
      case "all":
      default:
        return () => true;
    }
  }
};

// src/components/chat/tools/FileReadTool.ts
var import_obsidian12 = require("obsidian");

// src/components/FileChooserModal.ts
var import_obsidian11 = require("obsidian");
init_js_yaml();
function getVaultItem(app, path, type2) {
  const item = app.vault.getAbstractFileByPath(path);
  if (!item) {
    return null;
  }
  if (type2 === "file" && item instanceof import_obsidian11.TFile) {
    return item;
  }
  if (type2 === "folder" && item instanceof import_obsidian11.TFolder) {
    return item;
  }
  return null;
}
function itemNotFoundError(path, type2) {
  return `${type2.charAt(0).toUpperCase() + type2.slice(1)} not found or is not a ${type2}: "${path}"`;
}
async function createFile(app, filePath, content = "") {
  try {
    await app.vault.create(filePath, content);
    return `Created file '${filePath}'.`;
  } catch (err) {
    return `Failed to create file: ${(err == null ? void 0 : err.message) || err}`;
  }
}
async function readFile(app, filePath) {
  const file = getVaultItem(app, filePath, "file");
  if (!file) return itemNotFoundError(filePath, "file");
  try {
    return await app.vault.read(file);
  } catch (err) {
    return `Failed to read file: ${(err == null ? void 0 : err.message) || err}`;
  }
}
async function writeFile(app, filePath, content) {
  const file = getVaultItem(app, filePath, "file");
  if (!file) return itemNotFoundError(filePath, "file");
  try {
    await app.vault.modify(file, content);
    return `Wrote to file '${filePath}'.`;
  } catch (err) {
    return `Failed to write file: ${(err == null ? void 0 : err.message) || err}`;
  }
}

// src/components/chat/tools/FileReadTool.ts
var FileReadTool = class {
  constructor(app) {
    this.app = app;
    __publicField(this, "name", "file_read");
    __publicField(this, "description", "Read file contents from the vault");
    __publicField(this, "parameters", {
      filePath: {
        type: "string",
        description: "Path to the file to read (relative to vault root)",
        required: true
      },
      maxSize: {
        type: "number",
        description: "Maximum file size in bytes (default 1MB)",
        default: 1024 * 1024
      }
    });
  }
  async execute(params, context) {
    var _a2, _b, _c;
    const { filePath, maxSize = 1024 * 1024 } = params;
    if (!filePath) {
      return {
        success: false,
        error: "filePath parameter is required"
      };
    }
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file && file instanceof import_obsidian12.TFile && ((_a2 = file.stat) == null ? void 0 : _a2.size) && file.stat.size > maxSize) {
        return {
          success: false,
          error: `File too large (${file.stat.size} bytes, max ${maxSize} bytes): ${filePath}`
        };
      }
      const content = await readFile(this.app, filePath);
      if (content.startsWith("File not found") || content.startsWith("Failed to read")) {
        return {
          success: false,
          error: content
        };
      }
      return {
        success: true,
        data: {
          content,
          filePath,
          size: file instanceof import_obsidian12.TFile ? ((_b = file.stat) == null ? void 0 : _b.size) || 0 : 0,
          modified: file instanceof import_obsidian12.TFile ? ((_c = file.stat) == null ? void 0 : _c.mtime) || 0 : 0,
          extension: file instanceof import_obsidian12.TFile ? file.extension : void 0
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to read file: ${error.message}`
      };
    }
  }
};

// src/components/chat/tools/FileWriteTool.ts
var import_obsidian13 = require("obsidian");
var FileWriteTool = class {
  constructor(app) {
    this.app = app;
    __publicField(this, "name", "file_write");
    __publicField(this, "description", "Write/modify file contents in the vault");
    __publicField(this, "parameters", {
      filePath: {
        type: "string",
        description: "Path to the file to write (relative to vault root)",
        required: true
      },
      content: {
        type: "string",
        description: "Content to write to the file",
        required: true
      },
      createIfNotExists: {
        type: "boolean",
        description: "Whether to create the file if it does not exist",
        default: true
      },
      backup: {
        type: "boolean",
        description: "Whether to create a backup before modifying existing files",
        default: true
      }
    });
  }
  async execute(params, context) {
    const filePath = params.filePath || params.filename;
    const { content, createIfNotExists = true, backup = true } = params;
    if (!filePath) {
      return {
        success: false,
        error: "filePath or filename parameter is required"
      };
    }
    if (content === void 0 || content === null) {
      return {
        success: false,
        error: "content parameter is required"
      };
    }
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        if (!createIfNotExists) {
          return {
            success: false,
            error: `File not found and createIfNotExists is false: ${filePath}`
          };
        }
        const result2 = await createFile(this.app, filePath, content);
        if (result2.startsWith("Failed to create")) {
          return {
            success: false,
            error: result2
          };
        }
        return {
          success: true,
          data: {
            action: "created",
            filePath,
            size: content.length
          }
        };
      }
      if (!(file instanceof import_obsidian13.TFile)) {
        return {
          success: false,
          error: `Path is not a file: ${filePath}`
        };
      }
      if (backup) {
        const backupPath = `${filePath}.backup.${Date.now()}`;
        const originalContent = await this.app.vault.read(file);
        try {
          await createFile(this.app, backupPath, originalContent);
        } catch (error) {
          console.warn(`Failed to create backup for ${filePath}:`, error);
        }
      }
      const result = await writeFile(this.app, filePath, content);
      if (result.startsWith("Failed to write")) {
        return {
          success: false,
          error: result
        };
      }
      return {
        success: true,
        data: {
          action: "modified",
          filePath,
          size: content.length,
          backupCreated: backup
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to write file: ${error.message}`
      };
    }
  }
};

// src/components/chat/tools/FileDiffTool.ts
var import_obsidian15 = require("obsidian");

// src/components/chat/filediffhandler.ts
var import_obsidian14 = require("obsidian");
function createSuggestionBlock(suggestionText) {
  return `\`\`\`suggestion
${suggestionText}
\`\`\``;
}
async function insertFileChangeSuggestion(vault, file, suggestionText, position) {
  const content = await vault.read(file);
  const lines = content.split("\n");
  const suggestionBlock = createSuggestionBlock(suggestionText);
  if (position !== void 0 && position >= 0 && position <= lines.length) {
    lines.splice(position, 0, suggestionBlock);
  } else {
    lines.push(suggestionBlock);
  }
  await vault.modify(file, lines.join("\n"));
}
var FileChangeSuggestionsModal = class extends import_obsidian14.Modal {
  constructor(app, suggestions) {
    super(app);
    __publicField(this, "suggestions");
    this.suggestions = suggestions;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "File Change Suggestions" });
    this.suggestions.forEach((s) => {
      const container = contentEl.createDiv("suggestion-container");
      container.createEl("h4", { text: s.file.path });
      container.createEl("pre", { text: s.suggestionText });
      const btnRow = container.createDiv("suggestion-btn-row");
      const acceptBtn = btnRow.createEl("button", { text: "Accept" });
      const rejectBtn = btnRow.createEl("button", { text: "Reject" });
      acceptBtn.onclick = () => {
        var _a2;
        (_a2 = s.onAccept) == null ? void 0 : _a2.call(s);
        new import_obsidian14.Notice("Suggestion accepted");
        this.close();
      };
      rejectBtn.onclick = () => {
        var _a2;
        (_a2 = s.onReject) == null ? void 0 : _a2.call(s);
        new import_obsidian14.Notice("Suggestion rejected");
        this.close();
      };
    });
  }
  onClose() {
    this.contentEl.empty();
  }
};
function showFileChangeSuggestionsModal(app, suggestions) {
  new FileChangeSuggestionsModal(app, suggestions).open();
}
function formatSuggestionForDisplay(suggestionText) {
  const html = suggestionText.split("\n").map((line) => {
    if (line.startsWith("+")) return `<span class="suggestion-add">${line}</span>`;
    if (line.startsWith("-")) return `<span class="suggestion-remove">${line}</span>`;
    return line;
  }).join("<br>");
  return `<pre>${html}</pre>`;
}

// src/components/chat/tools/FileDiffTool.ts
var FileDiffTool = class {
  constructor(app) {
    this.app = app;
    __publicField(this, "name", "file_diff");
    __publicField(this, "description", "Compare and suggest changes to files");
    __publicField(this, "parameters", {
      filePath: {
        type: "string",
        description: "Path to the file to compare/modify (relative to vault root)",
        required: true
      },
      originalContent: {
        type: "string",
        description: "Original content for comparison (if not provided, reads from file)",
        required: false
      },
      suggestedContent: {
        type: "string",
        description: "Suggested new content for the file",
        required: true
      },
      action: {
        type: "string",
        enum: ["compare", "apply", "suggest"],
        description: "Action to perform: compare files, apply changes, or show suggestion UI",
        default: "suggest"
      },
      insertPosition: {
        type: "number",
        description: "Line number to insert suggestion at (for suggest action)",
        required: false
      }
    });
  }
  async execute(params, context) {
    const { filePath, originalContent, suggestedContent, action = "suggest", insertPosition } = params;
    if (!filePath) {
      return {
        success: false,
        error: "filePath parameter is required"
      };
    }
    if (!suggestedContent) {
      return {
        success: false,
        error: "suggestedContent parameter is required"
      };
    }
    try {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file || !(file instanceof import_obsidian15.TFile)) {
        return {
          success: false,
          error: `File not found: ${filePath}`
        };
      }
      const currentContent = originalContent || await this.app.vault.read(file);
      switch (action) {
        case "compare":
          return this.compareFiles(currentContent, suggestedContent, filePath);
        case "apply":
          return this.applyChanges(file, suggestedContent);
        case "suggest":
        default:
          return this.showSuggestion(file, currentContent, suggestedContent, insertPosition);
      }
    } catch (error) {
      return {
        success: false,
        error: `Failed to process file diff: ${error.message}`
      };
    }
  }
  compareFiles(originalContent, suggestedContent, filePath) {
    const diff = this.generateDiff(originalContent, suggestedContent);
    return {
      success: true,
      data: {
        action: "compare",
        filePath,
        diff,
        formattedDiff: formatSuggestionForDisplay(diff),
        hasChanges: diff.length > 0
      }
    };
  }
  async applyChanges(file, suggestedContent) {
    try {
      await this.app.vault.modify(file, suggestedContent);
      return {
        success: true,
        data: {
          action: "apply",
          filePath: file.path,
          size: suggestedContent.length
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to apply changes: ${error.message}`
      };
    }
  }
  async showSuggestion(file, originalContent, suggestedContent, insertPosition) {
    const diff = this.generateDiff(originalContent, suggestedContent);
    if (diff.length === 0) {
      return {
        success: true,
        data: {
          action: "suggest",
          filePath: file.path,
          message: "No changes detected"
        }
      };
    }
    try {
      const suggestion = {
        file,
        suggestionText: diff,
        onAccept: () => {
          this.app.vault.modify(file, suggestedContent);
        },
        onReject: () => {
        }
      };
      showFileChangeSuggestionsModal(this.app, [suggestion]);
      if (insertPosition !== void 0) {
        await insertFileChangeSuggestion(this.app.vault, file, diff, insertPosition);
      }
      return {
        success: true,
        data: {
          action: "suggest",
          filePath: file.path,
          diff,
          suggestionInserted: insertPosition !== void 0
        }
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to show suggestion: ${error.message}`
      };
    }
  }
  generateDiff(original, suggested) {
    const originalLines = original.split("\n");
    const suggestedLines = suggested.split("\n");
    const diff = [];
    const maxLines = Math.max(originalLines.length, suggestedLines.length);
    for (let i = 0; i < maxLines; i++) {
      const originalLine = originalLines[i] || "";
      const suggestedLine = suggestedLines[i] || "";
      if (originalLine !== suggestedLine) {
        if (originalLine && !suggestedLine) {
          diff.push(`-${originalLine}`);
        } else if (!originalLine && suggestedLine) {
          diff.push(`+${suggestedLine}`);
        } else if (originalLine !== suggestedLine) {
          diff.push(`-${originalLine}`);
          diff.push(`+${suggestedLine}`);
        }
      }
    }
    return diff.join("\n");
  }
};

// src/components/chat/tools/ThoughtTool.ts
var ThoughtTool = class {
  constructor(app) {
    this.app = app;
    __publicField(this, "name", "thought");
    __publicField(this, "description", "Record and display AI reasoning steps and thought processes");
    __publicField(this, "parameters", {
      thought: {
        type: "string",
        description: "The thought or reasoning step to record",
        required: true
      },
      step: {
        type: "number",
        description: "Current step number in the thought process",
        required: false
      },
      totalSteps: {
        type: "number",
        description: "Total expected steps in the thought process",
        required: false
      },
      category: {
        type: "string",
        enum: ["analysis", "planning", "problem-solving", "reflection", "conclusion"],
        description: "Category of thought for better organization",
        default: "analysis"
      },
      confidence: {
        type: "number",
        description: "Confidence level in this thought (1-10 scale)",
        default: 7,
        minimum: 1,
        maximum: 10
      }
    });
  }
  async execute(params, context) {
    const {
      thought,
      step,
      totalSteps,
      category = "analysis",
      confidence = 7
    } = params;
    if (!thought || thought.trim().length === 0) {
      return {
        success: false,
        error: "Thought content cannot be empty"
      };
    }
    try {
      const timestamp2 = (/* @__PURE__ */ new Date()).toLocaleTimeString();
      const stepInfo = step && totalSteps ? `Step ${step}/${totalSteps}` : step ? `Step ${step}` : "";
      const confidenceBar = "\u25CF".repeat(Math.floor(confidence)) + "\u25CB".repeat(10 - Math.floor(confidence));
      const thoughtData = {
        timestamp: timestamp2,
        thought: thought.trim(),
        step,
        totalSteps,
        category,
        confidence,
        formattedThought: this.formatThought(thought.trim(), stepInfo, category, confidence, timestamp2)
      };
      console.log("ThoughtTool: Recording thought:", thoughtData);
      return {
        success: true,
        data: thoughtData
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to record thought: ${error.message}`
      };
    }
  }
  formatThought(thought, stepInfo, category, confidence, timestamp2) {
    const categoryEmoji = this.getCategoryEmoji(category);
    const confidenceDisplay = `${confidence}/10`;
    let formatted = `${categoryEmoji} **${category.toUpperCase()}**`;
    if (stepInfo) {
      formatted += ` | ${stepInfo}`;
    }
    formatted += ` | Confidence: ${confidenceDisplay} | ${timestamp2}
`;
    formatted += `> ${thought}`;
    return formatted;
  }
  getCategoryEmoji(category) {
    switch (category) {
      case "analysis":
        return "\u{1F50D}";
      case "planning":
        return "\u{1F4CB}";
      case "problem-solving":
        return "\u{1F9E9}";
      case "reflection":
        return "\u{1F914}";
      case "conclusion":
        return "\u2705";
      default:
        return "\u{1F4AD}";
    }
  }
  /**
   * Helper method to validate confidence range
   */
  validateConfidence(confidence) {
    return Math.max(1, Math.min(10, Math.floor(confidence)));
  }
};

// src/components/chat/AgentResponseHandler.ts
var AgentResponseHandler = class {
  constructor(context) {
    this.context = context;
    __publicField(this, "commandParser");
    __publicField(this, "toolRegistry");
    __publicField(this, "executionCount", 0);
    this.commandParser = new CommandParser();
    this.toolRegistry = new ToolRegistry();
    this.initializeTools();
  }
  initializeTools() {
    this.toolRegistry.register(new FileSelectTool(this.context.app));
    this.toolRegistry.register(new FileReadTool(this.context.app));
    this.toolRegistry.register(new FileWriteTool(this.context.app));
    this.toolRegistry.register(new FileDiffTool(this.context.app));
    this.toolRegistry.register(new ThoughtTool(this.context.app));
  }
  /**
   * Process an AI response and handle any tool commands
   * @param response The AI response text
   * @returns Object containing processed text and execution results
   */
  async processResponse(response) {
    console.log("AgentResponseHandler: Processing response, agent mode enabled:", this.context.plugin.isAgentModeEnabled());
    console.log("AgentResponseHandler: Response content:", response);
    if (!this.context.plugin.isAgentModeEnabled()) {
      console.log("AgentResponseHandler: Agent mode disabled, returning original response");
      return {
        processedText: response,
        toolResults: [],
        hasTools: false
      };
    }
    const { text, commands } = this.commandParser.parseResponse(response);
    console.log("AgentResponseHandler: Parsed text:", text);
    console.log("AgentResponseHandler: Found commands:", commands);
    let thoughtResultDisplay = "";
    const userRequest = text && text.trim().length > 0 ? text : response;
    const thoughtTool = new ThoughtTool(this.context.app);
    const thoughtResult = await thoughtTool.execute({
      thought: `Agent reasoning: Received user request: "${userRequest}". Determining next actions.`,
      category: "analysis",
      confidence: 7
    }, this.context);
    if (thoughtResult.success && thoughtResult.data && thoughtResult.data.formattedThought) {
      thoughtResultDisplay = `
${thoughtResult.data.formattedThought}
`;
      if (this.context.messagesContainer) {
        const div = document.createElement("div");
        div.className = "ai-chat-message thought-tool";
        div.innerHTML = `<div class="message-content">${thoughtResult.data.formattedThought}</div>`;
        this.context.messagesContainer.appendChild(div);
      }
    }
    if (commands.length === 0) {
      console.log("AgentResponseHandler: No commands found, returning original text");
      return {
        processedText: (thoughtResultDisplay ? thoughtResultDisplay + "\n" : "") + text,
        toolResults: [],
        hasTools: false
      };
    }
    const agentSettings = this.context.plugin.getAgentModeSettings();
    if (this.executionCount >= agentSettings.maxToolCalls) {
      new import_obsidian16.Notice(`Agent mode: Maximum tool calls (${agentSettings.maxToolCalls}) reached`);
      return {
        processedText: text + "\n\n*[Tool execution limit reached]*",
        toolResults: [],
        hasTools: true
      };
    }
    const toolResults = [];
    for (const command of commands) {
      try {
        const result = await this.executeToolWithTimeout(command, agentSettings.timeoutMs);
        toolResults.push({ command, result });
        this.executionCount++;
        this.context.onToolResult(result, command);
        if (this.executionCount >= agentSettings.maxToolCalls) {
          break;
        }
      } catch (error) {
        const errorResult = {
          success: false,
          error: `Tool execution failed: ${error.message}`,
          requestId: command.requestId
        };
        toolResults.push({ command, result: errorResult });
        this.context.onToolResult(errorResult, command);
      }
    }
    return {
      processedText: (thoughtResultDisplay ? thoughtResultDisplay + "\n" : "") + text,
      toolResults,
      hasTools: true
    };
  }
  /**
   * Execute a tool command with timeout
   */
  async executeToolWithTimeout(command, timeoutMs) {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error(`Tool execution timed out after ${timeoutMs}ms`));
      }, timeoutMs);
      this.toolRegistry.execute(command).then((result) => {
        clearTimeout(timeout);
        resolve(result);
      }).catch((error) => {
        clearTimeout(timeout);
        reject(error);
      });
    });
  }
  /**
   * Reset execution count (call at start of new conversation)
   */
  resetExecutionCount() {
    this.executionCount = 0;
  }
  /**
   * Get available tools information
   */
  getAvailableTools() {
    return this.toolRegistry.getAvailableTools();
  }
  /**
   * Get tool execution statistics
   */
  getExecutionStats() {
    const agentSettings = this.context.plugin.getAgentModeSettings();
    return {
      executionCount: this.executionCount,
      maxToolCalls: agentSettings.maxToolCalls,
      remaining: Math.max(0, agentSettings.maxToolCalls - this.executionCount)
    };
  }
  /**
   * Create a message with tool execution results for context
   */
  createToolResultMessage(toolResults) {
    if (toolResults.length === 0) {
      return null;
    }
    const resultText = toolResults.map(({ command, result }) => {
      const status = result.success ? "\u2713" : "\u2717";
      const data = result.success ? JSON.stringify(result.data, null, 2) : result.error;
      return `${status} Tool: ${command.action}
Parameters: ${JSON.stringify(command.parameters, null, 2)}
Result: ${data}`;
    }).join("\n\n");
    return {
      role: "system",
      content: `Tool execution results:

${resultText}`
    };
  }
  /**
   * Helper to ensure a file path is relative to the vault root and strips .md extension for Obsidian links
   */
  getRelativePath(filePath) {
    const adapter = this.context.app.vault.adapter;
    const vaultRoot = (adapter == null ? void 0 : adapter.basePath) ? adapter.basePath.replace(/\\/g, "/") : "";
    let relPath = filePath.replace(/\\/g, "/");
    if (vaultRoot && relPath.startsWith(vaultRoot)) {
      relPath = relPath.slice(vaultRoot.length);
      if (relPath.startsWith("/")) relPath = relPath.slice(1);
    }
    if (relPath.toLowerCase().endsWith(".md")) {
      relPath = relPath.slice(0, -3);
    }
    return relPath;
  }
  /**
   * Format tool results for display in chat
   */
  formatToolResultsForDisplay(toolResults) {
    if (toolResults.length === 0) {
      return "";
    }
    const resultText = toolResults.map(({ command, result }) => {
      const status = result.success ? "\u2705" : "\u274C";
      const action = command.action.replace("_", " ");
      if (result.success) {
        let context = "";
        if (result.data) {
          switch (command.action) {
            case "file_write":
            case "file_read":
            case "file_diff":
              if (result.data.filePath) {
                const relPath = this.getRelativePath(result.data.filePath);
                context = ` [[${relPath}]]`;
              }
              break;
            case "file_select":
              if (result.data.count !== void 0) {
                context = ` [[${result.data.count} files found]]`;
              }
              break;
            case "thought":
              if (result.data && result.data.formattedThought) {
                return result.data.formattedThought;
              }
              break;
          }
        }
        return `${status} **${action}** completed successfully${context}`;
      } else {
        return `${status} **${action}** failed: ${result.error}`;
      }
    }).join("\n");
    return `

**Tool Execution:**
${resultText}`;
  }
};

// src/components/chat.ts
var VIEW_TYPE_CHAT = "chat-view";
var ChatView = class extends import_obsidian17.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "chatHistoryManager");
    __publicField(this, "messagesContainer");
    __publicField(this, "inputContainer");
    __publicField(this, "activeStream", null);
    __publicField(this, "referenceNoteIndicator");
    // Add this property
    __publicField(this, "agentResponseHandler", null);
    this.plugin = plugin;
    this.chatHistoryManager = new ChatHistoryManager(this.app.vault, this.plugin.manifest.id, "chat-history.json");
  }
  getViewType() {
    return VIEW_TYPE_CHAT;
  }
  getDisplayText() {
    return "AI Chat";
  }
  getIcon() {
    return "message-square";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("ai-chat-view");
    let loadedHistory = [];
    try {
      loadedHistory = await this.chatHistoryManager.getHistory();
    } catch (e) {
      new import_obsidian17.Notice("Failed to load chat history.");
      loadedHistory = [];
    }
    const ui = createChatUI(this.app, contentEl);
    this.messagesContainer = ui.messagesContainer;
    this.inputContainer = ui.inputContainer;
    this.referenceNoteIndicator = ui.referenceNoteIndicator;
    this.updateReferenceNoteIndicator();
    const textarea = ui.textarea;
    const sendButton = ui.sendButton;
    const stopButton = ui.stopButton;
    ui.copyAllButton.addEventListener("click", handleCopyAll(this.messagesContainer, this.plugin));
    ui.saveNoteButton.addEventListener("click", handleSaveNote(this.messagesContainer, this.plugin, this.app));
    ui.clearButton.addEventListener("click", handleClearChat(this.messagesContainer, this.chatHistoryManager));
    ui.settingsButton.addEventListener("click", handleSettings(this.app, this.plugin));
    ui.helpButton.addEventListener("click", handleHelp(this.app));
    ui.referenceNoteButton.addEventListener("click", () => {
      this.plugin.settings.referenceCurrentNote = !this.plugin.settings.referenceCurrentNote;
      this.plugin.saveSettings();
      this.updateReferenceNoteIndicator();
    });
    this.agentResponseHandler = new AgentResponseHandler({
      app: this.app,
      plugin: this.plugin,
      messagesContainer: this.messagesContainer,
      onToolResult: (toolResult, command) => {
        if (toolResult.success) {
          console.log(`Tool ${command.action} completed successfully`, toolResult.data);
        } else {
          console.error(`Tool ${command.action} failed:`, toolResult.error);
        }
      }
    });
    ui.agentModeButton.addEventListener("click", async () => {
      const isCurrentlyEnabled = this.plugin.isAgentModeEnabled();
      await this.plugin.setAgentModeEnabled(!isCurrentlyEnabled);
      if (this.plugin.isAgentModeEnabled()) {
        ui.agentModeButton.classList.add("active");
        ui.agentModeButton.setAttribute("title", "Agent Mode: ON - AI can use tools");
        new import_obsidian17.Notice("Agent Mode enabled - AI can now use tools");
        if (this.agentResponseHandler) {
          this.agentResponseHandler.resetExecutionCount();
        }
      } else {
        ui.agentModeButton.classList.remove("active");
        ui.agentModeButton.setAttribute("title", "Agent Mode: OFF - Regular chat");
        new import_obsidian17.Notice("Agent Mode disabled");
      }
    });
    if (this.plugin.isAgentModeEnabled()) {
      ui.agentModeButton.classList.add("active");
      ui.agentModeButton.setAttribute("title", "Agent Mode: ON - AI can use tools");
    } else {
      ui.agentModeButton.classList.remove("active");
      ui.agentModeButton.setAttribute("title", "Agent Mode: OFF - Regular chat");
    }
    const sendMessage = async () => {
      const content = textarea.value.trim();
      if (!content) return;
      textarea.disabled = true;
      sendButton.classList.add("hidden");
      stopButton.classList.remove("hidden");
      const userMessageEl = await createMessageElement(this.app, "user", content, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
      this.messagesContainer.appendChild(userMessageEl);
      this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
      textarea.value = "";
      try {
        const messages = await this.buildContextMessages();
        const messageElements = this.messagesContainer.querySelectorAll(".ai-chat-message");
        messageElements.forEach((el) => {
          var _a2;
          const role = el.classList.contains("user") ? "user" : "assistant";
          const content2 = ((_a2 = el.querySelector(".message-content")) == null ? void 0 : _a2.textContent) || "";
          messages.push({ role, content: content2 });
        });
        const tempContainer = document.createElement("div");
        tempContainer.addClass("ai-chat-message", "assistant");
        tempContainer.createDiv("message-content");
        this.messagesContainer.appendChild(tempContainer);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        const responseContent = await this.streamAssistantResponse(messages, tempContainer);
        tempContainer.remove();
        if (responseContent.trim() !== "") {
          const messageEl = await createMessageElement(this.app, "assistant", responseContent, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
          this.messagesContainer.appendChild(messageEl);
          await this.chatHistoryManager.addMessage({
            timestamp: messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
            sender: "assistant",
            content: responseContent
          });
        }
      } catch (error) {
        if (error.name !== "AbortError") {
          new import_obsidian17.Notice(`Error: ${error.message}`);
          await createMessageElement(this.app, "assistant", `Error: ${error.message}`, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
        }
      } finally {
        textarea.disabled = false;
        textarea.focus();
        stopButton.classList.add("hidden");
        sendButton.classList.remove("hidden");
        this.activeStream = null;
      }
    };
    sendButton.addEventListener("click", sendMessage);
    stopButton.addEventListener("click", () => {
      if (this.activeStream) {
        this.activeStream.abort();
        this.activeStream = null;
        textarea.disabled = false;
        textarea.focus();
        stopButton.classList.add("hidden");
        sendButton.classList.remove("hidden");
      }
    });
    Promise.resolve().then(() => (init_inputHandler(), inputHandler_exports)).then(({ setupInputHandler: setupInputHandler2 }) => {
      setupInputHandler2(
        textarea,
        sendMessage,
        async (cmd) => {
          switch (cmd) {
            case "/clear":
              ui.clearButton.click();
              break;
            case "/copy":
              ui.copyAllButton.click();
              break;
            case "/save":
              ui.saveNoteButton.click();
              break;
            case "/settings":
              ui.settingsButton.click();
              break;
            case "/help":
              ui.helpButton.click();
              break;
            case "/ref":
              ui.referenceNoteButton.click();
              break;
          }
        },
        this.app,
        this.plugin,
        sendButton,
        stopButton
      );
    });
    if (loadedHistory.length > 0) {
      this.messagesContainer.empty();
      const file = this.app.workspace.getActiveFile();
      if (file) {
        await loadChatYamlAndApplySettings({
          app: this.app,
          plugin: this.plugin,
          settings: this.plugin.settings,
          file
        });
      }
      await renderChatHistory({
        messagesContainer: this.messagesContainer,
        loadedHistory,
        chatHistoryManager: this.chatHistoryManager,
        plugin: this.plugin,
        regenerateResponse: (el) => this.regenerateResponse(el),
        scrollToBottom: true
      });
    }
    this.updateReferenceNoteIndicator();
    this.registerEvent(this.app.workspace.on("active-leaf-change", () => {
      this.updateReferenceNoteIndicator();
    }));
    this.plugin.onSettingsChange(() => {
      this.updateReferenceNoteIndicator();
    });
  }
  async addMessage(role, content, isError = false) {
    const messageEl = await createMessageElement(this.app, role, content, this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
    const uiTimestamp = messageEl.dataset.timestamp || (/* @__PURE__ */ new Date()).toISOString();
    this.messagesContainer.appendChild(messageEl);
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    try {
      await this.chatHistoryManager.addMessage({
        timestamp: uiTimestamp,
        sender: role,
        content
      });
    } catch (e) {
      new import_obsidian17.Notice("Failed to save chat message: " + e.message);
    }
  }
  async onClose() {
    if (this.activeStream) {
      this.activeStream.abort();
      this.activeStream = null;
    }
  }
  async regenerateResponse(messageEl) {
    const textarea = this.inputContainer.querySelector("textarea");
    if (textarea) textarea.disabled = true;
    const allMessages = Array.from(this.messagesContainer.querySelectorAll(".ai-chat-message"));
    const currentIndex = allMessages.indexOf(messageEl);
    const isUserClicked = messageEl.classList.contains("user");
    let targetIndex = -1;
    if (isUserClicked) {
      for (let i = currentIndex + 1; i < allMessages.length; i++) {
        if (allMessages[i].classList.contains("assistant")) {
          targetIndex = i;
          break;
        }
        if (allMessages[i].classList.contains("user")) {
          break;
        }
      }
    } else {
      targetIndex = currentIndex;
    }
    let userMsgIndex = currentIndex;
    if (!isUserClicked) {
      userMsgIndex = currentIndex - 1;
      while (userMsgIndex >= 0 && !allMessages[userMsgIndex].classList.contains("user")) {
        userMsgIndex--;
      }
    }
    const messages = await this.buildContextMessages();
    for (let i = 0; i <= userMsgIndex; i++) {
      const el = allMessages[i];
      const role = el.classList.contains("user") ? "user" : "assistant";
      const content = el.dataset.rawContent || "";
      messages.push({ role, content });
    }
    let originalTimestamp = (/* @__PURE__ */ new Date()).toISOString();
    let originalContent = "";
    let insertAfterNode = null;
    if (targetIndex !== -1) {
      const targetEl = allMessages[targetIndex];
      originalTimestamp = targetEl.dataset.timestamp || originalTimestamp;
      originalContent = targetEl.dataset.rawContent || "";
      insertAfterNode = targetEl.previousElementSibling;
      targetEl.remove();
    } else if (isUserClicked) {
      insertAfterNode = messageEl;
    } else {
      insertAfterNode = null;
    }
    const assistantContainer = await createMessageElement(this.app, "assistant", "", this.chatHistoryManager, this.plugin, (el) => this.regenerateResponse(el), this);
    assistantContainer.dataset.timestamp = originalTimestamp;
    if (insertAfterNode && insertAfterNode.nextSibling) {
      this.messagesContainer.insertBefore(assistantContainer, insertAfterNode.nextSibling);
    } else {
      this.messagesContainer.appendChild(assistantContainer);
    }
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    try {
      await this.streamAssistantResponse(messages, assistantContainer, originalTimestamp, originalContent);
    } catch (error) {
      if (error.name !== "AbortError") {
        new import_obsidian17.Notice(`Error: ${error.message}`);
        assistantContainer.remove();
      }
    } finally {
      if (textarea) {
        textarea.disabled = false;
        textarea.focus();
      }
      this.activeStream = null;
    }
  }
  updateReferenceNoteIndicator() {
    if (!this.referenceNoteIndicator) return;
    const currentFile = this.app.workspace.getActiveFile();
    const isReferenceEnabled = this.plugin.settings.referenceCurrentNote;
    const button = this.referenceNoteIndicator.previousElementSibling;
    if (isReferenceEnabled && currentFile) {
      this.referenceNoteIndicator.setText(`\u{1F4DD} Referencing: ${currentFile.basename}`);
      this.referenceNoteIndicator.style.display = "block";
      if (button && button.getAttribute("aria-label") === "Toggle referencing current note") {
        button.setText("\u{1F4DD}");
        button.classList.add("active");
      }
    } else {
      this.referenceNoteIndicator.style.display = "none";
      if (button && button.getAttribute("aria-label") === "Toggle referencing current note") {
        button.setText("\u{1F4DD}");
        button.classList.remove("active");
      }
    }
  }
  async buildContextMessages() {
    const messages = [
      { role: "system", content: this.plugin.getSystemMessage() }
    ];
    if (this.plugin.settings.enableContextNotes && this.plugin.settings.contextNotes) {
      const contextContent = await this.plugin.getContextNotesContent(this.plugin.settings.contextNotes);
      messages[0].content += `

Context Notes:
${contextContent}`;
    }
    if (this.plugin.settings.referenceCurrentNote) {
      const currentFile = this.app.workspace.getActiveFile();
      if (currentFile) {
        const currentNoteContent = await this.app.vault.cachedRead(currentFile);
        messages.push({
          role: "system",
          content: `Here is the content of the current note:

${currentNoteContent}`
        });
      }
    }
    return messages;
  }
  async streamAssistantResponse(messages, container, originalTimestamp, originalContent) {
    let responseContent = "";
    this.activeStream = new AbortController();
    if (this.plugin.isAgentModeEnabled()) {
      const { AGENT_SYSTEM_PROMPT: AGENT_SYSTEM_PROMPT2 } = await Promise.resolve().then(() => (init_promptConstants(), promptConstants_exports));
      const systemMessageIndex = messages.findIndex((msg) => msg.role === "system");
      if (systemMessageIndex !== -1) {
        messages[systemMessageIndex].content = AGENT_SYSTEM_PROMPT2 + "\n\n" + messages[systemMessageIndex].content;
      }
    }
    try {
      const provider = this.plugin.settings.selectedModel ? createProviderFromUnifiedModel(this.plugin.settings, this.plugin.settings.selectedModel) : createProvider(this.plugin.settings);
      await provider.getCompletion(
        messages,
        {
          temperature: this.plugin.settings.temperature,
          maxTokens: this.plugin.settings.maxTokens,
          streamCallback: async (chunk) => {
            responseContent += chunk;
            const contentEl = container.querySelector(".message-content");
            if (contentEl) {
              container.dataset.rawContent = responseContent;
              contentEl.empty();
              await import_obsidian17.MarkdownRenderer.render(
                this.app,
                responseContent,
                contentEl,
                "",
                this
              );
              this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            }
          },
          abortController: this.activeStream
        }
      );
      if (this.plugin.isAgentModeEnabled() && this.agentResponseHandler) {
        const agentResult = await this.agentResponseHandler.processResponse(responseContent);
        if (agentResult.hasTools) {
          const finalContent = agentResult.processedText + this.agentResponseHandler.formatToolResultsForDisplay(agentResult.toolResults);
          const contentEl = container.querySelector(".message-content");
          if (contentEl) {
            container.dataset.rawContent = finalContent;
            contentEl.empty();
            await import_obsidian17.MarkdownRenderer.render(
              this.app,
              finalContent,
              contentEl,
              "",
              this
            );
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
          }
          const toolResultMessage = this.agentResponseHandler.createToolResultMessage(agentResult.toolResults);
          if (toolResultMessage) {
            console.log("Tool results for context:", toolResultMessage);
          }
          responseContent = finalContent;
        }
      }
      if (originalTimestamp && responseContent.trim() !== "") {
        await this.chatHistoryManager.updateMessage(
          originalTimestamp,
          "assistant",
          originalContent || "",
          responseContent
        );
      }
      return responseContent;
    } catch (error) {
      if (error.name !== "AbortError") {
        throw error;
      }
      return "";
    }
  }
  clearMessages() {
    this.messagesContainer.empty();
  }
  scrollMessagesToBottom() {
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
  }
};

// src/components/parseSelection.ts
function parseSelection(selection, chatSeparator, chatBoundaryString) {
  let insideChat = !chatBoundaryString;
  const lines = selection.split("\n");
  let messages = [];
  let currentRole = "user";
  let currentContent = "";
  for (const line of lines) {
    if (chatBoundaryString && line.trim() === chatBoundaryString) {
      if (!insideChat && currentContent.trim()) {
        messages.push({ role: currentRole, content: currentContent.trim() });
        currentContent = "";
      }
      insideChat = !insideChat;
      continue;
    }
    if (!insideChat) continue;
    if (line.trim() === chatSeparator) {
      if (currentContent.trim()) {
        messages.push({ role: currentRole, content: currentContent.trim() });
      }
      currentRole = currentRole === "user" ? "assistant" : "user";
      currentContent = "";
    } else {
      currentContent += line + "\n";
    }
  }
  if (currentContent.trim()) {
    messages.push({ role: currentRole, content: currentContent.trim() });
  }
  return messages;
}

// src/components/ModelSettingsView.ts
var import_obsidian18 = require("obsidian");
var VIEW_TYPE_MODEL_SETTINGS2 = "model-settings-view";
var ModelSettingsView = class extends import_obsidian18.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "_onSettingsChange", () => {
      this.onOpen();
    });
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_MODEL_SETTINGS2;
  }
  getDisplayText() {
    return "AI Model Settings";
  }
  getIcon() {
    return "file-sliders";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.plugin.offSettingsChange(this._onSettingsChange);
    this.plugin.onSettingsChange(this._onSettingsChange);
    const settingsSections = new (await Promise.resolve().then(() => (init_SettingsSections(), SettingsSections_exports))).SettingsSections(this.plugin);
    await settingsSections.renderAllSettings(contentEl, { onRefresh: () => this.onOpen() });
  }
  async onClose() {
    this.plugin.offSettingsChange(this._onSettingsChange);
  }
};

// src/components/noteUtils.ts
var import_obsidian19 = require("obsidian");
function extractContentUnderHeader(content, headerText) {
  const lines = content.split("\n");
  let foundHeader = false;
  let extractedContent = [];
  let headerLevel = 0;
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const headerMatch = line.match(/^(#+)\s+(.*?)$/);
    if (headerMatch) {
      const currentHeaderLevel = headerMatch[1].length;
      const currentHeaderText = headerMatch[2].trim();
      if (foundHeader) {
        if (currentHeaderLevel <= headerLevel) {
          break;
        }
      } else if (currentHeaderText.toLowerCase() === headerText.toLowerCase()) {
        foundHeader = true;
        headerLevel = currentHeaderLevel;
        extractedContent.push(line);
        continue;
      }
    }
    if (foundHeader) {
      extractedContent.push(line);
    }
  }
  return extractedContent.join("\n");
}
async function processObsidianLinks(content, app, settings, visitedNotes = /* @__PURE__ */ new Set(), currentDepth = 0) {
  var _a2;
  if (!settings.enableObsidianLinks) return content;
  const linkRegex = /\[\[(.*?)\]\]/g;
  let match;
  let processedContent = content;
  while ((match = linkRegex.exec(content)) !== null) {
    if (match && match[0] && match[1]) {
      const parts = match[1].split("|");
      const filePath = parts[0].trim();
      const displayText = parts.length > 1 ? parts[1].trim() : filePath;
      try {
        let file = app.vault.getAbstractFileByPath(filePath) || app.vault.getAbstractFileByPath(`${filePath}.md`);
        if (!file) {
          const allFiles = app.vault.getFiles();
          file = allFiles.find((f) => f.name === filePath || f.name === `${filePath}.md` || f.basename.toLowerCase() === filePath.toLowerCase() || f.path === filePath || f.path === `${filePath}.md`) || null;
        }
        const headerMatch = filePath.match(/(.*?)#(.*)/);
        let extractedContent = "";
        if (file && file instanceof import_obsidian19.TFile) {
          if (visitedNotes.has(file.path)) {
            extractedContent = "[Recursive link omitted: already included]";
          } else {
            visitedNotes.add(file.path);
            const noteContent = await app.vault.cachedRead(file);
            if (headerMatch) {
              extractedContent = extractContentUnderHeader(noteContent, headerMatch[2].trim());
            } else {
              extractedContent = noteContent;
            }
            if (settings.expandLinkedNotesRecursively && currentDepth < ((_a2 = settings.maxLinkExpansionDepth) != null ? _a2 : 2)) {
              extractedContent = await processObsidianLinks(extractedContent, app, settings, visitedNotes, currentDepth + 1);
            }
          }
          processedContent = processedContent.replace(
            match[0],
            `${match[0]}

---
Note Name: ${filePath}
Content:
${extractedContent}
---
`
          );
        } else {
          new import_obsidian19.Notice(`File not found: ${filePath}. Ensure the file name and path are correct.`);
        }
      } catch (error) {
        new import_obsidian19.Notice(`Error processing link for ${filePath}: ${error.message}`);
      }
    }
  }
  return processedContent;
}
async function processContextNotes(contextNotesText, app) {
  const linkRegex = /\[\[(.*?)\]\]/g;
  let match;
  let contextContent = "";
  while ((match = linkRegex.exec(contextNotesText)) !== null) {
    if (match && match[1]) {
      const fileName = match[1].trim();
      try {
        const headerMatch = fileName.match(/(.*?)#(.*)/);
        const baseFileName = headerMatch ? headerMatch[1].trim() : fileName;
        const headerName = headerMatch ? headerMatch[2].trim() : null;
        let file = app.vault.getAbstractFileByPath(baseFileName) || app.vault.getAbstractFileByPath(`${baseFileName}.md`);
        if (!file) {
          const allFiles = app.vault.getFiles();
          file = allFiles.find(
            (f) => f.basename.toLowerCase() === baseFileName.toLowerCase() || f.name.toLowerCase() === `${baseFileName.toLowerCase()}.md`
          ) || null;
        }
        if (file && file instanceof import_obsidian19.TFile) {
          const noteContent = await app.vault.cachedRead(file);
          contextContent += `---
From note: ${file.basename}

`;
          if (headerName) {
            const headerContent = extractContentUnderHeader(noteContent, headerName);
            contextContent += headerContent;
          } else {
            contextContent += noteContent;
          }
          contextContent += "\n\n";
        } else {
          contextContent += `Note not found: ${fileName}

`;
        }
      } catch (error) {
        contextContent += `Error processing note ${fileName}: ${error.message}

`;
      }
    }
  }
  return contextContent;
}
async function processMessages(messages, app, settings) {
  const processedMessages = [];
  if (settings.enableContextNotes && settings.contextNotes) {
    const contextContent = await processContextNotes(settings.contextNotes, app);
    if (contextContent) {
      if (messages.length > 0 && messages[0].role === "system") {
        processedMessages.push({
          role: "system",
          content: `${messages[0].content}

Here is additional context:
${contextContent}`
        });
        messages = messages.slice(1);
      } else {
        processedMessages.push({
          role: "system",
          content: `Here is context for our conversation:
${contextContent}`
        });
      }
    }
  }
  for (const message of messages) {
    const processedContent = await processObsidianLinks(message.content, app, settings, /* @__PURE__ */ new Set());
    processedMessages.push({
      role: message.role,
      content: processedContent
    });
  }
  return processedMessages;
}
async function getContextNotesContent(contextNotesText, app) {
  return processContextNotes(contextNotesText, app);
}

// src/components/systemMessage.ts
function getSystemMessage(settings) {
  let systemMessage = settings.systemMessage;
  if (settings.includeDateWithSystemMessage) {
    const currentDate = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    systemMessage = `${systemMessage}

The current date is ${currentDate}.`;
  }
  if (settings.includeTimeWithSystemMessage) {
    const now = /* @__PURE__ */ new Date();
    const timeZoneOffset = now.getTimezoneOffset();
    const offsetHours = Math.abs(timeZoneOffset) / 60;
    const offsetMinutes = Math.abs(timeZoneOffset) % 60;
    const sign = timeZoneOffset > 0 ? "-" : "+";
    const currentTime = now.toLocaleTimeString();
    const timeZoneString = `UTC${sign}${offsetHours.toString().padStart(2, "0")}:${offsetMinutes.toString().padStart(2, "0")}`;
    systemMessage = `${systemMessage}

The current time is ${currentTime} ${timeZoneString}.`;
  }
  return systemMessage;
}

// src/main.ts
var VIEW_TYPE_MODEL_SETTINGS = "model-settings-view";
var _MyPlugin = class _MyPlugin extends import_obsidian21.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "modelSettingsView", null);
    __publicField(this, "activeStream", null);
    __publicField(this, "_yamlAttributeCommandIds", []);
    __publicField(this, "settingsListeners", []);
  }
  onSettingsChange(listener) {
    this.settingsListeners.push(listener);
  }
  offSettingsChange(listener) {
    this.settingsListeners = this.settingsListeners.filter((l) => l !== listener);
  }
  emitSettingsChange() {
    for (const listener of this.settingsListeners) {
      try {
        listener();
      } catch (e) {
        console.error(e);
      }
    }
  }
  /**
   * Registers a command with Obsidian, optionally adding a ribbon icon.
   * @param options Command options including id, name, callback/editorCallback.
   * @param ribbonIcon Optional icon ID for a ribbon button.
   * @param ribbonTitle Optional tooltip title for the ribbon button.
   */
  registerCommand(options, ribbonIcon, ribbonTitle) {
    this.addCommand(options);
    if (ribbonIcon && ribbonTitle) {
      this.addRibbonIcon(ribbonIcon, ribbonTitle, options.callback || (() => {
      }));
    }
  }
  // --- Agent Mode State Integration ---
  getAgentModeSettings() {
    return this.settings.agentMode || {
      enabled: false,
      maxToolCalls: 5,
      timeoutMs: 3e4
    };
  }
  isAgentModeEnabled() {
    return this.getAgentModeSettings().enabled;
  }
  async setAgentModeEnabled(enabled) {
    if (!this.settings.agentMode) {
      this.settings.agentMode = {
        enabled: false,
        maxToolCalls: 5,
        timeoutMs: 3e4
      };
    }
    this.settings.agentMode.enabled = enabled;
    await this.saveSettings();
    this.emitSettingsChange();
  }
  /**
   * Helper to insert a separator with correct spacing in the editor.
   * @param editor The editor instance.
   * @param position The position to insert the separator.
   * @param separator The separator string.
   * @returns The line number after the inserted separator.
   */
  insertSeparator(editor, position, separator) {
    var _a2;
    const lineContent = (_a2 = editor.getLine(position.line)) != null ? _a2 : "";
    const prefix = lineContent.trim() !== "" ? "\n" : "";
    editor.replaceRange(`${prefix}
${separator}
`, position);
    return position.line + (prefix ? 1 : 0) + 2;
  }
  /**
   * Helper to move the cursor after inserting text in the editor.
   * @param editor The editor instance.
   * @param startPos The starting position of the insertion.
   * @param insertText The text that was inserted.
   */
  moveCursorAfterInsert(editor, startPos, insertText) {
    const lines = insertText.split("\n");
    if (lines.length === 1) {
      editor.setCursor({
        line: startPos.line,
        ch: startPos.ch + insertText.length
      });
    } else {
      editor.setCursor({
        line: startPos.line + lines.length - 1,
        ch: lines[lines.length - 1].length
      });
    }
  }
  /**
   * Helper to show an Obsidian notice.
   * @param message The message to display.
   */
  showNotice(message) {
    new import_obsidian21.Notice(message);
  }
  /**
   * Helper for clipboard actions with a notice.
   * @param text The text to copy.
   * @param successMsg The message to show on success.
   * @param failMsg The message to show on failure.
   */
  async copyToClipboard(text, successMsg, failMsg) {
    try {
      await navigator.clipboard.writeText(text);
      this.showNotice(successMsg);
    } catch (error) {
      this.showNotice(failMsg);
      console.error("Clipboard error:", error);
    }
  }
  /**
   * Helper to activate the chat view and load messages into it.
   * @param messages An array of messages to load.
   */
  async activateChatViewAndLoadMessages(messages) {
    await this.activateView(VIEW_TYPE_CHAT);
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT);
    if (!leaves.length) {
      this.showNotice("Could not find chat view.");
      return;
    }
    const chatView = leaves[0].view;
    chatView.clearMessages();
    for (const msg of messages) {
      if (msg.role === "user" || msg.role === "assistant") {
        await chatView["addMessage"](msg.role, msg.content);
      }
    }
    chatView.scrollMessagesToBottom();
    this.showNotice("Loaded chat note into chat.");
  }
  /**
   * Registers a view type with Obsidian.
   * @param viewType The type of the view.
   * @param viewCreator The function that creates the view.
   */
  registerPluginView(viewType, viewCreator) {
    if (!_MyPlugin.registeredViewTypes.has(viewType)) {
      this.registerView(viewType, viewCreator);
      _MyPlugin.registeredViewTypes.add(viewType);
    }
  }
  /**
   * Handles the AI completion logic for the editor.
   * Extracts text, sends to AI, and streams response back to editor.
   * @param editor The editor instance.
   */
  async handleAICompletion(editor) {
    var _a2, _b;
    let text;
    let insertPosition;
    if (editor.somethingSelected()) {
      text = editor.getSelection();
      insertPosition = editor.getCursor("to");
    } else {
      const currentLineNumber = editor.getCursor().line;
      let lines = [];
      for (let i = 0; i <= currentLineNumber; i++) {
        lines.push(editor.getLine(i));
      }
      const chatStartString = this.settings.chatStartString;
      if (chatStartString) {
        const startIdx = lines.findIndex((line) => line.trim() === chatStartString.trim());
        if (startIdx !== -1) {
          lines = lines.slice(startIdx + 1);
        }
      }
      text = lines.join("\n");
      insertPosition = { line: currentLineNumber + 1, ch: 0 };
    }
    const messages = parseSelection(text, this.settings.chatSeparator);
    if (messages.length === 0) {
      this.showNotice("No valid messages found in the selection.");
      return;
    }
    const sepLine = this.insertSeparator(editor, insertPosition, this.settings.chatSeparator);
    let currentPosition = { line: sepLine, ch: 0 };
    this.activeStream = new AbortController();
    try {
      const provider = this.settings.selectedModel ? createProviderFromUnifiedModel(this.settings, this.settings.selectedModel) : createProvider(this.settings);
      const processedMessages = await this.processMessages([
        { role: "system", content: this.getSystemMessage() },
        ...messages
      ]);
      let bufferedChunk = "";
      const flushBuffer = () => {
        if (bufferedChunk) {
          editor.replaceRange(bufferedChunk, currentPosition);
          currentPosition = editor.offsetToPos(
            editor.posToOffset(currentPosition) + bufferedChunk.length
          );
          bufferedChunk = "";
        }
      };
      await provider.getCompletion(
        processedMessages,
        {
          temperature: this.settings.temperature,
          maxTokens: this.settings.maxTokens,
          streamCallback: (chunk) => {
            bufferedChunk += chunk;
            setTimeout(flushBuffer, 100);
          },
          abortController: this.activeStream
        }
      );
      flushBuffer();
      const endLineContent = (_a2 = editor.getLine(currentPosition.line)) != null ? _a2 : "";
      const endPrefix = endLineContent.trim() !== "" ? "\n" : "";
      editor.replaceRange(`${endPrefix}
${this.settings.chatSeparator}

`, currentPosition);
      const newCursorPos = editor.offsetToPos(
        editor.posToOffset(currentPosition) + (endPrefix ? 1 : 0) + 1 + this.settings.chatSeparator.length + 1
      );
      editor.setCursor(newCursorPos);
    } catch (error) {
      this.showNotice(`Error: ${error.message}`);
      const errLineContent = (_b = editor.getLine(currentPosition.line)) != null ? _b : "";
      const errPrefix = errLineContent.trim() !== "" ? "\n" : "";
      editor.replaceRange(`Error: ${error.message}
${errPrefix}
${this.settings.chatSeparator}

`, currentPosition);
    } finally {
      this.activeStream = null;
    }
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerPluginView(VIEW_TYPE_MODEL_SETTINGS, (leaf) => new ModelSettingsView(leaf, this));
    this.registerPluginView(VIEW_TYPE_CHAT, (leaf) => new ChatView(leaf, this));
    this.registerCommand({
      id: "show-ai-settings",
      name: "Show AI Settings",
      callback: () => this.activateView(VIEW_TYPE_MODEL_SETTINGS)
    }, "file-sliders", "Open AI Settings");
    this.registerCommand({
      id: "show-ai-chat",
      name: "Show AI Chat",
      callback: () => this.activateView(VIEW_TYPE_CHAT)
    }, "message-square", "Open AI Chat");
    this.app.workspace.onLayoutReady(() => {
      if (this.settings.autoOpenModelSettings) {
        this.activateView(VIEW_TYPE_MODEL_SETTINGS);
      }
    });
    this.registerCommand({
      id: "ai-completion",
      name: "Get AI Completion",
      editorCallback: (editor) => this.handleAICompletion(editor)
    });
    this.registerCommand({
      id: "end-ai-stream",
      name: "End AI Stream",
      callback: () => {
        if (this.activeStream) {
          this.activeStream.abort();
          this.activeStream = null;
          this.showNotice("AI stream ended");
        } else {
          this.showNotice("No active AI stream to end");
        }
      }
    });
    this.registerCommand({
      id: "copy-active-note-name",
      name: "Copy Active Note Name",
      callback: async () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          const noteName = `[[${activeFile.basename}]]`;
          await this.copyToClipboard(noteName, `Copied to clipboard: ${noteName}`, "Failed to copy to clipboard");
        } else {
          this.showNotice("No active note found");
        }
      }
    });
    this.registerCommand({
      id: "insert-chat-start-string",
      name: "Insert Chat Start String",
      editorCallback: (editor) => {
        var _a2;
        const chatStartString = (_a2 = this.settings.chatStartString) != null ? _a2 : "";
        if (!chatStartString) {
          this.showNotice("chatStartString is not set in settings.");
          return;
        }
        const cursor = editor.getCursor();
        editor.replaceRange(chatStartString, cursor);
        this.moveCursorAfterInsert(editor, cursor, chatStartString);
      }
    });
    this.registerCommand({
      id: "generate-note-title",
      name: "Generate Note Title",
      callback: async () => {
        const { generateNoteTitle: generateNoteTitle2 } = await Promise.resolve().then(() => (init_filechanger(), filechanger_exports));
        await generateNoteTitle2(
          this.app,
          this.settings,
          (messages) => this.processMessages(messages)
        );
      }
    });
    this.registerCommand({
      id: "load-chat-note-into-chat",
      name: "Load Chat Note into Chat",
      callback: async () => {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
          this.showNotice("No active note found. Please open a note to load as chat.");
          return;
        }
        let content = await this.app.vault.read(file);
        const messages = parseSelection(content, this.settings.chatSeparator);
        if (!messages.length) {
          this.showNotice("No chat messages found in the selected note.");
          return;
        }
        await this.activateChatViewAndLoadMessages(messages);
      }
    });
    this.registerYamlAttributeCommands();
  }
  /**
   * Register YAML attribute generator commands dynamically based on settings.
   * Unregisters previous commands before registering new ones.
   */
  registerYamlAttributeCommands() {
    if (this._yamlAttributeCommandIds && this._yamlAttributeCommandIds.length > 0) {
      for (const id of this._yamlAttributeCommandIds) {
        this.app.commands.removeCommand(id);
      }
    }
    this._yamlAttributeCommandIds = [];
    if (this.settings.yamlAttributeGenerators && Array.isArray(this.settings.yamlAttributeGenerators)) {
      for (const gen of this.settings.yamlAttributeGenerators) {
        if (!gen.attributeName || !gen.prompt || !gen.commandName) continue;
        const id = `generate-yaml-attribute-${gen.attributeName}`;
        this.registerCommand({
          // Use the new registerCommand
          id,
          name: gen.commandName,
          callback: async () => {
            const { generateYamlAttribute: generateYamlAttribute2 } = await Promise.resolve().then(() => (init_filechanger(), filechanger_exports));
            await generateYamlAttribute2(
              this.app,
              this.settings,
              (messages) => this.processMessages(messages),
              gen.attributeName,
              gen.prompt,
              gen.outputMode
            );
          }
        });
        this._yamlAttributeCommandIds.push(id);
      }
    }
  }
  /**
   * Retrieves the system message based on current plugin settings.
   * @returns The system message string.
   */
  getSystemMessage() {
    return getSystemMessage(this.settings);
  }
  /**
   * Activates and reveals a specific view type in the workspace.
   * @param viewType The type of view to activate.
   * @param reveal Whether to reveal the leaf after setting its view state. Defaults to true.
   */
  async activateView(viewType, reveal = true) {
    this.app.workspace.detachLeavesOfType(viewType);
    let leaf = this.app.workspace.getRightLeaf(false) || this.app.workspace.getLeaf(true);
    await leaf.setViewState({
      type: viewType,
      active: true
    });
    if (reveal) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  /**
   * Loads plugin settings from data.
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * Saves plugin settings to data.
   * Also re-registers YAML attribute commands and emits a settings change event.
   */
  async saveSettings() {
    await this.saveData(this.settings);
    this.registerYamlAttributeCommands();
    this.emitSettingsChange();
  }
  /**
   * Processes an array of messages, potentially adding context notes.
   * @param messages The messages to process.
   * @returns A promise that resolves to the processed messages.
   */
  async processMessages(messages) {
    return processMessages(messages, this.app, this.settings);
  }
  /**
   * Retrieves content from context notes.
   * @param contextNotesText The text containing context note links.
   * @returns A promise that resolves to the combined content of context notes.
   */
  async getContextNotesContent(contextNotesText) {
    return getContextNotesContent(contextNotesText, this.app);
  }
  /**
   * Called when the plugin is unloaded.
   * Unregisters views to prevent issues on reload.
   */
  onunload() {
    _MyPlugin.registeredViewTypes.delete(VIEW_TYPE_MODEL_SETTINGS);
    _MyPlugin.registeredViewTypes.delete(VIEW_TYPE_CHAT);
  }
};
__publicField(_MyPlugin, "registeredViewTypes", /* @__PURE__ */ new Set());
var MyPlugin = _MyPlugin;
/*! Bundled license information:

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)
*/
//# sourceMappingURL=data:application/json;base64,
