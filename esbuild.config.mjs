import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	// Handle sql.js WASM file
	loader: {
		'.wasm': 'file',
	},
	// Copy sql.js WASM files to output directory
	plugins: [
		{
			name: 'copy-wasm-files',
			setup(build) {
				build.onEnd(async () => {
					try {
						// Copy WASM files from sql.js to the plugin directory
						const fs = await import('fs');
						const path = await import('path');
						
						const wasmSrc = path.join(process.cwd(), 'node_modules', 'sql.js', 'dist', 'sql-wasm.wasm');
						const wasmDest = path.join(process.cwd(), 'sql-wasm.wasm');
						
						if (fs.existsSync(wasmSrc)) {
							fs.copyFileSync(wasmSrc, wasmDest);
							console.log('Copied sql.js WASM file to plugin directory');
						} else {
							console.warn('sql.js WASM file not found, plugin will fallback to JS-only mode');
						}
					} catch (error) {
						console.warn('Failed to copy WASM files:', error.message);
					}
				});
			}
		}
	]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
